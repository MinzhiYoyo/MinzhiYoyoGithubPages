{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/quiet/source/OTF/SourceCodePro-Black.otf","path":"OTF/SourceCodePro-Black.otf","modified":0,"renderable":1},{"_id":"themes/quiet/source/OTF/SourceCodePro-BlackIt.otf","path":"OTF/SourceCodePro-BlackIt.otf","modified":0,"renderable":1},{"_id":"themes/quiet/source/OTF/SourceCodePro-Bold.otf","path":"OTF/SourceCodePro-Bold.otf","modified":0,"renderable":1},{"_id":"themes/quiet/source/OTF/SourceCodePro-BoldIt.otf","path":"OTF/SourceCodePro-BoldIt.otf","modified":0,"renderable":1},{"_id":"themes/quiet/source/OTF/SourceCodePro-ExtraLight.otf","path":"OTF/SourceCodePro-ExtraLight.otf","modified":0,"renderable":1},{"_id":"themes/quiet/source/OTF/SourceCodePro-ExtraLightIt.otf","path":"OTF/SourceCodePro-ExtraLightIt.otf","modified":0,"renderable":1},{"_id":"themes/quiet/source/OTF/SourceCodePro-It.otf","path":"OTF/SourceCodePro-It.otf","modified":0,"renderable":1},{"_id":"themes/quiet/source/OTF/SourceCodePro-Light.otf","path":"OTF/SourceCodePro-Light.otf","modified":0,"renderable":1},{"_id":"themes/quiet/source/OTF/SourceCodePro-LightIt.otf","path":"OTF/SourceCodePro-LightIt.otf","modified":0,"renderable":1},{"_id":"themes/quiet/source/OTF/SourceCodePro-Medium.otf","path":"OTF/SourceCodePro-Medium.otf","modified":0,"renderable":1},{"_id":"themes/quiet/source/OTF/SourceCodePro-MediumIt.otf","path":"OTF/SourceCodePro-MediumIt.otf","modified":0,"renderable":1},{"_id":"themes/quiet/source/OTF/SourceCodePro-Regular.otf","path":"OTF/SourceCodePro-Regular.otf","modified":0,"renderable":1},{"_id":"themes/quiet/source/OTF/SourceCodePro-Semibold.otf","path":"OTF/SourceCodePro-Semibold.otf","modified":0,"renderable":1},{"_id":"themes/quiet/source/OTF/SourceCodePro-SemiboldIt.otf","path":"OTF/SourceCodePro-SemiboldIt.otf","modified":0,"renderable":1},{"_id":"themes/quiet/source/TTF/SourceCodePro-Black.ttf","path":"TTF/SourceCodePro-Black.ttf","modified":0,"renderable":1},{"_id":"themes/quiet/source/TTF/SourceCodePro-BlackIt.ttf","path":"TTF/SourceCodePro-BlackIt.ttf","modified":0,"renderable":1},{"_id":"themes/quiet/source/TTF/SourceCodePro-Bold.ttf","path":"TTF/SourceCodePro-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/quiet/source/TTF/SourceCodePro-BoldIt.ttf","path":"TTF/SourceCodePro-BoldIt.ttf","modified":0,"renderable":1},{"_id":"themes/quiet/source/TTF/SourceCodePro-ExtraLight.ttf","path":"TTF/SourceCodePro-ExtraLight.ttf","modified":0,"renderable":1},{"_id":"themes/quiet/source/TTF/SourceCodePro-ExtraLightIt.ttf","path":"TTF/SourceCodePro-ExtraLightIt.ttf","modified":0,"renderable":1},{"_id":"themes/quiet/source/TTF/SourceCodePro-It.ttf","path":"TTF/SourceCodePro-It.ttf","modified":0,"renderable":1},{"_id":"themes/quiet/source/TTF/SourceCodePro-Light.ttf","path":"TTF/SourceCodePro-Light.ttf","modified":0,"renderable":1},{"_id":"themes/quiet/source/TTF/SourceCodePro-LightIt.ttf","path":"TTF/SourceCodePro-LightIt.ttf","modified":0,"renderable":1},{"_id":"themes/quiet/source/TTF/SourceCodePro-Medium.ttf","path":"TTF/SourceCodePro-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/quiet/source/TTF/SourceCodePro-MediumIt.ttf","path":"TTF/SourceCodePro-MediumIt.ttf","modified":0,"renderable":1},{"_id":"themes/quiet/source/TTF/SourceCodePro-Regular.ttf","path":"TTF/SourceCodePro-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/quiet/source/TTF/SourceCodePro-Semibold.ttf","path":"TTF/SourceCodePro-Semibold.ttf","modified":0,"renderable":1},{"_id":"themes/quiet/source/TTF/SourceCodePro-SemiboldIt.ttf","path":"TTF/SourceCodePro-SemiboldIt.ttf","modified":0,"renderable":1},{"_id":"themes/quiet/source/VAR/SourceCodeVariable-Italic.otf","path":"VAR/SourceCodeVariable-Italic.otf","modified":0,"renderable":1},{"_id":"themes/quiet/source/VAR/SourceCodeVariable-Italic.ttf","path":"VAR/SourceCodeVariable-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/quiet/source/VAR/SourceCodeVariable-Roman.otf","path":"VAR/SourceCodeVariable-Roman.otf","modified":0,"renderable":1},{"_id":"themes/quiet/source/VAR/SourceCodeVariable-Roman.ttf","path":"VAR/SourceCodeVariable-Roman.ttf","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/about.css","path":"css/about.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/archive.css","path":"css/archive.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/atom-one-dark copy.css","path":"css/atom-one-dark copy.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/categories.css","path":"css/categories.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/food.css","path":"css/food.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/header.css","path":"css/header.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/highlighvs2015.css","path":"css/highlighvs2015.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/home.css","path":"css/home.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/links.css","path":"css/links.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/myhihglight.css","path":"css/myhihglight.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/page.css","path":"css/page.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/page_cente.css","path":"css/page_cente.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/photos.css","path":"css/photos.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/tag.css","path":"css/tag.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/tags.css","path":"css/tags.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/words.css","path":"css/words.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/favicon.ico","path":"image/favicon.ico","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/favicon.ico.bak","path":"image/favicon.ico.bak","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/logo.png","path":"image/logo.png","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/pattern.png","path":"image/pattern.png","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/gotop.js","path":"js/gotop.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/source-code-pro-release/package.json","path":"source-code-pro-release/package.json","modified":0,"renderable":1},{"_id":"themes/quiet/source/source-code-pro-release/source-code-pro.css","path":"source-code-pro-release/source-code-pro.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/source-code-pro-release/source-code-variable.css","path":"source-code-pro-release/source-code-variable.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/photos/photo.js","path":"photos/photo.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/photos/photoslist.json","path":"photos/photoslist.json","modified":0,"renderable":1},{"_id":"themes/quiet/source/photos/t.txt","path":"photos/t.txt","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-Black.otf.woff","path":"WOFF/OTF/SourceCodePro-Black.otf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-BlackIt.otf.woff","path":"WOFF/OTF/SourceCodePro-BlackIt.otf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-Bold.otf.woff","path":"WOFF/OTF/SourceCodePro-Bold.otf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-BoldIt.otf.woff","path":"WOFF/OTF/SourceCodePro-BoldIt.otf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-ExtraLight.otf.woff","path":"WOFF/OTF/SourceCodePro-ExtraLight.otf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-ExtraLightIt.otf.woff","path":"WOFF/OTF/SourceCodePro-ExtraLightIt.otf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-It.otf.woff","path":"WOFF/OTF/SourceCodePro-It.otf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-Light.otf.woff","path":"WOFF/OTF/SourceCodePro-Light.otf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-LightIt.otf.woff","path":"WOFF/OTF/SourceCodePro-LightIt.otf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-Medium.otf.woff","path":"WOFF/OTF/SourceCodePro-Medium.otf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-MediumIt.otf.woff","path":"WOFF/OTF/SourceCodePro-MediumIt.otf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-Regular.otf.woff","path":"WOFF/OTF/SourceCodePro-Regular.otf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-Semibold.otf.woff","path":"WOFF/OTF/SourceCodePro-Semibold.otf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-SemiboldIt.otf.woff","path":"WOFF/OTF/SourceCodePro-SemiboldIt.otf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-Black.ttf.woff","path":"WOFF/TTF/SourceCodePro-Black.ttf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-BlackIt.ttf.woff","path":"WOFF/TTF/SourceCodePro-BlackIt.ttf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-Bold.ttf.woff","path":"WOFF/TTF/SourceCodePro-Bold.ttf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-BoldIt.ttf.woff","path":"WOFF/TTF/SourceCodePro-BoldIt.ttf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-ExtraLight.ttf.woff","path":"WOFF/TTF/SourceCodePro-ExtraLight.ttf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-ExtraLightIt.ttf.woff","path":"WOFF/TTF/SourceCodePro-ExtraLightIt.ttf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-It.ttf.woff","path":"WOFF/TTF/SourceCodePro-It.ttf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-Light.ttf.woff","path":"WOFF/TTF/SourceCodePro-Light.ttf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-LightIt.ttf.woff","path":"WOFF/TTF/SourceCodePro-LightIt.ttf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-Medium.ttf.woff","path":"WOFF/TTF/SourceCodePro-Medium.ttf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-MediumIt.ttf.woff","path":"WOFF/TTF/SourceCodePro-MediumIt.ttf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-Regular.ttf.woff","path":"WOFF/TTF/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-Semibold.ttf.woff","path":"WOFF/TTF/SourceCodePro-Semibold.ttf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-SemiboldIt.ttf.woff","path":"WOFF/TTF/SourceCodePro-SemiboldIt.ttf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/VAR/SourceCodeVariable-Italic.otf.woff","path":"WOFF/VAR/SourceCodeVariable-Italic.otf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/VAR/SourceCodeVariable-Italic.ttf.woff","path":"WOFF/VAR/SourceCodeVariable-Italic.ttf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/VAR/SourceCodeVariable-Roman.otf.woff","path":"WOFF/VAR/SourceCodeVariable-Roman.otf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF/VAR/SourceCodeVariable-Roman.ttf.woff","path":"WOFF/VAR/SourceCodeVariable-Roman.ttf.woff","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-Black.otf.woff2","path":"WOFF2/OTF/SourceCodePro-Black.otf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-BlackIt.otf.woff2","path":"WOFF2/OTF/SourceCodePro-BlackIt.otf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-Bold.otf.woff2","path":"WOFF2/OTF/SourceCodePro-Bold.otf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-BoldIt.otf.woff2","path":"WOFF2/OTF/SourceCodePro-BoldIt.otf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-ExtraLight.otf.woff2","path":"WOFF2/OTF/SourceCodePro-ExtraLight.otf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-ExtraLightIt.otf.woff2","path":"WOFF2/OTF/SourceCodePro-ExtraLightIt.otf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-It.otf.woff2","path":"WOFF2/OTF/SourceCodePro-It.otf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-Light.otf.woff2","path":"WOFF2/OTF/SourceCodePro-Light.otf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-LightIt.otf.woff2","path":"WOFF2/OTF/SourceCodePro-LightIt.otf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-Medium.otf.woff2","path":"WOFF2/OTF/SourceCodePro-Medium.otf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-MediumIt.otf.woff2","path":"WOFF2/OTF/SourceCodePro-MediumIt.otf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-Regular.otf.woff2","path":"WOFF2/OTF/SourceCodePro-Regular.otf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-Semibold.otf.woff2","path":"WOFF2/OTF/SourceCodePro-Semibold.otf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-SemiboldIt.otf.woff2","path":"WOFF2/OTF/SourceCodePro-SemiboldIt.otf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-Black.ttf.woff2","path":"WOFF2/TTF/SourceCodePro-Black.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-BlackIt.ttf.woff2","path":"WOFF2/TTF/SourceCodePro-BlackIt.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-Bold.ttf.woff2","path":"WOFF2/TTF/SourceCodePro-Bold.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-BoldIt.ttf.woff2","path":"WOFF2/TTF/SourceCodePro-BoldIt.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-ExtraLight.ttf.woff2","path":"WOFF2/TTF/SourceCodePro-ExtraLight.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-ExtraLightIt.ttf.woff2","path":"WOFF2/TTF/SourceCodePro-ExtraLightIt.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-It.ttf.woff2","path":"WOFF2/TTF/SourceCodePro-It.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-Light.ttf.woff2","path":"WOFF2/TTF/SourceCodePro-Light.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-LightIt.ttf.woff2","path":"WOFF2/TTF/SourceCodePro-LightIt.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-Medium.ttf.woff2","path":"WOFF2/TTF/SourceCodePro-Medium.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-MediumIt.ttf.woff2","path":"WOFF2/TTF/SourceCodePro-MediumIt.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-Regular.ttf.woff2","path":"WOFF2/TTF/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-Semibold.ttf.woff2","path":"WOFF2/TTF/SourceCodePro-Semibold.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-SemiboldIt.ttf.woff2","path":"WOFF2/TTF/SourceCodePro-SemiboldIt.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/VAR/SourceCodeVariable-Italic.otf.woff2","path":"WOFF2/VAR/SourceCodeVariable-Italic.otf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/VAR/SourceCodeVariable-Italic.ttf.woff2","path":"WOFF2/VAR/SourceCodeVariable-Italic.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/VAR/SourceCodeVariable-Roman.otf.woff2","path":"WOFF2/VAR/SourceCodeVariable-Roman.otf.woff2","modified":0,"renderable":1},{"_id":"themes/quiet/source/WOFF2/VAR/SourceCodeVariable-Roman.ttf.woff2","path":"WOFF2/VAR/SourceCodeVariable-Roman.ttf.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/robots.txt","hash":"db1d1a8690484d24907e8d96fbab1ce46546c076","modified":1648982610661},{"_id":"source/_posts/Python爬虫学习——面向初学者.md","hash":"395435cf7cc72ee07604650a315549b2dcc67980","modified":1665576586795},{"_id":"source/_posts/Python爬虫学习.md","hash":"fdc74c1c394393cf260d4311ac07e5e809591d03","modified":1665576591913},{"_id":"source/_posts/Windows局域网共享文件.md","hash":"395ce4db1c1b3603092a48e81fecc63fb5f3f0d3","modified":1654409793767},{"_id":"source/_posts/GitHub-部署个人博客.md","hash":"659268f2dbcbe3ba6fcdd2aefdea39aebd366470","modified":1654409693924},{"_id":"source/_posts/C-with-lambda.md","hash":"c8fd9372aa9c5e489c45297004939c9a317cdf9e","modified":1652950408744},{"_id":"source/_posts/Windows右键打开注册表配置.md","hash":"4ad3252018a0d1c6529367a05243f99fe5bb08d7","modified":1654409766968},{"_id":"source/_posts/图床搭建.md","hash":"2fc64e86de89a38c8d73ef06d2d70a33df5dfb1e","modified":1654409525063},{"_id":"source/_posts/数据结构-图.md","hash":"a1f46d4e9aced613f4130b1971f832f729a56f36","modified":1652765685470},{"_id":"source/_posts/数据结构——串-KMP算法.md","hash":"10fd3fda063ac2bd6a959710ae6997cc217643ed","modified":1664804078825},{"_id":"source/_posts/数据结构之查找.md","hash":"c1724fa99abccd4a4c9c50550e03537ef1924327","modified":1653460290354},{"_id":"source/_posts/南邮期末评价脚本.md","hash":"2a5e1da5c50d9aba6a208a8e58ee7d93f7428eb7","modified":1654083395300},{"_id":"source/_posts/数据结构之排序大法.md","hash":"0d56b419831d83d4af26079bf2bc9e7f608a092f","modified":1655550460682},{"_id":"source/categories/index.md","hash":"098db27ce4767e092916813137a0fcdbffd45069","modified":1649158837545},{"_id":"source/_posts/数据结构之树.md","hash":"f1e6ad3be52cd9cd27984009132f8946096b7dda","modified":1654313824428},{"_id":"source/links/index.md","hash":"abe78e5176468d7306d56b9375b1f9512c81137d","modified":1649156107978},{"_id":"source/photo/index.md","hash":"83cf70535427f8bb7050d3fc626de9b65450e3c8","modified":1651160563329},{"_id":"source/tags/index.md","hash":"ae58101a97844b4aacd1babc652b94f632f129ab","modified":1649156030436},{"_id":"source/donation/index.md","hash":"1951018f2a0624279bbf78d786d68d100c37aa01","modified":1652766075217},{"_id":"source/_posts/编译Linux与Uboot.md","hash":"8f2d558424632426b8c590fc12bee77d1053cb37","modified":1654411250951},{"_id":"source/about/index.md","hash":"b13b3c27497beabac18cc5ba6088b6d98aaa1a21","modified":1654077999766},{"_id":"themes/quiet/.DS_Store","hash":"d6b0bd348c278071914e2dee0dfe4123fecf375f","modified":1649139832718},{"_id":"themes/quiet/_config.yml","hash":"d21b99225dee4090a3bd72a57990d6e4ef346e3c","modified":1653461507325},{"_id":"themes/quiet/README.md","hash":"029fba4d4abe72177ae38e103d49581428ec6575","modified":1649139832747},{"_id":"themes/quiet/languages/en.yml","hash":"81ae86203870165bcad70cd3f3dfb1b27dbd7b92","modified":1648908659161},{"_id":"themes/quiet/languages/zh-CN.yml","hash":"6ea5c442674098d947bcba89f78fcefc4d763bb0","modified":1648908659162},{"_id":"themes/quiet/layout/.DS_Store","hash":"46cf1797a08a1ea0f0cdb2af9ebf7d59bd6d976a","modified":1649139832750},{"_id":"themes/quiet/layout/404.ejs","hash":"d24c2375e0e927085e6dbeb788fde5e119bcc9b8","modified":1649139832751},{"_id":"themes/quiet/layout/about.ejs","hash":"4e1ec51bfd4823d8f0a2ab4c06c06f79bae8541a","modified":1649140834571},{"_id":"themes/quiet/layout/archive.ejs","hash":"bb8f521bdc7f4fe9e7a03beb5ceb63032dff9e4d","modified":1649156368290},{"_id":"themes/quiet/layout/categories.ejs","hash":"bc3bb7a3276d6aa25b805e73addbea778c198605","modified":1649139832765},{"_id":"themes/quiet/layout/index.ejs","hash":"b36963002a0fafb093db68c77eb0f2d0b5e7ded6","modified":1649141218597},{"_id":"themes/quiet/layout/layout.ejs","hash":"d5e7940c933926fe2e4ea47d4a733f22be5cac25","modified":1654082935485},{"_id":"themes/quiet/layout/links.ejs","hash":"c1db6ee6b94ac0693926ba64c46d6ddd0cf18c69","modified":1649139832767},{"_id":"themes/quiet/layout/photos.ejs","hash":"c2718a3e5fd27dbca4ed9c8aaac4254799c19a33","modified":1650884437007},{"_id":"themes/quiet/layout/post.ejs","hash":"10c5eab4b9964b3565ab3ee3e793364032ec04da","modified":1649139832767},{"_id":"themes/quiet/layout/tag.ejs","hash":"1fa7d8d5a5db1bd817090f8998d985316f33e2b0","modified":1649139832767},{"_id":"themes/quiet/layout/tags.ejs","hash":"587bd14d96946c117b1ef6d2e612cd20e23b59ab","modified":1649139832768},{"_id":"themes/quiet/layout/words.ejs","hash":"f21b8d74853506f831dde25d9154a1bb6bc7b2b3","modified":1653117314971},{"_id":"themes/quiet/LICENSE","hash":"a0da6b64f5ac3c2be67e22af05669c299eaa8c84","modified":1649139832719},{"_id":"themes/quiet/layout/_partial/.DS_Store","hash":"db62fbf1993ecd5d9e70a49a58be69ac7e7a4485","modified":1649139832751},{"_id":"themes/quiet/layout/_partial/head.ejs","hash":"3eaf713e9b19af615db677fd27b473f64c89fcd7","modified":1654082981527},{"_id":"themes/quiet/layout/_partial/foot.ejs","hash":"d839fc8ec07160ea29d74fb29cb8bdb8eba326cb","modified":1654078351889},{"_id":"themes/quiet/layout/_partial/header.ejs","hash":"60f6d69505c64f628c9ace9325aa28950730852b","modified":1649139832759},{"_id":"themes/quiet/layout/_partial/post_head.ejs","hash":"be2f5a2d0d91ddb529c0508183d57ad105fedefa","modified":1649139832761},{"_id":"themes/quiet/layout/_partial/home.ejs","hash":"094e3dc189406526d3934894cf0352b26ce28f13","modified":1649139832759},{"_id":"themes/quiet/layout/_partial/post_centent.ejs","hash":"b6bb8b8e04433b37854e8c8df79c72de182f4496","modified":1654079326590},{"_id":"themes/quiet/layout/_partial/post_pn.ejs","hash":"7fab46ce1199e5e792d6f7c597690ad768f9730c","modified":1649139832761},{"_id":"themes/quiet/layout/_widget/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1649139832762},{"_id":"themes/quiet/layout/_widget/analytics.ejs","hash":"c48c85b36c50cd18b018d0d3a08981dfb1a37bf5","modified":1649139832763},{"_id":"themes/quiet/layout/_widget/gotop.ejs","hash":"fdc070e8dbd81198bbd36cdf46e8b7c33ecdeaf0","modified":1649139832763},{"_id":"themes/quiet/layout/_widget/sidebar.ejs","hash":"1e60a534616fdcf97a4d61ef25648af263ffa6e1","modified":1649139832763},{"_id":"themes/quiet/README-EN.md","hash":"8a14c4a1b8880c1b389c18e832ba7e0437c6a480","modified":1649139832732},{"_id":"themes/quiet/_config.yml.bak","hash":"650fb3d19fab6a62de98cd712937e042b0a27292","modified":1652675460999},{"_id":"themes/quiet/source/.DS_Store","hash":"2fe0ee40294946d656b103cef8719c97924075f1","modified":1649139832779},{"_id":"themes/quiet/source/css/.DS_Store","hash":"75b22b6a020bdf7a452db2f4d29044b8a88a6661","modified":1649139832780},{"_id":"themes/quiet/source/css/archive.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1649139832781},{"_id":"themes/quiet/source/css/about.css","hash":"d3d7ae17f0571f1cec4514135d644c6590118bd0","modified":1649139832781},{"_id":"themes/quiet/source/css/food.css","hash":"10a0e21ef9b2e4a6af9328be51e1c0368ca91f4e","modified":1649139832783},{"_id":"themes/quiet/source/css/header.css","hash":"e3ce1dbac2e258f0943c5aebdd89b29702246baa","modified":1649139832784},{"_id":"themes/quiet/source/css/home.css","hash":"e474078a73fa75f23f37092f01505dd8063ffc38","modified":1649139832784},{"_id":"themes/quiet/source/css/highlighvs2015.css","hash":"880965db6df6e3d4b6983441c4a261b94f154394","modified":1654080060334},{"_id":"themes/quiet/source/css/myhihglight.css","hash":"8d38febbf6dba8ff427f1c43570c5f00beee9c18","modified":1654412069432},{"_id":"themes/quiet/source/css/page.css","hash":"0514b75a35c93c10826cd861f0dd380d90ba8e41","modified":1654078212061},{"_id":"themes/quiet/source/css/page_cente.css","hash":"b85a224b56e93c6b56058ed49cde58e0bfc1d2e4","modified":1649139832785},{"_id":"themes/quiet/source/css/links.css","hash":"c7afe457cea5d996ee86cfc47174aa114e458fb0","modified":1649139832785},{"_id":"themes/quiet/source/css/tag.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1649139832786},{"_id":"themes/quiet/source/css/tags.css","hash":"b2de1e197efba0a058f1a5d37aa014fcfc0016ff","modified":1649139832786},{"_id":"themes/quiet/source/css/photos.css","hash":"49ced630c7ea98d2f2a55b0badf9acafe7cb7830","modified":1650876340345},{"_id":"themes/quiet/source/css/atom-one-dark copy.css","hash":"bb55fcc87dd4f1a6c1cddf1753c2ec9f033517b2","modified":1654082326883},{"_id":"themes/quiet/source/image/.DS_Store","hash":"3128ff56de5645c269da786b475fd357f1db7a5f","modified":1649139832787},{"_id":"themes/quiet/source/image/pattern.png","hash":"e9a79b9b5716c781e8f5acf3462e42fae7f39741","modified":1649139832788},{"_id":"themes/quiet/source/js/.DS_Store","hash":"0f43f1407d3b3df9e865a28f4c9ef13640ad739b","modified":1649139832788},{"_id":"themes/quiet/source/js/gotop.js","hash":"2bd969b8dd7b81626dcd2a3d8a1b1bbb4e0fc33c","modified":1649139832789},{"_id":"themes/quiet/source/source-code-pro-release/package.json","hash":"35c6e7916a045973c2b30c1a983b3e57ad0305e3","modified":1618233804000},{"_id":"themes/quiet/source/source-code-pro-release/source-code-pro.css","hash":"7f5011232b693f37a60bcd33f7f551b07c70af42","modified":1618233804000},{"_id":"themes/quiet/source/css/words.css","hash":"cd6041dcc7ea78cfecc6a861ea41ba3cfbc8e31d","modified":1653116435914},{"_id":"themes/quiet/source/photos/photo.js","hash":"699a75848309e068c0ef1db9e1890c249dc969a9","modified":1650876999748},{"_id":"themes/quiet/source/photos/photoslist.json","hash":"7f88412952559b20de9a1ebf19e4b8f4813aa6f2","modified":1650876889201},{"_id":"themes/quiet/source/source-code-pro-release/source-code-variable.css","hash":"30a7910e8c4aa2fb7d8eb9e798d37df11383613b","modified":1618233804000},{"_id":"themes/quiet/source/css/categories.css","hash":"06b727d6e2e21b1e5ab12de073406517c32dfe93","modified":1649139832783},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-BlackIt.ttf.woff","hash":"3536245f212a466197833141dc196588bc2c9e36","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-BoldIt.ttf.woff","hash":"d98590dac61614d9e5920a9a2d2a64e21aab1a97","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-ExtraLightIt.ttf.woff","hash":"832cdf6e67689f6ab69c31e4ac1917244a63835e","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-It.ttf.woff","hash":"51274860a111eb86e2db83bba9b86a86eb23799d","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-LightIt.ttf.woff","hash":"da29a00d2d351f4832d589e807b538e888f79dde","modified":1618233804000},{"_id":"themes/quiet/source/photos/t.txt","hash":"1abef4602d88208622a3dd75b6db65db51353dc8","modified":1650884597505},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-SemiboldIt.ttf.woff","hash":"00407523ac1bc35e6d8ac9909db7c3ffd5d08faf","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-BlackIt.otf.woff2","hash":"432a774a8df91e28e70e2331d7c593965d1743dc","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-MediumIt.ttf.woff","hash":"5a377c11b5aaf20384d2bdc6d1de20f71462cdc1","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-BoldIt.otf.woff2","hash":"14922675cc816a3c7538e7703e2d8a143a75c99e","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-ExtraLightIt.otf.woff2","hash":"bbe5ad7683c827ca7c4eee212c21ca0e08882554","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-It.otf.woff2","hash":"86dcf95798db4f095a2dba3905394eece26c2ba6","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-LightIt.otf.woff2","hash":"3fd48ba89b4e8ef06b4480a08680a52b54b1efc0","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-SemiboldIt.otf.woff2","hash":"41a1031b194ea5565df3d6a7155eaf4542483288","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-MediumIt.otf.woff2","hash":"b48e29e0098171a8b53737e337f893bbfe8ff3f7","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-Black.ttf.woff2","hash":"a59b52f358de827f06d785bbb57029bfc3a1a885","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-Bold.ttf.woff2","hash":"360ab678362e0f985a21b094c730dae1a80b45a4","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-ExtraLight.ttf.woff2","hash":"d0efe8f6d65b39bc22807ec4fcb183ab90f73ec3","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-ExtraLightIt.ttf.woff2","hash":"2c6961187ed91d9687a6fcda9d77c11d655d9135","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-It.ttf.woff2","hash":"59a2ef00832efa3f7685e7419a075eed9f58d1a1","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-LightIt.ttf.woff2","hash":"74cc6efd805de42335866a49a2b70188e0c0731b","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-Light.ttf.woff2","hash":"0661f07fcfd1b87a7a1ce506ed09b51a9fc32512","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-MediumIt.ttf.woff2","hash":"bd521bd7b5c1b37a87c0d03c42896eb0eaa6f3d4","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-Medium.ttf.woff2","hash":"4e778d087713f7ddf1ec11496e0d785a1a45e06c","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-Regular.ttf.woff2","hash":"ebf0f8dd1f788f2b6265b54cd89de4aff11d520b","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-Semibold.ttf.woff2","hash":"dc84f8f6e43d5b423d2a505d065d7b014cde7ed0","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-BoldIt.ttf.woff2","hash":"223b551bce86bd200d9f39b2e1660514f25bed4e","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-SemiboldIt.ttf.woff2","hash":"bd21bec82a80c576a21a285526ff715caa18642f","modified":1618233804000},{"_id":"themes/quiet/source/OTF/SourceCodePro-BlackIt.otf","hash":"2f84210ce8833c350aeaf589abcc74168daa979b","modified":1618233804000},{"_id":"themes/quiet/source/OTF/SourceCodePro-BoldIt.otf","hash":"7d34fd1cef1853d8e826613fb023e8794ee41d0f","modified":1618233804000},{"_id":"themes/quiet/source/OTF/SourceCodePro-ExtraLight.otf","hash":"9ff240ab48eb7e97237e25d8c6f8cd738ba97caa","modified":1618233804000},{"_id":"themes/quiet/source/OTF/SourceCodePro-It.otf","hash":"a012371c8083cadae24637eb6190e95b0ee7ec8b","modified":1618233804000},{"_id":"themes/quiet/source/OTF/SourceCodePro-LightIt.otf","hash":"9733549bc8865b055d3cb7719dce717f397d601e","modified":1618233804000},{"_id":"themes/quiet/source/OTF/SourceCodePro-ExtraLightIt.otf","hash":"aaf16e8a758018c13cf6cc8703e898b6975d233e","modified":1618233804000},{"_id":"themes/quiet/source/OTF/SourceCodePro-MediumIt.otf","hash":"e417e210898909c8a15701f8ff17c3f8e4ff9576","modified":1618233804000},{"_id":"themes/quiet/source/OTF/SourceCodePro-SemiboldIt.otf","hash":"d7ae19cf6fa26340da46ecf96704ecc427957a4b","modified":1618233804000},{"_id":"themes/quiet/source/TTF/SourceCodePro-BlackIt.ttf","hash":"11512eb8c90895b8f30f7dd4a9abf594e3e9f370","modified":1618233804000},{"_id":"themes/quiet/source/TTF/SourceCodePro-BoldIt.ttf","hash":"4be9ce619586394bba505034b779334f3639f24f","modified":1618233804000},{"_id":"themes/quiet/source/TTF/SourceCodePro-ExtraLightIt.ttf","hash":"400f1d3268adc19b8195f93d787179a5c478175b","modified":1618233804000},{"_id":"themes/quiet/source/TTF/SourceCodePro-It.ttf","hash":"a8889dc5cf2da2bed041f07a827198ee663b49d9","modified":1618233804000},{"_id":"themes/quiet/source/TTF/SourceCodePro-LightIt.ttf","hash":"8daf93656b5f1dbbb182f421b502380f25c1a946","modified":1618233804000},{"_id":"themes/quiet/source/TTF/SourceCodePro-MediumIt.ttf","hash":"c81680c71f33d7a14cc29e142f19a2754bed6faa","modified":1618233804000},{"_id":"themes/quiet/source/VAR/SourceCodeVariable-Italic.otf","hash":"76ec329cbfb72a6f84fd7486a4440863d1293e78","modified":1618233804000},{"_id":"themes/quiet/source/TTF/SourceCodePro-SemiboldIt.ttf","hash":"8fc0e3c50d3d8b3e0d9e06610f5b2737b793192f","modified":1618233804000},{"_id":"themes/quiet/source/js/jquery.min.js","hash":"a9d8678047219b378ddf3addf4b44650b677eec7","modified":1649139832790},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-BlackIt.otf.woff","hash":"454d0c0cd6be99edde8370af3238605d83f74721","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-Black.otf.woff","hash":"f53530d54732fe52534cfb3485a37412938058cf","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-Bold.otf.woff","hash":"141c3df14f12bee1dc50d870d82c984722a999c3","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-ExtraLightIt.otf.woff","hash":"18d05a3f7a8414a54f6d6cdfbcd3444bfe0ece7a","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-ExtraLight.otf.woff","hash":"8ead3301cde63a468835e33cb381a42ed8be7945","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-BoldIt.otf.woff","hash":"178546cf4fce6d64de3646121bfc9339e2eec8be","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-Light.otf.woff","hash":"52e0828a7927d93139a8239fb0e3ebdc3a90b8be","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-Medium.otf.woff","hash":"db8cf4487e0e131f49956d29df78ecccda1cbbf0","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-It.otf.woff","hash":"1620a7bfff3a1bc03b94080a7d12331e999eefaa","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-LightIt.otf.woff","hash":"dc8f30a269fd6c1b33b95fd3b5a88e5c1cc60a26","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-MediumIt.otf.woff","hash":"d17bfff572bd3ec5645a6761cdb9a228c86f2e62","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-Regular.otf.woff","hash":"c88eb2d584abd39fe0a18d7f6c0b1e59311e9558","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-Black.ttf.woff","hash":"fc11ac1e74c361eed838efe6cdaaad5221b00f1b","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-Semibold.otf.woff","hash":"d35c86a0d84c8a3ffa7df49c5df7e6a59b39191b","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-Bold.ttf.woff","hash":"01e7afb8f434f9db8ca457a82a6772db803d40e8","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/OTF/SourceCodePro-SemiboldIt.otf.woff","hash":"3e5833c2ae0d0283d871f3a41f40d755843a12ce","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-ExtraLight.ttf.woff","hash":"f1ec40b2ac289e7e418d2f1b6b17ec50b356fe3d","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-Medium.ttf.woff","hash":"8858a6c5319f4b69832b8b8d4571ca59c9d9d02b","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-Regular.ttf.woff","hash":"4aa2c81f9e56cab70f57f522e919555a67605a40","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-Semibold.ttf.woff","hash":"267b964386129bdf31c84e9c16d2e92e0e11acaf","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/TTF/SourceCodePro-Light.ttf.woff","hash":"1a58086ea4b3070a48519263da92f1fd8578b00e","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/VAR/SourceCodeVariable-Italic.otf.woff","hash":"f04a1356dd128d042adaff6113f7e2a25d737359","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/VAR/SourceCodeVariable-Roman.otf.woff","hash":"3417433f3aca8626f876375474bbdef478978640","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/VAR/SourceCodeVariable-Roman.ttf.woff","hash":"d92268351ef40297f064a6c82a39bbf01d349e48","modified":1618233804000},{"_id":"themes/quiet/source/WOFF/VAR/SourceCodeVariable-Italic.ttf.woff","hash":"6114ae992789e1e8a541d346a24738e2e93c450c","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-Black.otf.woff2","hash":"7ef7dd2c7ba7b101841ca1f84500cd55dd840b4f","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-Bold.otf.woff2","hash":"0aac50d2e0fee7ef3cd91c806a9a8a7f0e445b6d","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-ExtraLight.otf.woff2","hash":"b2b34b59ee6cc4a32fe483d2131183b54cd55036","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-Light.otf.woff2","hash":"7babde0383e7483e1516258aab6cf10d9cf02a4b","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-Regular.otf.woff2","hash":"bccd94576804edd18f26bc7661d3f85b6b3efc73","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-Semibold.otf.woff2","hash":"f80e73007cd3969d09da28c457bfd4a0db3a18e9","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/OTF/SourceCodePro-Medium.otf.woff2","hash":"6f7ef8e8919254ae8162c970ce3e4fcb456508ef","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/VAR/SourceCodeVariable-Italic.otf.woff2","hash":"dcea1e4c2d9e709e734b10cfdb070625a244915d","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/VAR/SourceCodeVariable-Roman.otf.woff2","hash":"ed18010270645ca6b50ad37ebe90cef599100a6f","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/TTF/SourceCodePro-BlackIt.ttf.woff2","hash":"f46b4bba34d251a04e563e8b1bd77c50ca618294","modified":1618233804000},{"_id":"themes/quiet/source/OTF/SourceCodePro-Black.otf","hash":"7ba6d923a0d163ce16da4dd1105945c47406cadc","modified":1618233804000},{"_id":"themes/quiet/source/OTF/SourceCodePro-Medium.otf","hash":"b9ee4acf9ac299fcadc4a074aea0c0fd7888aa1d","modified":1618233804000},{"_id":"themes/quiet/source/OTF/SourceCodePro-Semibold.otf","hash":"670fe3039ec47b0865b53940e34f68ae35941647","modified":1618233804000},{"_id":"themes/quiet/source/OTF/SourceCodePro-Light.otf","hash":"e02268e599444ede7a78080737047e5d63bf4f76","modified":1618233804000},{"_id":"themes/quiet/source/OTF/SourceCodePro-Bold.otf","hash":"aa1ca9792a5b6da0b63e7875c350108d339dd36a","modified":1618233804000},{"_id":"themes/quiet/source/TTF/SourceCodePro-Bold.ttf","hash":"0a247a18f7d4c199ed6bab38dad8beefe9b7d55b","modified":1618233804000},{"_id":"themes/quiet/source/TTF/SourceCodePro-Black.ttf","hash":"3de026ae93e921d2319b9bae3661be6de19a11cb","modified":1618233804000},{"_id":"themes/quiet/source/TTF/SourceCodePro-Semibold.ttf","hash":"35e5fd2ac677892fe654bc4023bf4335ae347b62","modified":1618233804000},{"_id":"themes/quiet/source/TTF/SourceCodePro-Medium.ttf","hash":"0bc3fe6cad25876a8cd190a723f794401df3b8b3","modified":1618233804000},{"_id":"themes/quiet/source/VAR/SourceCodeVariable-Roman.otf","hash":"6ba789a6b33fc4dfa1ca74441280349d934397ec","modified":1618233804000},{"_id":"themes/quiet/source/TTF/SourceCodePro-ExtraLight.ttf","hash":"55f2de8018bf43eafc426c7e4e911682a4bf3abc","modified":1618233804000},{"_id":"themes/quiet/source/VAR/SourceCodeVariable-Italic.ttf","hash":"25676688a6a9f28b416d8c21d30a008788d82b20","modified":1618233804000},{"_id":"themes/quiet/source/image/favicon.ico","hash":"d385f27e16736b3ac501e2de2e8e5204e4e085e6","modified":1649151784325},{"_id":"themes/quiet/source/image/logo.png","hash":"d385f27e16736b3ac501e2de2e8e5204e4e085e6","modified":1649151784325},{"_id":"themes/quiet/source/WOFF2/VAR/SourceCodeVariable-Italic.ttf.woff2","hash":"efe650d79881f37afd083406f9757e89b8467815","modified":1618233804000},{"_id":"themes/quiet/source/VAR/SourceCodeVariable-Roman.ttf","hash":"16b2f20e177ea3614d82472b89e9bf68df981b2b","modified":1618233804000},{"_id":"themes/quiet/source/image/favicon.ico.bak","hash":"15c3a5125bd5c742c1b49e6435e1f611719cdbc2","modified":1649151610368},{"_id":"themes/quiet/source/TTF/SourceCodePro-Regular.ttf","hash":"689d1f39b3119d199fdfbc72b60494842e017ee8","modified":1618233804000},{"_id":"themes/quiet/source/WOFF2/VAR/SourceCodeVariable-Roman.ttf.woff2","hash":"6639978ab453ca25b47673baf5da7eb79540ef29","modified":1618233804000},{"_id":"themes/quiet/source/TTF/SourceCodePro-Light.ttf","hash":"4b68cd40fb697d7cacff761fad924acf5aee995b","modified":1618233804000},{"_id":"themes/quiet/source/OTF/SourceCodePro-Regular.otf","hash":"60c35edf930ae05b9fbb33872ef1911e850b7281","modified":1618233804000},{"_id":"public/baidusitemap.xml","hash":"fa1a919a258a9b0caf36fc1a6b68be0a44549f1a","modified":1665577076447},{"_id":"public/sitemap.xml","hash":"fc439d16e7cb11348f0ed6f53e43b37ad0549c95","modified":1665577076447},{"_id":"public/about/index.html","hash":"32f1aa2a7557ef41a35abc8d99d7d7fb35cb32d5","modified":1665562623775},{"_id":"public/categories/index.html","hash":"20bed8fc4d6a3ea044bced77dac218fcebc65b61","modified":1665576595958},{"_id":"public/donation/index.html","hash":"87c78950bd05b8db03e8f29b0c224fd4a7f45d04","modified":1665562623775},{"_id":"public/links/index.html","hash":"27a2827deec9eec9869b75157a7639459d03eb8f","modified":1665562623775},{"_id":"public/photo/index.html","hash":"a8932bd812fb4369d1f1457c81e86eb2d5fa2645","modified":1665562623775},{"_id":"public/tags/index.html","hash":"f85b1c5cbff378faf05fea93f9acb627794c3e35","modified":1665577076447},{"_id":"public/2022/05/28/数据结构之树/index.html","hash":"e6ca1d6162cd83c55c1cfa8be54e31e8561aeaf3","modified":1665562623775},{"_id":"public/2022/05/28/南邮期末评价脚本/index.html","hash":"e9b565e23d9df8cd2a30c761851b17e2eeae3035","modified":1665562623775},{"_id":"public/2022/05/18/C-with-lambda/index.html","hash":"407e033534a9c5e0d113287f53151a5cacfb00d8","modified":1665562623775},{"_id":"public/2022/05/18/数据结构之排序大法/index.html","hash":"7e0dfef5744a59625631f607f8b6a87b1bc26a76","modified":1665562623775},{"_id":"public/2022/05/18/图床搭建/index.html","hash":"d64218a505c945b289c4beb2c5c3ac401f67d08a","modified":1665562623775},{"_id":"public/2022/05/18/数据结构之查找/index.html","hash":"e33b057e8a562bf4421b35eb3dd1e8cd2352fba8","modified":1665562623775},{"_id":"public/2022/05/16/数据结构——串-KMP算法/index.html","hash":"448183f87b824dc0f6ac167874f3800d0edd9141","modified":1665562623775},{"_id":"public/2022/05/16/数据结构-图/index.html","hash":"3d41b4a2da390eefc6cdfd58365f4e782cebfaf4","modified":1665562623775},{"_id":"public/2022/04/05/GitHub-部署个人博客/index.html","hash":"0195a12bb32b11304106552ccd45100d8a71239d","modified":1665562623775},{"_id":"public/2022/04/05/Python爬虫学习/index.html","hash":"8160ea3837e58b41755793d84a190f64569c0c9b","modified":1665562623775},{"_id":"public/2022/04/05/Python爬虫学习——面向初学者/index.html","hash":"d962fa243d2674c939b2345f1df88c359af2ac86","modified":1665562623775},{"_id":"public/2022/04/05/编译Linux与Uboot/index.html","hash":"f8af68bd98f2154c783fab1718d52c7366663a50","modified":1665562623775},{"_id":"public/2022/04/05/Windows局域网共享文件/index.html","hash":"60144b5c2973c17730c38c9a938332b6485b5eb2","modified":1665562623775},{"_id":"public/2022/04/05/Windows右键打开注册表配置/index.html","hash":"9ae1e3f251cc07d32a0ae82095584ce37bb6e45b","modified":1665562623775},{"_id":"public/archives/index.html","hash":"74a715676beeab5696d50c43d5c2df3da6cfbcf7","modified":1665575781120},{"_id":"public/archives/page/2/index.html","hash":"74a715676beeab5696d50c43d5c2df3da6cfbcf7","modified":1665575781120},{"_id":"public/archives/2022/index.html","hash":"74a715676beeab5696d50c43d5c2df3da6cfbcf7","modified":1665575781120},{"_id":"public/archives/2022/page/2/index.html","hash":"74a715676beeab5696d50c43d5c2df3da6cfbcf7","modified":1665575781120},{"_id":"public/archives/2022/04/index.html","hash":"74a715676beeab5696d50c43d5c2df3da6cfbcf7","modified":1665575781120},{"_id":"public/archives/2022/05/index.html","hash":"74a715676beeab5696d50c43d5c2df3da6cfbcf7","modified":1665575781120},{"_id":"public/index.html","hash":"88b2f1d4ee19808ed7a7b8f2ce059ee2af9fac64","modified":1665575781120},{"_id":"public/page/2/index.html","hash":"024de57d392040eb5eba901c15587a7d714501cf","modified":1665575781120},{"_id":"public/page/3/index.html","hash":"ff631ba1bfc02830485a1b6ea1a3babd1abb6443","modified":1665575781120},{"_id":"public/categories/C/index.html","hash":"aa25f3fd571ac9a37c031258890ec6fa99f91e0f","modified":1665575781120},{"_id":"public/categories/前端/index.html","hash":"aa25f3fd571ac9a37c031258890ec6fa99f91e0f","modified":1665575781120},{"_id":"public/categories/Python/index.html","hash":"aa25f3fd571ac9a37c031258890ec6fa99f91e0f","modified":1665575781120},{"_id":"public/categories/Python/爬虫/index.html","hash":"aa25f3fd571ac9a37c031258890ec6fa99f91e0f","modified":1665575781120},{"_id":"public/categories/计算机事半功倍/index.html","hash":"aa25f3fd571ac9a37c031258890ec6fa99f91e0f","modified":1665575781120},{"_id":"public/categories/数据结构与算法/index.html","hash":"aa25f3fd571ac9a37c031258890ec6fa99f91e0f","modified":1665575781120},{"_id":"public/categories/Linux/index.html","hash":"aa25f3fd571ac9a37c031258890ec6fa99f91e0f","modified":1665575781120},{"_id":"public/tags/C/index.html","hash":"4a861e3800804ccd2adbaf34697a547e54d300a7","modified":1665562623775},{"_id":"public/tags/λ/index.html","hash":"b2684e8c00b5919084e624c8eecd186a657df84b","modified":1665562623775},{"_id":"public/tags/lambda/index.html","hash":"cc0b46c95261e593d0447d510a3f9b87eabcdec8","modified":1665562623775},{"_id":"public/tags/前端/index.html","hash":"f3f961801567e87d0baf61316d5728f722d69963","modified":1665562623775},{"_id":"public/tags/GitHub/index.html","hash":"ae40e72f5d93461bcd392c5cee1a8bd68b3eee3b","modified":1665562623775},{"_id":"public/tags/Hexo/index.html","hash":"7d0f21308fda123367aa116f2e5e2ad35e4273c2","modified":1665562623775},{"_id":"public/tags/Python/index.html","hash":"16badc774737ab65bd257d959be75fe82bcbf5f6","modified":1665562623775},{"_id":"public/tags/爬虫/index.html","hash":"5c28b49c8c404cdbade5a309b04547b64a39d738","modified":1665562623775},{"_id":"public/tags/计算机妙招/index.html","hash":"9035b4413effae9ce9fdb96f341d2f193b35ab76","modified":1665562623775},{"_id":"public/tags/注册表/index.html","hash":"777a787a56bbcaf15f9a3335d7a57cfac3708573","modified":1665562623775},{"_id":"public/tags/Windows/index.html","hash":"c400065d53c6a7201752311e2c3096ba1c1da800","modified":1665562623775},{"_id":"public/tags/局域网共享/index.html","hash":"bdb3c05bb56d764be2eac1b7eb24f8e332189244","modified":1665562623775},{"_id":"public/tags/JavaScript/index.html","hash":"cbc5e4d6eeacd6b5bd79d119bd58834884655105","modified":1665562623775},{"_id":"public/tags/脚本/index.html","hash":"d8f78fb7f239c4cf5d61be66c6b788190ae10e51","modified":1665562623775},{"_id":"public/tags/图床/index.html","hash":"3328fd76d36e483c07027bb32c13714a02a1047f","modified":1665562623775},{"_id":"public/tags/数据结构/index.html","hash":"4662859a3125827dcdd1e525d00918ce592345ba","modified":1665562623775},{"_id":"public/tags/考研/index.html","hash":"e104c1aa1fa7c6a22773ea002e02f63c52fe4472","modified":1665575781120},{"_id":"public/tags/字符串/index.html","hash":"187da2bda73f0be354f70b4988a7a4698e12f99a","modified":1665562623775},{"_id":"public/tags/KMP/index.html","hash":"c8770a99b26f78684a522b7046237970e939bc4b","modified":1665562623775},{"_id":"public/tags/图/index.html","hash":"f1ffc5fca39b72fcb093ef0d0a51e00fb51bf8e5","modified":1665562623775},{"_id":"public/tags/排序/index.html","hash":"2cb0ce92c5622d5ecff3fdb6a255478bbc2ae204","modified":1665562623775},{"_id":"public/tags/树/index.html","hash":"65b43580ac21afefe1666568193ab3e58a47bb89","modified":1665562623775},{"_id":"public/tags/Linux/index.html","hash":"5fb836ff71af01a9ecfe9722d9ebbbe1c3512619","modified":1665562623775},{"_id":"public/tags/Uboot/index.html","hash":"9bf786bdfac4d123b3d3c9c0e7acd742ff8a48d8","modified":1665562623775},{"_id":"public/tags/编译/index.html","hash":"470e268f1f2f7687aae5a9df2fc81b3501abbf1f","modified":1665562623775},{"_id":"public/tags/红黑树/index.html","hash":"e33f587f0c5203b0d5fdebc7389e5802de4855d2","modified":1665562623775},{"_id":"public/tags/查找/index.html","hash":"cec54ff3d297d0b9376b71bc24774075283a2cdd","modified":1665562623775},{"_id":"public/tags/平衡二叉树/index.html","hash":"b134a932cf4203fb907659233abe6b6d79379bbf","modified":1665562623775},{"_id":"public/tags/二分法/index.html","hash":"4ec7908c6cdd3fae326be6788fd5cd8018626aeb","modified":1665562623775},{"_id":"public/robots.txt","hash":"db1d1a8690484d24907e8d96fbab1ce46546c076","modified":1654410423835},{"_id":"public/image/pattern.png","hash":"e9a79b9b5716c781e8f5acf3462e42fae7f39741","modified":1654410423835},{"_id":"public/photos/t.txt","hash":"1abef4602d88208622a3dd75b6db65db51353dc8","modified":1654410423835},{"_id":"public/WOFF2/TTF/SourceCodePro-Semibold.ttf.woff2","hash":"dc84f8f6e43d5b423d2a505d065d7b014cde7ed0","modified":1654410423835},{"_id":"public/WOFF2/TTF/SourceCodePro-SemiboldIt.ttf.woff2","hash":"bd21bec82a80c576a21a285526ff715caa18642f","modified":1654410423835},{"_id":"public/OTF/SourceCodePro-BlackIt.otf","hash":"2f84210ce8833c350aeaf589abcc74168daa979b","modified":1654410423835},{"_id":"public/OTF/SourceCodePro-MediumIt.otf","hash":"e417e210898909c8a15701f8ff17c3f8e4ff9576","modified":1654410423835},{"_id":"public/OTF/SourceCodePro-SemiboldIt.otf","hash":"d7ae19cf6fa26340da46ecf96704ecc427957a4b","modified":1654410423835},{"_id":"public/TTF/SourceCodePro-BoldIt.ttf","hash":"4be9ce619586394bba505034b779334f3639f24f","modified":1654410423835},{"_id":"public/TTF/SourceCodePro-ExtraLightIt.ttf","hash":"400f1d3268adc19b8195f93d787179a5c478175b","modified":1654410423835},{"_id":"public/TTF/SourceCodePro-SemiboldIt.ttf","hash":"8fc0e3c50d3d8b3e0d9e06610f5b2737b793192f","modified":1654410423835},{"_id":"public/VAR/SourceCodeVariable-Italic.otf","hash":"76ec329cbfb72a6f84fd7486a4440863d1293e78","modified":1654410423835},{"_id":"public/WOFF/OTF/SourceCodePro-Black.otf.woff","hash":"f53530d54732fe52534cfb3485a37412938058cf","modified":1654410423835},{"_id":"public/WOFF/OTF/SourceCodePro-BlackIt.otf.woff","hash":"454d0c0cd6be99edde8370af3238605d83f74721","modified":1654410423835},{"_id":"public/WOFF/OTF/SourceCodePro-Bold.otf.woff","hash":"141c3df14f12bee1dc50d870d82c984722a999c3","modified":1654410423835},{"_id":"public/WOFF/OTF/SourceCodePro-BoldIt.otf.woff","hash":"178546cf4fce6d64de3646121bfc9339e2eec8be","modified":1654410423835},{"_id":"public/WOFF/OTF/SourceCodePro-ExtraLight.otf.woff","hash":"8ead3301cde63a468835e33cb381a42ed8be7945","modified":1654410423835},{"_id":"public/WOFF/OTF/SourceCodePro-ExtraLightIt.otf.woff","hash":"18d05a3f7a8414a54f6d6cdfbcd3444bfe0ece7a","modified":1654410423835},{"_id":"public/WOFF/OTF/SourceCodePro-It.otf.woff","hash":"1620a7bfff3a1bc03b94080a7d12331e999eefaa","modified":1654410423835},{"_id":"public/WOFF/OTF/SourceCodePro-Light.otf.woff","hash":"52e0828a7927d93139a8239fb0e3ebdc3a90b8be","modified":1654410423835},{"_id":"public/WOFF/OTF/SourceCodePro-LightIt.otf.woff","hash":"dc8f30a269fd6c1b33b95fd3b5a88e5c1cc60a26","modified":1654410423835},{"_id":"public/WOFF/OTF/SourceCodePro-Medium.otf.woff","hash":"db8cf4487e0e131f49956d29df78ecccda1cbbf0","modified":1654410423835},{"_id":"public/WOFF/OTF/SourceCodePro-MediumIt.otf.woff","hash":"d17bfff572bd3ec5645a6761cdb9a228c86f2e62","modified":1654410423835},{"_id":"public/WOFF/OTF/SourceCodePro-Regular.otf.woff","hash":"c88eb2d584abd39fe0a18d7f6c0b1e59311e9558","modified":1654410423835},{"_id":"public/WOFF/OTF/SourceCodePro-Semibold.otf.woff","hash":"d35c86a0d84c8a3ffa7df49c5df7e6a59b39191b","modified":1654410423835},{"_id":"public/WOFF/OTF/SourceCodePro-SemiboldIt.otf.woff","hash":"3e5833c2ae0d0283d871f3a41f40d755843a12ce","modified":1654410423835},{"_id":"public/WOFF/TTF/SourceCodePro-Black.ttf.woff","hash":"fc11ac1e74c361eed838efe6cdaaad5221b00f1b","modified":1654410423835},{"_id":"public/WOFF/TTF/SourceCodePro-BlackIt.ttf.woff","hash":"3536245f212a466197833141dc196588bc2c9e36","modified":1654410423835},{"_id":"public/WOFF/TTF/SourceCodePro-Bold.ttf.woff","hash":"01e7afb8f434f9db8ca457a82a6772db803d40e8","modified":1654410423835},{"_id":"public/WOFF/TTF/SourceCodePro-BoldIt.ttf.woff","hash":"d98590dac61614d9e5920a9a2d2a64e21aab1a97","modified":1654410423835},{"_id":"public/WOFF/TTF/SourceCodePro-ExtraLight.ttf.woff","hash":"f1ec40b2ac289e7e418d2f1b6b17ec50b356fe3d","modified":1654410423835},{"_id":"public/WOFF/TTF/SourceCodePro-ExtraLightIt.ttf.woff","hash":"832cdf6e67689f6ab69c31e4ac1917244a63835e","modified":1654410423835},{"_id":"public/WOFF/TTF/SourceCodePro-It.ttf.woff","hash":"51274860a111eb86e2db83bba9b86a86eb23799d","modified":1654410423835},{"_id":"public/WOFF/TTF/SourceCodePro-Light.ttf.woff","hash":"1a58086ea4b3070a48519263da92f1fd8578b00e","modified":1654410423835},{"_id":"public/WOFF/TTF/SourceCodePro-LightIt.ttf.woff","hash":"da29a00d2d351f4832d589e807b538e888f79dde","modified":1654410423835},{"_id":"public/WOFF/TTF/SourceCodePro-Medium.ttf.woff","hash":"8858a6c5319f4b69832b8b8d4571ca59c9d9d02b","modified":1654410423835},{"_id":"public/WOFF/TTF/SourceCodePro-MediumIt.ttf.woff","hash":"5a377c11b5aaf20384d2bdc6d1de20f71462cdc1","modified":1654410423835},{"_id":"public/WOFF/TTF/SourceCodePro-Semibold.ttf.woff","hash":"267b964386129bdf31c84e9c16d2e92e0e11acaf","modified":1654410423835},{"_id":"public/WOFF/TTF/SourceCodePro-Regular.ttf.woff","hash":"4aa2c81f9e56cab70f57f522e919555a67605a40","modified":1654410423835},{"_id":"public/WOFF/TTF/SourceCodePro-SemiboldIt.ttf.woff","hash":"00407523ac1bc35e6d8ac9909db7c3ffd5d08faf","modified":1654410423835},{"_id":"public/WOFF/VAR/SourceCodeVariable-Italic.otf.woff","hash":"f04a1356dd128d042adaff6113f7e2a25d737359","modified":1654410423835},{"_id":"public/WOFF2/OTF/SourceCodePro-Black.otf.woff2","hash":"7ef7dd2c7ba7b101841ca1f84500cd55dd840b4f","modified":1654410423835},{"_id":"public/WOFF2/OTF/SourceCodePro-BlackIt.otf.woff2","hash":"432a774a8df91e28e70e2331d7c593965d1743dc","modified":1654410423835},{"_id":"public/WOFF2/OTF/SourceCodePro-Bold.otf.woff2","hash":"0aac50d2e0fee7ef3cd91c806a9a8a7f0e445b6d","modified":1654410423835},{"_id":"public/WOFF2/OTF/SourceCodePro-BoldIt.otf.woff2","hash":"14922675cc816a3c7538e7703e2d8a143a75c99e","modified":1654410423835},{"_id":"public/WOFF2/OTF/SourceCodePro-ExtraLight.otf.woff2","hash":"b2b34b59ee6cc4a32fe483d2131183b54cd55036","modified":1654410423835},{"_id":"public/WOFF2/OTF/SourceCodePro-ExtraLightIt.otf.woff2","hash":"bbe5ad7683c827ca7c4eee212c21ca0e08882554","modified":1654410423835},{"_id":"public/WOFF2/OTF/SourceCodePro-Light.otf.woff2","hash":"7babde0383e7483e1516258aab6cf10d9cf02a4b","modified":1654410423835},{"_id":"public/WOFF2/OTF/SourceCodePro-It.otf.woff2","hash":"86dcf95798db4f095a2dba3905394eece26c2ba6","modified":1654410423835},{"_id":"public/WOFF2/OTF/SourceCodePro-LightIt.otf.woff2","hash":"3fd48ba89b4e8ef06b4480a08680a52b54b1efc0","modified":1654410423835},{"_id":"public/WOFF2/OTF/SourceCodePro-Medium.otf.woff2","hash":"6f7ef8e8919254ae8162c970ce3e4fcb456508ef","modified":1654410423835},{"_id":"public/WOFF2/OTF/SourceCodePro-MediumIt.otf.woff2","hash":"b48e29e0098171a8b53737e337f893bbfe8ff3f7","modified":1654410423835},{"_id":"public/WOFF2/OTF/SourceCodePro-SemiboldIt.otf.woff2","hash":"41a1031b194ea5565df3d6a7155eaf4542483288","modified":1654410423835},{"_id":"public/WOFF2/TTF/SourceCodePro-Black.ttf.woff2","hash":"a59b52f358de827f06d785bbb57029bfc3a1a885","modified":1654410423835},{"_id":"public/WOFF2/TTF/SourceCodePro-Bold.ttf.woff2","hash":"360ab678362e0f985a21b094c730dae1a80b45a4","modified":1654410423835},{"_id":"public/WOFF2/TTF/SourceCodePro-BlackIt.ttf.woff2","hash":"f46b4bba34d251a04e563e8b1bd77c50ca618294","modified":1654410423835},{"_id":"public/WOFF2/TTF/SourceCodePro-BoldIt.ttf.woff2","hash":"223b551bce86bd200d9f39b2e1660514f25bed4e","modified":1654410423835},{"_id":"public/WOFF2/TTF/SourceCodePro-ExtraLight.ttf.woff2","hash":"d0efe8f6d65b39bc22807ec4fcb183ab90f73ec3","modified":1654410423835},{"_id":"public/WOFF2/TTF/SourceCodePro-ExtraLightIt.ttf.woff2","hash":"2c6961187ed91d9687a6fcda9d77c11d655d9135","modified":1654410423835},{"_id":"public/WOFF2/TTF/SourceCodePro-It.ttf.woff2","hash":"59a2ef00832efa3f7685e7419a075eed9f58d1a1","modified":1654410423835},{"_id":"public/WOFF2/TTF/SourceCodePro-Light.ttf.woff2","hash":"0661f07fcfd1b87a7a1ce506ed09b51a9fc32512","modified":1654410423835},{"_id":"public/WOFF2/TTF/SourceCodePro-LightIt.ttf.woff2","hash":"74cc6efd805de42335866a49a2b70188e0c0731b","modified":1654410423835},{"_id":"public/WOFF2/TTF/SourceCodePro-MediumIt.ttf.woff2","hash":"bd521bd7b5c1b37a87c0d03c42896eb0eaa6f3d4","modified":1654410423835},{"_id":"public/WOFF2/TTF/SourceCodePro-Medium.ttf.woff2","hash":"4e778d087713f7ddf1ec11496e0d785a1a45e06c","modified":1654410423835},{"_id":"public/WOFF2/TTF/SourceCodePro-Regular.ttf.woff2","hash":"ebf0f8dd1f788f2b6265b54cd89de4aff11d520b","modified":1654410423835},{"_id":"public/WOFF2/VAR/SourceCodeVariable-Italic.otf.woff2","hash":"dcea1e4c2d9e709e734b10cfdb070625a244915d","modified":1654410423835},{"_id":"public/WOFF2/VAR/SourceCodeVariable-Italic.ttf.woff2","hash":"efe650d79881f37afd083406f9757e89b8467815","modified":1654410423835},{"_id":"public/WOFF2/VAR/SourceCodeVariable-Roman.otf.woff2","hash":"ed18010270645ca6b50ad37ebe90cef599100a6f","modified":1654410423835},{"_id":"public/WOFF2/VAR/SourceCodeVariable-Roman.ttf.woff2","hash":"6639978ab453ca25b47673baf5da7eb79540ef29","modified":1654410423835},{"_id":"public/OTF/SourceCodePro-Black.otf","hash":"7ba6d923a0d163ce16da4dd1105945c47406cadc","modified":1654410423835},{"_id":"public/OTF/SourceCodePro-Bold.otf","hash":"aa1ca9792a5b6da0b63e7875c350108d339dd36a","modified":1654410423835},{"_id":"public/OTF/SourceCodePro-BoldIt.otf","hash":"7d34fd1cef1853d8e826613fb023e8794ee41d0f","modified":1654410423835},{"_id":"public/OTF/SourceCodePro-ExtraLight.otf","hash":"9ff240ab48eb7e97237e25d8c6f8cd738ba97caa","modified":1654410423835},{"_id":"public/OTF/SourceCodePro-ExtraLightIt.otf","hash":"aaf16e8a758018c13cf6cc8703e898b6975d233e","modified":1654410423835},{"_id":"public/OTF/SourceCodePro-Light.otf","hash":"e02268e599444ede7a78080737047e5d63bf4f76","modified":1654410423835},{"_id":"public/OTF/SourceCodePro-It.otf","hash":"a012371c8083cadae24637eb6190e95b0ee7ec8b","modified":1654410423835},{"_id":"public/OTF/SourceCodePro-LightIt.otf","hash":"9733549bc8865b055d3cb7719dce717f397d601e","modified":1654410423835},{"_id":"public/OTF/SourceCodePro-Medium.otf","hash":"b9ee4acf9ac299fcadc4a074aea0c0fd7888aa1d","modified":1654410423835},{"_id":"public/OTF/SourceCodePro-Regular.otf","hash":"60c35edf930ae05b9fbb33872ef1911e850b7281","modified":1654410423835},{"_id":"public/OTF/SourceCodePro-Semibold.otf","hash":"670fe3039ec47b0865b53940e34f68ae35941647","modified":1654410423835},{"_id":"public/TTF/SourceCodePro-Black.ttf","hash":"3de026ae93e921d2319b9bae3661be6de19a11cb","modified":1654410423835},{"_id":"public/TTF/SourceCodePro-BlackIt.ttf","hash":"11512eb8c90895b8f30f7dd4a9abf594e3e9f370","modified":1654410423835},{"_id":"public/TTF/SourceCodePro-Bold.ttf","hash":"0a247a18f7d4c199ed6bab38dad8beefe9b7d55b","modified":1654410423835},{"_id":"public/TTF/SourceCodePro-ExtraLight.ttf","hash":"55f2de8018bf43eafc426c7e4e911682a4bf3abc","modified":1654410423835},{"_id":"public/TTF/SourceCodePro-It.ttf","hash":"a8889dc5cf2da2bed041f07a827198ee663b49d9","modified":1654410423835},{"_id":"public/TTF/SourceCodePro-Light.ttf","hash":"4b68cd40fb697d7cacff761fad924acf5aee995b","modified":1654410423835},{"_id":"public/TTF/SourceCodePro-LightIt.ttf","hash":"8daf93656b5f1dbbb182f421b502380f25c1a946","modified":1654410423835},{"_id":"public/TTF/SourceCodePro-Medium.ttf","hash":"0bc3fe6cad25876a8cd190a723f794401df3b8b3","modified":1654410423835},{"_id":"public/TTF/SourceCodePro-MediumIt.ttf","hash":"c81680c71f33d7a14cc29e142f19a2754bed6faa","modified":1654410423835},{"_id":"public/TTF/SourceCodePro-Regular.ttf","hash":"689d1f39b3119d199fdfbc72b60494842e017ee8","modified":1654410423835},{"_id":"public/TTF/SourceCodePro-Semibold.ttf","hash":"35e5fd2ac677892fe654bc4023bf4335ae347b62","modified":1654410423835},{"_id":"public/VAR/SourceCodeVariable-Roman.otf","hash":"6ba789a6b33fc4dfa1ca74441280349d934397ec","modified":1654410423835},{"_id":"public/image/favicon.ico","hash":"d385f27e16736b3ac501e2de2e8e5204e4e085e6","modified":1654410423835},{"_id":"public/image/logo.png","hash":"d385f27e16736b3ac501e2de2e8e5204e4e085e6","modified":1654410423835},{"_id":"public/WOFF/VAR/SourceCodeVariable-Italic.ttf.woff","hash":"6114ae992789e1e8a541d346a24738e2e93c450c","modified":1654410423835},{"_id":"public/WOFF/VAR/SourceCodeVariable-Roman.otf.woff","hash":"3417433f3aca8626f876375474bbdef478978640","modified":1654410423835},{"_id":"public/WOFF/VAR/SourceCodeVariable-Roman.ttf.woff","hash":"d92268351ef40297f064a6c82a39bbf01d349e48","modified":1654410423835},{"_id":"public/WOFF2/OTF/SourceCodePro-Regular.otf.woff2","hash":"bccd94576804edd18f26bc7661d3f85b6b3efc73","modified":1654410423835},{"_id":"public/WOFF2/OTF/SourceCodePro-Semibold.otf.woff2","hash":"f80e73007cd3969d09da28c457bfd4a0db3a18e9","modified":1654410423835},{"_id":"public/css/about.css","hash":"d3d7ae17f0571f1cec4514135d644c6590118bd0","modified":1654410423835},{"_id":"public/css/archive.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1654410423835},{"_id":"public/css/atom-one-dark copy.css","hash":"894b691e350e868364f02e41c794d91aae60a197","modified":1654410423835},{"_id":"public/css/categories.css","hash":"06b727d6e2e21b1e5ab12de073406517c32dfe93","modified":1654410423835},{"_id":"public/css/header.css","hash":"e3ce1dbac2e258f0943c5aebdd89b29702246baa","modified":1654410423835},{"_id":"public/css/food.css","hash":"10a0e21ef9b2e4a6af9328be51e1c0368ca91f4e","modified":1654410423835},{"_id":"public/css/highlighvs2015.css","hash":"79c8f25b4ceb44a5b581e12eee21ac914f75bd2e","modified":1654410423835},{"_id":"public/css/home.css","hash":"e474078a73fa75f23f37092f01505dd8063ffc38","modified":1654410423835},{"_id":"public/css/links.css","hash":"c7afe457cea5d996ee86cfc47174aa114e458fb0","modified":1654410423835},{"_id":"public/css/myhihglight.css","hash":"f82049be453b0ab52ed8938752daf9dea8b7a96b","modified":1654412082636},{"_id":"public/css/page.css","hash":"0514b75a35c93c10826cd861f0dd380d90ba8e41","modified":1654410423835},{"_id":"public/css/page_cente.css","hash":"b85a224b56e93c6b56058ed49cde58e0bfc1d2e4","modified":1654410423835},{"_id":"public/css/photos.css","hash":"39ce5688bf4a61eaf3dc634b431431c5a26ecb2f","modified":1654410423835},{"_id":"public/css/tag.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1654410423835},{"_id":"public/css/tags.css","hash":"b2de1e197efba0a058f1a5d37aa014fcfc0016ff","modified":1654410423835},{"_id":"public/css/words.css","hash":"ddf6dff030d41458b95ddeba52d8ac0b88455578","modified":1654410423835},{"_id":"public/js/gotop.js","hash":"2bd969b8dd7b81626dcd2a3d8a1b1bbb4e0fc33c","modified":1654410423835},{"_id":"public/source-code-pro-release/package.json","hash":"8ef5009a9d9b59e716117e1df69a7767f987e7f9","modified":1654410423835},{"_id":"public/source-code-pro-release/source-code-pro.css","hash":"7f5011232b693f37a60bcd33f7f551b07c70af42","modified":1654410423835},{"_id":"public/source-code-pro-release/source-code-variable.css","hash":"30a7910e8c4aa2fb7d8eb9e798d37df11383613b","modified":1654410423835},{"_id":"public/photos/photo.js","hash":"3e9e55d65cf1204d0f968c4928f7ef5af0456b5d","modified":1654410423835},{"_id":"public/VAR/SourceCodeVariable-Italic.ttf","hash":"25676688a6a9f28b416d8c21d30a008788d82b20","modified":1654410423835},{"_id":"public/image/favicon.ico.bak","hash":"15c3a5125bd5c742c1b49e6435e1f611719cdbc2","modified":1654410423835},{"_id":"public/photos/photoslist.json","hash":"97043021c0250f9bc9dfc499064bf1ad83b69e10","modified":1654410423835},{"_id":"public/VAR/SourceCodeVariable-Roman.ttf","hash":"16b2f20e177ea3614d82472b89e9bf68df981b2b","modified":1654410423835},{"_id":"public/js/jquery.min.js","hash":"948b382d052e9af0de5353f29f986d3080e7221c","modified":1654410423835},{"_id":"source/_posts/计算机网络技术之概述.md","hash":"493a0ac4fad998191f9579aeeb4277b58bd7a9c9","modified":1658202190683},{"_id":"public/2022/06/09/计算机网络技术之概述/index.html","hash":"5290c15b2d3f79bf3693c4e86951f2e62cf0cd34","modified":1665562623775},{"_id":"public/archives/2022/06/index.html","hash":"74a715676beeab5696d50c43d5c2df3da6cfbcf7","modified":1665575781120},{"_id":"public/categories/计算机网络技术/index.html","hash":"aa25f3fd571ac9a37c031258890ec6fa99f91e0f","modified":1665575781120},{"_id":"public/tags/计算机网络技术/index.html","hash":"d4e6f4671fdb8df70acd2413c32d9e16ef871284","modified":1665562623775},{"_id":"public/tags/概述/index.html","hash":"eb8535d3650f4d4c098758bd497b0aa1876f3581","modified":1654752327925},{"_id":"public/tags/OSI/index.html","hash":"0b6dda2a619226705eb8723a201de485ab48a66f","modified":1665562623775},{"_id":"public/tags/TCP-IP/index.html","hash":"37b8682067da1449a63bc547b80a9943f8cd10c2","modified":1665562623775},{"_id":"source/_posts/从http开始学习爬虫.md","hash":"7844ae919b4b418f591f02e88f15927067cbc533","modified":1665576496285},{"_id":"public/2022/06/11/从http开始学习爬虫/index.html","hash":"64d94c2751d9c53a022daa5a2eeef5ec331d2048","modified":1665562623775},{"_id":"public/categories/爬虫/index.html","hash":"aa25f3fd571ac9a37c031258890ec6fa99f91e0f","modified":1665575781120},{"_id":"public/tags/http/index.html","hash":"689f525734e367f8702fb02b6b26bf5da2acddc4","modified":1665562623775},{"_id":"source/_posts/计算机网络技术之物理层.md","hash":"c4a830f506b33795bafaeb4a0bc4cd1605501ac5","modified":1657163013830},{"_id":"public/2022/06/15/计算机网络技术之物理层/index.html","hash":"4f25333b9401e4530a8c21aaae2df3798b91e7f7","modified":1665562623775},{"_id":"public/tags/物理层/index.html","hash":"80d4eba00efc8224f3bad23e566241b1abbd23fa","modified":1665562623775},{"_id":"source/_posts/计算机网络技术之数据链路层.md","hash":"f882f625ff11b1c367628a444b5bbf867c9a7f29","modified":1658217116089},{"_id":"public/2022/06/16/计算机网络技术之数据链路层/index.html","hash":"6a8605a9813775ea9a4f6448612b306a404beee5","modified":1665562623775},{"_id":"source/_posts/数据结构之插入排序.md","hash":"b7da153559883181994118f27c3a7fab4fc3624a","modified":1665576894470},{"_id":"public/2022/06/18/数据结构之插入排序/index.html","hash":"51d8ae47abe93a34420ebd771f1a7097b8ba2b7b","modified":1665576948545},{"_id":"public/page/4/index.html","hash":"3b0270c4933df4e5d64c3c205e12e1165a89a8f8","modified":1665575781120},{"_id":"source/_posts/考研数学之微分方程.md","hash":"dbed7743569bebb357a7f8ed0b4215bcf8b9da93","modified":1657962239966},{"_id":"public/2022/07/16/考研数学之微分方程/index.html","hash":"d9090fa24529b823fec3726162d73aad8fc24ba7","modified":1665562623775},{"_id":"public/archives/2022/07/index.html","hash":"74a715676beeab5696d50c43d5c2df3da6cfbcf7","modified":1665575781120},{"_id":"public/categories/考研数学/index.html","hash":"aa25f3fd571ac9a37c031258890ec6fa99f91e0f","modified":1665575781120},{"_id":"public/tags/数学/index.html","hash":"9c30c67e3e3fcd8a0aa194afa2137c6ffd0a0f0c","modified":1665575781120},{"_id":"public/tags/微分方程/index.html","hash":"5c9b105c214316af834457ca0c7cef5f8522803e","modified":1665562623775},{"_id":"source/_posts/计算机网络技术之子网分配.md","hash":"69d75ecff309713be4bed26af36689755cf8f150","modified":1662294986658},{"_id":"public/2022/09/04/计算机网络技术之子网分配/index.html","hash":"f1cca05654f2833af9d2b564fd5f3161777c1cfe","modified":1665562623775},{"_id":"public/archives/page/3/index.html","hash":"74a715676beeab5696d50c43d5c2df3da6cfbcf7","modified":1665575781120},{"_id":"public/archives/2022/page/3/index.html","hash":"74a715676beeab5696d50c43d5c2df3da6cfbcf7","modified":1665575781120},{"_id":"public/archives/2022/09/index.html","hash":"74a715676beeab5696d50c43d5c2df3da6cfbcf7","modified":1665575781120},{"_id":"public/tags/考研/page/2/index.html","hash":"cc8b4643a18f9ffdf199034c22e308f5185563dc","modified":1665575781120},{"_id":"source/_posts/多元函数积分学.md","hash":"b7758e4e4af280ff606c431e6d3b2a3d1fe14662","modified":1665563678050},{"_id":"public/2022/10/06/多元函数积分学/index.html","hash":"c5a743875e9fb0e6cb025220f1641c09102bef4f","modified":1665563684228},{"_id":"public/archives/2022/10/index.html","hash":"74a715676beeab5696d50c43d5c2df3da6cfbcf7","modified":1665575781120},{"_id":"public/tags/曲线积分/index.html","hash":"48f6aa5129930e7d7e9980e693b90a7c0763cdec","modified":1665562623775},{"_id":"public/tags/曲面积分/index.html","hash":"d91926c573fc79ebc8bd1d4b08b0f517c59b2278","modified":1665562623775},{"_id":"public/tags/二重积分/index.html","hash":"44fd2a82317625f8a0c9cb34118f6f5243ad5a1f","modified":1665562623775},{"_id":"public/tags/三重积分/index.html","hash":"e2c52392eb45552c98ebcd3e024cb5e556a9f448","modified":1665562623775},{"_id":"source/_posts/高等数学级数.md","hash":"a3cad36e4fa6bab36b61396943e703874634024a","modified":1665577069331},{"_id":"public/2022/10/08/高等数学级数/index.html","hash":"d190f6cb0959f31557fe1d629d60339b52bccc69","modified":1665577076447},{"_id":"public/tags/级数/index.html","hash":"4ff560b35822a4f7488647dde11ab2083e1e99ce","modified":1665562623775},{"_id":"public/tags/傅里叶级数/index.html","hash":"15b99714f15c0f85b49deaeab120e87c8db1261d","modified":1665562623775},{"_id":"source/_posts/空间曲线曲面以及梯散旋度.md","hash":"6557bdc0f791ca4716a5f17f2a8b1bb6fd89429c","modified":1665562564428},{"_id":"public/2022/10/09/空间曲线曲面以及梯散旋度/index.html","hash":"07c51a385d6bd0cbaeb8c34aeb538a16eb7f2f79","modified":1665563575462},{"_id":"public/tags/曲线/index.html","hash":"b1c86f4cc898d1d42e6603186ca7b16eea606d15","modified":1665562623775},{"_id":"public/tags/曲面/index.html","hash":"9373991c9ab83e43e453b80c72606bc0ae839f54","modified":1665562623775},{"_id":"public/tags/梯度/index.html","hash":"0d54385a9660ff55afdc43f5ce12e250737a91c5","modified":1665562623775},{"_id":"public/tags/散度/index.html","hash":"1d09d84b7e19ab042675c22d2f0821dd40f88ead","modified":1665562623775},{"_id":"public/tags/旋度/index.html","hash":"58d1b8a7c8ed966139d353d867990d02fd9b25e5","modified":1665562623775},{"_id":"source/_posts/概率论之卷积公式求解.md","hash":"be004bffee07ade37433085dbc722239ff32a3ea","modified":1665576421064},{"_id":"public/2022/10/12/概率论之卷积公式求解/index.html","hash":"835f2d53fe70a9f12dc3e5a8eaf37ad6f4fee1b9","modified":1665576425319},{"_id":"public/page/5/index.html","hash":"0faa08700d1c4df4ea4fbccf0e203a7d7c82dc4c","modified":1665575781120},{"_id":"public/tags/卷积/index.html","hash":"1c2b335ffcc1ea3410dca3abaca086e8dcff8a80","modified":1665563575462},{"_id":"public/tags/概率密度/index.html","hash":"b1d4f4c1cbc1053e5fcefdc099bd443e2ca35111","modified":1665563575462},{"_id":"source/_posts/区间估计与假设检验.md","hash":"532c9324a61d3e6afdf4e59da8de874468877749","modified":1665576343980},{"_id":"public/2022/10/12/区间估计与假设检验/index.html","hash":"8ccbdbfe659542b70256c30f0739b9da50be0190","modified":1665576350185},{"_id":"public/tags/区间估计/index.html","hash":"a858f5a821a277aed19222a1ac24970f72561c17","modified":1665575781120},{"_id":"public/tags/假设检验/index.html","hash":"fbcf11b6b70e327f1920d01db5e6b254996362e2","modified":1665575781120}],"Category":[{"name":"C++","_id":"cl40x92nm0004p0u56hli83e6"},{"name":"前端","_id":"cl40x92nr000bp0u54ik14982"},{"name":"Python","_id":"cl40x92nt000fp0u5gpv66kbi"},{"name":"爬虫","parent":"cl40x92nt000fp0u5gpv66kbi","_id":"cl40x92nw000mp0u5cxrx01o4"},{"name":"计算机事半功倍","_id":"cl40x92o60018p0u5hbv524z0"},{"name":"数据结构与算法","_id":"cl40x92og001np0u5a9twgy85"},{"name":"Linux","_id":"cl40x92ol0023p0u5cswb43q6"},{"name":"计算机网络技术","_id":"cl46ktcq2000170u56dutc154"},{"name":"爬虫","_id":"cl49oroct0001tku5cl2f8kgn"},{"name":"考研数学","_id":"cl5nnhslq0001pgu5hjuq8s6d"}],"Data":[],"Page":[{"title":"个人简介","date":"2022-04-03T08:32:46.000Z","aubot":"Yoyo","layout":"about","portrait":"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220525150310647712.png","describe":null,"_content":"\n####  姓名 Name \n\n​\tHello，我叫`梁敏智`。我很多社交软件都使用 ***yoyo***作为昵称，当然***雨探青鸟***也是我常用的昵称。\n\n​\tHello, my name is `Minzhi Liang`. ***Yoyo*** is my screen name for many social media platforms, as is ***Yutan Jade Bird***.\n\n#### 身份 \t \n\n​\t我现在是一名来自***南京邮电大学***的***大学生***，一名小白程序猿。\n\n​\tNow, I'm a college student from ***Nanjing University of Posts and Telecommunications***, a rookie    programmer.\n\n#### 技能 Ability\n\n​\t我常用的语言有：英语（当然，这个对我来说很难）、`C/C++`、`Python`、`Matlab`。当然，`Java`、`HTML/CSS/JavaScript`、`MySQL`、`shell`等等，我也是能够熟练使用的。\n\n​\t常在`Windows`、`Linux`平台进行开发，我觉得`Linux`是一件很酷的事情。大学期间，与计算机、嵌入式和人工智能方面接触较多。\n\n> 经常使用`树莓派`系统，`STM32`单片机；\n>\n> 喜欢***算法***，会经常在***力扣***刷题；\n>\n> 参加过***数学建模***比赛，这也是我经常使用`Matlab`的原因；\n>\n> 使用过的`Linux`发行版有：`Ubuntu`、`Centos`、`Raspberry PI OS`、`Kali`等等;\n\n​\tI usually use the language: English (Oh, It's so difficult for me), `C/C++`、`Python`、`Matlab`. Certainly, `Java`、`HTML/CSS/JavaScript`、`MySQL`、`shell` and so on. They are that I am a master of using. \n\n​\t`Windows` and `Linux` are platforms which I usually  develop on. It's `Linux` that it a very cool thing. During the period of university, I have had much contact with computer、embedded system and AI.\n\n> Use Raspberry PI OS, STM32 MCU.\n>\n> Like data structures and algorithms, solve the algorithm problem on `leetcode`.\n>\n> Participating in mathematical modeling is why I usually use `Mathlab`.\n>\n> Used `Linux` release: `Ubuntu`、`Centos`、`Raspberry PI OS`、`Kali` and so on.\n\n","source":"about/index.md","raw":"---\ntitle: 个人简介\ndate: 2022-04-03 16:32:46\naubot: Yoyo\nlayout: \"about\"\nportrait: \"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220525150310647712.png\"\ndescribe: \n---\n\n####  姓名 Name \n\n​\tHello，我叫`梁敏智`。我很多社交软件都使用 ***yoyo***作为昵称，当然***雨探青鸟***也是我常用的昵称。\n\n​\tHello, my name is `Minzhi Liang`. ***Yoyo*** is my screen name for many social media platforms, as is ***Yutan Jade Bird***.\n\n#### 身份 \t \n\n​\t我现在是一名来自***南京邮电大学***的***大学生***，一名小白程序猿。\n\n​\tNow, I'm a college student from ***Nanjing University of Posts and Telecommunications***, a rookie    programmer.\n\n#### 技能 Ability\n\n​\t我常用的语言有：英语（当然，这个对我来说很难）、`C/C++`、`Python`、`Matlab`。当然，`Java`、`HTML/CSS/JavaScript`、`MySQL`、`shell`等等，我也是能够熟练使用的。\n\n​\t常在`Windows`、`Linux`平台进行开发，我觉得`Linux`是一件很酷的事情。大学期间，与计算机、嵌入式和人工智能方面接触较多。\n\n> 经常使用`树莓派`系统，`STM32`单片机；\n>\n> 喜欢***算法***，会经常在***力扣***刷题；\n>\n> 参加过***数学建模***比赛，这也是我经常使用`Matlab`的原因；\n>\n> 使用过的`Linux`发行版有：`Ubuntu`、`Centos`、`Raspberry PI OS`、`Kali`等等;\n\n​\tI usually use the language: English (Oh, It's so difficult for me), `C/C++`、`Python`、`Matlab`. Certainly, `Java`、`HTML/CSS/JavaScript`、`MySQL`、`shell` and so on. They are that I am a master of using. \n\n​\t`Windows` and `Linux` are platforms which I usually  develop on. It's `Linux` that it a very cool thing. During the period of university, I have had much contact with computer、embedded system and AI.\n\n> Use Raspberry PI OS, STM32 MCU.\n>\n> Like data structures and algorithms, solve the algorithm problem on `leetcode`.\n>\n> Participating in mathematical modeling is why I usually use `Mathlab`.\n>\n> Used `Linux` release: `Ubuntu`、`Centos`、`Raspberry PI OS`、`Kali` and so on.\n\n","updated":"2022-06-01T10:06:39.766Z","path":"about/index.html","comments":1,"_id":"cl40x92n80000p0u5h1vtddv2","content":"<h4 id=\"姓名-Name\"><a href=\"#姓名-Name\" class=\"headerlink\" title=\"姓名 Name\"></a>姓名 Name</h4><p>​    Hello，我叫<code>梁敏智</code>。我很多社交软件都使用 <strong><em>yoyo</em></strong>作为昵称，当然<strong><em>雨探青鸟</em></strong>也是我常用的昵称。</p>\n<p>​    Hello, my name is <code>Minzhi Liang</code>. <strong><em>Yoyo</em></strong> is my screen name for many social media platforms, as is <strong><em>Yutan Jade Bird</em></strong>.</p>\n<h4 id=\"身份\"><a href=\"#身份\" class=\"headerlink\" title=\"身份\"></a>身份</h4><p>​    我现在是一名来自<strong><em>南京邮电大学</em></strong>的<strong><em>大学生</em></strong>，一名小白程序猿。</p>\n<p>​    Now, I’m a college student from <strong><em>Nanjing University of Posts and Telecommunications</em></strong>, a rookie    programmer.</p>\n<h4 id=\"技能-Ability\"><a href=\"#技能-Ability\" class=\"headerlink\" title=\"技能 Ability\"></a>技能 Ability</h4><p>​    我常用的语言有：英语（当然，这个对我来说很难）、<code>C/C++</code>、<code>Python</code>、<code>Matlab</code>。当然，<code>Java</code>、<code>HTML/CSS/JavaScript</code>、<code>MySQL</code>、<code>shell</code>等等，我也是能够熟练使用的。</p>\n<p>​    常在<code>Windows</code>、<code>Linux</code>平台进行开发，我觉得<code>Linux</code>是一件很酷的事情。大学期间，与计算机、嵌入式和人工智能方面接触较多。</p>\n<blockquote>\n<p>经常使用<code>树莓派</code>系统，<code>STM32</code>单片机；</p>\n<p>喜欢<strong><em>算法</em></strong>，会经常在<strong><em>力扣</em></strong>刷题；</p>\n<p>参加过<strong><em>数学建模</em></strong>比赛，这也是我经常使用<code>Matlab</code>的原因；</p>\n<p>使用过的<code>Linux</code>发行版有：<code>Ubuntu</code>、<code>Centos</code>、<code>Raspberry PI OS</code>、<code>Kali</code>等等;</p>\n</blockquote>\n<p>​    I usually use the language: English (Oh, It’s so difficult for me), <code>C/C++</code>、<code>Python</code>、<code>Matlab</code>. Certainly, <code>Java</code>、<code>HTML/CSS/JavaScript</code>、<code>MySQL</code>、<code>shell</code> and so on. They are that I am a master of using. </p>\n<p>​    <code>Windows</code> and <code>Linux</code> are platforms which I usually  develop on. It’s <code>Linux</code> that it a very cool thing. During the period of university, I have had much contact with computer、embedded system and AI.</p>\n<blockquote>\n<p>Use Raspberry PI OS, STM32 MCU.</p>\n<p>Like data structures and algorithms, solve the algorithm problem on <code>leetcode</code>.</p>\n<p>Participating in mathematical modeling is why I usually use <code>Mathlab</code>.</p>\n<p>Used <code>Linux</code> release: <code>Ubuntu</code>、<code>Centos</code>、<code>Raspberry PI OS</code>、<code>Kali</code> and so on.</p>\n</blockquote>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h4 id=\"姓名-Name\"><a href=\"#姓名-Name\" class=\"headerlink\" title=\"姓名 Name\"></a>姓名 Name</h4><p>​    Hello，我叫<code>梁敏智</code>。我很多社交软件都使用 <strong><em>yoyo</em></strong>作为昵称，当然<strong><em>雨探青鸟</em></strong>也是我常用的昵称。</p>\n<p>​    Hello, my name is <code>Minzhi Liang</code>. <strong><em>Yoyo</em></strong> is my screen name for many social media platforms, as is <strong><em>Yutan Jade Bird</em></strong>.</p>\n<h4 id=\"身份\"><a href=\"#身份\" class=\"headerlink\" title=\"身份\"></a>身份</h4><p>​    我现在是一名来自<strong><em>南京邮电大学</em></strong>的<strong><em>大学生</em></strong>，一名小白程序猿。</p>\n<p>​    Now, I’m a college student from <strong><em>Nanjing University of Posts and Telecommunications</em></strong>, a rookie    programmer.</p>\n<h4 id=\"技能-Ability\"><a href=\"#技能-Ability\" class=\"headerlink\" title=\"技能 Ability\"></a>技能 Ability</h4><p>​    我常用的语言有：英语（当然，这个对我来说很难）、<code>C/C++</code>、<code>Python</code>、<code>Matlab</code>。当然，<code>Java</code>、<code>HTML/CSS/JavaScript</code>、<code>MySQL</code>、<code>shell</code>等等，我也是能够熟练使用的。</p>\n<p>​    常在<code>Windows</code>、<code>Linux</code>平台进行开发，我觉得<code>Linux</code>是一件很酷的事情。大学期间，与计算机、嵌入式和人工智能方面接触较多。</p>\n<blockquote>\n<p>经常使用<code>树莓派</code>系统，<code>STM32</code>单片机；</p>\n<p>喜欢<strong><em>算法</em></strong>，会经常在<strong><em>力扣</em></strong>刷题；</p>\n<p>参加过<strong><em>数学建模</em></strong>比赛，这也是我经常使用<code>Matlab</code>的原因；</p>\n<p>使用过的<code>Linux</code>发行版有：<code>Ubuntu</code>、<code>Centos</code>、<code>Raspberry PI OS</code>、<code>Kali</code>等等;</p>\n</blockquote>\n<p>​    I usually use the language: English (Oh, It’s so difficult for me), <code>C/C++</code>、<code>Python</code>、<code>Matlab</code>. Certainly, <code>Java</code>、<code>HTML/CSS/JavaScript</code>、<code>MySQL</code>、<code>shell</code> and so on. They are that I am a master of using. </p>\n<p>​    <code>Windows</code> and <code>Linux</code> are platforms which I usually  develop on. It’s <code>Linux</code> that it a very cool thing. During the period of university, I have had much contact with computer、embedded system and AI.</p>\n<blockquote>\n<p>Use Raspberry PI OS, STM32 MCU.</p>\n<p>Like data structures and algorithms, solve the algorithm problem on <code>leetcode</code>.</p>\n<p>Participating in mathematical modeling is why I usually use <code>Mathlab</code>.</p>\n<p>Used <code>Linux</code> release: <code>Ubuntu</code>、<code>Centos</code>、<code>Raspberry PI OS</code>、<code>Kali</code> and so on.</p>\n</blockquote>\n"},{"title":"分类","date":"2022-04-03T08:31:27.000Z","layout":"categories","author":"yoyo","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-04-03 16:31:27\nlayout: \"categories\"\nauthor: yoyo\n---\n","updated":"2022-04-05T11:40:37.545Z","path":"categories/index.html","comments":1,"_id":"cl40x92nf0002p0u5a6qs8cdi","content":"<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":""},{"title":"捐赠","date":"2022-04-17T15:00:02.000Z","_content":"\n\n\n## 捐赠\n\n​\t本人目前仍然是一名学生，靠着生活费支撑目前的博客服务器。\n\n​\t如果你愿意的话，可以为我捐赠。\n\n无论捐赠与不捐赠，有什么需要我帮助，有什么可以一起交流的，欢迎通过底部联系方式联系我。\n\n![微信收款码](https://imagere.oss-cn-beijing.aliyuncs.com/img/202204282357522.png)\n\n![支付宝收款码](https://imagere.oss-cn-beijing.aliyuncs.com/img/202204282357808.jpeg)\n\n\n\n","source":"donation/index.md","raw":"---\ntitle: 捐赠\ndate: 2022-04-17 23:00:02\n---\n\n\n\n## 捐赠\n\n​\t本人目前仍然是一名学生，靠着生活费支撑目前的博客服务器。\n\n​\t如果你愿意的话，可以为我捐赠。\n\n无论捐赠与不捐赠，有什么需要我帮助，有什么可以一起交流的，欢迎通过底部联系方式联系我。\n\n![微信收款码](https://imagere.oss-cn-beijing.aliyuncs.com/img/202204282357522.png)\n\n![支付宝收款码](https://imagere.oss-cn-beijing.aliyuncs.com/img/202204282357808.jpeg)\n\n\n\n","updated":"2022-05-17T05:41:15.217Z","path":"donation/index.html","comments":1,"layout":"page","_id":"cl40x92no0006p0u58shr18ba","content":"<h2 id=\"捐赠\"><a href=\"#捐赠\" class=\"headerlink\" title=\"捐赠\"></a>捐赠</h2><p>​    本人目前仍然是一名学生，靠着生活费支撑目前的博客服务器。</p>\n<p>​    如果你愿意的话，可以为我捐赠。</p>\n<p>无论捐赠与不捐赠，有什么需要我帮助，有什么可以一起交流的，欢迎通过底部联系方式联系我。</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202204282357522.png\" alt=\"微信收款码\"></p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202204282357808.jpeg\" alt=\"支付宝收款码\"></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h2 id=\"捐赠\"><a href=\"#捐赠\" class=\"headerlink\" title=\"捐赠\"></a>捐赠</h2><p>​    本人目前仍然是一名学生，靠着生活费支撑目前的博客服务器。</p>\n<p>​    如果你愿意的话，可以为我捐赠。</p>\n<p>无论捐赠与不捐赠，有什么需要我帮助，有什么可以一起交流的，欢迎通过底部联系方式联系我。</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202204282357522.png\" alt=\"微信收款码\"></p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202204282357808.jpeg\" alt=\"支付宝收款码\"></p>\n"},{"title":"友情链接","date":"2022-04-05T07:36:05.000Z","layout":"links","author":"yoyo","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2022-04-05 15:36:05\nlayout: \"links\"\nauthor: yoyo\n---\n","updated":"2022-04-05T10:55:07.978Z","path":"links/index.html","comments":1,"_id":"cl40x92np0008p0u5gw45bd2f","content":"<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":""},{"title":"照片墙","date":"2022-04-03T08:32:46.000Z","aubot":"Yoyo","portrait":"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051857441.png","describe":null,"_content":"\n\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026419560.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026737811.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026995371.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161027152131.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161027400162.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161052824404.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053072821.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053235551.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053425927.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053606476.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053810024.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054024125.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054167067.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054313304.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054521119.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054769185.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055038260.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055294991.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055508603.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055815803.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055985140.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056230703.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056414082.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056688793.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056922727.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057151611.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057477902.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057612049.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057849739.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058083932.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058271374.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058515121.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058761903.jpg)\n\n","source":"photo/index.md","raw":"---\n# title: 照片墙\n# date: 2022-04-17 22:59:51\n# layout: \"photos\"\n# type: photot\ntitle: 照片墙\ndate: 2022-04-03 16:32:46\naubot: Yoyo\nportrait: \"https://raw.githubusercontent.com/MinzhiYoyo/ImageHost/main/202204051857441.png\"\ndescribe: \n---\n\n\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026419560.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026737811.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026995371.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161027152131.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161027400162.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161052824404.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053072821.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053235551.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053425927.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053606476.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053810024.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054024125.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054167067.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054313304.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054521119.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054769185.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055038260.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055294991.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055508603.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055815803.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055985140.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056230703.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056414082.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056688793.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056922727.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057151611.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057477902.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057612049.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057849739.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058083932.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058271374.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058515121.jpg)\n![图片无法加载](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058761903.jpg)\n\n","updated":"2022-04-28T15:42:43.329Z","path":"photo/index.html","comments":1,"layout":"page","_id":"cl40x92nr000ap0u553kb1sv1","content":"<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026419560.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026737811.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026995371.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161027152131.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161027400162.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161052824404.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053072821.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053235551.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053425927.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053606476.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053810024.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054024125.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054167067.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054313304.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054521119.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054769185.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055038260.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055294991.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055508603.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055815803.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055985140.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056230703.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056414082.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056688793.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056922727.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057151611.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057477902.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057612049.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057849739.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058083932.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058271374.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058515121.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058761903.jpg\" alt=\"图片无法加载\"></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026419560.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026737811.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161026995371.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161027152131.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161027400162.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161052824404.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053072821.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053235551.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053425927.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053606476.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161053810024.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054024125.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054167067.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054313304.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054521119.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161054769185.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055038260.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055294991.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055508603.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055815803.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161055985140.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056230703.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056414082.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056688793.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161056922727.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057151611.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057477902.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057612049.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161057849739.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058083932.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058271374.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058515121.jpg\" alt=\"图片无法加载\"><br><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220425161058761903.jpg\" alt=\"图片无法加载\"></p>\n"},{"title":"标签","date":"2022-04-03T08:10:46.000Z","layout":"tags","author":"yoyo","_content":"\n# 选择下列你喜欢的标签吧\n\n\n","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2022-04-03 16:10:46\nlayout: \"tags\"\nauthor: yoyo\n---\n\n# 选择下列你喜欢的标签吧\n\n\n","updated":"2022-04-05T10:53:50.436Z","path":"tags/index.html","comments":1,"_id":"cl40x92ns000dp0u5g7zuh7ny","content":"<h1 id=\"选择下列你喜欢的标签吧\"><a href=\"#选择下列你喜欢的标签吧\" class=\"headerlink\" title=\"选择下列你喜欢的标签吧\"></a>选择下列你喜欢的标签吧</h1><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h1 id=\"选择下列你喜欢的标签吧\"><a href=\"#选择下列你喜欢的标签吧\" class=\"headerlink\" title=\"选择下列你喜欢的标签吧\"></a>选择下列你喜欢的标签吧</h1>"}],"Post":[{"title":"C++ with lambda","excerpt":"简单介绍一下 C++ lambda的用法","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205182109394.png","date":"2022-05-18T12:41:06.000Z","_content":"\n# 什么是`λ`演算\n\n  首先，这个`λ`演算是非常牛逼的一个东西，可以看一下[维基百科——λ](https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97)的介绍\n\n# `C++` 适用 `λ` 表达式\n\n  众所周知，如果一个工程中用了很多函数名，最终会导致命名污染。\n\t\n  不妨假设如下场景，如果你有一个函数，需要重复写一段代码，你会选择将这段代码封装成另一个函数`FUN`。但是，一个函数就需要一个名字，你封装成的另一个函数`FUN`就需要一个名字，但是这个`FUN`函数，你在其他地方又用不到了，那么就可以尝试适用匿名函数来实现了。\n\n## 简单用法\n\n```c++\nint function() {\n\tauto add = [](int a, int b){\n        if(a % 2) return a+b;\n        return a;\n    };\n\tcout << add(3,4);\n\treturn 0;\n}\n\n// 上面这个结果就会输出 7\n// 用到这里你会发现lambda没有什么牛逼之处\n// 但是，如果你不想这个add函数在外部用到，而仅仅是function函数中使用\n// 那么它将带来很大的遍历，你不需要考虑如何去命名\n```\n\n## 细节用法\n\n​\t可能不太理解为什么像上述写法这么写 `[](){}`，这个为什么构成`lambda`表达式\n\n- `[]`部分：这里是表示捕获部分，为什么需要捕获呢？\n\n  > 因为`add`函数也许需要用到`function`函数中的东西。\n  >\n  > 有人发出疑问？不是可以传参吗？\n  >\n  > 但是，传参造成了很多不必要的麻烦，如：你需要先声明传参类型，然后你一般需要传引用，最后导致参数列表变得冗长\n  >\n  > 而`[]`很好的解决这个问题\n  >\n  > - `[]`：为空，那么就是不捕获任何参数，就是`lambda`表达式中不能使用外部的变量\n  > - `[=]`：值捕获，并且捕获所有变量\n  > - `[&]`：引用捕获，也是捕获所有变量\n  > - `[this]`：捕获当前的类的指针\n  > - `[a]`：只捕获`a`的值\n  > - `[&a]`：捕获`a`的引用\n  > - `[=, &a, &b]`：除了`a,b`引用传递外，其余的值传递\n  > - `[&, a, b]`：除了`a,b`值传递外，其余的引用传递\n\n- `()`部分：这里是参数列表，和普通函数一样，值传递和引用传递都可以\n\n- `{}`部分：代码块\n\n---\n\n​\t除此之外，还和普通函数一样，有说明符和返回值的约束。\n\n```c++\n// 说明符的介绍\nauto f = [&]() mutable\n{\n    return 1;\n}\n```\n\n- `mutable`：允许 函数体 修改各个复制捕获的对象，以及调用其非 `const` 成员函数；\n- `constexpr`：显式指定函数调用运算符为 `constexpr`函数。此说明符不存在时，若函数调用运算符恰好满足针对 `constexpr`函数的所有要求，则它也会是 `constexpr`； (C++17 起)\n- `consteval`：指定函数调用运算符为立即函数。不能同时使用 `consteval` 和 `constexpr`。(C++20 起)\n\n```c++\n// 返回值介绍\n// 限制返回 int\nauto f = [&]() -> int\n{\n    return 1;\n}\n```\n\n## 补充说明\n\n​\t有人发现了，前面都是使用`auto`关键词声明的，那么可不可以声明为具体类型了，答案是***也可以***的。既然是匿名函数，肯定没有固定的`typeid`，经过测试，那怕完全相同的两个函数，其`typeid`都是***不一样***的。就像`int a = 1; int b = 1;`中`a,b`不是用一个东西，仅仅是两个变量的值一样，但是`a,b`的`typeid`是一样的。`auto f1 = [](){}; auto f2 = [](){};`中，`f1, f2`他们仅仅是地址对应的值相同而已，都是只执行了`[](){}`这个函数。\n\n​\t但是，前面说可以声明为具体类型，那么，该怎么实现呢？答案是：***函数指针***\n\n- 注意，这里的返回值`-> int`不能省略\n- 而且，如果下述实现，是有`typeid(f)==typeid(g)`\n- 并且还有`typeid(f) == typeid(g) == typeid(h)`\n- 至于这个为什么呢？我也没有想明白这些，之后再努力看看才行。\n\n```c++\nint (*f)() = []() -> int {return 1;};\nint (*g)() = []() -> int {return 1;};\n\nint a(){return 1;}\nint (*h)() = a; // 也可写做 int(*h)() = &a; 因为函数名本来就是地址\n```\n\n","source":"_posts/C-with-lambda.md","raw":"---\ntitle: C++ with lambda\ntags: \n- C++\n- λ\n- lambda\nexcerpt: 简单介绍一下 C++ lambda的用法\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202205182109394.png\ncategories: C++\ndate: 2022-05-18 20:41:06\n---\n\n# 什么是`λ`演算\n\n  首先，这个`λ`演算是非常牛逼的一个东西，可以看一下[维基百科——λ](https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97)的介绍\n\n# `C++` 适用 `λ` 表达式\n\n  众所周知，如果一个工程中用了很多函数名，最终会导致命名污染。\n\t\n  不妨假设如下场景，如果你有一个函数，需要重复写一段代码，你会选择将这段代码封装成另一个函数`FUN`。但是，一个函数就需要一个名字，你封装成的另一个函数`FUN`就需要一个名字，但是这个`FUN`函数，你在其他地方又用不到了，那么就可以尝试适用匿名函数来实现了。\n\n## 简单用法\n\n```c++\nint function() {\n\tauto add = [](int a, int b){\n        if(a % 2) return a+b;\n        return a;\n    };\n\tcout << add(3,4);\n\treturn 0;\n}\n\n// 上面这个结果就会输出 7\n// 用到这里你会发现lambda没有什么牛逼之处\n// 但是，如果你不想这个add函数在外部用到，而仅仅是function函数中使用\n// 那么它将带来很大的遍历，你不需要考虑如何去命名\n```\n\n## 细节用法\n\n​\t可能不太理解为什么像上述写法这么写 `[](){}`，这个为什么构成`lambda`表达式\n\n- `[]`部分：这里是表示捕获部分，为什么需要捕获呢？\n\n  > 因为`add`函数也许需要用到`function`函数中的东西。\n  >\n  > 有人发出疑问？不是可以传参吗？\n  >\n  > 但是，传参造成了很多不必要的麻烦，如：你需要先声明传参类型，然后你一般需要传引用，最后导致参数列表变得冗长\n  >\n  > 而`[]`很好的解决这个问题\n  >\n  > - `[]`：为空，那么就是不捕获任何参数，就是`lambda`表达式中不能使用外部的变量\n  > - `[=]`：值捕获，并且捕获所有变量\n  > - `[&]`：引用捕获，也是捕获所有变量\n  > - `[this]`：捕获当前的类的指针\n  > - `[a]`：只捕获`a`的值\n  > - `[&a]`：捕获`a`的引用\n  > - `[=, &a, &b]`：除了`a,b`引用传递外，其余的值传递\n  > - `[&, a, b]`：除了`a,b`值传递外，其余的引用传递\n\n- `()`部分：这里是参数列表，和普通函数一样，值传递和引用传递都可以\n\n- `{}`部分：代码块\n\n---\n\n​\t除此之外，还和普通函数一样，有说明符和返回值的约束。\n\n```c++\n// 说明符的介绍\nauto f = [&]() mutable\n{\n    return 1;\n}\n```\n\n- `mutable`：允许 函数体 修改各个复制捕获的对象，以及调用其非 `const` 成员函数；\n- `constexpr`：显式指定函数调用运算符为 `constexpr`函数。此说明符不存在时，若函数调用运算符恰好满足针对 `constexpr`函数的所有要求，则它也会是 `constexpr`； (C++17 起)\n- `consteval`：指定函数调用运算符为立即函数。不能同时使用 `consteval` 和 `constexpr`。(C++20 起)\n\n```c++\n// 返回值介绍\n// 限制返回 int\nauto f = [&]() -> int\n{\n    return 1;\n}\n```\n\n## 补充说明\n\n​\t有人发现了，前面都是使用`auto`关键词声明的，那么可不可以声明为具体类型了，答案是***也可以***的。既然是匿名函数，肯定没有固定的`typeid`，经过测试，那怕完全相同的两个函数，其`typeid`都是***不一样***的。就像`int a = 1; int b = 1;`中`a,b`不是用一个东西，仅仅是两个变量的值一样，但是`a,b`的`typeid`是一样的。`auto f1 = [](){}; auto f2 = [](){};`中，`f1, f2`他们仅仅是地址对应的值相同而已，都是只执行了`[](){}`这个函数。\n\n​\t但是，前面说可以声明为具体类型，那么，该怎么实现呢？答案是：***函数指针***\n\n- 注意，这里的返回值`-> int`不能省略\n- 而且，如果下述实现，是有`typeid(f)==typeid(g)`\n- 并且还有`typeid(f) == typeid(g) == typeid(h)`\n- 至于这个为什么呢？我也没有想明白这些，之后再努力看看才行。\n\n```c++\nint (*f)() = []() -> int {return 1;};\nint (*g)() = []() -> int {return 1;};\n\nint a(){return 1;}\nint (*h)() = a; // 也可写做 int(*h)() = &a; 因为函数名本来就是地址\n```\n\n","slug":"C-with-lambda","published":1,"updated":"2022-05-19T08:53:28.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl40x92nb0001p0u5ebhv62iy","content":"<h1 id=\"什么是λ演算\"><a href=\"#什么是λ演算\" class=\"headerlink\" title=\"什么是λ演算\"></a>什么是<code>λ</code>演算</h1><p>  首先，这个<code>λ</code>演算是非常牛逼的一个东西，可以看一下<a href=\"https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97\">维基百科——λ</a>的介绍</p>\n<h1 id=\"C-适用-λ-表达式\"><a href=\"#C-适用-λ-表达式\" class=\"headerlink\" title=\"C++ 适用 λ 表达式\"></a><code>C++</code> 适用 <code>λ</code> 表达式</h1><p>  众所周知，如果一个工程中用了很多函数名，最终会导致命名污染。</p>\n<p>  不妨假设如下场景，如果你有一个函数，需要重复写一段代码，你会选择将这段代码封装成另一个函数<code>FUN</code>。但是，一个函数就需要一个名字，你封装成的另一个函数<code>FUN</code>就需要一个名字，但是这个<code>FUN</code>函数，你在其他地方又用不到了，那么就可以尝试适用匿名函数来实现了。</p>\n<h2 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">function</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> add = [](<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a % <span class=\"number\">2</span>) <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">add</span>(<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面这个结果就会输出 7</span></span><br><span class=\"line\"><span class=\"comment\">// 用到这里你会发现lambda没有什么牛逼之处</span></span><br><span class=\"line\"><span class=\"comment\">// 但是，如果你不想这个add函数在外部用到，而仅仅是function函数中使用</span></span><br><span class=\"line\"><span class=\"comment\">// 那么它将带来很大的遍历，你不需要考虑如何去命名</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"细节用法\"><a href=\"#细节用法\" class=\"headerlink\" title=\"细节用法\"></a>细节用法</h2><p>​    可能不太理解为什么像上述写法这么写 <code>[]()&#123;&#125;</code>，这个为什么构成<code>lambda</code>表达式</p>\n<ul>\n<li><p><code>[]</code>部分：这里是表示捕获部分，为什么需要捕获呢？</p>\n<blockquote>\n<p>因为<code>add</code>函数也许需要用到<code>function</code>函数中的东西。</p>\n<p>有人发出疑问？不是可以传参吗？</p>\n<p>但是，传参造成了很多不必要的麻烦，如：你需要先声明传参类型，然后你一般需要传引用，最后导致参数列表变得冗长</p>\n<p>而<code>[]</code>很好的解决这个问题</p>\n<ul>\n<li><code>[]</code>：为空，那么就是不捕获任何参数，就是<code>lambda</code>表达式中不能使用外部的变量</li>\n<li><code>[=]</code>：值捕获，并且捕获所有变量</li>\n<li><code>[&amp;]</code>：引用捕获，也是捕获所有变量</li>\n<li><code>[this]</code>：捕获当前的类的指针</li>\n<li><code>[a]</code>：只捕获<code>a</code>的值</li>\n<li><code>[&amp;a]</code>：捕获<code>a</code>的引用</li>\n<li><code>[=, &amp;a, &amp;b]</code>：除了<code>a,b</code>引用传递外，其余的值传递</li>\n<li><code>[&amp;, a, b]</code>：除了<code>a,b</code>值传递外，其余的引用传递</li>\n</ul>\n</blockquote>\n</li>\n<li><p><code>()</code>部分：这里是参数列表，和普通函数一样，值传递和引用传递都可以</p>\n</li>\n<li><p><code>&#123;&#125;</code>部分：代码块</p>\n</li>\n</ul>\n<hr>\n<p>​    除此之外，还和普通函数一样，有说明符和返回值的约束。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 说明符的介绍</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> f = [&amp;]() <span class=\"keyword\">mutable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>mutable</code>：允许 函数体 修改各个复制捕获的对象，以及调用其非 <code>const</code> 成员函数；</li>\n<li><code>constexpr</code>：显式指定函数调用运算符为 <code>constexpr</code>函数。此说明符不存在时，若函数调用运算符恰好满足针对 <code>constexpr</code>函数的所有要求，则它也会是 <code>constexpr</code>； (C++17 起)</li>\n<li><code>consteval</code>：指定函数调用运算符为立即函数。不能同时使用 <code>consteval</code> 和 <code>constexpr</code>。(C++20 起)</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回值介绍</span></span><br><span class=\"line\"><span class=\"comment\">// 限制返回 int</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> f = [&amp;]() -&gt; <span class=\"type\">int</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h2><p>​    有人发现了，前面都是使用<code>auto</code>关键词声明的，那么可不可以声明为具体类型了，答案是<strong><em>也可以</em></strong>的。既然是匿名函数，肯定没有固定的<code>typeid</code>，经过测试，那怕完全相同的两个函数，其<code>typeid</code>都是<strong><em>不一样</em></strong>的。就像<code>int a = 1; int b = 1;</code>中<code>a,b</code>不是用一个东西，仅仅是两个变量的值一样，但是<code>a,b</code>的<code>typeid</code>是一样的。<code>auto f1 = []()&#123;&#125;; auto f2 = []()&#123;&#125;;</code>中，<code>f1, f2</code>他们仅仅是地址对应的值相同而已，都是只执行了<code>[]()&#123;&#125;</code>这个函数。</p>\n<p>​    但是，前面说可以声明为具体类型，那么，该怎么实现呢？答案是：<strong><em>函数指针</em></strong></p>\n<ul>\n<li>注意，这里的返回值<code>-&gt; int</code>不能省略</li>\n<li>而且，如果下述实现，是有<code>typeid(f)==typeid(g)</code></li>\n<li>并且还有<code>typeid(f) == typeid(g) == typeid(h)</code></li>\n<li>至于这个为什么呢？我也没有想明白这些，之后再努力看看才行。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> (*f)() = []() -&gt; <span class=\"type\">int</span> &#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">int</span> (*g)() = []() -&gt; <span class=\"type\">int</span> &#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"built_in\">int</span> (*h)() = a; <span class=\"comment\">// 也可写做 int(*h)() = &amp;a; 因为函数名本来就是地址</span></span><br></pre></td></tr></table></figure>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"什么是λ演算\"><a href=\"#什么是λ演算\" class=\"headerlink\" title=\"什么是λ演算\"></a>什么是<code>λ</code>演算</h1><p>  首先，这个<code>λ</code>演算是非常牛逼的一个东西，可以看一下<a href=\"https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97\">维基百科——λ</a>的介绍</p>\n<h1 id=\"C-适用-λ-表达式\"><a href=\"#C-适用-λ-表达式\" class=\"headerlink\" title=\"C++ 适用 λ 表达式\"></a><code>C++</code> 适用 <code>λ</code> 表达式</h1><p>  众所周知，如果一个工程中用了很多函数名，最终会导致命名污染。</p>\n<p>  不妨假设如下场景，如果你有一个函数，需要重复写一段代码，你会选择将这段代码封装成另一个函数<code>FUN</code>。但是，一个函数就需要一个名字，你封装成的另一个函数<code>FUN</code>就需要一个名字，但是这个<code>FUN</code>函数，你在其他地方又用不到了，那么就可以尝试适用匿名函数来实现了。</p>\n<h2 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">function</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> add = [](<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a % <span class=\"number\">2</span>) <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">add</span>(<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面这个结果就会输出 7</span></span><br><span class=\"line\"><span class=\"comment\">// 用到这里你会发现lambda没有什么牛逼之处</span></span><br><span class=\"line\"><span class=\"comment\">// 但是，如果你不想这个add函数在外部用到，而仅仅是function函数中使用</span></span><br><span class=\"line\"><span class=\"comment\">// 那么它将带来很大的遍历，你不需要考虑如何去命名</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"细节用法\"><a href=\"#细节用法\" class=\"headerlink\" title=\"细节用法\"></a>细节用法</h2><p>​    可能不太理解为什么像上述写法这么写 <code>[]()&#123;&#125;</code>，这个为什么构成<code>lambda</code>表达式</p>\n<ul>\n<li><p><code>[]</code>部分：这里是表示捕获部分，为什么需要捕获呢？</p>\n<blockquote>\n<p>因为<code>add</code>函数也许需要用到<code>function</code>函数中的东西。</p>\n<p>有人发出疑问？不是可以传参吗？</p>\n<p>但是，传参造成了很多不必要的麻烦，如：你需要先声明传参类型，然后你一般需要传引用，最后导致参数列表变得冗长</p>\n<p>而<code>[]</code>很好的解决这个问题</p>\n<ul>\n<li><code>[]</code>：为空，那么就是不捕获任何参数，就是<code>lambda</code>表达式中不能使用外部的变量</li>\n<li><code>[=]</code>：值捕获，并且捕获所有变量</li>\n<li><code>[&amp;]</code>：引用捕获，也是捕获所有变量</li>\n<li><code>[this]</code>：捕获当前的类的指针</li>\n<li><code>[a]</code>：只捕获<code>a</code>的值</li>\n<li><code>[&amp;a]</code>：捕获<code>a</code>的引用</li>\n<li><code>[=, &amp;a, &amp;b]</code>：除了<code>a,b</code>引用传递外，其余的值传递</li>\n<li><code>[&amp;, a, b]</code>：除了<code>a,b</code>值传递外，其余的引用传递</li>\n</ul>\n</blockquote>\n</li>\n<li><p><code>()</code>部分：这里是参数列表，和普通函数一样，值传递和引用传递都可以</p>\n</li>\n<li><p><code>&#123;&#125;</code>部分：代码块</p>\n</li>\n</ul>\n<hr>\n<p>​    除此之外，还和普通函数一样，有说明符和返回值的约束。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 说明符的介绍</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> f = [&amp;]() <span class=\"keyword\">mutable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>mutable</code>：允许 函数体 修改各个复制捕获的对象，以及调用其非 <code>const</code> 成员函数；</li>\n<li><code>constexpr</code>：显式指定函数调用运算符为 <code>constexpr</code>函数。此说明符不存在时，若函数调用运算符恰好满足针对 <code>constexpr</code>函数的所有要求，则它也会是 <code>constexpr</code>； (C++17 起)</li>\n<li><code>consteval</code>：指定函数调用运算符为立即函数。不能同时使用 <code>consteval</code> 和 <code>constexpr</code>。(C++20 起)</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回值介绍</span></span><br><span class=\"line\"><span class=\"comment\">// 限制返回 int</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> f = [&amp;]() -&gt; <span class=\"type\">int</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h2><p>​    有人发现了，前面都是使用<code>auto</code>关键词声明的，那么可不可以声明为具体类型了，答案是<strong><em>也可以</em></strong>的。既然是匿名函数，肯定没有固定的<code>typeid</code>，经过测试，那怕完全相同的两个函数，其<code>typeid</code>都是<strong><em>不一样</em></strong>的。就像<code>int a = 1; int b = 1;</code>中<code>a,b</code>不是用一个东西，仅仅是两个变量的值一样，但是<code>a,b</code>的<code>typeid</code>是一样的。<code>auto f1 = []()&#123;&#125;; auto f2 = []()&#123;&#125;;</code>中，<code>f1, f2</code>他们仅仅是地址对应的值相同而已，都是只执行了<code>[]()&#123;&#125;</code>这个函数。</p>\n<p>​    但是，前面说可以声明为具体类型，那么，该怎么实现呢？答案是：<strong><em>函数指针</em></strong></p>\n<ul>\n<li>注意，这里的返回值<code>-&gt; int</code>不能省略</li>\n<li>而且，如果下述实现，是有<code>typeid(f)==typeid(g)</code></li>\n<li>并且还有<code>typeid(f) == typeid(g) == typeid(h)</code></li>\n<li>至于这个为什么呢？我也没有想明白这些，之后再努力看看才行。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> (*f)() = []() -&gt; <span class=\"type\">int</span> &#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">int</span> (*g)() = []() -&gt; <span class=\"type\">int</span> &#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"built_in\">int</span> (*h)() = a; <span class=\"comment\">// 也可写做 int(*h)() = &amp;a; 因为函数名本来就是地址</span></span><br></pre></td></tr></table></figure>\n"},{"title":"GitHub 部署个人博客","cover":"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141326085663.png","date":"2022-04-05T13:13:20.000Z","excerpt":"借助GitHub的力量，部署好自己的个人博客","_content":"\n教程适用于`Windows`\n\n---\n\n# 安装\n\n## 1、安装`node.js`\n\n​\t`hexo`是基于`node.js`的，所以需要先安装`node.js`\n\n​\t直接去[官网](https://nodejs.org/zh-cn/)下载对应你电脑版本的安装即可\n\n## 2、安装`hexo`\n\n[官网参考文档](https://hexo.io/zh-cn/docs/)，可以参考一下\n\n```shell\nnpm install -g hexo-cli  # 安装hexo\n# 这一步往往需要科学上网，不然会非常慢\n# 也有的教程是说改国内镜像源\n# 但是适用国内镜像源会出一点小问题，所以我用了官网镜像源\n```\n\n出现下面就算成功了\n\n![image-20220405213817866](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141328100824.png)\n\n---\n\n# 创建博客\n\n## 1、初始化\n\n```shell\n# 生成一个名为 folder 的文件夹\n# 这个文件夹里面就是你的博客了\nhexo init <folder>\ncd <folder>  # 切花到这个文件夹下\n```\n\n## 2、文件结构\n\n```shell\n.\n|—— _config.yml  # 配置文件\n|—— package.json # 配置文件\n|—— scaffolds # 生成的markdown模板\n|—— source # 资源文件，图片或者文章都在这\n|\t|—— _posts # 文章\n|—— themes # 主题\n```\n\n## 3、下载主题\n\n​\t每个主题的用法有些许不一样，主题一般会给出官方用法，我们去到[主题网](https://hexo.io/themes/)下载自己喜欢的主题即可\n\n​\t我使用的主题叫做`quiet`，所以接下来会使用这个主题作为教程，其他主题操作类似\n\n​\t下载下来的主题，放到 `themes` 目录下，**如图所示**，我这里下载了多个主题，有一个就够了\n\n![image-20220405215544804](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141328691309.png)\n\n## 4、测试\n\n​\t首先，我们先到本地测试，记住三条命令即可，随便找一个终端，切换到上述`<folder>`目录即可。\n\n​\t发布，记住一条命令即可。\n\n- **生成网页**\n\n```shell\nhexo g  # 我们发现根目录下有 public 文件夹\nhexo server # 生成服务\n# 然后浏览器访问 https://localhost:4000即可\n```\n\n​\t下图是我的文件根目录结构，只需要注意**红框**里面的即可。\n\n![image-20220405215423041](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141329444279.png)\n\n---\n\n# 配置\n\n## 1、更改`hexo`博客的配置\n\n​\t更改`./_config.yml`的文件内容\n\n```yaml\n# 第5行处\n# Site\ntitle: # 网站标题\nsubtitle: ''\ndescription: '' # 简单介绍\nkeywords:\nauthor: # 作者\nlanguage: zh-CN\ntimezone: ''\n\n# 第100行左右\ntheme: quiet # 更改为自己的主题名字，themes/<主题文件夹名>\n# 使用这个后面<主题文件夹名>就可以\n```\n\n\n\n## 2、更改`quiet`主题的配置\n\n​\t更改文件**`themes/<主题文件夹>/_config.yml`**，这个是更改主题的配置，这里要根据自己的主题来。\n\n​\t每个主题都不一样，只能作为参考，不能完全照抄。\n\n- **基础设置**\n\n​\t图片修改**`themes/<folder>/source/image/`**下面的图片即可，最好**长宽比例**不要变，不然丑，哈哈哈\n\n```yaml\n# 网站标题\ntitle: 主页\n# 网站标题后缀\nsuffix: 雨探青鸟\n# 作者名称(会显示在首页文章下面)\nauthor: MINZHI\n# 首页简介（显示在首页顶部Logo的那句话）\nhome_describe: 我   想    读    研    究   生\n# 网站关键字\nkeyword: 雨探青鸟的博客\nis_article_img: false  #false是否开启文章背景图显示(随机图片)\n# 网站描述\nweb_description: 雨探青鸟的个人博客\n\n# logo\nlogo: /image/logo.png  # 我更改了自己的图片\n# 网页标签上那个小图标 一定要用本地存储\nicon: /image/favicon.ico # 我也更改了自己的icon\n##### 上面的话，没有啥好讲的\n#### 对应着下图的一些东西\n```\n\n![image-20220405222601632](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141330103935.png)\n\n![image-20220405222631005](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141330623947.png)\n\n\n\n- **导航栏设置**\n\n```yaml\n# 导航名称，原版是英文，我修改为中文\nmenus_title:\n  home: 主页\n  archive: 档案\n  categories: 分类\n  tags: 标签\n  links: 友链\n  about: 关于\n```\n\n![image-20220405222935475](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141331126724.png)\n\n\n\n- **图标设置**\n\n图标我是在[阿里巴巴](https://www.iconfont.cn/)上面找到的\n\n```yaml\n# 这里我用的我自己图床里面的文件，如果想知道怎么配置图床，可以看我的另一篇博客\ntopIcon:\n  homeIcon: \"/image/logo.png\"  # 这个只能使用本地的文件，不然会有点问题\n  archivesIcon: \"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141332059694.png\"\n  tagIcon: \"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141332501326.png\"\n  linksIcon: \"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141332918685.png\"\n  categoriesIcon: \"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141333506277.png\"\n # 列如下图\n```\n\n![image-20220405223336833](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141452539019.png)\n\n- **访问量统计**\n\n​\t我用的是不蒜子做的，原本的主题没有加入访问量统计的插件。我改了一下代码，对于一般主题都适用。\n\n​\t当然，如果你下载的主题有访问量统计，只需要配置一下就行。\n\n**`_config.yml`**文件修改：\n\n```yaml\n# 网页访问统计\nweb_analytics:  \n  enable: true #需要改为true\n  baidu: https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js  # 不蒜子\n```\n\n**`themes/<folder>/layout/_partial/foot.ejs`**文件修改：\n\n```javascript\n<div class=\"Copyright\">\n\t©<%= new Date().getFullYear() %> By <%- theme.author %>.    本站总访问量：\n\t<script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\t<span id=\"busuanzi_container_site_pv\"><span id=\"busuanzi_value_site_pv\"></span>次</span>\n</div>\n<!--这个是更改过的，注意上面第3 4行，这个是重点-->\n```\n\n\n\n- **底部图标**\n\n```yaml\n# 底部显示的图标（github 或者其他）\nbottomIcon: \n  #可以多个\n  - {\n    #描述名称\n    name: 'Github',\n    #图标    \n    iconLink: 'http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141453283429.png',\n    #跳转链接    \n    toUrl: 'https://github.com/MinzhiYoyo'\n  }\n```\n\n- **友情链接**\n\n```yaml\n# 友情链接\nlinksList:\n  - {\n    title: '本项目仓库', # 名字\n    intro: '包含源码和发布文件', # 简单的描述\n    link: 'https://github.com/MinzhiYoyo/MinzhiYoyo.github.io', # 跳转链接\n    image: 'http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141453792920.jpg' # 图片链接\n  }\n```\n\n# 发布\n\n## 1、`GitHub`配置\n\n## 2、配置`token`\n\n## 3、上传\n\n ```shell\n# 上述配置完成\nhexo g -d  # 一条命令上传了\n ```\n\n","source":"_posts/GitHub-部署个人博客.md","raw":"---\ntitle: GitHub 部署个人博客\ncover: 'http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141326085663.png'\ndate: 2022-04-05 21:13:20\ntags: \n  - 前端\n  - GitHub\n  - Hexo\nexcerpt: 借助GitHub的力量，部署好自己的个人博客\ncategories: 前端\n\n\n---\n\n教程适用于`Windows`\n\n---\n\n# 安装\n\n## 1、安装`node.js`\n\n​\t`hexo`是基于`node.js`的，所以需要先安装`node.js`\n\n​\t直接去[官网](https://nodejs.org/zh-cn/)下载对应你电脑版本的安装即可\n\n## 2、安装`hexo`\n\n[官网参考文档](https://hexo.io/zh-cn/docs/)，可以参考一下\n\n```shell\nnpm install -g hexo-cli  # 安装hexo\n# 这一步往往需要科学上网，不然会非常慢\n# 也有的教程是说改国内镜像源\n# 但是适用国内镜像源会出一点小问题，所以我用了官网镜像源\n```\n\n出现下面就算成功了\n\n![image-20220405213817866](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141328100824.png)\n\n---\n\n# 创建博客\n\n## 1、初始化\n\n```shell\n# 生成一个名为 folder 的文件夹\n# 这个文件夹里面就是你的博客了\nhexo init <folder>\ncd <folder>  # 切花到这个文件夹下\n```\n\n## 2、文件结构\n\n```shell\n.\n|—— _config.yml  # 配置文件\n|—— package.json # 配置文件\n|—— scaffolds # 生成的markdown模板\n|—— source # 资源文件，图片或者文章都在这\n|\t|—— _posts # 文章\n|—— themes # 主题\n```\n\n## 3、下载主题\n\n​\t每个主题的用法有些许不一样，主题一般会给出官方用法，我们去到[主题网](https://hexo.io/themes/)下载自己喜欢的主题即可\n\n​\t我使用的主题叫做`quiet`，所以接下来会使用这个主题作为教程，其他主题操作类似\n\n​\t下载下来的主题，放到 `themes` 目录下，**如图所示**，我这里下载了多个主题，有一个就够了\n\n![image-20220405215544804](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141328691309.png)\n\n## 4、测试\n\n​\t首先，我们先到本地测试，记住三条命令即可，随便找一个终端，切换到上述`<folder>`目录即可。\n\n​\t发布，记住一条命令即可。\n\n- **生成网页**\n\n```shell\nhexo g  # 我们发现根目录下有 public 文件夹\nhexo server # 生成服务\n# 然后浏览器访问 https://localhost:4000即可\n```\n\n​\t下图是我的文件根目录结构，只需要注意**红框**里面的即可。\n\n![image-20220405215423041](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141329444279.png)\n\n---\n\n# 配置\n\n## 1、更改`hexo`博客的配置\n\n​\t更改`./_config.yml`的文件内容\n\n```yaml\n# 第5行处\n# Site\ntitle: # 网站标题\nsubtitle: ''\ndescription: '' # 简单介绍\nkeywords:\nauthor: # 作者\nlanguage: zh-CN\ntimezone: ''\n\n# 第100行左右\ntheme: quiet # 更改为自己的主题名字，themes/<主题文件夹名>\n# 使用这个后面<主题文件夹名>就可以\n```\n\n\n\n## 2、更改`quiet`主题的配置\n\n​\t更改文件**`themes/<主题文件夹>/_config.yml`**，这个是更改主题的配置，这里要根据自己的主题来。\n\n​\t每个主题都不一样，只能作为参考，不能完全照抄。\n\n- **基础设置**\n\n​\t图片修改**`themes/<folder>/source/image/`**下面的图片即可，最好**长宽比例**不要变，不然丑，哈哈哈\n\n```yaml\n# 网站标题\ntitle: 主页\n# 网站标题后缀\nsuffix: 雨探青鸟\n# 作者名称(会显示在首页文章下面)\nauthor: MINZHI\n# 首页简介（显示在首页顶部Logo的那句话）\nhome_describe: 我   想    读    研    究   生\n# 网站关键字\nkeyword: 雨探青鸟的博客\nis_article_img: false  #false是否开启文章背景图显示(随机图片)\n# 网站描述\nweb_description: 雨探青鸟的个人博客\n\n# logo\nlogo: /image/logo.png  # 我更改了自己的图片\n# 网页标签上那个小图标 一定要用本地存储\nicon: /image/favicon.ico # 我也更改了自己的icon\n##### 上面的话，没有啥好讲的\n#### 对应着下图的一些东西\n```\n\n![image-20220405222601632](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141330103935.png)\n\n![image-20220405222631005](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141330623947.png)\n\n\n\n- **导航栏设置**\n\n```yaml\n# 导航名称，原版是英文，我修改为中文\nmenus_title:\n  home: 主页\n  archive: 档案\n  categories: 分类\n  tags: 标签\n  links: 友链\n  about: 关于\n```\n\n![image-20220405222935475](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141331126724.png)\n\n\n\n- **图标设置**\n\n图标我是在[阿里巴巴](https://www.iconfont.cn/)上面找到的\n\n```yaml\n# 这里我用的我自己图床里面的文件，如果想知道怎么配置图床，可以看我的另一篇博客\ntopIcon:\n  homeIcon: \"/image/logo.png\"  # 这个只能使用本地的文件，不然会有点问题\n  archivesIcon: \"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141332059694.png\"\n  tagIcon: \"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141332501326.png\"\n  linksIcon: \"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141332918685.png\"\n  categoriesIcon: \"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141333506277.png\"\n # 列如下图\n```\n\n![image-20220405223336833](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141452539019.png)\n\n- **访问量统计**\n\n​\t我用的是不蒜子做的，原本的主题没有加入访问量统计的插件。我改了一下代码，对于一般主题都适用。\n\n​\t当然，如果你下载的主题有访问量统计，只需要配置一下就行。\n\n**`_config.yml`**文件修改：\n\n```yaml\n# 网页访问统计\nweb_analytics:  \n  enable: true #需要改为true\n  baidu: https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js  # 不蒜子\n```\n\n**`themes/<folder>/layout/_partial/foot.ejs`**文件修改：\n\n```javascript\n<div class=\"Copyright\">\n\t©<%= new Date().getFullYear() %> By <%- theme.author %>.    本站总访问量：\n\t<script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\t<span id=\"busuanzi_container_site_pv\"><span id=\"busuanzi_value_site_pv\"></span>次</span>\n</div>\n<!--这个是更改过的，注意上面第3 4行，这个是重点-->\n```\n\n\n\n- **底部图标**\n\n```yaml\n# 底部显示的图标（github 或者其他）\nbottomIcon: \n  #可以多个\n  - {\n    #描述名称\n    name: 'Github',\n    #图标    \n    iconLink: 'http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141453283429.png',\n    #跳转链接    \n    toUrl: 'https://github.com/MinzhiYoyo'\n  }\n```\n\n- **友情链接**\n\n```yaml\n# 友情链接\nlinksList:\n  - {\n    title: '本项目仓库', # 名字\n    intro: '包含源码和发布文件', # 简单的描述\n    link: 'https://github.com/MinzhiYoyo/MinzhiYoyo.github.io', # 跳转链接\n    image: 'http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141453792920.jpg' # 图片链接\n  }\n```\n\n# 发布\n\n## 1、`GitHub`配置\n\n## 2、配置`token`\n\n## 3、上传\n\n ```shell\n# 上述配置完成\nhexo g -d  # 一条命令上传了\n ```\n\n","slug":"GitHub-部署个人博客","published":1,"updated":"2022-06-05T06:14:53.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl40x92nj0003p0u5eez350kj","content":"<p>教程适用于<code>Windows</code></p>\n<hr>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"1、安装node-js\"><a href=\"#1、安装node-js\" class=\"headerlink\" title=\"1、安装node.js\"></a>1、安装<code>node.js</code></h2><p>​    <code>hexo</code>是基于<code>node.js</code>的，所以需要先安装<code>node.js</code></p>\n<p>​    直接去<a href=\"https://nodejs.org/zh-cn/\">官网</a>下载对应你电脑版本的安装即可</p>\n<h2 id=\"2、安装hexo\"><a href=\"#2、安装hexo\" class=\"headerlink\" title=\"2、安装hexo\"></a>2、安装<code>hexo</code></h2><p><a href=\"https://hexo.io/zh-cn/docs/\">官网参考文档</a>，可以参考一下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli  # 安装hexo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这一步往往需要科学上网，不然会非常慢</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也有的教程是说改国内镜像源</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">但是适用国内镜像源会出一点小问题，所以我用了官网镜像源</span></span><br></pre></td></tr></table></figure>\n<p>出现下面就算成功了</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141328100824.png\" alt=\"image-20220405213817866\"></p>\n<hr>\n<h1 id=\"创建博客\"><a href=\"#创建博客\" class=\"headerlink\" title=\"创建博客\"></a>创建博客</h1><h2 id=\"1、初始化\"><a href=\"#1、初始化\" class=\"headerlink\" title=\"1、初始化\"></a>1、初始化</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成一个名为 folder 的文件夹</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这个文件夹里面就是你的博客了</span></span><br><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\">cd &lt;folder&gt;  # 切花到这个文件夹下</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、文件结构\"><a href=\"#2、文件结构\" class=\"headerlink\" title=\"2、文件结构\"></a>2、文件结构</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">|—— _config.yml  # 配置文件</span><br><span class=\"line\">|—— package.json # 配置文件</span><br><span class=\"line\">|—— scaffolds # 生成的markdown模板</span><br><span class=\"line\">|—— source # 资源文件，图片或者文章都在这</span><br><span class=\"line\">|    |—— _posts # 文章</span><br><span class=\"line\">|—— themes # 主题</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、下载主题\"><a href=\"#3、下载主题\" class=\"headerlink\" title=\"3、下载主题\"></a>3、下载主题</h2><p>​    每个主题的用法有些许不一样，主题一般会给出官方用法，我们去到<a href=\"https://hexo.io/themes/\">主题网</a>下载自己喜欢的主题即可</p>\n<p>​    我使用的主题叫做<code>quiet</code>，所以接下来会使用这个主题作为教程，其他主题操作类似</p>\n<p>​    下载下来的主题，放到 <code>themes</code> 目录下，<strong>如图所示</strong>，我这里下载了多个主题，有一个就够了</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141328691309.png\" alt=\"image-20220405215544804\"></p>\n<h2 id=\"4、测试\"><a href=\"#4、测试\" class=\"headerlink\" title=\"4、测试\"></a>4、测试</h2><p>​    首先，我们先到本地测试，记住三条命令即可，随便找一个终端，切换到上述<code>&lt;folder&gt;</code>目录即可。</p>\n<p>​    发布，记住一条命令即可。</p>\n<ul>\n<li><strong>生成网页</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g  # 我们发现根目录下有 public 文件夹</span><br><span class=\"line\">hexo server # 生成服务</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">然后浏览器访问 https://localhost:4000即可</span></span><br></pre></td></tr></table></figure>\n<p>​    下图是我的文件根目录结构，只需要注意<strong>红框</strong>里面的即可。</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141329444279.png\" alt=\"image-20220405215423041\"></p>\n<hr>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"1、更改hexo博客的配置\"><a href=\"#1、更改hexo博客的配置\" class=\"headerlink\" title=\"1、更改hexo博客的配置\"></a>1、更改<code>hexo</code>博客的配置</h2><p>​    更改<code>./_config.yml</code>的文件内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第5行处</span></span><br><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"comment\"># 网站标题</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\"># 简单介绍</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"comment\"># 作者</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第100行左右</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">quiet</span> <span class=\"comment\"># 更改为自己的主题名字，themes/&lt;主题文件夹名&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 使用这个后面&lt;主题文件夹名&gt;就可以</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2、更改quiet主题的配置\"><a href=\"#2、更改quiet主题的配置\" class=\"headerlink\" title=\"2、更改quiet主题的配置\"></a>2、更改<code>quiet</code>主题的配置</h2><p>​    更改文件<strong><code>themes/&lt;主题文件夹&gt;/_config.yml</code></strong>，这个是更改主题的配置，这里要根据自己的主题来。</p>\n<p>​    每个主题都不一样，只能作为参考，不能完全照抄。</p>\n<ul>\n<li><strong>基础设置</strong></li>\n</ul>\n<p>​    图片修改<strong><code>themes/&lt;folder&gt;/source/image/</code></strong>下面的图片即可，最好<strong>长宽比例</strong>不要变，不然丑，哈哈哈</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 网站标题</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">主页</span></span><br><span class=\"line\"><span class=\"comment\"># 网站标题后缀</span></span><br><span class=\"line\"><span class=\"attr\">suffix:</span> <span class=\"string\">雨探青鸟</span></span><br><span class=\"line\"><span class=\"comment\"># 作者名称(会显示在首页文章下面)</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">MINZHI</span></span><br><span class=\"line\"><span class=\"comment\"># 首页简介（显示在首页顶部Logo的那句话）</span></span><br><span class=\"line\"><span class=\"attr\">home_describe:</span> <span class=\"string\">我</span>   <span class=\"string\">想</span>    <span class=\"string\">读</span>    <span class=\"string\">研</span>    <span class=\"string\">究</span>   <span class=\"string\">生</span></span><br><span class=\"line\"><span class=\"comment\"># 网站关键字</span></span><br><span class=\"line\"><span class=\"attr\">keyword:</span> <span class=\"string\">雨探青鸟的博客</span></span><br><span class=\"line\"><span class=\"attr\">is_article_img:</span> <span class=\"literal\">false</span>  <span class=\"comment\">#false是否开启文章背景图显示(随机图片)</span></span><br><span class=\"line\"><span class=\"comment\"># 网站描述</span></span><br><span class=\"line\"><span class=\"attr\">web_description:</span> <span class=\"string\">雨探青鸟的个人博客</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># logo</span></span><br><span class=\"line\"><span class=\"attr\">logo:</span> <span class=\"string\">/image/logo.png</span>  <span class=\"comment\"># 我更改了自己的图片</span></span><br><span class=\"line\"><span class=\"comment\"># 网页标签上那个小图标 一定要用本地存储</span></span><br><span class=\"line\"><span class=\"attr\">icon:</span> <span class=\"string\">/image/favicon.ico</span> <span class=\"comment\"># 我也更改了自己的icon</span></span><br><span class=\"line\"><span class=\"comment\">##### 上面的话，没有啥好讲的</span></span><br><span class=\"line\"><span class=\"comment\">#### 对应着下图的一些东西</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141330103935.png\" alt=\"image-20220405222601632\"></p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141330623947.png\" alt=\"image-20220405222631005\"></p>\n<ul>\n<li><strong>导航栏设置</strong></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导航名称，原版是英文，我修改为中文</span></span><br><span class=\"line\"><span class=\"attr\">menus_title:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">主页</span></span><br><span class=\"line\">  <span class=\"attr\">archive:</span> <span class=\"string\">档案</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">分类</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">标签</span></span><br><span class=\"line\">  <span class=\"attr\">links:</span> <span class=\"string\">友链</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">关于</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141331126724.png\" alt=\"image-20220405222935475\"></p>\n<ul>\n<li><strong>图标设置</strong></li>\n</ul>\n<p>图标我是在<a href=\"https://www.iconfont.cn/\">阿里巴巴</a>上面找到的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里我用的我自己图床里面的文件，如果想知道怎么配置图床，可以看我的另一篇博客</span></span><br><span class=\"line\"><span class=\"attr\">topIcon:</span></span><br><span class=\"line\">  <span class=\"attr\">homeIcon:</span> <span class=\"string\">&quot;/image/logo.png&quot;</span>  <span class=\"comment\"># 这个只能使用本地的文件，不然会有点问题</span></span><br><span class=\"line\">  <span class=\"attr\">archivesIcon:</span> <span class=\"string\">&quot;http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141332059694.png&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">tagIcon:</span> <span class=\"string\">&quot;http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141332501326.png&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">linksIcon:</span> <span class=\"string\">&quot;http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141332918685.png&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">categoriesIcon:</span> <span class=\"string\">&quot;http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141333506277.png&quot;</span></span><br><span class=\"line\"> <span class=\"comment\"># 列如下图</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141452539019.png\" alt=\"image-20220405223336833\"></p>\n<ul>\n<li><strong>访问量统计</strong></li>\n</ul>\n<p>​    我用的是不蒜子做的，原本的主题没有加入访问量统计的插件。我改了一下代码，对于一般主题都适用。</p>\n<p>​    当然，如果你下载的主题有访问量统计，只需要配置一下就行。</p>\n<p><strong><code>_config.yml</code></strong>文件修改：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 网页访问统计</span></span><br><span class=\"line\"><span class=\"attr\">web_analytics:</span>  </span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\">#需要改为true</span></span><br><span class=\"line\">  <span class=\"attr\">baidu:</span> <span class=\"string\">https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</span>  <span class=\"comment\"># 不蒜子</span></span><br></pre></td></tr></table></figure>\n<p><strong><code>themes/&lt;folder&gt;/layout/_partial/foot.ejs</code></strong>文件修改：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;Copyright&quot;</span>&gt;</span><br><span class=\"line\">    ©&lt;%= <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getFullYear</span>() %&gt; <span class=\"title class_\">By</span> &lt;%- theme.<span class=\"property\">author</span> %&gt;.    本站总访问量：</span><br><span class=\"line\">    &lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>次<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!--这个是更改过的，注意上面第<span class=\"number\">3</span> <span class=\"number\">4</span>行，这个是重点--&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>底部图标</strong></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 底部显示的图标（github 或者其他）</span></span><br><span class=\"line\"><span class=\"attr\">bottomIcon:</span> </span><br><span class=\"line\">  <span class=\"comment\">#可以多个</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">#描述名称</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">&#x27;Github&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">#图标    </span></span><br><span class=\"line\">    <span class=\"attr\">iconLink:</span> <span class=\"string\">&#x27;http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141453283429.png&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">#跳转链接    </span></span><br><span class=\"line\">    <span class=\"attr\">toUrl:</span> <span class=\"string\">&#x27;https://github.com/MinzhiYoyo&#x27;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>友情链接</strong></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 友情链接</span></span><br><span class=\"line\"><span class=\"attr\">linksList:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">&#x27;本项目仓库&#x27;</span>, <span class=\"comment\"># 名字</span></span><br><span class=\"line\">    <span class=\"attr\">intro:</span> <span class=\"string\">&#x27;包含源码和发布文件&#x27;</span>, <span class=\"comment\"># 简单的描述</span></span><br><span class=\"line\">    <span class=\"attr\">link:</span> <span class=\"string\">&#x27;https://github.com/MinzhiYoyo/MinzhiYoyo.github.io&#x27;</span>, <span class=\"comment\"># 跳转链接</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&#x27;http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141453792920.jpg&#x27;</span> <span class=\"comment\"># 图片链接</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h1><h2 id=\"1、GitHub配置\"><a href=\"#1、GitHub配置\" class=\"headerlink\" title=\"1、GitHub配置\"></a>1、<code>GitHub</code>配置</h2><h2 id=\"2、配置token\"><a href=\"#2、配置token\" class=\"headerlink\" title=\"2、配置token\"></a>2、配置<code>token</code></h2><h2 id=\"3、上传\"><a href=\"#3、上传\" class=\"headerlink\" title=\"3、上传\"></a>3、上传</h2> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上述配置完成</span></span><br><span class=\"line\">hexo g -d  # 一条命令上传了</span><br></pre></td></tr></table></figure>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<p>教程适用于<code>Windows</code></p>\n<hr>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"1、安装node-js\"><a href=\"#1、安装node-js\" class=\"headerlink\" title=\"1、安装node.js\"></a>1、安装<code>node.js</code></h2><p>​    <code>hexo</code>是基于<code>node.js</code>的，所以需要先安装<code>node.js</code></p>\n<p>​    直接去<a href=\"https://nodejs.org/zh-cn/\">官网</a>下载对应你电脑版本的安装即可</p>\n<h2 id=\"2、安装hexo\"><a href=\"#2、安装hexo\" class=\"headerlink\" title=\"2、安装hexo\"></a>2、安装<code>hexo</code></h2><p><a href=\"https://hexo.io/zh-cn/docs/\">官网参考文档</a>，可以参考一下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli  # 安装hexo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这一步往往需要科学上网，不然会非常慢</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也有的教程是说改国内镜像源</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">但是适用国内镜像源会出一点小问题，所以我用了官网镜像源</span></span><br></pre></td></tr></table></figure>\n<p>出现下面就算成功了</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141328100824.png\" alt=\"image-20220405213817866\"></p>\n<hr>\n<h1 id=\"创建博客\"><a href=\"#创建博客\" class=\"headerlink\" title=\"创建博客\"></a>创建博客</h1><h2 id=\"1、初始化\"><a href=\"#1、初始化\" class=\"headerlink\" title=\"1、初始化\"></a>1、初始化</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成一个名为 folder 的文件夹</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这个文件夹里面就是你的博客了</span></span><br><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\">cd &lt;folder&gt;  # 切花到这个文件夹下</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、文件结构\"><a href=\"#2、文件结构\" class=\"headerlink\" title=\"2、文件结构\"></a>2、文件结构</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">|—— _config.yml  # 配置文件</span><br><span class=\"line\">|—— package.json # 配置文件</span><br><span class=\"line\">|—— scaffolds # 生成的markdown模板</span><br><span class=\"line\">|—— source # 资源文件，图片或者文章都在这</span><br><span class=\"line\">|    |—— _posts # 文章</span><br><span class=\"line\">|—— themes # 主题</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、下载主题\"><a href=\"#3、下载主题\" class=\"headerlink\" title=\"3、下载主题\"></a>3、下载主题</h2><p>​    每个主题的用法有些许不一样，主题一般会给出官方用法，我们去到<a href=\"https://hexo.io/themes/\">主题网</a>下载自己喜欢的主题即可</p>\n<p>​    我使用的主题叫做<code>quiet</code>，所以接下来会使用这个主题作为教程，其他主题操作类似</p>\n<p>​    下载下来的主题，放到 <code>themes</code> 目录下，<strong>如图所示</strong>，我这里下载了多个主题，有一个就够了</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141328691309.png\" alt=\"image-20220405215544804\"></p>\n<h2 id=\"4、测试\"><a href=\"#4、测试\" class=\"headerlink\" title=\"4、测试\"></a>4、测试</h2><p>​    首先，我们先到本地测试，记住三条命令即可，随便找一个终端，切换到上述<code>&lt;folder&gt;</code>目录即可。</p>\n<p>​    发布，记住一条命令即可。</p>\n<ul>\n<li><strong>生成网页</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g  # 我们发现根目录下有 public 文件夹</span><br><span class=\"line\">hexo server # 生成服务</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">然后浏览器访问 https://localhost:4000即可</span></span><br></pre></td></tr></table></figure>\n<p>​    下图是我的文件根目录结构，只需要注意<strong>红框</strong>里面的即可。</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141329444279.png\" alt=\"image-20220405215423041\"></p>\n<hr>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"1、更改hexo博客的配置\"><a href=\"#1、更改hexo博客的配置\" class=\"headerlink\" title=\"1、更改hexo博客的配置\"></a>1、更改<code>hexo</code>博客的配置</h2><p>​    更改<code>./_config.yml</code>的文件内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第5行处</span></span><br><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"comment\"># 网站标题</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\"># 简单介绍</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"comment\"># 作者</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第100行左右</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">quiet</span> <span class=\"comment\"># 更改为自己的主题名字，themes/&lt;主题文件夹名&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 使用这个后面&lt;主题文件夹名&gt;就可以</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2、更改quiet主题的配置\"><a href=\"#2、更改quiet主题的配置\" class=\"headerlink\" title=\"2、更改quiet主题的配置\"></a>2、更改<code>quiet</code>主题的配置</h2><p>​    更改文件<strong><code>themes/&lt;主题文件夹&gt;/_config.yml</code></strong>，这个是更改主题的配置，这里要根据自己的主题来。</p>\n<p>​    每个主题都不一样，只能作为参考，不能完全照抄。</p>\n<ul>\n<li><strong>基础设置</strong></li>\n</ul>\n<p>​    图片修改<strong><code>themes/&lt;folder&gt;/source/image/</code></strong>下面的图片即可，最好<strong>长宽比例</strong>不要变，不然丑，哈哈哈</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 网站标题</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">主页</span></span><br><span class=\"line\"><span class=\"comment\"># 网站标题后缀</span></span><br><span class=\"line\"><span class=\"attr\">suffix:</span> <span class=\"string\">雨探青鸟</span></span><br><span class=\"line\"><span class=\"comment\"># 作者名称(会显示在首页文章下面)</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">MINZHI</span></span><br><span class=\"line\"><span class=\"comment\"># 首页简介（显示在首页顶部Logo的那句话）</span></span><br><span class=\"line\"><span class=\"attr\">home_describe:</span> <span class=\"string\">我</span>   <span class=\"string\">想</span>    <span class=\"string\">读</span>    <span class=\"string\">研</span>    <span class=\"string\">究</span>   <span class=\"string\">生</span></span><br><span class=\"line\"><span class=\"comment\"># 网站关键字</span></span><br><span class=\"line\"><span class=\"attr\">keyword:</span> <span class=\"string\">雨探青鸟的博客</span></span><br><span class=\"line\"><span class=\"attr\">is_article_img:</span> <span class=\"literal\">false</span>  <span class=\"comment\">#false是否开启文章背景图显示(随机图片)</span></span><br><span class=\"line\"><span class=\"comment\"># 网站描述</span></span><br><span class=\"line\"><span class=\"attr\">web_description:</span> <span class=\"string\">雨探青鸟的个人博客</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># logo</span></span><br><span class=\"line\"><span class=\"attr\">logo:</span> <span class=\"string\">/image/logo.png</span>  <span class=\"comment\"># 我更改了自己的图片</span></span><br><span class=\"line\"><span class=\"comment\"># 网页标签上那个小图标 一定要用本地存储</span></span><br><span class=\"line\"><span class=\"attr\">icon:</span> <span class=\"string\">/image/favicon.ico</span> <span class=\"comment\"># 我也更改了自己的icon</span></span><br><span class=\"line\"><span class=\"comment\">##### 上面的话，没有啥好讲的</span></span><br><span class=\"line\"><span class=\"comment\">#### 对应着下图的一些东西</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141330103935.png\" alt=\"image-20220405222601632\"></p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141330623947.png\" alt=\"image-20220405222631005\"></p>\n<ul>\n<li><strong>导航栏设置</strong></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导航名称，原版是英文，我修改为中文</span></span><br><span class=\"line\"><span class=\"attr\">menus_title:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">主页</span></span><br><span class=\"line\">  <span class=\"attr\">archive:</span> <span class=\"string\">档案</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">分类</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">标签</span></span><br><span class=\"line\">  <span class=\"attr\">links:</span> <span class=\"string\">友链</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">关于</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141331126724.png\" alt=\"image-20220405222935475\"></p>\n<ul>\n<li><strong>图标设置</strong></li>\n</ul>\n<p>图标我是在<a href=\"https://www.iconfont.cn/\">阿里巴巴</a>上面找到的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里我用的我自己图床里面的文件，如果想知道怎么配置图床，可以看我的另一篇博客</span></span><br><span class=\"line\"><span class=\"attr\">topIcon:</span></span><br><span class=\"line\">  <span class=\"attr\">homeIcon:</span> <span class=\"string\">&quot;/image/logo.png&quot;</span>  <span class=\"comment\"># 这个只能使用本地的文件，不然会有点问题</span></span><br><span class=\"line\">  <span class=\"attr\">archivesIcon:</span> <span class=\"string\">&quot;http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141332059694.png&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">tagIcon:</span> <span class=\"string\">&quot;http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141332501326.png&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">linksIcon:</span> <span class=\"string\">&quot;http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141332918685.png&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">categoriesIcon:</span> <span class=\"string\">&quot;http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141333506277.png&quot;</span></span><br><span class=\"line\"> <span class=\"comment\"># 列如下图</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141452539019.png\" alt=\"image-20220405223336833\"></p>\n<ul>\n<li><strong>访问量统计</strong></li>\n</ul>\n<p>​    我用的是不蒜子做的，原本的主题没有加入访问量统计的插件。我改了一下代码，对于一般主题都适用。</p>\n<p>​    当然，如果你下载的主题有访问量统计，只需要配置一下就行。</p>\n<p><strong><code>_config.yml</code></strong>文件修改：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 网页访问统计</span></span><br><span class=\"line\"><span class=\"attr\">web_analytics:</span>  </span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\">#需要改为true</span></span><br><span class=\"line\">  <span class=\"attr\">baidu:</span> <span class=\"string\">https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</span>  <span class=\"comment\"># 不蒜子</span></span><br></pre></td></tr></table></figure>\n<p><strong><code>themes/&lt;folder&gt;/layout/_partial/foot.ejs</code></strong>文件修改：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;Copyright&quot;</span>&gt;</span><br><span class=\"line\">    ©&lt;%= <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getFullYear</span>() %&gt; <span class=\"title class_\">By</span> &lt;%- theme.<span class=\"property\">author</span> %&gt;.    本站总访问量：</span><br><span class=\"line\">    &lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>次<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!--这个是更改过的，注意上面第<span class=\"number\">3</span> <span class=\"number\">4</span>行，这个是重点--&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>底部图标</strong></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 底部显示的图标（github 或者其他）</span></span><br><span class=\"line\"><span class=\"attr\">bottomIcon:</span> </span><br><span class=\"line\">  <span class=\"comment\">#可以多个</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">#描述名称</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">&#x27;Github&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">#图标    </span></span><br><span class=\"line\">    <span class=\"attr\">iconLink:</span> <span class=\"string\">&#x27;http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141453283429.png&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">#跳转链接    </span></span><br><span class=\"line\">    <span class=\"attr\">toUrl:</span> <span class=\"string\">&#x27;https://github.com/MinzhiYoyo&#x27;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>友情链接</strong></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 友情链接</span></span><br><span class=\"line\"><span class=\"attr\">linksList:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">&#x27;本项目仓库&#x27;</span>, <span class=\"comment\"># 名字</span></span><br><span class=\"line\">    <span class=\"attr\">intro:</span> <span class=\"string\">&#x27;包含源码和发布文件&#x27;</span>, <span class=\"comment\"># 简单的描述</span></span><br><span class=\"line\">    <span class=\"attr\">link:</span> <span class=\"string\">&#x27;https://github.com/MinzhiYoyo/MinzhiYoyo.github.io&#x27;</span>, <span class=\"comment\"># 跳转链接</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&#x27;http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141453792920.jpg&#x27;</span> <span class=\"comment\"># 图片链接</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h1><h2 id=\"1、GitHub配置\"><a href=\"#1、GitHub配置\" class=\"headerlink\" title=\"1、GitHub配置\"></a>1、<code>GitHub</code>配置</h2><h2 id=\"2、配置token\"><a href=\"#2、配置token\" class=\"headerlink\" title=\"2、配置token\"></a>2、配置<code>token</code></h2><h2 id=\"3、上传\"><a href=\"#3、上传\" class=\"headerlink\" title=\"3、上传\"></a>3、上传</h2> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上述配置完成</span></span><br><span class=\"line\">hexo g -d  # 一条命令上传了</span><br></pre></td></tr></table></figure>\n"},{"title":"Python爬虫学习","cover":"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141652858875.png","date":"2022-04-05T12:07:16.000Z","excerpt":"爬虫是个好东西，轻易的下到别人下不到的东西","_content":"\n​\t\t***这篇博客主要是写给自己看的，如果完全的初学者，建议看我的另外一篇[博客](https://minzhiyoyo.github.io/2022/04/05/Python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%88%9D%E5%AD%A6%E8%80%85/)。***\n\n## 1、`requests`模块的使用\n\n> **response的用法**\n>\n> ```python\n> # ====== 1、基础知识  ======== #\n> import requests\n> url = \"http://www.baidu.com\"\n> response = requests.get(url)\n> print(respones.text)\t\t\t# 注意，text这个变量是默认解码过的，根据内容自动猜测的解码，str类数据\n> print(response.content.decode())   \t\n> # content是没有解码的，bytes数据，默认用utf-8解码，也可以指定gbk解码，如decode('gbk')\n> # 常见的解码方式：utf-8，gbk，gb2312，ascii，iso-8859-1\n> # 有些平台可能上述都不行，那就用bytes存储就好\n> print(responst.encoding)\t\t\t# 推测的遍码格式\n> \n> # 当然可以先设置encoding\n> response.encoding = \"utf8\"   # 注意不是写成 utf-8\n> print(response.text)   # 即可按照utf-8解码\n> \n> \n> \n> # ====== 2、常见的对象参数和方法  ======== #\n> # 响应的url\n> print(response.url)  \n> \n> # 状态码（一般来说，不要相信）\n> print(response.status_code)\n> \n> # 响应对应的请求头\n> print(response.request.headers)\n> \n> # 响应头\n> print(response.headers)\n> \n> # 响应对应请求的cookie 返回cookieJar类型\n> print(response.request._cookies)\n> \n> # 响应的cookie\n> print(response.cookies)\n> \n> # 自动将json字符串类型的响应内容转换成python对象\n> print(response.json())\n> \n> ```\n\n> **关闭代理**\n>\n> > ```python\n> > proxies = {\"http\": None, \"https\": None}\n> > response = rq.get(url, headers=headers, verify=False, proxies=proxies) # 关闭代理，关闭ssl认证\n> > ```\n> >\n> > \n\n---\n\n## 2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）\n\n> **获取所有数据，勾选`All`**\n>\n> > ![image-20211201095759608](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141654056235.png)\n>\n> **登录或者其他导致页面自动跳转，那么抓的包会刷新，勾选下面这个就不会刷新**\n>\n> > ![image-20211201205357600](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141654704502.png)\n>\n> **查看请求数据和响应数据**\n>\n> > ![image-20211201195017543](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141655305903.png)\n>\n> **关于请求头的一些参数意义**\n>\n> > `Referer`：这个是解释从哪个网站跳转的\n> >\n> > `User-Agent`：包含了请求主机的信息，包括系统信息和浏览器信息，如果要伪装成浏览器，这个参数很重要\n> >\n> > `Cookie`：这个分为`请求cookie`和`响应cookie`，分开使用\n> >\n> > `host`：请求域名\n> >\n> > `Connection`：是否保持连接，例如`keep-alive`，`close`\n> >\n> > `Upgrade-Insecure-Requests`：升级为`https`\n>\n> **关于响应头的一些参数意义** - 响应头一般是返回参数，主要看请求头\n>\n> > `Set-Cookie`：设置的`cookie`\n> >\n> > 状态码：200表示成功，但是，一般不要关注状态码，因为其不可信\n>\n> **常见的单词意义**\n>\n> > `token`：这个是一般为了保持的浏览器的连接性\n>\n> **注意事项**\n>\n> > 上面的`host`是域名，不一定是请求`url`，请求url看下面图\n> >\n> > > ![image-20211201194750582](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141656030791.png)\n>\n> **其他帮助网站合集**\n>\n> > - [在线字符串转`json`](https://www.json.cn/)\n> >\n> > - **免费代理站点**\n> >\n> >   > [国内免费代理站点1](https://www.kuaidaili.com/free/)\n> >   >\n> >   > [国内免费代理站点2](https://proxy.mimvp.com/freeopen)\n> >   >\n> >   > [国内免费代理站点3](https://www.89ip.cn/index.html)\n> >\n> > - \n\n## 3、爬虫入门一\n\n> **注意请求头中的一些参数**\n>\n> - `User-Agent`：包含了很多参数，如浏览器数据，系统数据等\n>\n> > ```python\n> > headers = {\n> >   'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36'  # 最好不要加到这一行的值，因为会报错，不明白为什么\n> > }\n> > headers = {\n> >   'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'\n> > }\n> > response1 = requests.get(url, headers=headers)\n> > ```\n>\n> **发送带参数的请求**\n>\n> - `url`直接带参数\n>\n> > ```python\n> > # http://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=python&fenlei=256&rsv_pq=8cb91fd5000035bd&rsv_t=368aR6DDwiiYX59pfDu4vQz2%2FajgsJuSG4IS8mBB5GeZwSo6Sn%2BjQuytYZM&rqlang=cn&rsv_enter=1&rsv_dl=tb&rsv_sug3=9&rsv_sug1=7&rsv_sug7=101&rsv_sug2=0&rsv_btype=i&prefixsug=python&rsp=5&inputT=2667&rsv_sug4=6046\n> > \n> > # 如上面这个连接，可以尝试删掉一下不要的参数，最终得到下面这个\n> > # http://www.baidu.com/s?wd=python\n> > # 这个才是关键，然后进行get请求\n> > url = 'http://www.baidu.com/s?wd=python'\n> > headers = {\n> >     'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'\n> > }\n> > ##  注意，get请求不要使用https\n> > response = requests.get(url, headers=headers)\n> > ```\n>\n> - 使用`params`携带参数字典\n>\n> > ```python\n> > url = 'http://www.baidu.com/s?'  # 注意这里需要加上s?，这个是百度的特性\n> > data = {\n> >  'wd': 'python'\n> > }\n> > heads = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'}\n> > response = requests.get(url, params=data, headers=heads)\n> > ```\n>\n> **携带`cookie`信息，`cookie`一般有时效性，过段时间需要重新获取**\n>\n> - 以`github`为列\n>\n> > 见下列图片，浏览器抓包\n> >\n> > ![image-20211201111147337](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141656765084.png)\n>\n> - 在`headers`携带\n>\n> > ```python\n> > headers={\n> >  'cookie': 'xxxx',\n> >  'User-Agent': 'xxxx'\n> > }\n> > \n> > ```\n>\n> - 使用`cookie`参数来保持\n>\n> > ```python\n> > # 构建cookie字典\n> > # 需要先切割键值对\n> > # 如下列cookie\n> > cookies = '_octo=GH1.1.612724434.1638322138; tz=Asia/Shanghai; _device_id=5fa9f396b9f0691f8db3054f0b87dbb9; has_recent_activity=1; user_session=03yOITMxPd4lG6qXwYYs9QEaFPgu2hxw04gHIymweU4J1EEe; __Host-user_session_same_site=03yOITMxPd4lG6qXwYYs9QEaFPgu2hxw04gHIymweU4J1EEe; tz=Asia/Shanghai; color_mode={\"color_mode\":\"auto\",\"light_theme\":{\"name\":\"light\",\"color_mode\":\"light\"},\"dark_theme\":{\"name\":\"dark\",\"color_mode\":\"dark\"}}; logged_in=yes; dotcom_user=HF-Mfeng; _gh_sess=Bvk3bQRV+XfUQlh+l8Mu2MKWcl7O+LH3nLtnVSWOFvzAo50NycqAlQFAYbNMdXfpVAxSU08+65qeCVG2+wX97z/sjsdsI2grX7uXpIWvFpAi/pOBPyt4dXjNRT5n2o2VTvCgIP2mWQEXTg7HVjs3v16QCj/eUFbd460btIb6J1NG/DY1wW7jx8/VAS2vkFVZ7uTkoljKQdcs8K7oAndejxw7f3fdBKCybeghEIqu71SonF5C774enN5nq2zNtSILtA7lEA+s72ekWtLrFkzRpAoi+rzQLR2naFzIXCuFbbCdsLj7tNRAF8Uj0vyRn29LdqxbjMsssMmiiBVi81x3Vf7awZRHhjp2jzMINq+J3grHfOyjgwer1XRXkUW4RaIayrC60XOl/NG5tOPUmPCHqDkHhAyFx3TRVxhz84a+oxBSW9PJK4ebYu2sZrA3nCOdRkPDvEoMehgxhZuOz07e8usCuKc//p/tozi/WI+CuPWjYamF3Hyv1uYt4C1sKjZbhNzH3sjd+9hD5DP33IROZWlvCM4W2PWmq6RWyC5B1Dyk8pAq89W87dsdm5W2eyMo/xNLdwZi+o8cXkJROi8W/XQa6NwRWlh9yON+xl3L9Txtesvi3mlB7b1L+ic/XR4f7Wh8C59yeyY67lijumG/qfX0F8w3H76BPnlmbH9oxL4qRkWwVSflal4LjRhgOaoiCZzs1r6oellyNV6pPilm7QRbP7KEnq+R+PusPQsDBWn4Gej/vbQ2P9cwqW9EQr+VhsV6MHUvhuGAY8MRB5eBKtxrhqXZMiLYak0Pk82cl9oesvU5tqp3xNo2VNHWXt5uM6YLQTggbG+spmuxqnbHt481AoMUNnRcN6WomLZ4vS4pYXO5NLa58uk9slgT/3iwPEWsy7HuK5FLYqcMvPTGNeO+nYs=--c91BUqTy9ZXXOfRr--YhanrwguBRPMP5S/I3ig0A=='\n> > cookies = cookies.splie(\"; \")\n> > cookies_ = {}\n> > for cookie in cookies:\n> >  cookies_[cookie.split('=')[0]] = cookie.splie('=')[-1]\n> > \n> > # 其中有许多的等号，如_octo=GH1.1.612724434.1638322138，就是一个键值对\n> > respose = requests.get(url,headers=headers,cookies=cookies_)\n> > ```\n>\n> - `cookieJar`对象转换成`cookie`字典，一般用不到\n>\n> > ```python\n> > # 什么是cookieJar对象呢，如下\n> > requests.get(url).cookie\t\t# 这个就是cookieJar对象\n> > dict_cookies = requests.utils.dict_from_cookiejar(response.cookies)   # cookiejar转换成字典\n> > \n> > jar_cookies = requests.utils.cookiesjar_from_dict(dict_cookies)  # 重新转化成cookiejar\n> > \n> > ```\n>\n> **`timeout`的用法**\n>\n> - 设置一下\n>\n> > ```python\n> > wresponse = requests.get(url, timeout=3)  # 设为3s，一般设个十秒左右就好\n> > ```\n> >\n> > \n>\n> **代理`Proxy`**\n>\n> > 代理分为正向代理和反向代理\n> >\n> > 代理还分为透明代理、匿名代理、高匿代理\n> >\n> > - 透明代理\n> >\n> > > ```python\n> > > REMOTE_ADDR = Proxy IP\n> > > HTTP_VIA = Proxy IP\n> > > HTTP_X_FORWARDED_FOR = Your IP\n> > > ```\n> >\n> > - 匿名代理\n> >\n> > > ```python\n> > > REMOTE_ADDR = Proxy IP\n> > > HTTP_VIA = Proxy IP\n> > > HTTP_X_FORWARDED_FOR = Proxy IP\n> > > ```\n> >\n> > - 高匿代理\n> >\n> > > ```shell\n> > > REMOTE_ADDR = Proxy IP\n> > > HTTP_VIA = not determined\n> > > HTTP_X_FORWARDED_FOR = not determined\n> > > ```\n> >\n> > 代理还可分为，`http、https、socks`\n> >\n> > - `http`：目标`url`为`http`协议\n> > - `https`：目标`url`为`https`协议\n> > - `socks`：只传递数据包，不在乎什么应用协议，耗时少\n> >\n> > **用法**\n> >\n> > > ```python\n> > > proxies = {\n> > >  'http': 'http://127.0.0.1:7890',\n> > >  'https': 'http://127.0.0.1:7890'\n> > > }\n> > > response = requests.get(url, proxies=proxies)\n> > > ```\n> > >\n> > > [国内免费代理站点1](https://www.kuaidaili.com/free/)\n> > >\n> > > [国内免费代理站点2](https://proxy.mimvp.com/freeopen)\n> > >\n> > > [国内免费代理站点3](https://www.89ip.cn/index.html)\n> >\n> > - 并且代理站点可能会给你添加一下信息，使得你更像一个浏览器\n> > - 代理也有可能截获你的数据，所以这个也要注意\n>\n> **`verify`忽略`CA`证书**\n>\n> > 很多情况如下图所示\n> >\n> > > ![image-20211201192347257](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141657415221.png)\n> >\n> > 爬虫过程遇到下列情况\n> >\n> > > ```python\n> > > requests.exceptions.SSLError: HTTPSConnection.....\n> > > ```\n> >\n> > 设置为`False`即可\n> >\n> > > ```python\n> > > # 默认是True，设置为False\n> > > # 运行过程会报警告的，但是 don't worry it 爬虫还是可以爬取内容的\n> > > response = requests.get(url, verify=False)\n> > > ```\n>\n> **`post`请求**\n>\n> > `post`用途\n> >\n> > - 一般有账号密码，都会使用`post`请求，因为`get`请求是在`url`中的明文\n> > - 大文件以及多数据，都是使用`post`\n> > - `web`工程师会认为`post`比`get`请求更加安全\n> >\n> > 简单实现\n> >\n> > > ```python\n> > > respose = requests.post(url, data) # data是一个字典\n> > > ```\n> >\n> > 找`data`的步骤寻找固定值：一般来说浏览器抓抓包就知道了\n> >\n> > - 寻找输入值：也一般来说浏览器抓抓包就知道了\n> > - 寻找预设值 - 静态文件：一般来说，需要从`html`文件中搜索，可以尝试，这个是反爬的\n> > - 寻找预设值 - 发请求：需要对指定地址发送请求\n> > - 寻找动态生成值：一般是客户端生成的，反爬的重点，一般采用`Javascript`生成\n> >\n> > `data`反爬套路\n> >\n> > - 模仿其他浏览器发送，如手机什么的，因为很多浏览器都是不一样的反爬，找个弱的\n> > - 注意时间戳什么的\n> > - 注意里面的`JS`文件\n> > - 有些可能是随机值\n> > - 从`html`提取，可以试试无痕浏览器\n>\n> **`requess.session`状态保持**\n>\n> - 自动保持`cookie`，一般多次请求（如登录之后再操作的），使用方法\n>\n> > ```python\n> > session = requests.session()\n> > session.headers = {\n> > \n> > }\n> > session.data = {\n> > \n> > }\n> > response = session.get(url)\n> > response = session.post(url)\n> > \n> > # 如下用法\n> > s = rq.session()\n> > s.trust_env\n> > s.verify\n> > s.headers\n> > s.proxies\n> > s.cookies\n> > s.get(url, data=data)\n> > s.post(url, data=data)\n> > ```\n\n## 正则表达式，这个也是重点\n\n> **首先如何使用正则表达式**\n>\n> > ```python\n> > response = requests.get(url)\n> > restr = response.content.decode()   # 转成utf-8或者gbk\n> > # 正则提取\n> > import re  # 导入正则模块\n> > str_tmp = \"<link href=\\\"https://stacdn.proginn.com/plugin/swiper/swiper.min.css?version=4.30.2\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\"   # 临时字符串，不用写到代码里\n> > # 假如想要获取上面中的href，那么这样写正则表达式\n> > # 正则\n> > restr = '<link href=\\\"(.*?)\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">'   # 这个是以非贪婪模式匹配多个字符\n> > # 然后匹配一下全文，看看是否获取了对应的\n> > dst_list = re.findall(restr, str_tmp)   # 打印一下看看就知道了\n> > ```\n> >\n> > \n\n## 额外补充知识\n\n> **`form`表单**\n>\n> - 以`github`为例\n> - 一般来说，`form`表单上面会有很多消息可挖掘，如下图所示\n>\n> > ![image-20211201205057556](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141658057971.png)\n> >\n> > - 其中，`action`指的是提交给的路径\n> > - `method`是提交方法\n> > - `token`这个一般用来表示保持的意思，同行的`value`表示`token`的值\n> > - 而下面这个`name`，就是输入标签将里面的值提交给什么了，这里是提交给`login`\n>\n> **往往需要多次抓包，多次比较才行，找出差异**\n>\n> - 如在无痕串口进行多次退出和登录\n> - 主要是为了找出`post`的变值（不包括输入值，除非输入值不是明文传输）\n>\n> **注意多次爬虫，需要注意页面的跳转**\n>\n> - 比如登录的时候，一般会跳转的\n\n\n## 结束语\n\n​\t\t**技术永远是好东西，只是拿来做什么**\n\n","source":"_posts/Python爬虫学习.md","raw":"---\ntitle: Python爬虫学习\ncover: 'http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141652858875.png'\ndate: 2022-04-05 20:07:16\ntags:\n- Python\n- 爬虫\nexcerpt: '爬虫是个好东西，轻易的下到别人下不到的东西'\ncategories: \n  - 爬虫\n---\n\n​\t\t***这篇博客主要是写给自己看的，如果完全的初学者，建议看我的另外一篇[博客](https://minzhiyoyo.github.io/2022/04/05/Python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%88%9D%E5%AD%A6%E8%80%85/)。***\n\n## 1、`requests`模块的使用\n\n> **response的用法**\n>\n> ```python\n> # ====== 1、基础知识  ======== #\n> import requests\n> url = \"http://www.baidu.com\"\n> response = requests.get(url)\n> print(respones.text)\t\t\t# 注意，text这个变量是默认解码过的，根据内容自动猜测的解码，str类数据\n> print(response.content.decode())   \t\n> # content是没有解码的，bytes数据，默认用utf-8解码，也可以指定gbk解码，如decode('gbk')\n> # 常见的解码方式：utf-8，gbk，gb2312，ascii，iso-8859-1\n> # 有些平台可能上述都不行，那就用bytes存储就好\n> print(responst.encoding)\t\t\t# 推测的遍码格式\n> \n> # 当然可以先设置encoding\n> response.encoding = \"utf8\"   # 注意不是写成 utf-8\n> print(response.text)   # 即可按照utf-8解码\n> \n> \n> \n> # ====== 2、常见的对象参数和方法  ======== #\n> # 响应的url\n> print(response.url)  \n> \n> # 状态码（一般来说，不要相信）\n> print(response.status_code)\n> \n> # 响应对应的请求头\n> print(response.request.headers)\n> \n> # 响应头\n> print(response.headers)\n> \n> # 响应对应请求的cookie 返回cookieJar类型\n> print(response.request._cookies)\n> \n> # 响应的cookie\n> print(response.cookies)\n> \n> # 自动将json字符串类型的响应内容转换成python对象\n> print(response.json())\n> \n> ```\n\n> **关闭代理**\n>\n> > ```python\n> > proxies = {\"http\": None, \"https\": None}\n> > response = rq.get(url, headers=headers, verify=False, proxies=proxies) # 关闭代理，关闭ssl认证\n> > ```\n> >\n> > \n\n---\n\n## 2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）\n\n> **获取所有数据，勾选`All`**\n>\n> > ![image-20211201095759608](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141654056235.png)\n>\n> **登录或者其他导致页面自动跳转，那么抓的包会刷新，勾选下面这个就不会刷新**\n>\n> > ![image-20211201205357600](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141654704502.png)\n>\n> **查看请求数据和响应数据**\n>\n> > ![image-20211201195017543](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141655305903.png)\n>\n> **关于请求头的一些参数意义**\n>\n> > `Referer`：这个是解释从哪个网站跳转的\n> >\n> > `User-Agent`：包含了请求主机的信息，包括系统信息和浏览器信息，如果要伪装成浏览器，这个参数很重要\n> >\n> > `Cookie`：这个分为`请求cookie`和`响应cookie`，分开使用\n> >\n> > `host`：请求域名\n> >\n> > `Connection`：是否保持连接，例如`keep-alive`，`close`\n> >\n> > `Upgrade-Insecure-Requests`：升级为`https`\n>\n> **关于响应头的一些参数意义** - 响应头一般是返回参数，主要看请求头\n>\n> > `Set-Cookie`：设置的`cookie`\n> >\n> > 状态码：200表示成功，但是，一般不要关注状态码，因为其不可信\n>\n> **常见的单词意义**\n>\n> > `token`：这个是一般为了保持的浏览器的连接性\n>\n> **注意事项**\n>\n> > 上面的`host`是域名，不一定是请求`url`，请求url看下面图\n> >\n> > > ![image-20211201194750582](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141656030791.png)\n>\n> **其他帮助网站合集**\n>\n> > - [在线字符串转`json`](https://www.json.cn/)\n> >\n> > - **免费代理站点**\n> >\n> >   > [国内免费代理站点1](https://www.kuaidaili.com/free/)\n> >   >\n> >   > [国内免费代理站点2](https://proxy.mimvp.com/freeopen)\n> >   >\n> >   > [国内免费代理站点3](https://www.89ip.cn/index.html)\n> >\n> > - \n\n## 3、爬虫入门一\n\n> **注意请求头中的一些参数**\n>\n> - `User-Agent`：包含了很多参数，如浏览器数据，系统数据等\n>\n> > ```python\n> > headers = {\n> >   'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36'  # 最好不要加到这一行的值，因为会报错，不明白为什么\n> > }\n> > headers = {\n> >   'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'\n> > }\n> > response1 = requests.get(url, headers=headers)\n> > ```\n>\n> **发送带参数的请求**\n>\n> - `url`直接带参数\n>\n> > ```python\n> > # http://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=python&fenlei=256&rsv_pq=8cb91fd5000035bd&rsv_t=368aR6DDwiiYX59pfDu4vQz2%2FajgsJuSG4IS8mBB5GeZwSo6Sn%2BjQuytYZM&rqlang=cn&rsv_enter=1&rsv_dl=tb&rsv_sug3=9&rsv_sug1=7&rsv_sug7=101&rsv_sug2=0&rsv_btype=i&prefixsug=python&rsp=5&inputT=2667&rsv_sug4=6046\n> > \n> > # 如上面这个连接，可以尝试删掉一下不要的参数，最终得到下面这个\n> > # http://www.baidu.com/s?wd=python\n> > # 这个才是关键，然后进行get请求\n> > url = 'http://www.baidu.com/s?wd=python'\n> > headers = {\n> >     'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'\n> > }\n> > ##  注意，get请求不要使用https\n> > response = requests.get(url, headers=headers)\n> > ```\n>\n> - 使用`params`携带参数字典\n>\n> > ```python\n> > url = 'http://www.baidu.com/s?'  # 注意这里需要加上s?，这个是百度的特性\n> > data = {\n> >  'wd': 'python'\n> > }\n> > heads = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'}\n> > response = requests.get(url, params=data, headers=heads)\n> > ```\n>\n> **携带`cookie`信息，`cookie`一般有时效性，过段时间需要重新获取**\n>\n> - 以`github`为列\n>\n> > 见下列图片，浏览器抓包\n> >\n> > ![image-20211201111147337](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141656765084.png)\n>\n> - 在`headers`携带\n>\n> > ```python\n> > headers={\n> >  'cookie': 'xxxx',\n> >  'User-Agent': 'xxxx'\n> > }\n> > \n> > ```\n>\n> - 使用`cookie`参数来保持\n>\n> > ```python\n> > # 构建cookie字典\n> > # 需要先切割键值对\n> > # 如下列cookie\n> > cookies = '_octo=GH1.1.612724434.1638322138; tz=Asia/Shanghai; _device_id=5fa9f396b9f0691f8db3054f0b87dbb9; has_recent_activity=1; user_session=03yOITMxPd4lG6qXwYYs9QEaFPgu2hxw04gHIymweU4J1EEe; __Host-user_session_same_site=03yOITMxPd4lG6qXwYYs9QEaFPgu2hxw04gHIymweU4J1EEe; tz=Asia/Shanghai; color_mode={\"color_mode\":\"auto\",\"light_theme\":{\"name\":\"light\",\"color_mode\":\"light\"},\"dark_theme\":{\"name\":\"dark\",\"color_mode\":\"dark\"}}; logged_in=yes; dotcom_user=HF-Mfeng; _gh_sess=Bvk3bQRV+XfUQlh+l8Mu2MKWcl7O+LH3nLtnVSWOFvzAo50NycqAlQFAYbNMdXfpVAxSU08+65qeCVG2+wX97z/sjsdsI2grX7uXpIWvFpAi/pOBPyt4dXjNRT5n2o2VTvCgIP2mWQEXTg7HVjs3v16QCj/eUFbd460btIb6J1NG/DY1wW7jx8/VAS2vkFVZ7uTkoljKQdcs8K7oAndejxw7f3fdBKCybeghEIqu71SonF5C774enN5nq2zNtSILtA7lEA+s72ekWtLrFkzRpAoi+rzQLR2naFzIXCuFbbCdsLj7tNRAF8Uj0vyRn29LdqxbjMsssMmiiBVi81x3Vf7awZRHhjp2jzMINq+J3grHfOyjgwer1XRXkUW4RaIayrC60XOl/NG5tOPUmPCHqDkHhAyFx3TRVxhz84a+oxBSW9PJK4ebYu2sZrA3nCOdRkPDvEoMehgxhZuOz07e8usCuKc//p/tozi/WI+CuPWjYamF3Hyv1uYt4C1sKjZbhNzH3sjd+9hD5DP33IROZWlvCM4W2PWmq6RWyC5B1Dyk8pAq89W87dsdm5W2eyMo/xNLdwZi+o8cXkJROi8W/XQa6NwRWlh9yON+xl3L9Txtesvi3mlB7b1L+ic/XR4f7Wh8C59yeyY67lijumG/qfX0F8w3H76BPnlmbH9oxL4qRkWwVSflal4LjRhgOaoiCZzs1r6oellyNV6pPilm7QRbP7KEnq+R+PusPQsDBWn4Gej/vbQ2P9cwqW9EQr+VhsV6MHUvhuGAY8MRB5eBKtxrhqXZMiLYak0Pk82cl9oesvU5tqp3xNo2VNHWXt5uM6YLQTggbG+spmuxqnbHt481AoMUNnRcN6WomLZ4vS4pYXO5NLa58uk9slgT/3iwPEWsy7HuK5FLYqcMvPTGNeO+nYs=--c91BUqTy9ZXXOfRr--YhanrwguBRPMP5S/I3ig0A=='\n> > cookies = cookies.splie(\"; \")\n> > cookies_ = {}\n> > for cookie in cookies:\n> >  cookies_[cookie.split('=')[0]] = cookie.splie('=')[-1]\n> > \n> > # 其中有许多的等号，如_octo=GH1.1.612724434.1638322138，就是一个键值对\n> > respose = requests.get(url,headers=headers,cookies=cookies_)\n> > ```\n>\n> - `cookieJar`对象转换成`cookie`字典，一般用不到\n>\n> > ```python\n> > # 什么是cookieJar对象呢，如下\n> > requests.get(url).cookie\t\t# 这个就是cookieJar对象\n> > dict_cookies = requests.utils.dict_from_cookiejar(response.cookies)   # cookiejar转换成字典\n> > \n> > jar_cookies = requests.utils.cookiesjar_from_dict(dict_cookies)  # 重新转化成cookiejar\n> > \n> > ```\n>\n> **`timeout`的用法**\n>\n> - 设置一下\n>\n> > ```python\n> > wresponse = requests.get(url, timeout=3)  # 设为3s，一般设个十秒左右就好\n> > ```\n> >\n> > \n>\n> **代理`Proxy`**\n>\n> > 代理分为正向代理和反向代理\n> >\n> > 代理还分为透明代理、匿名代理、高匿代理\n> >\n> > - 透明代理\n> >\n> > > ```python\n> > > REMOTE_ADDR = Proxy IP\n> > > HTTP_VIA = Proxy IP\n> > > HTTP_X_FORWARDED_FOR = Your IP\n> > > ```\n> >\n> > - 匿名代理\n> >\n> > > ```python\n> > > REMOTE_ADDR = Proxy IP\n> > > HTTP_VIA = Proxy IP\n> > > HTTP_X_FORWARDED_FOR = Proxy IP\n> > > ```\n> >\n> > - 高匿代理\n> >\n> > > ```shell\n> > > REMOTE_ADDR = Proxy IP\n> > > HTTP_VIA = not determined\n> > > HTTP_X_FORWARDED_FOR = not determined\n> > > ```\n> >\n> > 代理还可分为，`http、https、socks`\n> >\n> > - `http`：目标`url`为`http`协议\n> > - `https`：目标`url`为`https`协议\n> > - `socks`：只传递数据包，不在乎什么应用协议，耗时少\n> >\n> > **用法**\n> >\n> > > ```python\n> > > proxies = {\n> > >  'http': 'http://127.0.0.1:7890',\n> > >  'https': 'http://127.0.0.1:7890'\n> > > }\n> > > response = requests.get(url, proxies=proxies)\n> > > ```\n> > >\n> > > [国内免费代理站点1](https://www.kuaidaili.com/free/)\n> > >\n> > > [国内免费代理站点2](https://proxy.mimvp.com/freeopen)\n> > >\n> > > [国内免费代理站点3](https://www.89ip.cn/index.html)\n> >\n> > - 并且代理站点可能会给你添加一下信息，使得你更像一个浏览器\n> > - 代理也有可能截获你的数据，所以这个也要注意\n>\n> **`verify`忽略`CA`证书**\n>\n> > 很多情况如下图所示\n> >\n> > > ![image-20211201192347257](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141657415221.png)\n> >\n> > 爬虫过程遇到下列情况\n> >\n> > > ```python\n> > > requests.exceptions.SSLError: HTTPSConnection.....\n> > > ```\n> >\n> > 设置为`False`即可\n> >\n> > > ```python\n> > > # 默认是True，设置为False\n> > > # 运行过程会报警告的，但是 don't worry it 爬虫还是可以爬取内容的\n> > > response = requests.get(url, verify=False)\n> > > ```\n>\n> **`post`请求**\n>\n> > `post`用途\n> >\n> > - 一般有账号密码，都会使用`post`请求，因为`get`请求是在`url`中的明文\n> > - 大文件以及多数据，都是使用`post`\n> > - `web`工程师会认为`post`比`get`请求更加安全\n> >\n> > 简单实现\n> >\n> > > ```python\n> > > respose = requests.post(url, data) # data是一个字典\n> > > ```\n> >\n> > 找`data`的步骤寻找固定值：一般来说浏览器抓抓包就知道了\n> >\n> > - 寻找输入值：也一般来说浏览器抓抓包就知道了\n> > - 寻找预设值 - 静态文件：一般来说，需要从`html`文件中搜索，可以尝试，这个是反爬的\n> > - 寻找预设值 - 发请求：需要对指定地址发送请求\n> > - 寻找动态生成值：一般是客户端生成的，反爬的重点，一般采用`Javascript`生成\n> >\n> > `data`反爬套路\n> >\n> > - 模仿其他浏览器发送，如手机什么的，因为很多浏览器都是不一样的反爬，找个弱的\n> > - 注意时间戳什么的\n> > - 注意里面的`JS`文件\n> > - 有些可能是随机值\n> > - 从`html`提取，可以试试无痕浏览器\n>\n> **`requess.session`状态保持**\n>\n> - 自动保持`cookie`，一般多次请求（如登录之后再操作的），使用方法\n>\n> > ```python\n> > session = requests.session()\n> > session.headers = {\n> > \n> > }\n> > session.data = {\n> > \n> > }\n> > response = session.get(url)\n> > response = session.post(url)\n> > \n> > # 如下用法\n> > s = rq.session()\n> > s.trust_env\n> > s.verify\n> > s.headers\n> > s.proxies\n> > s.cookies\n> > s.get(url, data=data)\n> > s.post(url, data=data)\n> > ```\n\n## 正则表达式，这个也是重点\n\n> **首先如何使用正则表达式**\n>\n> > ```python\n> > response = requests.get(url)\n> > restr = response.content.decode()   # 转成utf-8或者gbk\n> > # 正则提取\n> > import re  # 导入正则模块\n> > str_tmp = \"<link href=\\\"https://stacdn.proginn.com/plugin/swiper/swiper.min.css?version=4.30.2\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\"   # 临时字符串，不用写到代码里\n> > # 假如想要获取上面中的href，那么这样写正则表达式\n> > # 正则\n> > restr = '<link href=\\\"(.*?)\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">'   # 这个是以非贪婪模式匹配多个字符\n> > # 然后匹配一下全文，看看是否获取了对应的\n> > dst_list = re.findall(restr, str_tmp)   # 打印一下看看就知道了\n> > ```\n> >\n> > \n\n## 额外补充知识\n\n> **`form`表单**\n>\n> - 以`github`为例\n> - 一般来说，`form`表单上面会有很多消息可挖掘，如下图所示\n>\n> > ![image-20211201205057556](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141658057971.png)\n> >\n> > - 其中，`action`指的是提交给的路径\n> > - `method`是提交方法\n> > - `token`这个一般用来表示保持的意思，同行的`value`表示`token`的值\n> > - 而下面这个`name`，就是输入标签将里面的值提交给什么了，这里是提交给`login`\n>\n> **往往需要多次抓包，多次比较才行，找出差异**\n>\n> - 如在无痕串口进行多次退出和登录\n> - 主要是为了找出`post`的变值（不包括输入值，除非输入值不是明文传输）\n>\n> **注意多次爬虫，需要注意页面的跳转**\n>\n> - 比如登录的时候，一般会跳转的\n\n\n## 结束语\n\n​\t\t**技术永远是好东西，只是拿来做什么**\n\n","slug":"Python爬虫学习","published":1,"updated":"2022-10-12T12:09:51.913Z","_id":"cl40x92no0007p0u53ye20ttg","comments":1,"layout":"post","photos":[],"link":"","content":"<p>​        <strong><em>这篇博客主要是写给自己看的，如果完全的初学者，建议看我的另外一篇<a href=\"https://minzhiyoyo.github.io/2022/04/05/Python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%88%9D%E5%AD%A6%E8%80%85/\">博客</a>。</em></strong></p>\n<h2 id=\"1、requests模块的使用\"><a href=\"#1、requests模块的使用\" class=\"headerlink\" title=\"1、requests模块的使用\"></a>1、<code>requests</code>模块的使用</h2><blockquote>\n<p><strong>response的用法</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ====== 1、基础知识  ======== #</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">url = <span class=\"string\">&quot;http://www.baidu.com&quot;</span></span><br><span class=\"line\">response = requests.get(url)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(respones.text)            <span class=\"comment\"># 注意，text这个变量是默认解码过的，根据内容自动猜测的解码，str类数据</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.content.decode())       </span><br><span class=\"line\"><span class=\"comment\"># content是没有解码的，bytes数据，默认用utf-8解码，也可以指定gbk解码，如decode(&#x27;gbk&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># 常见的解码方式：utf-8，gbk，gb2312，ascii，iso-8859-1</span></span><br><span class=\"line\"><span class=\"comment\"># 有些平台可能上述都不行，那就用bytes存储就好</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(responst.encoding)            <span class=\"comment\"># 推测的遍码格式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当然可以先设置encoding</span></span><br><span class=\"line\">response.encoding = <span class=\"string\">&quot;utf8&quot;</span>   <span class=\"comment\"># 注意不是写成 utf-8</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.text)   <span class=\"comment\"># 即可按照utf-8解码</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ====== 2、常见的对象参数和方法  ======== #</span></span><br><span class=\"line\"><span class=\"comment\"># 响应的url</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.url)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 状态码（一般来说，不要相信）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应对应的请求头</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.request.headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应头</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应对应请求的cookie 返回cookieJar类型</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.request._cookies)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应的cookie</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.cookies)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动将json字符串类型的响应内容转换成python对象</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.json())</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>关闭代理</strong></p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxies = &#123;<span class=\"string\">&quot;http&quot;</span>: <span class=\"literal\">None</span>, <span class=\"string\">&quot;https&quot;</span>: <span class=\"literal\">None</span>&#125;</span><br><span class=\"line\">response = rq.get(url, headers=headers, verify=<span class=\"literal\">False</span>, proxies=proxies) <span class=\"comment\"># 关闭代理，关闭ssl认证</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<hr>\n<h2 id=\"2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）\"><a href=\"#2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）\" class=\"headerlink\" title=\"2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）\"></a>2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）</h2><blockquote>\n<p><strong>获取所有数据，勾选<code>All</code></strong></p>\n<blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141654056235.png\" alt=\"image-20211201095759608\"></p>\n</blockquote>\n<p><strong>登录或者其他导致页面自动跳转，那么抓的包会刷新，勾选下面这个就不会刷新</strong></p>\n<blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141654704502.png\" alt=\"image-20211201205357600\"></p>\n</blockquote>\n<p><strong>查看请求数据和响应数据</strong></p>\n<blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141655305903.png\" alt=\"image-20211201195017543\"></p>\n</blockquote>\n<p><strong>关于请求头的一些参数意义</strong></p>\n<blockquote>\n<p><code>Referer</code>：这个是解释从哪个网站跳转的</p>\n<p><code>User-Agent</code>：包含了请求主机的信息，包括系统信息和浏览器信息，如果要伪装成浏览器，这个参数很重要</p>\n<p><code>Cookie</code>：这个分为<code>请求cookie</code>和<code>响应cookie</code>，分开使用</p>\n<p><code>host</code>：请求域名</p>\n<p><code>Connection</code>：是否保持连接，例如<code>keep-alive</code>，<code>close</code></p>\n<p><code>Upgrade-Insecure-Requests</code>：升级为<code>https</code></p>\n</blockquote>\n<p><strong>关于响应头的一些参数意义</strong> - 响应头一般是返回参数，主要看请求头</p>\n<blockquote>\n<p><code>Set-Cookie</code>：设置的<code>cookie</code></p>\n<p>状态码：200表示成功，但是，一般不要关注状态码，因为其不可信</p>\n</blockquote>\n<p><strong>常见的单词意义</strong></p>\n<blockquote>\n<p><code>token</code>：这个是一般为了保持的浏览器的连接性</p>\n</blockquote>\n<p><strong>注意事项</strong></p>\n<blockquote>\n<p>上面的<code>host</code>是域名，不一定是请求<code>url</code>，请求url看下面图</p>\n<blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141656030791.png\" alt=\"image-20211201194750582\"></p>\n</blockquote>\n</blockquote>\n<p><strong>其他帮助网站合集</strong></p>\n<blockquote>\n<ul>\n<li><p><a href=\"https://www.json.cn/\">在线字符串转<code>json</code></a></p>\n</li>\n<li><p><strong>免费代理站点</strong></p>\n<blockquote>\n<p><a href=\"https://www.kuaidaili.com/free/\">国内免费代理站点1</a></p>\n<p><a href=\"https://proxy.mimvp.com/freeopen\">国内免费代理站点2</a></p>\n<p><a href=\"https://www.89ip.cn/index.html\">国内免费代理站点3</a></p>\n</blockquote>\n</li>\n<li></li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"3、爬虫入门一\"><a href=\"#3、爬虫入门一\" class=\"headerlink\" title=\"3、爬虫入门一\"></a>3、爬虫入门一</h2><blockquote>\n<p><strong>注意请求头中的一些参数</strong></p>\n<ul>\n<li><code>User-Agent</code>：包含了很多参数，如浏览器数据，系统数据等</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">headers = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#x27;</span>  <span class=\"comment\"># 最好不要加到这一行的值，因为会报错，不明白为什么</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response1 = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>发送带参数的请求</strong></p>\n<ul>\n<li><code>url</code>直接带参数</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># http://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=python&amp;fenlei=256&amp;rsv_pq=8cb91fd5000035bd&amp;rsv_t=368aR6DDwiiYX59pfDu4vQz2%2FajgsJuSG4IS8mBB5GeZwSo6Sn%2BjQuytYZM&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug3=9&amp;rsv_sug1=7&amp;rsv_sug7=101&amp;rsv_sug2=0&amp;rsv_btype=i&amp;prefixsug=python&amp;rsp=5&amp;inputT=2667&amp;rsv_sug4=6046</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如上面这个连接，可以尝试删掉一下不要的参数，最终得到下面这个</span></span><br><span class=\"line\"><span class=\"comment\"># http://www.baidu.com/s?wd=python</span></span><br><span class=\"line\"><span class=\"comment\"># 这个才是关键，然后进行get请求</span></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://www.baidu.com/s?wd=python&#x27;</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">##  注意，get请求不要使用https</span></span><br><span class=\"line\">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>使用<code>params</code>携带参数字典</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">&#x27;http://www.baidu.com/s?&#x27;</span>  <span class=\"comment\"># 注意这里需要加上s?，这个是百度的特性</span></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\"> <span class=\"string\">&#x27;wd&#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">heads = &#123;<span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span>&#125;</span><br><span class=\"line\">response = requests.get(url, params=data, headers=heads)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>携带<code>cookie</code>信息，<code>cookie</code>一般有时效性，过段时间需要重新获取</strong></p>\n<ul>\n<li>以<code>github</code>为列</li>\n</ul>\n<blockquote>\n<p>见下列图片，浏览器抓包</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141656765084.png\" alt=\"image-20211201111147337\"></p>\n</blockquote>\n<ul>\n<li>在<code>headers</code>携带</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">headers=&#123;</span><br><span class=\"line\"> <span class=\"string\">&#x27;cookie&#x27;</span>: <span class=\"string\">&#x27;xxxx&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;xxxx&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>使用<code>cookie</code>参数来保持</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构建cookie字典</span></span><br><span class=\"line\"><span class=\"comment\"># 需要先切割键值对</span></span><br><span class=\"line\"><span class=\"comment\"># 如下列cookie</span></span><br><span class=\"line\">cookies = <span class=\"string\">&#x27;_octo=GH1.1.612724434.1638322138; tz=Asia/Shanghai; _device_id=5fa9f396b9f0691f8db3054f0b87dbb9; has_recent_activity=1; user_session=03yOITMxPd4lG6qXwYYs9QEaFPgu2hxw04gHIymweU4J1EEe; __Host-user_session_same_site=03yOITMxPd4lG6qXwYYs9QEaFPgu2hxw04gHIymweU4J1EEe; tz=Asia/Shanghai; color_mode=&#123;&quot;color_mode&quot;:&quot;auto&quot;,&quot;light_theme&quot;:&#123;&quot;name&quot;:&quot;light&quot;,&quot;color_mode&quot;:&quot;light&quot;&#125;,&quot;dark_theme&quot;:&#123;&quot;name&quot;:&quot;dark&quot;,&quot;color_mode&quot;:&quot;dark&quot;&#125;&#125;; logged_in=yes; dotcom_user=HF-Mfeng; _gh_sess=Bvk3bQRV+XfUQlh+l8Mu2MKWcl7O+LH3nLtnVSWOFvzAo50NycqAlQFAYbNMdXfpVAxSU08+65qeCVG2+wX97z/sjsdsI2grX7uXpIWvFpAi/pOBPyt4dXjNRT5n2o2VTvCgIP2mWQEXTg7HVjs3v16QCj/eUFbd460btIb6J1NG/DY1wW7jx8/VAS2vkFVZ7uTkoljKQdcs8K7oAndejxw7f3fdBKCybeghEIqu71SonF5C774enN5nq2zNtSILtA7lEA+s72ekWtLrFkzRpAoi+rzQLR2naFzIXCuFbbCdsLj7tNRAF8Uj0vyRn29LdqxbjMsssMmiiBVi81x3Vf7awZRHhjp2jzMINq+J3grHfOyjgwer1XRXkUW4RaIayrC60XOl/NG5tOPUmPCHqDkHhAyFx3TRVxhz84a+oxBSW9PJK4ebYu2sZrA3nCOdRkPDvEoMehgxhZuOz07e8usCuKc//p/tozi/WI+CuPWjYamF3Hyv1uYt4C1sKjZbhNzH3sjd+9hD5DP33IROZWlvCM4W2PWmq6RWyC5B1Dyk8pAq89W87dsdm5W2eyMo/xNLdwZi+o8cXkJROi8W/XQa6NwRWlh9yON+xl3L9Txtesvi3mlB7b1L+ic/XR4f7Wh8C59yeyY67lijumG/qfX0F8w3H76BPnlmbH9oxL4qRkWwVSflal4LjRhgOaoiCZzs1r6oellyNV6pPilm7QRbP7KEnq+R+PusPQsDBWn4Gej/vbQ2P9cwqW9EQr+VhsV6MHUvhuGAY8MRB5eBKtxrhqXZMiLYak0Pk82cl9oesvU5tqp3xNo2VNHWXt5uM6YLQTggbG+spmuxqnbHt481AoMUNnRcN6WomLZ4vS4pYXO5NLa58uk9slgT/3iwPEWsy7HuK5FLYqcMvPTGNeO+nYs=--c91BUqTy9ZXXOfRr--YhanrwguBRPMP5S/I3ig0A==&#x27;</span></span><br><span class=\"line\">cookies = cookies.splie(<span class=\"string\">&quot;; &quot;</span>)</span><br><span class=\"line\">cookies_ = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> cookie <span class=\"keyword\">in</span> cookies:</span><br><span class=\"line\"> cookies_[cookie.split(<span class=\"string\">&#x27;=&#x27;</span>)[<span class=\"number\">0</span>]] = cookie.splie(<span class=\"string\">&#x27;=&#x27;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其中有许多的等号，如_octo=GH1.1.612724434.1638322138，就是一个键值对</span></span><br><span class=\"line\">respose = requests.get(url,headers=headers,cookies=cookies_)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li><code>cookieJar</code>对象转换成<code>cookie</code>字典，一般用不到</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 什么是cookieJar对象呢，如下</span></span><br><span class=\"line\">requests.get(url).cookie        <span class=\"comment\"># 这个就是cookieJar对象</span></span><br><span class=\"line\">dict_cookies = requests.utils.dict_from_cookiejar(response.cookies)   <span class=\"comment\"># cookiejar转换成字典</span></span><br><span class=\"line\"></span><br><span class=\"line\">jar_cookies = requests.utils.cookiesjar_from_dict(dict_cookies)  <span class=\"comment\"># 重新转化成cookiejar</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong><code>timeout</code>的用法</strong></p>\n<ul>\n<li>设置一下</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wresponse = requests.get(url, timeout=<span class=\"number\">3</span>)  <span class=\"comment\"># 设为3s，一般设个十秒左右就好</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>代理<code>Proxy</code></strong></p>\n<blockquote>\n<p>代理分为正向代理和反向代理</p>\n<p>代理还分为透明代理、匿名代理、高匿代理</p>\n<ul>\n<li>透明代理</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REMOTE_ADDR = Proxy IP</span><br><span class=\"line\">HTTP_VIA = Proxy IP</span><br><span class=\"line\">HTTP_X_FORWARDED_FOR = Your IP</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>匿名代理</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REMOTE_ADDR = Proxy IP</span><br><span class=\"line\">HTTP_VIA = Proxy IP</span><br><span class=\"line\">HTTP_X_FORWARDED_FOR = Proxy IP</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>高匿代理</li>\n</ul>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REMOTE_ADDR = Proxy IP</span><br><span class=\"line\">HTTP_VIA = not determined</span><br><span class=\"line\">HTTP_X_FORWARDED_FOR = not determined</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>代理还可分为，<code>http、https、socks</code></p>\n<ul>\n<li><code>http</code>：目标<code>url</code>为<code>http</code>协议</li>\n<li><code>https</code>：目标<code>url</code>为<code>https</code>协议</li>\n<li><code>socks</code>：只传递数据包，不在乎什么应用协议，耗时少</li>\n</ul>\n<p><strong>用法</strong></p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxies = &#123;</span><br><span class=\"line\"> <span class=\"string\">&#x27;http&#x27;</span>: <span class=\"string\">&#x27;http://127.0.0.1:7890&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;https&#x27;</span>: <span class=\"string\">&#x27;http://127.0.0.1:7890&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response = requests.get(url, proxies=proxies)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.kuaidaili.com/free/\">国内免费代理站点1</a></p>\n<p><a href=\"https://proxy.mimvp.com/freeopen\">国内免费代理站点2</a></p>\n<p><a href=\"https://www.89ip.cn/index.html\">国内免费代理站点3</a></p>\n</blockquote>\n<ul>\n<li>并且代理站点可能会给你添加一下信息，使得你更像一个浏览器</li>\n<li>代理也有可能截获你的数据，所以这个也要注意</li>\n</ul>\n</blockquote>\n<p><strong><code>verify</code>忽略<code>CA</code>证书</strong></p>\n<blockquote>\n<p>很多情况如下图所示</p>\n<blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141657415221.png\" alt=\"image-20211201192347257\"></p>\n</blockquote>\n<p>爬虫过程遇到下列情况</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requests.exceptions.SSLError: HTTPSConnection.....</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>设置为<code>False</code>即可</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认是True，设置为False</span></span><br><span class=\"line\"><span class=\"comment\"># 运行过程会报警告的，但是 don&#x27;t worry it 爬虫还是可以爬取内容的</span></span><br><span class=\"line\">response = requests.get(url, verify=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<p><strong><code>post</code>请求</strong></p>\n<blockquote>\n<p><code>post</code>用途</p>\n<ul>\n<li>一般有账号密码，都会使用<code>post</code>请求，因为<code>get</code>请求是在<code>url</code>中的明文</li>\n<li>大文件以及多数据，都是使用<code>post</code></li>\n<li><code>web</code>工程师会认为<code>post</code>比<code>get</code>请求更加安全</li>\n</ul>\n<p>简单实现</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">respose = requests.post(url, data) <span class=\"comment\"># data是一个字典</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>找<code>data</code>的步骤寻找固定值：一般来说浏览器抓抓包就知道了</p>\n<ul>\n<li>寻找输入值：也一般来说浏览器抓抓包就知道了</li>\n<li>寻找预设值 - 静态文件：一般来说，需要从<code>html</code>文件中搜索，可以尝试，这个是反爬的</li>\n<li>寻找预设值 - 发请求：需要对指定地址发送请求</li>\n<li>寻找动态生成值：一般是客户端生成的，反爬的重点，一般采用<code>Javascript</code>生成</li>\n</ul>\n<p><code>data</code>反爬套路</p>\n<ul>\n<li>模仿其他浏览器发送，如手机什么的，因为很多浏览器都是不一样的反爬，找个弱的</li>\n<li>注意时间戳什么的</li>\n<li>注意里面的<code>JS</code>文件</li>\n<li>有些可能是随机值</li>\n<li>从<code>html</code>提取，可以试试无痕浏览器</li>\n</ul>\n</blockquote>\n<p><strong><code>requess.session</code>状态保持</strong></p>\n<ul>\n<li>自动保持<code>cookie</code>，一般多次请求（如登录之后再操作的），使用方法</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session = requests.session()</span><br><span class=\"line\">session.headers = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">session.data = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response = session.get(url)</span><br><span class=\"line\">response = session.post(url)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如下用法</span></span><br><span class=\"line\">s = rq.session()</span><br><span class=\"line\">s.trust_env</span><br><span class=\"line\">s.verify</span><br><span class=\"line\">s.headers</span><br><span class=\"line\">s.proxies</span><br><span class=\"line\">s.cookies</span><br><span class=\"line\">s.get(url, data=data)</span><br><span class=\"line\">s.post(url, data=data)</span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<h2 id=\"正则表达式，这个也是重点\"><a href=\"#正则表达式，这个也是重点\" class=\"headerlink\" title=\"正则表达式，这个也是重点\"></a>正则表达式，这个也是重点</h2><blockquote>\n<p><strong>首先如何使用正则表达式</strong></p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response = requests.get(url)</span><br><span class=\"line\">restr = response.content.decode()   <span class=\"comment\"># 转成utf-8或者gbk</span></span><br><span class=\"line\"><span class=\"comment\"># 正则提取</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re  <span class=\"comment\"># 导入正则模块</span></span><br><span class=\"line\">str_tmp = <span class=\"string\">&quot;&lt;link href=\\&quot;https://stacdn.proginn.com/plugin/swiper/swiper.min.css?version=4.30.2\\&quot; rel=\\&quot;stylesheet\\&quot; type=\\&quot;text/css\\&quot;&gt;&quot;</span>   <span class=\"comment\"># 临时字符串，不用写到代码里</span></span><br><span class=\"line\"><span class=\"comment\"># 假如想要获取上面中的href，那么这样写正则表达式</span></span><br><span class=\"line\"><span class=\"comment\"># 正则</span></span><br><span class=\"line\">restr = <span class=\"string\">&#x27;&lt;link href=\\&quot;(.*?)\\&quot; rel=\\&quot;stylesheet\\&quot; type=\\&quot;text/css\\&quot;&gt;&#x27;</span>   <span class=\"comment\"># 这个是以非贪婪模式匹配多个字符</span></span><br><span class=\"line\"><span class=\"comment\"># 然后匹配一下全文，看看是否获取了对应的</span></span><br><span class=\"line\">dst_list = re.findall(restr, str_tmp)   <span class=\"comment\"># 打印一下看看就知道了</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<h2 id=\"额外补充知识\"><a href=\"#额外补充知识\" class=\"headerlink\" title=\"额外补充知识\"></a>额外补充知识</h2><blockquote>\n<p><strong><code>form</code>表单</strong></p>\n<ul>\n<li>以<code>github</code>为例</li>\n<li>一般来说，<code>form</code>表单上面会有很多消息可挖掘，如下图所示</li>\n</ul>\n<blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141658057971.png\" alt=\"image-20211201205057556\"></p>\n<ul>\n<li>其中，<code>action</code>指的是提交给的路径</li>\n<li><code>method</code>是提交方法</li>\n<li><code>token</code>这个一般用来表示保持的意思，同行的<code>value</code>表示<code>token</code>的值</li>\n<li>而下面这个<code>name</code>，就是输入标签将里面的值提交给什么了，这里是提交给<code>login</code></li>\n</ul>\n</blockquote>\n<p><strong>往往需要多次抓包，多次比较才行，找出差异</strong></p>\n<ul>\n<li>如在无痕串口进行多次退出和登录</li>\n<li>主要是为了找出<code>post</code>的变值（不包括输入值，除非输入值不是明文传输）</li>\n</ul>\n<p><strong>注意多次爬虫，需要注意页面的跳转</strong></p>\n<ul>\n<li>比如登录的时候，一般会跳转的</li>\n</ul>\n</blockquote>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>​        <strong>技术永远是好东西，只是拿来做什么</strong></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<p>​        <strong><em>这篇博客主要是写给自己看的，如果完全的初学者，建议看我的另外一篇<a href=\"https://minzhiyoyo.github.io/2022/04/05/Python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%88%9D%E5%AD%A6%E8%80%85/\">博客</a>。</em></strong></p>\n<h2 id=\"1、requests模块的使用\"><a href=\"#1、requests模块的使用\" class=\"headerlink\" title=\"1、requests模块的使用\"></a>1、<code>requests</code>模块的使用</h2><blockquote>\n<p><strong>response的用法</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ====== 1、基础知识  ======== #</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">url = <span class=\"string\">&quot;http://www.baidu.com&quot;</span></span><br><span class=\"line\">response = requests.get(url)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(respones.text)            <span class=\"comment\"># 注意，text这个变量是默认解码过的，根据内容自动猜测的解码，str类数据</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.content.decode())       </span><br><span class=\"line\"><span class=\"comment\"># content是没有解码的，bytes数据，默认用utf-8解码，也可以指定gbk解码，如decode(&#x27;gbk&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># 常见的解码方式：utf-8，gbk，gb2312，ascii，iso-8859-1</span></span><br><span class=\"line\"><span class=\"comment\"># 有些平台可能上述都不行，那就用bytes存储就好</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(responst.encoding)            <span class=\"comment\"># 推测的遍码格式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当然可以先设置encoding</span></span><br><span class=\"line\">response.encoding = <span class=\"string\">&quot;utf8&quot;</span>   <span class=\"comment\"># 注意不是写成 utf-8</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.text)   <span class=\"comment\"># 即可按照utf-8解码</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ====== 2、常见的对象参数和方法  ======== #</span></span><br><span class=\"line\"><span class=\"comment\"># 响应的url</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.url)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 状态码（一般来说，不要相信）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应对应的请求头</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.request.headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应头</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应对应请求的cookie 返回cookieJar类型</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.request._cookies)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应的cookie</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.cookies)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动将json字符串类型的响应内容转换成python对象</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.json())</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>关闭代理</strong></p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxies = &#123;<span class=\"string\">&quot;http&quot;</span>: <span class=\"literal\">None</span>, <span class=\"string\">&quot;https&quot;</span>: <span class=\"literal\">None</span>&#125;</span><br><span class=\"line\">response = rq.get(url, headers=headers, verify=<span class=\"literal\">False</span>, proxies=proxies) <span class=\"comment\"># 关闭代理，关闭ssl认证</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<hr>\n<h2 id=\"2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）\"><a href=\"#2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）\" class=\"headerlink\" title=\"2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）\"></a>2、浏览器中的操作合集（可切换成无痕有痕分别都操作，带入多种数值操作）</h2><blockquote>\n<p><strong>获取所有数据，勾选<code>All</code></strong></p>\n<blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141654056235.png\" alt=\"image-20211201095759608\"></p>\n</blockquote>\n<p><strong>登录或者其他导致页面自动跳转，那么抓的包会刷新，勾选下面这个就不会刷新</strong></p>\n<blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141654704502.png\" alt=\"image-20211201205357600\"></p>\n</blockquote>\n<p><strong>查看请求数据和响应数据</strong></p>\n<blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141655305903.png\" alt=\"image-20211201195017543\"></p>\n</blockquote>\n<p><strong>关于请求头的一些参数意义</strong></p>\n<blockquote>\n<p><code>Referer</code>：这个是解释从哪个网站跳转的</p>\n<p><code>User-Agent</code>：包含了请求主机的信息，包括系统信息和浏览器信息，如果要伪装成浏览器，这个参数很重要</p>\n<p><code>Cookie</code>：这个分为<code>请求cookie</code>和<code>响应cookie</code>，分开使用</p>\n<p><code>host</code>：请求域名</p>\n<p><code>Connection</code>：是否保持连接，例如<code>keep-alive</code>，<code>close</code></p>\n<p><code>Upgrade-Insecure-Requests</code>：升级为<code>https</code></p>\n</blockquote>\n<p><strong>关于响应头的一些参数意义</strong> - 响应头一般是返回参数，主要看请求头</p>\n<blockquote>\n<p><code>Set-Cookie</code>：设置的<code>cookie</code></p>\n<p>状态码：200表示成功，但是，一般不要关注状态码，因为其不可信</p>\n</blockquote>\n<p><strong>常见的单词意义</strong></p>\n<blockquote>\n<p><code>token</code>：这个是一般为了保持的浏览器的连接性</p>\n</blockquote>\n<p><strong>注意事项</strong></p>\n<blockquote>\n<p>上面的<code>host</code>是域名，不一定是请求<code>url</code>，请求url看下面图</p>\n<blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141656030791.png\" alt=\"image-20211201194750582\"></p>\n</blockquote>\n</blockquote>\n<p><strong>其他帮助网站合集</strong></p>\n<blockquote>\n<ul>\n<li><p><a href=\"https://www.json.cn/\">在线字符串转<code>json</code></a></p>\n</li>\n<li><p><strong>免费代理站点</strong></p>\n<blockquote>\n<p><a href=\"https://www.kuaidaili.com/free/\">国内免费代理站点1</a></p>\n<p><a href=\"https://proxy.mimvp.com/freeopen\">国内免费代理站点2</a></p>\n<p><a href=\"https://www.89ip.cn/index.html\">国内免费代理站点3</a></p>\n</blockquote>\n</li>\n<li></li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"3、爬虫入门一\"><a href=\"#3、爬虫入门一\" class=\"headerlink\" title=\"3、爬虫入门一\"></a>3、爬虫入门一</h2><blockquote>\n<p><strong>注意请求头中的一些参数</strong></p>\n<ul>\n<li><code>User-Agent</code>：包含了很多参数，如浏览器数据，系统数据等</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">headers = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#x27;</span>  <span class=\"comment\"># 最好不要加到这一行的值，因为会报错，不明白为什么</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response1 = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>发送带参数的请求</strong></p>\n<ul>\n<li><code>url</code>直接带参数</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># http://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=python&amp;fenlei=256&amp;rsv_pq=8cb91fd5000035bd&amp;rsv_t=368aR6DDwiiYX59pfDu4vQz2%2FajgsJuSG4IS8mBB5GeZwSo6Sn%2BjQuytYZM&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug3=9&amp;rsv_sug1=7&amp;rsv_sug7=101&amp;rsv_sug2=0&amp;rsv_btype=i&amp;prefixsug=python&amp;rsp=5&amp;inputT=2667&amp;rsv_sug4=6046</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如上面这个连接，可以尝试删掉一下不要的参数，最终得到下面这个</span></span><br><span class=\"line\"><span class=\"comment\"># http://www.baidu.com/s?wd=python</span></span><br><span class=\"line\"><span class=\"comment\"># 这个才是关键，然后进行get请求</span></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://www.baidu.com/s?wd=python&#x27;</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">##  注意，get请求不要使用https</span></span><br><span class=\"line\">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>使用<code>params</code>携带参数字典</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">&#x27;http://www.baidu.com/s?&#x27;</span>  <span class=\"comment\"># 注意这里需要加上s?，这个是百度的特性</span></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\"> <span class=\"string\">&#x27;wd&#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">heads = &#123;<span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span>&#125;</span><br><span class=\"line\">response = requests.get(url, params=data, headers=heads)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>携带<code>cookie</code>信息，<code>cookie</code>一般有时效性，过段时间需要重新获取</strong></p>\n<ul>\n<li>以<code>github</code>为列</li>\n</ul>\n<blockquote>\n<p>见下列图片，浏览器抓包</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141656765084.png\" alt=\"image-20211201111147337\"></p>\n</blockquote>\n<ul>\n<li>在<code>headers</code>携带</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">headers=&#123;</span><br><span class=\"line\"> <span class=\"string\">&#x27;cookie&#x27;</span>: <span class=\"string\">&#x27;xxxx&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;xxxx&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>使用<code>cookie</code>参数来保持</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构建cookie字典</span></span><br><span class=\"line\"><span class=\"comment\"># 需要先切割键值对</span></span><br><span class=\"line\"><span class=\"comment\"># 如下列cookie</span></span><br><span class=\"line\">cookies = <span class=\"string\">&#x27;_octo=GH1.1.612724434.1638322138; tz=Asia/Shanghai; _device_id=5fa9f396b9f0691f8db3054f0b87dbb9; has_recent_activity=1; user_session=03yOITMxPd4lG6qXwYYs9QEaFPgu2hxw04gHIymweU4J1EEe; __Host-user_session_same_site=03yOITMxPd4lG6qXwYYs9QEaFPgu2hxw04gHIymweU4J1EEe; tz=Asia/Shanghai; color_mode=&#123;&quot;color_mode&quot;:&quot;auto&quot;,&quot;light_theme&quot;:&#123;&quot;name&quot;:&quot;light&quot;,&quot;color_mode&quot;:&quot;light&quot;&#125;,&quot;dark_theme&quot;:&#123;&quot;name&quot;:&quot;dark&quot;,&quot;color_mode&quot;:&quot;dark&quot;&#125;&#125;; logged_in=yes; dotcom_user=HF-Mfeng; _gh_sess=Bvk3bQRV+XfUQlh+l8Mu2MKWcl7O+LH3nLtnVSWOFvzAo50NycqAlQFAYbNMdXfpVAxSU08+65qeCVG2+wX97z/sjsdsI2grX7uXpIWvFpAi/pOBPyt4dXjNRT5n2o2VTvCgIP2mWQEXTg7HVjs3v16QCj/eUFbd460btIb6J1NG/DY1wW7jx8/VAS2vkFVZ7uTkoljKQdcs8K7oAndejxw7f3fdBKCybeghEIqu71SonF5C774enN5nq2zNtSILtA7lEA+s72ekWtLrFkzRpAoi+rzQLR2naFzIXCuFbbCdsLj7tNRAF8Uj0vyRn29LdqxbjMsssMmiiBVi81x3Vf7awZRHhjp2jzMINq+J3grHfOyjgwer1XRXkUW4RaIayrC60XOl/NG5tOPUmPCHqDkHhAyFx3TRVxhz84a+oxBSW9PJK4ebYu2sZrA3nCOdRkPDvEoMehgxhZuOz07e8usCuKc//p/tozi/WI+CuPWjYamF3Hyv1uYt4C1sKjZbhNzH3sjd+9hD5DP33IROZWlvCM4W2PWmq6RWyC5B1Dyk8pAq89W87dsdm5W2eyMo/xNLdwZi+o8cXkJROi8W/XQa6NwRWlh9yON+xl3L9Txtesvi3mlB7b1L+ic/XR4f7Wh8C59yeyY67lijumG/qfX0F8w3H76BPnlmbH9oxL4qRkWwVSflal4LjRhgOaoiCZzs1r6oellyNV6pPilm7QRbP7KEnq+R+PusPQsDBWn4Gej/vbQ2P9cwqW9EQr+VhsV6MHUvhuGAY8MRB5eBKtxrhqXZMiLYak0Pk82cl9oesvU5tqp3xNo2VNHWXt5uM6YLQTggbG+spmuxqnbHt481AoMUNnRcN6WomLZ4vS4pYXO5NLa58uk9slgT/3iwPEWsy7HuK5FLYqcMvPTGNeO+nYs=--c91BUqTy9ZXXOfRr--YhanrwguBRPMP5S/I3ig0A==&#x27;</span></span><br><span class=\"line\">cookies = cookies.splie(<span class=\"string\">&quot;; &quot;</span>)</span><br><span class=\"line\">cookies_ = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> cookie <span class=\"keyword\">in</span> cookies:</span><br><span class=\"line\"> cookies_[cookie.split(<span class=\"string\">&#x27;=&#x27;</span>)[<span class=\"number\">0</span>]] = cookie.splie(<span class=\"string\">&#x27;=&#x27;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其中有许多的等号，如_octo=GH1.1.612724434.1638322138，就是一个键值对</span></span><br><span class=\"line\">respose = requests.get(url,headers=headers,cookies=cookies_)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li><code>cookieJar</code>对象转换成<code>cookie</code>字典，一般用不到</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 什么是cookieJar对象呢，如下</span></span><br><span class=\"line\">requests.get(url).cookie        <span class=\"comment\"># 这个就是cookieJar对象</span></span><br><span class=\"line\">dict_cookies = requests.utils.dict_from_cookiejar(response.cookies)   <span class=\"comment\"># cookiejar转换成字典</span></span><br><span class=\"line\"></span><br><span class=\"line\">jar_cookies = requests.utils.cookiesjar_from_dict(dict_cookies)  <span class=\"comment\"># 重新转化成cookiejar</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong><code>timeout</code>的用法</strong></p>\n<ul>\n<li>设置一下</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wresponse = requests.get(url, timeout=<span class=\"number\">3</span>)  <span class=\"comment\"># 设为3s，一般设个十秒左右就好</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>代理<code>Proxy</code></strong></p>\n<blockquote>\n<p>代理分为正向代理和反向代理</p>\n<p>代理还分为透明代理、匿名代理、高匿代理</p>\n<ul>\n<li>透明代理</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REMOTE_ADDR = Proxy IP</span><br><span class=\"line\">HTTP_VIA = Proxy IP</span><br><span class=\"line\">HTTP_X_FORWARDED_FOR = Your IP</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>匿名代理</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REMOTE_ADDR = Proxy IP</span><br><span class=\"line\">HTTP_VIA = Proxy IP</span><br><span class=\"line\">HTTP_X_FORWARDED_FOR = Proxy IP</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>高匿代理</li>\n</ul>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REMOTE_ADDR = Proxy IP</span><br><span class=\"line\">HTTP_VIA = not determined</span><br><span class=\"line\">HTTP_X_FORWARDED_FOR = not determined</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>代理还可分为，<code>http、https、socks</code></p>\n<ul>\n<li><code>http</code>：目标<code>url</code>为<code>http</code>协议</li>\n<li><code>https</code>：目标<code>url</code>为<code>https</code>协议</li>\n<li><code>socks</code>：只传递数据包，不在乎什么应用协议，耗时少</li>\n</ul>\n<p><strong>用法</strong></p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxies = &#123;</span><br><span class=\"line\"> <span class=\"string\">&#x27;http&#x27;</span>: <span class=\"string\">&#x27;http://127.0.0.1:7890&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;https&#x27;</span>: <span class=\"string\">&#x27;http://127.0.0.1:7890&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response = requests.get(url, proxies=proxies)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.kuaidaili.com/free/\">国内免费代理站点1</a></p>\n<p><a href=\"https://proxy.mimvp.com/freeopen\">国内免费代理站点2</a></p>\n<p><a href=\"https://www.89ip.cn/index.html\">国内免费代理站点3</a></p>\n</blockquote>\n<ul>\n<li>并且代理站点可能会给你添加一下信息，使得你更像一个浏览器</li>\n<li>代理也有可能截获你的数据，所以这个也要注意</li>\n</ul>\n</blockquote>\n<p><strong><code>verify</code>忽略<code>CA</code>证书</strong></p>\n<blockquote>\n<p>很多情况如下图所示</p>\n<blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141657415221.png\" alt=\"image-20211201192347257\"></p>\n</blockquote>\n<p>爬虫过程遇到下列情况</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requests.exceptions.SSLError: HTTPSConnection.....</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>设置为<code>False</code>即可</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认是True，设置为False</span></span><br><span class=\"line\"><span class=\"comment\"># 运行过程会报警告的，但是 don&#x27;t worry it 爬虫还是可以爬取内容的</span></span><br><span class=\"line\">response = requests.get(url, verify=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<p><strong><code>post</code>请求</strong></p>\n<blockquote>\n<p><code>post</code>用途</p>\n<ul>\n<li>一般有账号密码，都会使用<code>post</code>请求，因为<code>get</code>请求是在<code>url</code>中的明文</li>\n<li>大文件以及多数据，都是使用<code>post</code></li>\n<li><code>web</code>工程师会认为<code>post</code>比<code>get</code>请求更加安全</li>\n</ul>\n<p>简单实现</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">respose = requests.post(url, data) <span class=\"comment\"># data是一个字典</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>找<code>data</code>的步骤寻找固定值：一般来说浏览器抓抓包就知道了</p>\n<ul>\n<li>寻找输入值：也一般来说浏览器抓抓包就知道了</li>\n<li>寻找预设值 - 静态文件：一般来说，需要从<code>html</code>文件中搜索，可以尝试，这个是反爬的</li>\n<li>寻找预设值 - 发请求：需要对指定地址发送请求</li>\n<li>寻找动态生成值：一般是客户端生成的，反爬的重点，一般采用<code>Javascript</code>生成</li>\n</ul>\n<p><code>data</code>反爬套路</p>\n<ul>\n<li>模仿其他浏览器发送，如手机什么的，因为很多浏览器都是不一样的反爬，找个弱的</li>\n<li>注意时间戳什么的</li>\n<li>注意里面的<code>JS</code>文件</li>\n<li>有些可能是随机值</li>\n<li>从<code>html</code>提取，可以试试无痕浏览器</li>\n</ul>\n</blockquote>\n<p><strong><code>requess.session</code>状态保持</strong></p>\n<ul>\n<li>自动保持<code>cookie</code>，一般多次请求（如登录之后再操作的），使用方法</li>\n</ul>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session = requests.session()</span><br><span class=\"line\">session.headers = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">session.data = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response = session.get(url)</span><br><span class=\"line\">response = session.post(url)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如下用法</span></span><br><span class=\"line\">s = rq.session()</span><br><span class=\"line\">s.trust_env</span><br><span class=\"line\">s.verify</span><br><span class=\"line\">s.headers</span><br><span class=\"line\">s.proxies</span><br><span class=\"line\">s.cookies</span><br><span class=\"line\">s.get(url, data=data)</span><br><span class=\"line\">s.post(url, data=data)</span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<h2 id=\"正则表达式，这个也是重点\"><a href=\"#正则表达式，这个也是重点\" class=\"headerlink\" title=\"正则表达式，这个也是重点\"></a>正则表达式，这个也是重点</h2><blockquote>\n<p><strong>首先如何使用正则表达式</strong></p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response = requests.get(url)</span><br><span class=\"line\">restr = response.content.decode()   <span class=\"comment\"># 转成utf-8或者gbk</span></span><br><span class=\"line\"><span class=\"comment\"># 正则提取</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re  <span class=\"comment\"># 导入正则模块</span></span><br><span class=\"line\">str_tmp = <span class=\"string\">&quot;&lt;link href=\\&quot;https://stacdn.proginn.com/plugin/swiper/swiper.min.css?version=4.30.2\\&quot; rel=\\&quot;stylesheet\\&quot; type=\\&quot;text/css\\&quot;&gt;&quot;</span>   <span class=\"comment\"># 临时字符串，不用写到代码里</span></span><br><span class=\"line\"><span class=\"comment\"># 假如想要获取上面中的href，那么这样写正则表达式</span></span><br><span class=\"line\"><span class=\"comment\"># 正则</span></span><br><span class=\"line\">restr = <span class=\"string\">&#x27;&lt;link href=\\&quot;(.*?)\\&quot; rel=\\&quot;stylesheet\\&quot; type=\\&quot;text/css\\&quot;&gt;&#x27;</span>   <span class=\"comment\"># 这个是以非贪婪模式匹配多个字符</span></span><br><span class=\"line\"><span class=\"comment\"># 然后匹配一下全文，看看是否获取了对应的</span></span><br><span class=\"line\">dst_list = re.findall(restr, str_tmp)   <span class=\"comment\"># 打印一下看看就知道了</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<h2 id=\"额外补充知识\"><a href=\"#额外补充知识\" class=\"headerlink\" title=\"额外补充知识\"></a>额外补充知识</h2><blockquote>\n<p><strong><code>form</code>表单</strong></p>\n<ul>\n<li>以<code>github</code>为例</li>\n<li>一般来说，<code>form</code>表单上面会有很多消息可挖掘，如下图所示</li>\n</ul>\n<blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141658057971.png\" alt=\"image-20211201205057556\"></p>\n<ul>\n<li>其中，<code>action</code>指的是提交给的路径</li>\n<li><code>method</code>是提交方法</li>\n<li><code>token</code>这个一般用来表示保持的意思，同行的<code>value</code>表示<code>token</code>的值</li>\n<li>而下面这个<code>name</code>，就是输入标签将里面的值提交给什么了，这里是提交给<code>login</code></li>\n</ul>\n</blockquote>\n<p><strong>往往需要多次抓包，多次比较才行，找出差异</strong></p>\n<ul>\n<li>如在无痕串口进行多次退出和登录</li>\n<li>主要是为了找出<code>post</code>的变值（不包括输入值，除非输入值不是明文传输）</li>\n</ul>\n<p><strong>注意多次爬虫，需要注意页面的跳转</strong></p>\n<ul>\n<li>比如登录的时候，一般会跳转的</li>\n</ul>\n</blockquote>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>​        <strong>技术永远是好东西，只是拿来做什么</strong></p>\n"},{"title":"Python爬虫学习-更加友好的教程","cover":"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141723386044.png","date":"2022-04-05T12:07:16.000Z","excerpt":"准备拿来社团授课的教程，比之前那一篇更加清晰一点","_content":"\n# `Python`爬虫入门教程\n\n---\n\n## 基础知识\n\n### 什么是`HTML、CSS、JavaScript`\n\n> 网页往往采用`html+css+js`开发，`html`是一门标记语言\n>\n> 如下：\n>\n> ```html\n> <!- 将下面这句话放入html文件中，-->\n> <!- 然后浏览器就会将这句话解释为下面那张图片，-->\n> <!- 这个就是浏览器渲染的功能-->\n> <!- 这里我们知道了一个词——浏览器的渲染   -->\n> <!- 并且我们发现，浏览器会在下面这个网址 自动 -->\n> <!- 把这张图片下载下来，然后渲染给我们看，这在我们之后抓包会有用 -->\n> <img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141724826735.png\"\n> width=\"300px\">\n> ```\n>\n> <img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141724826735.png\" width=\"300px\">\n\n### 什么是请求，什么是响应\n\n> 请求：就是前端向后端发送一个请求，如请求我的账户浏览记录\n>\n> 响应：就是后端向前端发送一个响应，你请求你的账户浏览器记录，那么我把记录发给你，叫做响应\n>\n> `JavaScript`中有请求，浏览器渲染到其中的请求，就会向后端发送请求\n\n### 什么是`GET`，什么是`POST`\n\n> 这个是两种请求方式而已，`get`直接把请求数据放在链接里面，`post`一般以则不是\n\n### 什么是`Cookie`\n\n> 曲奇饼干？不是\n>\n> 打个比方，大家申请出校，需要在手机上申请，然后今天一天都可以通过刷脸进出校园\n>\n> 那么，在手机上申请相当于告诉学校后端，你请求了进出校权限。也相当于，你在网页上登录账户密码\n>\n> 然后，你一天可以通过刷脸，这个刷脸就是`cookie`，今天进出校园不需要再申请了\n>\n> 这个就是`cookie`的作用，最常见的就是，不需要每次点开一个页面都进行账户密码登录\n\n### `Python`基本语法\n\n> 这个本该大家自己去学习的，但是这里说好基础入门，就简单提一点点\n>\n> ```python\n> a = 1\n> b = 2\n> # if结构\n> if a > b:\n>  print(\"a大于b\")\n> else:\n>  print(\"a不大于b\")\n> \n> # while循环\n> while True:\n>  print(\"这里面是while循环\")\n> \n> # 列表和字典\n> m = [\"hello\", 2, 4.5]  # 列表支持不同数据类型，并且可以随意扩充和删减\n> n = {\t\t\t# 字典里面每个元素都是   键值:值   组成\n>  \"key1\": 3,\n>  \"key3\": \"hello\"\n> }\n> m[0]    ## 索引到第0个元素，即 \"hello\"\n> n[\"key1\"]   ## 索引到键值为\"key1\"的值，即 3\n> ```\n\n### 什么是抓包\n\n> 打个比方：你要向某人发一条数据，我在你们之间截获了或者记录了你们的数据，这个叫做抓包\n\n\n```mermaid\ngraph LR\nA(数据发送者) -->B[抓包者]\nB -->C(数据接收者)\n```\n\n> **那么我们需要抓什么包呢？抓包的用处在哪呢？**\n>\n> 答：我们需要抓取浏览器和后端服务器通信的包；用处是分析他们的数据然后用代码进行伪造数据发送，以便获得和浏览器同样的响应\n\n### 什么是代理\n\n> 不进行代理应该是下列图：\n\n```mermaid\ngraph LR\nA(前台客户端)-->|发送请求|C[后台服务器]\nC -->|返回响应|A\n```\n\n> 代理就是如下：\n\n\n```mermaid\ngraph LR\nA(前台客户端)-->|发送请求|B[代理服务器]\nB -->|转发请求|C(后台服务器)\nC -->|返回响应|B\nB -->|转发响应|A\n```\n\n### 如何伪造呢？\n\n> 1、一般网站开发者希望我们使用浏览器浏览他们的网站，不希望我们使用代码进行浏览\n>\n> 2、欸，但我就想用代码进行浏览，怎么办呢？\n>\n> 3、那么就需要将我们的代码尽量伪装成浏览器，让后端以为我们是浏览器\n>\n> 4、具体就是抓包，分析数据，用代码发送请求\n\n---\n\n## 浏览器抓包\n\n### 进入调试模式\n\n> 打开某个浏览器，按下键盘上的<kbd>F12</kbd>键，进入调试模式\n>\n> ![image-20211219160806912](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141725898764.png)\n>\n> 一般用得到上面四个红圈里面的内容，建议跟我一样，将这个调试界面放到右侧，不然之后找不到对应的按钮（仅代表个人习惯）。\n> 如果是英文的，也不要担心，相信这点英文应该看得懂，看不懂应该也能找到相应位置，还可以自行百度怎么换成中文哦。\n>\n> <img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141726760313.png\" width=\"300px\">\n\n> - 红圈1、找到页面上的元素分别对应哪句`html`标签\n> - 红圈2、主要看<kbd>元素</kbd>和<kbd>网络</kbd>两个\n> - 红圈3、左边如果是红色表示正在抓包记录，右边是清除已经抓到的包记录\n> - 红圈4、一般我喜欢直接点选<kbd>全部</kbd>这个按钮，其他的是过滤数据的类型\n\n### 如何寻找数据呢？\n\n> ![image-20211219162409621](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141727626349.png)\n>\n> 我们首先需要伪造成浏览器，发送请求标头，然后分析一下响应的数据，这个就是一个抓包过程啦\n>\n> 听起来是不是很简单呢？\n>\n> <kbd>简单</kbd> 打在公屏上\n\n---\n\n## 分析数据\n\n### 浏览器人性化查看数据\n\n> <center><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141728484488.png\" width=\"450px\"><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141729063974.png\" width=\"450px\"></center>\n>\n> 第一张图和第二张图有所区别，多了一个<kbd>载荷</kbd>选项，因为第二张图是在百度翻译上面抓的\n>\n> 第二张图发送请求时候带了参数，所以比第一张图多了<kbd>载荷</kbd>选项\n\n### 分析请求标头\n\n> **这么多的数据，我应该怎么办呢？**\n>\n> - `User-Agent`：这个相当于浏览器标识，看你是什么浏览器发送的，我们直接用这个就行`Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36`，这个代表是`chrome`浏览器的标识\n> - `Referer`：它其实是`refer`，就是代表这个网也从哪个网页来的\n> - `cookie`：就是`cookie`，前面基础知识提到过\n> - `请求网址`：就是你向哪个网址发送请求，请求的对象是哪个\n>\n> **查看载荷**\n>\n> 如上面第二张图中的请求网址是：![image-20211219170540421](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141729622955.png)\n>\n> 分为前后两部分组成，后面那部分就是载荷了，它是多个<kbd>字符串参数</kbd>，然后它是这么个形式：<kbd>键值=值</kbd> 组成的\n>\n> 多个<kbd>字符串参数</kbd>用`&`链接起来，把他人性化一点查看就是这样：<kbd>字符串参数</kbd>\n>\n> ![image-20211219170645219](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141730156726.png)\n>\n> **POST请求不仅仅只有请求头还有请求数据**\n>\n> 下面是百度翻译的`post`请求的载荷\n>\n> ![image-20211219170803923](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141730680021.png)\n>\n> 上面和`get`请求一样，是<kbd>字符串参数</kbd>，下面就是<kbd>表单数据</kbd>，这个是很重要的一个部分\n\n这些都是基础概念，之后会用到，现在先学学\n\n### 分析响应数据\n\n> 响应数据多种多样，常见的有：`html`文本，图片文件，表单数据，视频文件等等\n>\n> 其中，图片文件和视频文件等都是二进制格式\n>\n> `html`文本和表单数据是文本格式\n\n> - `html`文本\n>\n> 一般都需要请求这个，它会告诉浏览器需要<kbd>渲染</kbd>什么，如下载哪张图片，下载哪个音频，下载哪个文件等等\n>\n> 我们一般都需要分析一下这个文件\n>\n> - 图片文件\n>\n> 直接以二进制的形式写入本地就相当于下载下来\n>\n> - 表单数据\n>\n> 返回的数据中一般带有我们需要的数据，如翻译的请求，就会把翻译的结果再以表单的形式返回了\n\n## 代码编写\n\n有了上述的知识，可以进行代码编写，其实完全可以先进行代码编写，然后再去上述补充基本知识，这个顺序可以根据大家喜好来看。\n\n[***`requests`教程***](https://docs.python-requests.org/zh_CN/latest/user/quickstart.html)\n\n#### 导入`requests`包\n\n> 下载：`pip install requests`\n>\n> 导入：`import requests`\n>\n> `emmmmm `怎么说呢，这个好像不如跟着视频里面做一遍，虽然我还没有录视频，但是聪明的你们肯定会上百度吧\n\n#### `requests`包的使用\n\n> 这个教程顺序可能和网上很多都不一样\n>\n> ```python\n> import requests as rq\n> import json\n> import re\n> \n> tool = rq.session()   # 这个会返回一个爬虫工具箱，并且它会自动维持cookie\n> \n> verify=False   # 设置是否进行SSL验证，一般设置为否\n> url=\"https://baidu.com\"  # 这里请求百度的数据\n> headers={   # 设置请求头\n>  \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/\"\n>   \"537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\",\n> }\n> proxies={    # 设置代理\n>  \"http\": None,\n>  \"https\": None\n> }\n> params={   # 设置字符串参数\n> \n> }\n> data={  # 设置请求表单\n> \n> }\n> \n> # 发送get请求，得到get响应\n> responseGet = tool.get(url=url, params=params, headers=headers, verify=verify, proxies=proxies)\n> # 发送post请求，得到post响应\n> responsePost = tool.post(url=url, data=data, headers=headers, verify=verify, proxies=proxies)\n> \n> # 解析响应\n> # 1、假如响应是文本数据，如html文本\n> response = responseGet\n> response.content # 这个是内容，是二进制编码\n> response.content.decode(\"gbk\")  # 使用gbk解码，不加参数就是utf-8解码\n> # 2、假如响应是图片数据\n> with open(\"1.png\", \"wb\") as f:\n>  f.write(response.content)   # 直接以二进制写入文件\n> # 3、假如响应是表单数据\n> dat = json.loads(response.content.decode())   # 返回的就是一个字典数据了\n> \n> ```\n\n#### 正则表达式简单用法\n\n> 爬虫中的正则表达式一般会比较简单\n>\n> ```python\n> import re   # 导入正则表达式包\n> # 假如有下列字符串需要被匹配\n> # str1 = \"<link href=\"https://stacdn.proginn.com/plugin/swiper/swiper.min.css?version=4.30.2\"\n> # rel=\"stylesheet\" type=\"text/css\">\"\n> # 其中href中的是我们需要的那么\n> html = response.content.decode()\n> restr = \"<link\\\\shref=\\\"(.*?)\\\"\\\\srel=\\\"stylesheet\\\"\\\\stype=\\\"text/css\\\">\"\n> dst_list = re.findall(restr, html)   # 返回一个列表\n> # 上面这条语句，会将html里面所有形如str1中的href都返回到列表中\n> \n> # 假如我们是要爬取妹妹图，那么就把当前页面所有的妹妹图的网址都保存到列表了\n> # 只需要进行如下操作遍历列表就行\n> for pngurl in dst_list:\n>  \tprint(pngurl)\n> ```\n\n---\n\n# 结束语\n\n​\t\t爬虫会涉及到有关法律问题，这里不作讨论，但是希望大家不要拿来干坏事。***概不负责***。\n\n​\t\t爬虫与反爬、反反爬一直都在相互进行着，是相互迭代的过程，爬虫重点在于数据分析而不是代码编写。\n\n​\t\t本课程涉及的只是非常非常简单的爬虫，还有很多很多爬虫知识需要后续的学习，爬虫涉及的知识太广了，不是一堂课能够讲的清楚的。涵盖网络知识、密码知识、前后端工作方式、编码格式等等。之后应该学校课程有一门叫做<kbd>《计算机网络技术》</kbd>，我个人感觉这门课程非常重要，但是其实学校老师讲的可能`emmmmmm...`。大家可以课外多花时间学习，不管之后是嵌入式，物联网，互联网，软件开发，网络安全、科学上网等等方向都需要用到计算机网络的知识。\n\n​\t\t任重而道远，我学这个是凭借着兴趣而学习，所以更多的知识还是得看自己慢慢学。之后我如果有时间，应该会录制两三个爬虫例子。如爬取二次元桌面图片、一键登录校园网、获取天气预报、打造一个翻译官等等。\n","source":"_posts/Python爬虫学习——面向初学者.md","raw":"---\ntitle: Python爬虫学习-更加友好的教程\ncover: 'http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141723386044.png'\ndate: 2022-04-05 20:07:16\ntags:\n- Python\n- 爬虫\nexcerpt: '准备拿来社团授课的教程，比之前那一篇更加清晰一点'\ncategories: \n  - 爬虫\n---\n\n# `Python`爬虫入门教程\n\n---\n\n## 基础知识\n\n### 什么是`HTML、CSS、JavaScript`\n\n> 网页往往采用`html+css+js`开发，`html`是一门标记语言\n>\n> 如下：\n>\n> ```html\n> <!- 将下面这句话放入html文件中，-->\n> <!- 然后浏览器就会将这句话解释为下面那张图片，-->\n> <!- 这个就是浏览器渲染的功能-->\n> <!- 这里我们知道了一个词——浏览器的渲染   -->\n> <!- 并且我们发现，浏览器会在下面这个网址 自动 -->\n> <!- 把这张图片下载下来，然后渲染给我们看，这在我们之后抓包会有用 -->\n> <img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141724826735.png\"\n> width=\"300px\">\n> ```\n>\n> <img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141724826735.png\" width=\"300px\">\n\n### 什么是请求，什么是响应\n\n> 请求：就是前端向后端发送一个请求，如请求我的账户浏览记录\n>\n> 响应：就是后端向前端发送一个响应，你请求你的账户浏览器记录，那么我把记录发给你，叫做响应\n>\n> `JavaScript`中有请求，浏览器渲染到其中的请求，就会向后端发送请求\n\n### 什么是`GET`，什么是`POST`\n\n> 这个是两种请求方式而已，`get`直接把请求数据放在链接里面，`post`一般以则不是\n\n### 什么是`Cookie`\n\n> 曲奇饼干？不是\n>\n> 打个比方，大家申请出校，需要在手机上申请，然后今天一天都可以通过刷脸进出校园\n>\n> 那么，在手机上申请相当于告诉学校后端，你请求了进出校权限。也相当于，你在网页上登录账户密码\n>\n> 然后，你一天可以通过刷脸，这个刷脸就是`cookie`，今天进出校园不需要再申请了\n>\n> 这个就是`cookie`的作用，最常见的就是，不需要每次点开一个页面都进行账户密码登录\n\n### `Python`基本语法\n\n> 这个本该大家自己去学习的，但是这里说好基础入门，就简单提一点点\n>\n> ```python\n> a = 1\n> b = 2\n> # if结构\n> if a > b:\n>  print(\"a大于b\")\n> else:\n>  print(\"a不大于b\")\n> \n> # while循环\n> while True:\n>  print(\"这里面是while循环\")\n> \n> # 列表和字典\n> m = [\"hello\", 2, 4.5]  # 列表支持不同数据类型，并且可以随意扩充和删减\n> n = {\t\t\t# 字典里面每个元素都是   键值:值   组成\n>  \"key1\": 3,\n>  \"key3\": \"hello\"\n> }\n> m[0]    ## 索引到第0个元素，即 \"hello\"\n> n[\"key1\"]   ## 索引到键值为\"key1\"的值，即 3\n> ```\n\n### 什么是抓包\n\n> 打个比方：你要向某人发一条数据，我在你们之间截获了或者记录了你们的数据，这个叫做抓包\n\n\n```mermaid\ngraph LR\nA(数据发送者) -->B[抓包者]\nB -->C(数据接收者)\n```\n\n> **那么我们需要抓什么包呢？抓包的用处在哪呢？**\n>\n> 答：我们需要抓取浏览器和后端服务器通信的包；用处是分析他们的数据然后用代码进行伪造数据发送，以便获得和浏览器同样的响应\n\n### 什么是代理\n\n> 不进行代理应该是下列图：\n\n```mermaid\ngraph LR\nA(前台客户端)-->|发送请求|C[后台服务器]\nC -->|返回响应|A\n```\n\n> 代理就是如下：\n\n\n```mermaid\ngraph LR\nA(前台客户端)-->|发送请求|B[代理服务器]\nB -->|转发请求|C(后台服务器)\nC -->|返回响应|B\nB -->|转发响应|A\n```\n\n### 如何伪造呢？\n\n> 1、一般网站开发者希望我们使用浏览器浏览他们的网站，不希望我们使用代码进行浏览\n>\n> 2、欸，但我就想用代码进行浏览，怎么办呢？\n>\n> 3、那么就需要将我们的代码尽量伪装成浏览器，让后端以为我们是浏览器\n>\n> 4、具体就是抓包，分析数据，用代码发送请求\n\n---\n\n## 浏览器抓包\n\n### 进入调试模式\n\n> 打开某个浏览器，按下键盘上的<kbd>F12</kbd>键，进入调试模式\n>\n> ![image-20211219160806912](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141725898764.png)\n>\n> 一般用得到上面四个红圈里面的内容，建议跟我一样，将这个调试界面放到右侧，不然之后找不到对应的按钮（仅代表个人习惯）。\n> 如果是英文的，也不要担心，相信这点英文应该看得懂，看不懂应该也能找到相应位置，还可以自行百度怎么换成中文哦。\n>\n> <img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141726760313.png\" width=\"300px\">\n\n> - 红圈1、找到页面上的元素分别对应哪句`html`标签\n> - 红圈2、主要看<kbd>元素</kbd>和<kbd>网络</kbd>两个\n> - 红圈3、左边如果是红色表示正在抓包记录，右边是清除已经抓到的包记录\n> - 红圈4、一般我喜欢直接点选<kbd>全部</kbd>这个按钮，其他的是过滤数据的类型\n\n### 如何寻找数据呢？\n\n> ![image-20211219162409621](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141727626349.png)\n>\n> 我们首先需要伪造成浏览器，发送请求标头，然后分析一下响应的数据，这个就是一个抓包过程啦\n>\n> 听起来是不是很简单呢？\n>\n> <kbd>简单</kbd> 打在公屏上\n\n---\n\n## 分析数据\n\n### 浏览器人性化查看数据\n\n> <center><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141728484488.png\" width=\"450px\"><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141729063974.png\" width=\"450px\"></center>\n>\n> 第一张图和第二张图有所区别，多了一个<kbd>载荷</kbd>选项，因为第二张图是在百度翻译上面抓的\n>\n> 第二张图发送请求时候带了参数，所以比第一张图多了<kbd>载荷</kbd>选项\n\n### 分析请求标头\n\n> **这么多的数据，我应该怎么办呢？**\n>\n> - `User-Agent`：这个相当于浏览器标识，看你是什么浏览器发送的，我们直接用这个就行`Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36`，这个代表是`chrome`浏览器的标识\n> - `Referer`：它其实是`refer`，就是代表这个网也从哪个网页来的\n> - `cookie`：就是`cookie`，前面基础知识提到过\n> - `请求网址`：就是你向哪个网址发送请求，请求的对象是哪个\n>\n> **查看载荷**\n>\n> 如上面第二张图中的请求网址是：![image-20211219170540421](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141729622955.png)\n>\n> 分为前后两部分组成，后面那部分就是载荷了，它是多个<kbd>字符串参数</kbd>，然后它是这么个形式：<kbd>键值=值</kbd> 组成的\n>\n> 多个<kbd>字符串参数</kbd>用`&`链接起来，把他人性化一点查看就是这样：<kbd>字符串参数</kbd>\n>\n> ![image-20211219170645219](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141730156726.png)\n>\n> **POST请求不仅仅只有请求头还有请求数据**\n>\n> 下面是百度翻译的`post`请求的载荷\n>\n> ![image-20211219170803923](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141730680021.png)\n>\n> 上面和`get`请求一样，是<kbd>字符串参数</kbd>，下面就是<kbd>表单数据</kbd>，这个是很重要的一个部分\n\n这些都是基础概念，之后会用到，现在先学学\n\n### 分析响应数据\n\n> 响应数据多种多样，常见的有：`html`文本，图片文件，表单数据，视频文件等等\n>\n> 其中，图片文件和视频文件等都是二进制格式\n>\n> `html`文本和表单数据是文本格式\n\n> - `html`文本\n>\n> 一般都需要请求这个，它会告诉浏览器需要<kbd>渲染</kbd>什么，如下载哪张图片，下载哪个音频，下载哪个文件等等\n>\n> 我们一般都需要分析一下这个文件\n>\n> - 图片文件\n>\n> 直接以二进制的形式写入本地就相当于下载下来\n>\n> - 表单数据\n>\n> 返回的数据中一般带有我们需要的数据，如翻译的请求，就会把翻译的结果再以表单的形式返回了\n\n## 代码编写\n\n有了上述的知识，可以进行代码编写，其实完全可以先进行代码编写，然后再去上述补充基本知识，这个顺序可以根据大家喜好来看。\n\n[***`requests`教程***](https://docs.python-requests.org/zh_CN/latest/user/quickstart.html)\n\n#### 导入`requests`包\n\n> 下载：`pip install requests`\n>\n> 导入：`import requests`\n>\n> `emmmmm `怎么说呢，这个好像不如跟着视频里面做一遍，虽然我还没有录视频，但是聪明的你们肯定会上百度吧\n\n#### `requests`包的使用\n\n> 这个教程顺序可能和网上很多都不一样\n>\n> ```python\n> import requests as rq\n> import json\n> import re\n> \n> tool = rq.session()   # 这个会返回一个爬虫工具箱，并且它会自动维持cookie\n> \n> verify=False   # 设置是否进行SSL验证，一般设置为否\n> url=\"https://baidu.com\"  # 这里请求百度的数据\n> headers={   # 设置请求头\n>  \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/\"\n>   \"537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\",\n> }\n> proxies={    # 设置代理\n>  \"http\": None,\n>  \"https\": None\n> }\n> params={   # 设置字符串参数\n> \n> }\n> data={  # 设置请求表单\n> \n> }\n> \n> # 发送get请求，得到get响应\n> responseGet = tool.get(url=url, params=params, headers=headers, verify=verify, proxies=proxies)\n> # 发送post请求，得到post响应\n> responsePost = tool.post(url=url, data=data, headers=headers, verify=verify, proxies=proxies)\n> \n> # 解析响应\n> # 1、假如响应是文本数据，如html文本\n> response = responseGet\n> response.content # 这个是内容，是二进制编码\n> response.content.decode(\"gbk\")  # 使用gbk解码，不加参数就是utf-8解码\n> # 2、假如响应是图片数据\n> with open(\"1.png\", \"wb\") as f:\n>  f.write(response.content)   # 直接以二进制写入文件\n> # 3、假如响应是表单数据\n> dat = json.loads(response.content.decode())   # 返回的就是一个字典数据了\n> \n> ```\n\n#### 正则表达式简单用法\n\n> 爬虫中的正则表达式一般会比较简单\n>\n> ```python\n> import re   # 导入正则表达式包\n> # 假如有下列字符串需要被匹配\n> # str1 = \"<link href=\"https://stacdn.proginn.com/plugin/swiper/swiper.min.css?version=4.30.2\"\n> # rel=\"stylesheet\" type=\"text/css\">\"\n> # 其中href中的是我们需要的那么\n> html = response.content.decode()\n> restr = \"<link\\\\shref=\\\"(.*?)\\\"\\\\srel=\\\"stylesheet\\\"\\\\stype=\\\"text/css\\\">\"\n> dst_list = re.findall(restr, html)   # 返回一个列表\n> # 上面这条语句，会将html里面所有形如str1中的href都返回到列表中\n> \n> # 假如我们是要爬取妹妹图，那么就把当前页面所有的妹妹图的网址都保存到列表了\n> # 只需要进行如下操作遍历列表就行\n> for pngurl in dst_list:\n>  \tprint(pngurl)\n> ```\n\n---\n\n# 结束语\n\n​\t\t爬虫会涉及到有关法律问题，这里不作讨论，但是希望大家不要拿来干坏事。***概不负责***。\n\n​\t\t爬虫与反爬、反反爬一直都在相互进行着，是相互迭代的过程，爬虫重点在于数据分析而不是代码编写。\n\n​\t\t本课程涉及的只是非常非常简单的爬虫，还有很多很多爬虫知识需要后续的学习，爬虫涉及的知识太广了，不是一堂课能够讲的清楚的。涵盖网络知识、密码知识、前后端工作方式、编码格式等等。之后应该学校课程有一门叫做<kbd>《计算机网络技术》</kbd>，我个人感觉这门课程非常重要，但是其实学校老师讲的可能`emmmmmm...`。大家可以课外多花时间学习，不管之后是嵌入式，物联网，互联网，软件开发，网络安全、科学上网等等方向都需要用到计算机网络的知识。\n\n​\t\t任重而道远，我学这个是凭借着兴趣而学习，所以更多的知识还是得看自己慢慢学。之后我如果有时间，应该会录制两三个爬虫例子。如爬取二次元桌面图片、一键登录校园网、获取天气预报、打造一个翻译官等等。\n","slug":"Python爬虫学习——面向初学者","published":1,"updated":"2022-10-12T12:09:46.795Z","_id":"cl40x92nq0009p0u5c4ohb7zo","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Python爬虫入门教程\"><a href=\"#Python爬虫入门教程\" class=\"headerlink\" title=\"Python爬虫入门教程\"></a><code>Python</code>爬虫入门教程</h1><hr>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"什么是HTML、CSS、JavaScript\"><a href=\"#什么是HTML、CSS、JavaScript\" class=\"headerlink\" title=\"什么是HTML、CSS、JavaScript\"></a>什么是<code>HTML、CSS、JavaScript</code></h3><blockquote>\n<p>网页往往采用<code>html+css+js</code>开发，<code>html</code>是一门标记语言</p>\n<p>如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!- 将下面这句话放入html文件中，--&gt;</span><br><span class=\"line\">&lt;!- 然后浏览器就会将这句话解释为下面那张图片，--&gt;</span><br><span class=\"line\">&lt;!- 这个就是浏览器渲染的功能--&gt;</span><br><span class=\"line\">&lt;!- 这里我们知道了一个词——浏览器的渲染   --&gt;</span><br><span class=\"line\">&lt;!- 并且我们发现，浏览器会在下面这个网址 自动 --&gt;</span><br><span class=\"line\">&lt;!- 把这张图片下载下来，然后渲染给我们看，这在我们之后抓包会有用 --&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141724826735.png&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">width</span>=<span class=\"string\">&quot;300px&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141724826735.png\" width=\"300px\"></p>\n</blockquote>\n<h3 id=\"什么是请求，什么是响应\"><a href=\"#什么是请求，什么是响应\" class=\"headerlink\" title=\"什么是请求，什么是响应\"></a>什么是请求，什么是响应</h3><blockquote>\n<p>请求：就是前端向后端发送一个请求，如请求我的账户浏览记录</p>\n<p>响应：就是后端向前端发送一个响应，你请求你的账户浏览器记录，那么我把记录发给你，叫做响应</p>\n<p><code>JavaScript</code>中有请求，浏览器渲染到其中的请求，就会向后端发送请求</p>\n</blockquote>\n<h3 id=\"什么是GET，什么是POST\"><a href=\"#什么是GET，什么是POST\" class=\"headerlink\" title=\"什么是GET，什么是POST\"></a>什么是<code>GET</code>，什么是<code>POST</code></h3><blockquote>\n<p>这个是两种请求方式而已，<code>get</code>直接把请求数据放在链接里面，<code>post</code>一般以则不是</p>\n</blockquote>\n<h3 id=\"什么是Cookie\"><a href=\"#什么是Cookie\" class=\"headerlink\" title=\"什么是Cookie\"></a>什么是<code>Cookie</code></h3><blockquote>\n<p>曲奇饼干？不是</p>\n<p>打个比方，大家申请出校，需要在手机上申请，然后今天一天都可以通过刷脸进出校园</p>\n<p>那么，在手机上申请相当于告诉学校后端，你请求了进出校权限。也相当于，你在网页上登录账户密码</p>\n<p>然后，你一天可以通过刷脸，这个刷脸就是<code>cookie</code>，今天进出校园不需要再申请了</p>\n<p>这个就是<code>cookie</code>的作用，最常见的就是，不需要每次点开一个页面都进行账户密码登录</p>\n</blockquote>\n<h3 id=\"Python基本语法\"><a href=\"#Python基本语法\" class=\"headerlink\" title=\"Python基本语法\"></a><code>Python</code>基本语法</h3><blockquote>\n<p>这个本该大家自己去学习的，但是这里说好基础入门，就简单提一点点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># if结构</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> a &gt; b:</span><br><span class=\"line\"> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a大于b&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\"> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a不大于b&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># while循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\"> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这里面是while循环&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表和字典</span></span><br><span class=\"line\">m = [<span class=\"string\">&quot;hello&quot;</span>, <span class=\"number\">2</span>, <span class=\"number\">4.5</span>]  <span class=\"comment\"># 列表支持不同数据类型，并且可以随意扩充和删减</span></span><br><span class=\"line\">n = &#123;            <span class=\"comment\"># 字典里面每个元素都是   键值:值   组成</span></span><br><span class=\"line\"> <span class=\"string\">&quot;key1&quot;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;key3&quot;</span>: <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">m[<span class=\"number\">0</span>]    <span class=\"comment\">## 索引到第0个元素，即 &quot;hello&quot;</span></span><br><span class=\"line\">n[<span class=\"string\">&quot;key1&quot;</span>]   <span class=\"comment\">## 索引到键值为&quot;key1&quot;的值，即 3</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"什么是抓包\"><a href=\"#什么是抓包\" class=\"headerlink\" title=\"什么是抓包\"></a>什么是抓包</h3><blockquote>\n<p>打个比方：你要向某人发一条数据，我在你们之间截获了或者记录了你们的数据，这个叫做抓包</p>\n</blockquote>\n<pre class=\"mermaid\">graph LR\nA(数据发送者) -->B[抓包者]\nB -->C(数据接收者)</pre>\n\n<blockquote>\n<p><strong>那么我们需要抓什么包呢？抓包的用处在哪呢？</strong></p>\n<p>答：我们需要抓取浏览器和后端服务器通信的包；用处是分析他们的数据然后用代码进行伪造数据发送，以便获得和浏览器同样的响应</p>\n</blockquote>\n<h3 id=\"什么是代理\"><a href=\"#什么是代理\" class=\"headerlink\" title=\"什么是代理\"></a>什么是代理</h3><blockquote>\n<p>不进行代理应该是下列图：</p>\n</blockquote>\n<pre class=\"mermaid\">graph LR\nA(前台客户端)-->|发送请求|C[后台服务器]\nC -->|返回响应|A</pre>\n\n<blockquote>\n<p>代理就是如下：</p>\n</blockquote>\n<pre class=\"mermaid\">graph LR\nA(前台客户端)-->|发送请求|B[代理服务器]\nB -->|转发请求|C(后台服务器)\nC -->|返回响应|B\nB -->|转发响应|A</pre>\n\n<h3 id=\"如何伪造呢？\"><a href=\"#如何伪造呢？\" class=\"headerlink\" title=\"如何伪造呢？\"></a>如何伪造呢？</h3><blockquote>\n<p>1、一般网站开发者希望我们使用浏览器浏览他们的网站，不希望我们使用代码进行浏览</p>\n<p>2、欸，但我就想用代码进行浏览，怎么办呢？</p>\n<p>3、那么就需要将我们的代码尽量伪装成浏览器，让后端以为我们是浏览器</p>\n<p>4、具体就是抓包，分析数据，用代码发送请求</p>\n</blockquote>\n<hr>\n<h2 id=\"浏览器抓包\"><a href=\"#浏览器抓包\" class=\"headerlink\" title=\"浏览器抓包\"></a>浏览器抓包</h2><h3 id=\"进入调试模式\"><a href=\"#进入调试模式\" class=\"headerlink\" title=\"进入调试模式\"></a>进入调试模式</h3><blockquote>\n<p>打开某个浏览器，按下键盘上的<kbd>F12</kbd>键，进入调试模式</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141725898764.png\" alt=\"image-20211219160806912\"></p>\n<p>一般用得到上面四个红圈里面的内容，建议跟我一样，将这个调试界面放到右侧，不然之后找不到对应的按钮（仅代表个人习惯）。<br>如果是英文的，也不要担心，相信这点英文应该看得懂，看不懂应该也能找到相应位置，还可以自行百度怎么换成中文哦。</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141726760313.png\" width=\"300px\"></p>\n<ul>\n<li>红圈1、找到页面上的元素分别对应哪句<code>html</code>标签</li>\n<li>红圈2、主要看<kbd>元素</kbd>和<kbd>网络</kbd>两个</li>\n<li>红圈3、左边如果是红色表示正在抓包记录，右边是清除已经抓到的包记录</li>\n<li>红圈4、一般我喜欢直接点选<kbd>全部</kbd>这个按钮，其他的是过滤数据的类型</li>\n</ul>\n</blockquote>\n<h3 id=\"如何寻找数据呢？\"><a href=\"#如何寻找数据呢？\" class=\"headerlink\" title=\"如何寻找数据呢？\"></a>如何寻找数据呢？</h3><blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141727626349.png\" alt=\"image-20211219162409621\"></p>\n<p>我们首先需要伪造成浏览器，发送请求标头，然后分析一下响应的数据，这个就是一个抓包过程啦</p>\n<p>听起来是不是很简单呢？</p>\n<p><kbd>简单</kbd> 打在公屏上</p>\n</blockquote>\n<hr>\n<h2 id=\"分析数据\"><a href=\"#分析数据\" class=\"headerlink\" title=\"分析数据\"></a>分析数据</h2><h3 id=\"浏览器人性化查看数据\"><a href=\"#浏览器人性化查看数据\" class=\"headerlink\" title=\"浏览器人性化查看数据\"></a>浏览器人性化查看数据</h3><blockquote>\n<center><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141728484488.png\" width=\"450px\"><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141729063974.png\" width=\"450px\"></center>\n\n<p>第一张图和第二张图有所区别，多了一个<kbd>载荷</kbd>选项，因为第二张图是在百度翻译上面抓的</p>\n<p>第二张图发送请求时候带了参数，所以比第一张图多了<kbd>载荷</kbd>选项</p>\n</blockquote>\n<h3 id=\"分析请求标头\"><a href=\"#分析请求标头\" class=\"headerlink\" title=\"分析请求标头\"></a>分析请求标头</h3><blockquote>\n<p><strong>这么多的数据，我应该怎么办呢？</strong></p>\n<ul>\n<li><code>User-Agent</code>：这个相当于浏览器标识，看你是什么浏览器发送的，我们直接用这个就行<code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36</code>，这个代表是<code>chrome</code>浏览器的标识</li>\n<li><code>Referer</code>：它其实是<code>refer</code>，就是代表这个网也从哪个网页来的</li>\n<li><code>cookie</code>：就是<code>cookie</code>，前面基础知识提到过</li>\n<li><code>请求网址</code>：就是你向哪个网址发送请求，请求的对象是哪个</li>\n</ul>\n<p><strong>查看载荷</strong></p>\n<p>如上面第二张图中的请求网址是：<img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141729622955.png\" alt=\"image-20211219170540421\"></p>\n<p>分为前后两部分组成，后面那部分就是载荷了，它是多个<kbd>字符串参数</kbd>，然后它是这么个形式：<kbd>键值=值</kbd> 组成的</p>\n<p>多个<kbd>字符串参数</kbd>用<code>&amp;</code>链接起来，把他人性化一点查看就是这样：<kbd>字符串参数</kbd></p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141730156726.png\" alt=\"image-20211219170645219\"></p>\n<p><strong>POST请求不仅仅只有请求头还有请求数据</strong></p>\n<p>下面是百度翻译的<code>post</code>请求的载荷</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141730680021.png\" alt=\"image-20211219170803923\"></p>\n<p>上面和<code>get</code>请求一样，是<kbd>字符串参数</kbd>，下面就是<kbd>表单数据</kbd>，这个是很重要的一个部分</p>\n</blockquote>\n<p>这些都是基础概念，之后会用到，现在先学学</p>\n<h3 id=\"分析响应数据\"><a href=\"#分析响应数据\" class=\"headerlink\" title=\"分析响应数据\"></a>分析响应数据</h3><blockquote>\n<p>响应数据多种多样，常见的有：<code>html</code>文本，图片文件，表单数据，视频文件等等</p>\n<p>其中，图片文件和视频文件等都是二进制格式</p>\n<p><code>html</code>文本和表单数据是文本格式</p>\n<ul>\n<li><code>html</code>文本</li>\n</ul>\n<p>一般都需要请求这个，它会告诉浏览器需要<kbd>渲染</kbd>什么，如下载哪张图片，下载哪个音频，下载哪个文件等等</p>\n<p>我们一般都需要分析一下这个文件</p>\n<ul>\n<li>图片文件</li>\n</ul>\n<p>直接以二进制的形式写入本地就相当于下载下来</p>\n<ul>\n<li>表单数据</li>\n</ul>\n<p>返回的数据中一般带有我们需要的数据，如翻译的请求，就会把翻译的结果再以表单的形式返回了</p>\n</blockquote>\n<h2 id=\"代码编写\"><a href=\"#代码编写\" class=\"headerlink\" title=\"代码编写\"></a>代码编写</h2><p>有了上述的知识，可以进行代码编写，其实完全可以先进行代码编写，然后再去上述补充基本知识，这个顺序可以根据大家喜好来看。</p>\n<p><a href=\"https://docs.python-requests.org/zh_CN/latest/user/quickstart.html\"><strong><em><code>requests</code>教程</em></strong></a></p>\n<h4 id=\"导入requests包\"><a href=\"#导入requests包\" class=\"headerlink\" title=\"导入requests包\"></a>导入<code>requests</code>包</h4><blockquote>\n<p>下载：<code>pip install requests</code></p>\n<p>导入：<code>import requests</code></p>\n<p><code>emmmmm</code>怎么说呢，这个好像不如跟着视频里面做一遍，虽然我还没有录视频，但是聪明的你们肯定会上百度吧</p>\n</blockquote>\n<h4 id=\"requests包的使用\"><a href=\"#requests包的使用\" class=\"headerlink\" title=\"requests包的使用\"></a><code>requests</code>包的使用</h4><blockquote>\n<p>这个教程顺序可能和网上很多都不一样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> rq</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">tool = rq.session()   <span class=\"comment\"># 这个会返回一个爬虫工具箱，并且它会自动维持cookie</span></span><br><span class=\"line\"></span><br><span class=\"line\">verify=<span class=\"literal\">False</span>   <span class=\"comment\"># 设置是否进行SSL验证，一般设置为否</span></span><br><span class=\"line\">url=<span class=\"string\">&quot;https://baidu.com&quot;</span>  <span class=\"comment\"># 这里请求百度的数据</span></span><br><span class=\"line\">headers=&#123;   <span class=\"comment\"># 设置请求头</span></span><br><span class=\"line\"> <span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">proxies=&#123;    <span class=\"comment\"># 设置代理</span></span><br><span class=\"line\"> <span class=\"string\">&quot;http&quot;</span>: <span class=\"literal\">None</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;https&quot;</span>: <span class=\"literal\">None</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">params=&#123;   <span class=\"comment\"># 设置字符串参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data=&#123;  <span class=\"comment\"># 设置请求表单</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送get请求，得到get响应</span></span><br><span class=\"line\">responseGet = tool.get(url=url, params=params, headers=headers, verify=verify, proxies=proxies)</span><br><span class=\"line\"><span class=\"comment\"># 发送post请求，得到post响应</span></span><br><span class=\"line\">responsePost = tool.post(url=url, data=data, headers=headers, verify=verify, proxies=proxies)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解析响应</span></span><br><span class=\"line\"><span class=\"comment\"># 1、假如响应是文本数据，如html文本</span></span><br><span class=\"line\">response = responseGet</span><br><span class=\"line\">response.content <span class=\"comment\"># 这个是内容，是二进制编码</span></span><br><span class=\"line\">response.content.decode(<span class=\"string\">&quot;gbk&quot;</span>)  <span class=\"comment\"># 使用gbk解码，不加参数就是utf-8解码</span></span><br><span class=\"line\"><span class=\"comment\"># 2、假如响应是图片数据</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;1.png&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"> f.write(response.content)   <span class=\"comment\"># 直接以二进制写入文件</span></span><br><span class=\"line\"><span class=\"comment\"># 3、假如响应是表单数据</span></span><br><span class=\"line\">dat = json.loads(response.content.decode())   <span class=\"comment\"># 返回的就是一个字典数据了</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"正则表达式简单用法\"><a href=\"#正则表达式简单用法\" class=\"headerlink\" title=\"正则表达式简单用法\"></a>正则表达式简单用法</h4><blockquote>\n<p>爬虫中的正则表达式一般会比较简单</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re   <span class=\"comment\"># 导入正则表达式包</span></span><br><span class=\"line\"><span class=\"comment\"># 假如有下列字符串需要被匹配</span></span><br><span class=\"line\"><span class=\"comment\"># str1 = &quot;&lt;link href=&quot;https://stacdn.proginn.com/plugin/swiper/swiper.min.css?version=4.30.2&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 其中href中的是我们需要的那么</span></span><br><span class=\"line\">html = response.content.decode()</span><br><span class=\"line\">restr = <span class=\"string\">&quot;&lt;link\\\\shref=\\&quot;(.*?)\\&quot;\\\\srel=\\&quot;stylesheet\\&quot;\\\\stype=\\&quot;text/css\\&quot;&gt;&quot;</span></span><br><span class=\"line\">dst_list = re.findall(restr, html)   <span class=\"comment\"># 返回一个列表</span></span><br><span class=\"line\"><span class=\"comment\"># 上面这条语句，会将html里面所有形如str1中的href都返回到列表中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假如我们是要爬取妹妹图，那么就把当前页面所有的妹妹图的网址都保存到列表了</span></span><br><span class=\"line\"><span class=\"comment\"># 只需要进行如下操作遍历列表就行</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> pngurl <span class=\"keyword\">in</span> dst_list:</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(pngurl)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<hr>\n<h1 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h1><p>​        爬虫会涉及到有关法律问题，这里不作讨论，但是希望大家不要拿来干坏事。<strong><em>概不负责</em></strong>。</p>\n<p>​        爬虫与反爬、反反爬一直都在相互进行着，是相互迭代的过程，爬虫重点在于数据分析而不是代码编写。</p>\n<p>​        本课程涉及的只是非常非常简单的爬虫，还有很多很多爬虫知识需要后续的学习，爬虫涉及的知识太广了，不是一堂课能够讲的清楚的。涵盖网络知识、密码知识、前后端工作方式、编码格式等等。之后应该学校课程有一门叫做<kbd>《计算机网络技术》</kbd>，我个人感觉这门课程非常重要，但是其实学校老师讲的可能<code>emmmmmm...</code>。大家可以课外多花时间学习，不管之后是嵌入式，物联网，互联网，软件开发，网络安全、科学上网等等方向都需要用到计算机网络的知识。</p>\n<p>​        任重而道远，我学这个是凭借着兴趣而学习，所以更多的知识还是得看自己慢慢学。之后我如果有时间，应该会录制两三个爬虫例子。如爬取二次元桌面图片、一键登录校园网、获取天气预报、打造一个翻译官等等。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"Python爬虫入门教程\"><a href=\"#Python爬虫入门教程\" class=\"headerlink\" title=\"Python爬虫入门教程\"></a><code>Python</code>爬虫入门教程</h1><hr>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"什么是HTML、CSS、JavaScript\"><a href=\"#什么是HTML、CSS、JavaScript\" class=\"headerlink\" title=\"什么是HTML、CSS、JavaScript\"></a>什么是<code>HTML、CSS、JavaScript</code></h3><blockquote>\n<p>网页往往采用<code>html+css+js</code>开发，<code>html</code>是一门标记语言</p>\n<p>如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!- 将下面这句话放入html文件中，--&gt;</span><br><span class=\"line\">&lt;!- 然后浏览器就会将这句话解释为下面那张图片，--&gt;</span><br><span class=\"line\">&lt;!- 这个就是浏览器渲染的功能--&gt;</span><br><span class=\"line\">&lt;!- 这里我们知道了一个词——浏览器的渲染   --&gt;</span><br><span class=\"line\">&lt;!- 并且我们发现，浏览器会在下面这个网址 自动 --&gt;</span><br><span class=\"line\">&lt;!- 把这张图片下载下来，然后渲染给我们看，这在我们之后抓包会有用 --&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141724826735.png&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">width</span>=<span class=\"string\">&quot;300px&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141724826735.png\" width=\"300px\"></p>\n</blockquote>\n<h3 id=\"什么是请求，什么是响应\"><a href=\"#什么是请求，什么是响应\" class=\"headerlink\" title=\"什么是请求，什么是响应\"></a>什么是请求，什么是响应</h3><blockquote>\n<p>请求：就是前端向后端发送一个请求，如请求我的账户浏览记录</p>\n<p>响应：就是后端向前端发送一个响应，你请求你的账户浏览器记录，那么我把记录发给你，叫做响应</p>\n<p><code>JavaScript</code>中有请求，浏览器渲染到其中的请求，就会向后端发送请求</p>\n</blockquote>\n<h3 id=\"什么是GET，什么是POST\"><a href=\"#什么是GET，什么是POST\" class=\"headerlink\" title=\"什么是GET，什么是POST\"></a>什么是<code>GET</code>，什么是<code>POST</code></h3><blockquote>\n<p>这个是两种请求方式而已，<code>get</code>直接把请求数据放在链接里面，<code>post</code>一般以则不是</p>\n</blockquote>\n<h3 id=\"什么是Cookie\"><a href=\"#什么是Cookie\" class=\"headerlink\" title=\"什么是Cookie\"></a>什么是<code>Cookie</code></h3><blockquote>\n<p>曲奇饼干？不是</p>\n<p>打个比方，大家申请出校，需要在手机上申请，然后今天一天都可以通过刷脸进出校园</p>\n<p>那么，在手机上申请相当于告诉学校后端，你请求了进出校权限。也相当于，你在网页上登录账户密码</p>\n<p>然后，你一天可以通过刷脸，这个刷脸就是<code>cookie</code>，今天进出校园不需要再申请了</p>\n<p>这个就是<code>cookie</code>的作用，最常见的就是，不需要每次点开一个页面都进行账户密码登录</p>\n</blockquote>\n<h3 id=\"Python基本语法\"><a href=\"#Python基本语法\" class=\"headerlink\" title=\"Python基本语法\"></a><code>Python</code>基本语法</h3><blockquote>\n<p>这个本该大家自己去学习的，但是这里说好基础入门，就简单提一点点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># if结构</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> a &gt; b:</span><br><span class=\"line\"> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a大于b&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\"> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a不大于b&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># while循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\"> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这里面是while循环&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表和字典</span></span><br><span class=\"line\">m = [<span class=\"string\">&quot;hello&quot;</span>, <span class=\"number\">2</span>, <span class=\"number\">4.5</span>]  <span class=\"comment\"># 列表支持不同数据类型，并且可以随意扩充和删减</span></span><br><span class=\"line\">n = &#123;            <span class=\"comment\"># 字典里面每个元素都是   键值:值   组成</span></span><br><span class=\"line\"> <span class=\"string\">&quot;key1&quot;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;key3&quot;</span>: <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">m[<span class=\"number\">0</span>]    <span class=\"comment\">## 索引到第0个元素，即 &quot;hello&quot;</span></span><br><span class=\"line\">n[<span class=\"string\">&quot;key1&quot;</span>]   <span class=\"comment\">## 索引到键值为&quot;key1&quot;的值，即 3</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"什么是抓包\"><a href=\"#什么是抓包\" class=\"headerlink\" title=\"什么是抓包\"></a>什么是抓包</h3><blockquote>\n<p>打个比方：你要向某人发一条数据，我在你们之间截获了或者记录了你们的数据，这个叫做抓包</p>\n</blockquote>\n<pre class=\"mermaid\">graph LR\nA(数据发送者) -->B[抓包者]\nB -->C(数据接收者)</pre>\n\n<blockquote>\n<p><strong>那么我们需要抓什么包呢？抓包的用处在哪呢？</strong></p>\n<p>答：我们需要抓取浏览器和后端服务器通信的包；用处是分析他们的数据然后用代码进行伪造数据发送，以便获得和浏览器同样的响应</p>\n</blockquote>\n<h3 id=\"什么是代理\"><a href=\"#什么是代理\" class=\"headerlink\" title=\"什么是代理\"></a>什么是代理</h3><blockquote>\n<p>不进行代理应该是下列图：</p>\n</blockquote>\n<pre class=\"mermaid\">graph LR\nA(前台客户端)-->|发送请求|C[后台服务器]\nC -->|返回响应|A</pre>\n\n<blockquote>\n<p>代理就是如下：</p>\n</blockquote>\n<pre class=\"mermaid\">graph LR\nA(前台客户端)-->|发送请求|B[代理服务器]\nB -->|转发请求|C(后台服务器)\nC -->|返回响应|B\nB -->|转发响应|A</pre>\n\n<h3 id=\"如何伪造呢？\"><a href=\"#如何伪造呢？\" class=\"headerlink\" title=\"如何伪造呢？\"></a>如何伪造呢？</h3><blockquote>\n<p>1、一般网站开发者希望我们使用浏览器浏览他们的网站，不希望我们使用代码进行浏览</p>\n<p>2、欸，但我就想用代码进行浏览，怎么办呢？</p>\n<p>3、那么就需要将我们的代码尽量伪装成浏览器，让后端以为我们是浏览器</p>\n<p>4、具体就是抓包，分析数据，用代码发送请求</p>\n</blockquote>\n<hr>\n<h2 id=\"浏览器抓包\"><a href=\"#浏览器抓包\" class=\"headerlink\" title=\"浏览器抓包\"></a>浏览器抓包</h2><h3 id=\"进入调试模式\"><a href=\"#进入调试模式\" class=\"headerlink\" title=\"进入调试模式\"></a>进入调试模式</h3><blockquote>\n<p>打开某个浏览器，按下键盘上的<kbd>F12</kbd>键，进入调试模式</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141725898764.png\" alt=\"image-20211219160806912\"></p>\n<p>一般用得到上面四个红圈里面的内容，建议跟我一样，将这个调试界面放到右侧，不然之后找不到对应的按钮（仅代表个人习惯）。<br>如果是英文的，也不要担心，相信这点英文应该看得懂，看不懂应该也能找到相应位置，还可以自行百度怎么换成中文哦。</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141726760313.png\" width=\"300px\"></p>\n<ul>\n<li>红圈1、找到页面上的元素分别对应哪句<code>html</code>标签</li>\n<li>红圈2、主要看<kbd>元素</kbd>和<kbd>网络</kbd>两个</li>\n<li>红圈3、左边如果是红色表示正在抓包记录，右边是清除已经抓到的包记录</li>\n<li>红圈4、一般我喜欢直接点选<kbd>全部</kbd>这个按钮，其他的是过滤数据的类型</li>\n</ul>\n</blockquote>\n<h3 id=\"如何寻找数据呢？\"><a href=\"#如何寻找数据呢？\" class=\"headerlink\" title=\"如何寻找数据呢？\"></a>如何寻找数据呢？</h3><blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141727626349.png\" alt=\"image-20211219162409621\"></p>\n<p>我们首先需要伪造成浏览器，发送请求标头，然后分析一下响应的数据，这个就是一个抓包过程啦</p>\n<p>听起来是不是很简单呢？</p>\n<p><kbd>简单</kbd> 打在公屏上</p>\n</blockquote>\n<hr>\n<h2 id=\"分析数据\"><a href=\"#分析数据\" class=\"headerlink\" title=\"分析数据\"></a>分析数据</h2><h3 id=\"浏览器人性化查看数据\"><a href=\"#浏览器人性化查看数据\" class=\"headerlink\" title=\"浏览器人性化查看数据\"></a>浏览器人性化查看数据</h3><blockquote>\n<center><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141728484488.png\" width=\"450px\"><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141729063974.png\" width=\"450px\"></center>\n\n<p>第一张图和第二张图有所区别，多了一个<kbd>载荷</kbd>选项，因为第二张图是在百度翻译上面抓的</p>\n<p>第二张图发送请求时候带了参数，所以比第一张图多了<kbd>载荷</kbd>选项</p>\n</blockquote>\n<h3 id=\"分析请求标头\"><a href=\"#分析请求标头\" class=\"headerlink\" title=\"分析请求标头\"></a>分析请求标头</h3><blockquote>\n<p><strong>这么多的数据，我应该怎么办呢？</strong></p>\n<ul>\n<li><code>User-Agent</code>：这个相当于浏览器标识，看你是什么浏览器发送的，我们直接用这个就行<code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36</code>，这个代表是<code>chrome</code>浏览器的标识</li>\n<li><code>Referer</code>：它其实是<code>refer</code>，就是代表这个网也从哪个网页来的</li>\n<li><code>cookie</code>：就是<code>cookie</code>，前面基础知识提到过</li>\n<li><code>请求网址</code>：就是你向哪个网址发送请求，请求的对象是哪个</li>\n</ul>\n<p><strong>查看载荷</strong></p>\n<p>如上面第二张图中的请求网址是：<img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141729622955.png\" alt=\"image-20211219170540421\"></p>\n<p>分为前后两部分组成，后面那部分就是载荷了，它是多个<kbd>字符串参数</kbd>，然后它是这么个形式：<kbd>键值=值</kbd> 组成的</p>\n<p>多个<kbd>字符串参数</kbd>用<code>&amp;</code>链接起来，把他人性化一点查看就是这样：<kbd>字符串参数</kbd></p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141730156726.png\" alt=\"image-20211219170645219\"></p>\n<p><strong>POST请求不仅仅只有请求头还有请求数据</strong></p>\n<p>下面是百度翻译的<code>post</code>请求的载荷</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141730680021.png\" alt=\"image-20211219170803923\"></p>\n<p>上面和<code>get</code>请求一样，是<kbd>字符串参数</kbd>，下面就是<kbd>表单数据</kbd>，这个是很重要的一个部分</p>\n</blockquote>\n<p>这些都是基础概念，之后会用到，现在先学学</p>\n<h3 id=\"分析响应数据\"><a href=\"#分析响应数据\" class=\"headerlink\" title=\"分析响应数据\"></a>分析响应数据</h3><blockquote>\n<p>响应数据多种多样，常见的有：<code>html</code>文本，图片文件，表单数据，视频文件等等</p>\n<p>其中，图片文件和视频文件等都是二进制格式</p>\n<p><code>html</code>文本和表单数据是文本格式</p>\n<ul>\n<li><code>html</code>文本</li>\n</ul>\n<p>一般都需要请求这个，它会告诉浏览器需要<kbd>渲染</kbd>什么，如下载哪张图片，下载哪个音频，下载哪个文件等等</p>\n<p>我们一般都需要分析一下这个文件</p>\n<ul>\n<li>图片文件</li>\n</ul>\n<p>直接以二进制的形式写入本地就相当于下载下来</p>\n<ul>\n<li>表单数据</li>\n</ul>\n<p>返回的数据中一般带有我们需要的数据，如翻译的请求，就会把翻译的结果再以表单的形式返回了</p>\n</blockquote>\n<h2 id=\"代码编写\"><a href=\"#代码编写\" class=\"headerlink\" title=\"代码编写\"></a>代码编写</h2><p>有了上述的知识，可以进行代码编写，其实完全可以先进行代码编写，然后再去上述补充基本知识，这个顺序可以根据大家喜好来看。</p>\n<p><a href=\"https://docs.python-requests.org/zh_CN/latest/user/quickstart.html\"><strong><em><code>requests</code>教程</em></strong></a></p>\n<h4 id=\"导入requests包\"><a href=\"#导入requests包\" class=\"headerlink\" title=\"导入requests包\"></a>导入<code>requests</code>包</h4><blockquote>\n<p>下载：<code>pip install requests</code></p>\n<p>导入：<code>import requests</code></p>\n<p><code>emmmmm</code>怎么说呢，这个好像不如跟着视频里面做一遍，虽然我还没有录视频，但是聪明的你们肯定会上百度吧</p>\n</blockquote>\n<h4 id=\"requests包的使用\"><a href=\"#requests包的使用\" class=\"headerlink\" title=\"requests包的使用\"></a><code>requests</code>包的使用</h4><blockquote>\n<p>这个教程顺序可能和网上很多都不一样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> rq</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">tool = rq.session()   <span class=\"comment\"># 这个会返回一个爬虫工具箱，并且它会自动维持cookie</span></span><br><span class=\"line\"></span><br><span class=\"line\">verify=<span class=\"literal\">False</span>   <span class=\"comment\"># 设置是否进行SSL验证，一般设置为否</span></span><br><span class=\"line\">url=<span class=\"string\">&quot;https://baidu.com&quot;</span>  <span class=\"comment\"># 这里请求百度的数据</span></span><br><span class=\"line\">headers=&#123;   <span class=\"comment\"># 设置请求头</span></span><br><span class=\"line\"> <span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">proxies=&#123;    <span class=\"comment\"># 设置代理</span></span><br><span class=\"line\"> <span class=\"string\">&quot;http&quot;</span>: <span class=\"literal\">None</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;https&quot;</span>: <span class=\"literal\">None</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">params=&#123;   <span class=\"comment\"># 设置字符串参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data=&#123;  <span class=\"comment\"># 设置请求表单</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送get请求，得到get响应</span></span><br><span class=\"line\">responseGet = tool.get(url=url, params=params, headers=headers, verify=verify, proxies=proxies)</span><br><span class=\"line\"><span class=\"comment\"># 发送post请求，得到post响应</span></span><br><span class=\"line\">responsePost = tool.post(url=url, data=data, headers=headers, verify=verify, proxies=proxies)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解析响应</span></span><br><span class=\"line\"><span class=\"comment\"># 1、假如响应是文本数据，如html文本</span></span><br><span class=\"line\">response = responseGet</span><br><span class=\"line\">response.content <span class=\"comment\"># 这个是内容，是二进制编码</span></span><br><span class=\"line\">response.content.decode(<span class=\"string\">&quot;gbk&quot;</span>)  <span class=\"comment\"># 使用gbk解码，不加参数就是utf-8解码</span></span><br><span class=\"line\"><span class=\"comment\"># 2、假如响应是图片数据</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;1.png&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"> f.write(response.content)   <span class=\"comment\"># 直接以二进制写入文件</span></span><br><span class=\"line\"><span class=\"comment\"># 3、假如响应是表单数据</span></span><br><span class=\"line\">dat = json.loads(response.content.decode())   <span class=\"comment\"># 返回的就是一个字典数据了</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"正则表达式简单用法\"><a href=\"#正则表达式简单用法\" class=\"headerlink\" title=\"正则表达式简单用法\"></a>正则表达式简单用法</h4><blockquote>\n<p>爬虫中的正则表达式一般会比较简单</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re   <span class=\"comment\"># 导入正则表达式包</span></span><br><span class=\"line\"><span class=\"comment\"># 假如有下列字符串需要被匹配</span></span><br><span class=\"line\"><span class=\"comment\"># str1 = &quot;&lt;link href=&quot;https://stacdn.proginn.com/plugin/swiper/swiper.min.css?version=4.30.2&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 其中href中的是我们需要的那么</span></span><br><span class=\"line\">html = response.content.decode()</span><br><span class=\"line\">restr = <span class=\"string\">&quot;&lt;link\\\\shref=\\&quot;(.*?)\\&quot;\\\\srel=\\&quot;stylesheet\\&quot;\\\\stype=\\&quot;text/css\\&quot;&gt;&quot;</span></span><br><span class=\"line\">dst_list = re.findall(restr, html)   <span class=\"comment\"># 返回一个列表</span></span><br><span class=\"line\"><span class=\"comment\"># 上面这条语句，会将html里面所有形如str1中的href都返回到列表中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假如我们是要爬取妹妹图，那么就把当前页面所有的妹妹图的网址都保存到列表了</span></span><br><span class=\"line\"><span class=\"comment\"># 只需要进行如下操作遍历列表就行</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> pngurl <span class=\"keyword\">in</span> dst_list:</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(pngurl)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<hr>\n<h1 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h1><p>​        爬虫会涉及到有关法律问题，这里不作讨论，但是希望大家不要拿来干坏事。<strong><em>概不负责</em></strong>。</p>\n<p>​        爬虫与反爬、反反爬一直都在相互进行着，是相互迭代的过程，爬虫重点在于数据分析而不是代码编写。</p>\n<p>​        本课程涉及的只是非常非常简单的爬虫，还有很多很多爬虫知识需要后续的学习，爬虫涉及的知识太广了，不是一堂课能够讲的清楚的。涵盖网络知识、密码知识、前后端工作方式、编码格式等等。之后应该学校课程有一门叫做<kbd>《计算机网络技术》</kbd>，我个人感觉这门课程非常重要，但是其实学校老师讲的可能<code>emmmmmm...</code>。大家可以课外多花时间学习，不管之后是嵌入式，物联网，互联网，软件开发，网络安全、科学上网等等方向都需要用到计算机网络的知识。</p>\n<p>​        任重而道远，我学这个是凭借着兴趣而学习，所以更多的知识还是得看自己慢慢学。之后我如果有时间，应该会录制两三个爬虫例子。如爬取二次元桌面图片、一键登录校园网、获取天气预报、打造一个翻译官等等。</p>\n"},{"title":"Windows右键打开注册表配置","date":"2022-04-05T11:27:00.000Z","excerpt":"使得能右键以某个软件打开","cover":"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141605353731.png","_content":"win+R regedit调出注册表\n\n```shell\n计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\*\\shell\\\n```\n\n> 上面这个路径下新建项：Open with ……\n\n> 然后Open with ……新建项Command\n\n> Command 默认为 路径\\…….。exe  \"%1\"\n\n> 然后Open with ……新建Icon字符串值\n\n> 为路径\\…….。exe\n\n![image-20210102212700378](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141606230245.png)\n\n![image-20210102212729670](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141606775108.png)\n","source":"_posts/Windows右键打开注册表配置.md","raw":"---\ntitle: Windows右键打开注册表配置\ndate: 2022-04-05 19:27:00\ntags: \n\t- 计算机妙招\n\t- 注册表\n\t- Windows\nexcerpt: 使得能右键以某个软件打开\ncover: 'http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141605353731.png'\ncategories: 计算机事半功倍\n---\nwin+R regedit调出注册表\n\n```shell\n计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\*\\shell\\\n```\n\n> 上面这个路径下新建项：Open with ……\n\n> 然后Open with ……新建项Command\n\n> Command 默认为 路径\\…….。exe  \"%1\"\n\n> 然后Open with ……新建Icon字符串值\n\n> 为路径\\…….。exe\n\n![image-20210102212700378](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141606230245.png)\n\n![image-20210102212729670](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141606775108.png)\n","slug":"Windows右键打开注册表配置","published":1,"updated":"2022-06-05T06:16:06.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl40x92o30016p0u5frz67olh","content":"<p>win+R regedit调出注册表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\*\\shell\\</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面这个路径下新建项：Open with ……</p>\n<p>然后Open with ……新建项Command</p>\n<p>Command 默认为 路径\\…….。exe  “%1”</p>\n<p>然后Open with ……新建Icon字符串值</p>\n<p>为路径\\…….。exe</p>\n</blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141606230245.png\" alt=\"image-20210102212700378\"></p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141606775108.png\" alt=\"image-20210102212729670\"></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<p>win+R regedit调出注册表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\*\\shell\\</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面这个路径下新建项：Open with ……</p>\n<p>然后Open with ……新建项Command</p>\n<p>Command 默认为 路径\\…….。exe  “%1”</p>\n<p>然后Open with ……新建Icon字符串值</p>\n<p>为路径\\…….。exe</p>\n</blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141606230245.png\" alt=\"image-20210102212700378\"></p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141606775108.png\" alt=\"image-20210102212729670\"></p>\n"},{"title":"Windows局域网共享文件","date":"2022-04-05T11:27:37.000Z","excerpt":"采取原始的网络连接方式，让数据传输变得快速","cover":"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141631288116.png","_content":"\n## 开启地方1、设置\n\n![image-20220309223046115](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141632195546.png)\n\n控制面板 --> 网络和Internet --> 网络和共享中心 --> 高级共享设置\n\n记得关闭 密码保护共享\n\n## 开启地方2、文件夹\n\n右键，属性，共享，高级共享（共享此文件夹勾选），应用，共享（下来框添加Everyone）、点击共享\n\n![image-20220405195030682](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141632859004.png)\n\n\n\n关闭共享如下图所示\n\n![image-20220405195106733](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141633519644.png)\n\n","source":"_posts/Windows局域网共享文件.md","raw":"---\ntitle: Windows局域网共享文件\ndate: 2022-04-05 19:27:37\ntags: \n\t- 计算机妙招\n\t- 局域网共享\n\t- Windows\nexcerpt: 采取原始的网络连接方式，让数据传输变得快速\ncover: 'http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141631288116.png'\ncategories: 计算机事半功倍\n---\n\n## 开启地方1、设置\n\n![image-20220309223046115](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141632195546.png)\n\n控制面板 --> 网络和Internet --> 网络和共享中心 --> 高级共享设置\n\n记得关闭 密码保护共享\n\n## 开启地方2、文件夹\n\n右键，属性，共享，高级共享（共享此文件夹勾选），应用，共享（下来框添加Everyone）、点击共享\n\n![image-20220405195030682](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141632859004.png)\n\n\n\n关闭共享如下图所示\n\n![image-20220405195106733](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141633519644.png)\n\n","slug":"Windows局域网共享文件","published":1,"updated":"2022-06-05T06:16:33.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl40x92o40017p0u588es8v51","content":"<h2 id=\"开启地方1、设置\"><a href=\"#开启地方1、设置\" class=\"headerlink\" title=\"开启地方1、设置\"></a>开启地方1、设置</h2><p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141632195546.png\" alt=\"image-20220309223046115\"></p>\n<p>控制面板 —&gt; 网络和Internet —&gt; 网络和共享中心 —&gt; 高级共享设置</p>\n<p>记得关闭 密码保护共享</p>\n<h2 id=\"开启地方2、文件夹\"><a href=\"#开启地方2、文件夹\" class=\"headerlink\" title=\"开启地方2、文件夹\"></a>开启地方2、文件夹</h2><p>右键，属性，共享，高级共享（共享此文件夹勾选），应用，共享（下来框添加Everyone）、点击共享</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141632859004.png\" alt=\"image-20220405195030682\"></p>\n<p>关闭共享如下图所示</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141633519644.png\" alt=\"image-20220405195106733\"></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h2 id=\"开启地方1、设置\"><a href=\"#开启地方1、设置\" class=\"headerlink\" title=\"开启地方1、设置\"></a>开启地方1、设置</h2><p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141632195546.png\" alt=\"image-20220309223046115\"></p>\n<p>控制面板 —&gt; 网络和Internet —&gt; 网络和共享中心 —&gt; 高级共享设置</p>\n<p>记得关闭 密码保护共享</p>\n<h2 id=\"开启地方2、文件夹\"><a href=\"#开启地方2、文件夹\" class=\"headerlink\" title=\"开启地方2、文件夹\"></a>开启地方2、文件夹</h2><p>右键，属性，共享，高级共享（共享此文件夹勾选），应用，共享（下来框添加Everyone）、点击共享</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141632859004.png\" alt=\"image-20220405195030682\"></p>\n<p>关闭共享如下图所示</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141633519644.png\" alt=\"image-20220405195106733\"></p>\n"},{"title":"南邮期末评价脚本","excerpt":"南京邮电大学 自动评价脚本","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206011936627.png","date":"2022-05-28T11:21:16.000Z","_content":"\n * @Author: 梁敏智\n * @Date: 2022-05-28 18:31:12\n * @LastEditors: 梁敏智\n * @LastEditTime: 2022-05-28 18:40:51\n * @Description：用于南京邮电大学课程评价以及教学质量评价的脚本，教程如下\n\n\n# NJUPT-automatic-evaluation-script\n&emsp;南京邮电大学期末自动评价脚本，我只测试过`Chrome`浏览器，是可行的，其他常用的浏览器应该都可以。\n\n&emsp;[代码仓库](https://github.com/MinzhiYoyo/NJUPT-automatic-evaluation-script)\n\n# 问题\n\n&emsp;如果按照下面教程，代码出现问题的情况，请自行刷新浏览器重新尝试。\n\n# 用法介绍一、课程评价\n\n## 1、依次点击问卷调查，课程评价，打开课程评价页面\n\n![image-20220528185711507](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281857590.png)\n\n## 2、右键页面，点击检查\n\n![image-20220528185757922](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281857021.png)\n\n## 3、切换到控制台（英文版的是：`Console`），并复制粘贴如下代码，也就是`课程评价.js`文件的代码，按下回车。等待全部评价完成，即可点击提交。\n\n![image-20220528190033917](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281900039.png)\n\n``` javascript\n// 也就是'课程评价.js'文件的代码（此行不要复制）\nvar obj = frames['iframeautoheight'].contentDocument.getElementById(\"pjkc\")\nvar length = obj.options.length\nconsole.log(\"你有\", length, \"门课程需要进行课程评价\")\nvar finished = 0;\nvar task = window.setInterval(function () {\n\tif (finished == length - 1) {\n\t\twindow.clearInterval(task)\n\t}\n\tvar allselects = frames['iframeautoheight'].contentDocument.getElementsByTagName(\"select\");\n\tfor (var j = 1; j < allselects.length; j++) {\n\t\tif (j == allselects.length / 2 - 1 || j == allselects.length / 2 + 1) {\n\t\t\tallselects[j].value = \"相对认同\" \n\t\t} else allselects[j].value = \"完全认同\"\n\t}\n\tfinished++;\n\tframes['iframeautoheight'].contentDocument.getElementById(\"Button1\").click()\n\tconsole.log(\"任务进度：\", finished, \" / \", length, \" 门课\")\n}, 1000);\n```\n\n# 用法介绍二、教学质量评价\n\n***&emsp;和上面一样的，不过我还是写了一点教程。***\n\n## 1、点击教学质量评价，打开教学质量评价主页面\n\n![image-20220528190304452](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281903546.png)\n\n## 2、右键页面，点击检查\n\n![image-20220528190431520](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281904616.png)\n\n## 3、切换到控制台（英文版的是：`Console`），并复制粘贴如下代码，也就是`教学质量评价.js`文件的代码，按下回车。等待全部评价完成，即可点击提交。\n\n![image-20220528190621902](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281906022.png)\n\n``` javascript\n// 也就是'教学质量评价.js'文件的代码（此行不要复制）\nvar obj = frames['iframeautoheight'].contentDocument.getElementById(\"pjkc\")\nvar length = obj.options.length\nconsole.log(\"你有\", length, \"门课程需要进行教学质量\")\nvar finished = 0;\nvar task = window.setInterval(function () {\n\tif (finished == length - 1) {\n\t\twindow.clearInterval(task)\n\t}\n\tvar allselects = frames['iframeautoheight'].contentDocument.getElementsByTagName(\"select\");\n\tfor (var j = 1; j < allselects.length; j++) {\n\t\tif (j % 7 == 1) {   // 每7个选项选一个为较好，剩下的都选好，可以自己在这里编辑\n\t\t\tallselects[j].value = \"较好\";\n\t\t} else allselects[j].value = \"好\";\n\t}\n\tfinished++;\n\tframes['iframeautoheight'].contentDocument.getElementById(\"Button1\").click()\n\tconsole.log(\"任务进度：\", finished, \" / \", length, \" 门课\")\n}, 1000);\n```\n\n\n---\n\n# 更新（此条不重要）\n\n&emsp;之前我用过别人的脚本两年了，但是今年好像用不了了，原因应该是南邮今年使用了`iframe`元素的原因，所以我对脚本做了更新。有什么问题可以提出来。\n\n\n\n\n\n","source":"_posts/南邮期末评价脚本.md","raw":"---\ntitle: 南邮期末评价脚本\ntags: \n- JavaScript\n- 脚本\nexcerpt: 南京邮电大学 自动评价脚本\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202206011936627.png\ncategories: \n- 计算机事半功倍\ndate: 2022-05-28 19:21:16\n---\n\n * @Author: 梁敏智\n * @Date: 2022-05-28 18:31:12\n * @LastEditors: 梁敏智\n * @LastEditTime: 2022-05-28 18:40:51\n * @Description：用于南京邮电大学课程评价以及教学质量评价的脚本，教程如下\n\n\n# NJUPT-automatic-evaluation-script\n&emsp;南京邮电大学期末自动评价脚本，我只测试过`Chrome`浏览器，是可行的，其他常用的浏览器应该都可以。\n\n&emsp;[代码仓库](https://github.com/MinzhiYoyo/NJUPT-automatic-evaluation-script)\n\n# 问题\n\n&emsp;如果按照下面教程，代码出现问题的情况，请自行刷新浏览器重新尝试。\n\n# 用法介绍一、课程评价\n\n## 1、依次点击问卷调查，课程评价，打开课程评价页面\n\n![image-20220528185711507](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281857590.png)\n\n## 2、右键页面，点击检查\n\n![image-20220528185757922](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281857021.png)\n\n## 3、切换到控制台（英文版的是：`Console`），并复制粘贴如下代码，也就是`课程评价.js`文件的代码，按下回车。等待全部评价完成，即可点击提交。\n\n![image-20220528190033917](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281900039.png)\n\n``` javascript\n// 也就是'课程评价.js'文件的代码（此行不要复制）\nvar obj = frames['iframeautoheight'].contentDocument.getElementById(\"pjkc\")\nvar length = obj.options.length\nconsole.log(\"你有\", length, \"门课程需要进行课程评价\")\nvar finished = 0;\nvar task = window.setInterval(function () {\n\tif (finished == length - 1) {\n\t\twindow.clearInterval(task)\n\t}\n\tvar allselects = frames['iframeautoheight'].contentDocument.getElementsByTagName(\"select\");\n\tfor (var j = 1; j < allselects.length; j++) {\n\t\tif (j == allselects.length / 2 - 1 || j == allselects.length / 2 + 1) {\n\t\t\tallselects[j].value = \"相对认同\" \n\t\t} else allselects[j].value = \"完全认同\"\n\t}\n\tfinished++;\n\tframes['iframeautoheight'].contentDocument.getElementById(\"Button1\").click()\n\tconsole.log(\"任务进度：\", finished, \" / \", length, \" 门课\")\n}, 1000);\n```\n\n# 用法介绍二、教学质量评价\n\n***&emsp;和上面一样的，不过我还是写了一点教程。***\n\n## 1、点击教学质量评价，打开教学质量评价主页面\n\n![image-20220528190304452](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281903546.png)\n\n## 2、右键页面，点击检查\n\n![image-20220528190431520](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281904616.png)\n\n## 3、切换到控制台（英文版的是：`Console`），并复制粘贴如下代码，也就是`教学质量评价.js`文件的代码，按下回车。等待全部评价完成，即可点击提交。\n\n![image-20220528190621902](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281906022.png)\n\n``` javascript\n// 也就是'教学质量评价.js'文件的代码（此行不要复制）\nvar obj = frames['iframeautoheight'].contentDocument.getElementById(\"pjkc\")\nvar length = obj.options.length\nconsole.log(\"你有\", length, \"门课程需要进行教学质量\")\nvar finished = 0;\nvar task = window.setInterval(function () {\n\tif (finished == length - 1) {\n\t\twindow.clearInterval(task)\n\t}\n\tvar allselects = frames['iframeautoheight'].contentDocument.getElementsByTagName(\"select\");\n\tfor (var j = 1; j < allselects.length; j++) {\n\t\tif (j % 7 == 1) {   // 每7个选项选一个为较好，剩下的都选好，可以自己在这里编辑\n\t\t\tallselects[j].value = \"较好\";\n\t\t} else allselects[j].value = \"好\";\n\t}\n\tfinished++;\n\tframes['iframeautoheight'].contentDocument.getElementById(\"Button1\").click()\n\tconsole.log(\"任务进度：\", finished, \" / \", length, \" 门课\")\n}, 1000);\n```\n\n\n---\n\n# 更新（此条不重要）\n\n&emsp;之前我用过别人的脚本两年了，但是今年好像用不了了，原因应该是南邮今年使用了`iframe`元素的原因，所以我对脚本做了更新。有什么问题可以提出来。\n\n\n\n\n\n","slug":"南邮期末评价脚本","published":1,"updated":"2022-06-01T11:36:35.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl40x92o7001ap0u58wsi6dgz","content":"<ul>\n<li>@Author: 梁敏智</li>\n<li>@Date: 2022-05-28 18:31:12</li>\n<li>@LastEditors: 梁敏智</li>\n<li>@LastEditTime: 2022-05-28 18:40:51</li>\n<li>@Description：用于南京邮电大学课程评价以及教学质量评价的脚本，教程如下</li>\n</ul>\n<h1 id=\"NJUPT-automatic-evaluation-script\"><a href=\"#NJUPT-automatic-evaluation-script\" class=\"headerlink\" title=\"NJUPT-automatic-evaluation-script\"></a>NJUPT-automatic-evaluation-script</h1><p>&emsp;南京邮电大学期末自动评价脚本，我只测试过<code>Chrome</code>浏览器，是可行的，其他常用的浏览器应该都可以。</p>\n<p>&emsp;<a href=\"https://github.com/MinzhiYoyo/NJUPT-automatic-evaluation-script\">代码仓库</a></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>&emsp;如果按照下面教程，代码出现问题的情况，请自行刷新浏览器重新尝试。</p>\n<h1 id=\"用法介绍一、课程评价\"><a href=\"#用法介绍一、课程评价\" class=\"headerlink\" title=\"用法介绍一、课程评价\"></a>用法介绍一、课程评价</h1><h2 id=\"1、依次点击问卷调查，课程评价，打开课程评价页面\"><a href=\"#1、依次点击问卷调查，课程评价，打开课程评价页面\" class=\"headerlink\" title=\"1、依次点击问卷调查，课程评价，打开课程评价页面\"></a>1、依次点击问卷调查，课程评价，打开课程评价页面</h2><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281857590.png\" alt=\"image-20220528185711507\"></p>\n<h2 id=\"2、右键页面，点击检查\"><a href=\"#2、右键页面，点击检查\" class=\"headerlink\" title=\"2、右键页面，点击检查\"></a>2、右键页面，点击检查</h2><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281857021.png\" alt=\"image-20220528185757922\"></p>\n<h2 id=\"3、切换到控制台（英文版的是：Console），并复制粘贴如下代码，也就是课程评价-js文件的代码，按下回车。等待全部评价完成，即可点击提交。\"><a href=\"#3、切换到控制台（英文版的是：Console），并复制粘贴如下代码，也就是课程评价-js文件的代码，按下回车。等待全部评价完成，即可点击提交。\" class=\"headerlink\" title=\"3、切换到控制台（英文版的是：Console），并复制粘贴如下代码，也就是课程评价.js文件的代码，按下回车。等待全部评价完成，即可点击提交。\"></a>3、切换到控制台（英文版的是：<code>Console</code>），并复制粘贴如下代码，也就是<code>课程评价.js</code>文件的代码，按下回车。等待全部评价完成，即可点击提交。</h2><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281900039.png\" alt=\"image-20220528190033917\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 也就是&#x27;课程评价.js&#x27;文件的代码（此行不要复制）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = frames[<span class=\"string\">&#x27;iframeautoheight&#x27;</span>].<span class=\"property\">contentDocument</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;pjkc&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> length = obj.<span class=\"property\">options</span>.<span class=\"property\">length</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;你有&quot;</span>, length, <span class=\"string\">&quot;门课程需要进行课程评价&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> finished = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> task = <span class=\"variable language_\">window</span>.<span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finished == length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"built_in\">clearInterval</span>(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> allselects = frames[<span class=\"string\">&#x27;iframeautoheight&#x27;</span>].<span class=\"property\">contentDocument</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;select&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt; allselects.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == allselects.<span class=\"property\">length</span> / <span class=\"number\">2</span> - <span class=\"number\">1</span> || j == allselects.<span class=\"property\">length</span> / <span class=\"number\">2</span> + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            allselects[j].<span class=\"property\">value</span> = <span class=\"string\">&quot;相对认同&quot;</span> </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> allselects[j].<span class=\"property\">value</span> = <span class=\"string\">&quot;完全认同&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    finished++;</span><br><span class=\"line\">    frames[<span class=\"string\">&#x27;iframeautoheight&#x27;</span>].<span class=\"property\">contentDocument</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;Button1&quot;</span>).<span class=\"title function_\">click</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;任务进度：&quot;</span>, finished, <span class=\"string\">&quot; / &quot;</span>, length, <span class=\"string\">&quot; 门课&quot;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"用法介绍二、教学质量评价\"><a href=\"#用法介绍二、教学质量评价\" class=\"headerlink\" title=\"用法介绍二、教学质量评价\"></a>用法介绍二、教学质量评价</h1><p><strong><em>&emsp;和上面一样的，不过我还是写了一点教程。</em></strong></p>\n<h2 id=\"1、点击教学质量评价，打开教学质量评价主页面\"><a href=\"#1、点击教学质量评价，打开教学质量评价主页面\" class=\"headerlink\" title=\"1、点击教学质量评价，打开教学质量评价主页面\"></a>1、点击教学质量评价，打开教学质量评价主页面</h2><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281903546.png\" alt=\"image-20220528190304452\"></p>\n<h2 id=\"2、右键页面，点击检查-1\"><a href=\"#2、右键页面，点击检查-1\" class=\"headerlink\" title=\"2、右键页面，点击检查\"></a>2、右键页面，点击检查</h2><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281904616.png\" alt=\"image-20220528190431520\"></p>\n<h2 id=\"3、切换到控制台（英文版的是：Console），并复制粘贴如下代码，也就是教学质量评价-js文件的代码，按下回车。等待全部评价完成，即可点击提交。\"><a href=\"#3、切换到控制台（英文版的是：Console），并复制粘贴如下代码，也就是教学质量评价-js文件的代码，按下回车。等待全部评价完成，即可点击提交。\" class=\"headerlink\" title=\"3、切换到控制台（英文版的是：Console），并复制粘贴如下代码，也就是教学质量评价.js文件的代码，按下回车。等待全部评价完成，即可点击提交。\"></a>3、切换到控制台（英文版的是：<code>Console</code>），并复制粘贴如下代码，也就是<code>教学质量评价.js</code>文件的代码，按下回车。等待全部评价完成，即可点击提交。</h2><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281906022.png\" alt=\"image-20220528190621902\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 也就是&#x27;教学质量评价.js&#x27;文件的代码（此行不要复制）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = frames[<span class=\"string\">&#x27;iframeautoheight&#x27;</span>].<span class=\"property\">contentDocument</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;pjkc&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> length = obj.<span class=\"property\">options</span>.<span class=\"property\">length</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;你有&quot;</span>, length, <span class=\"string\">&quot;门课程需要进行教学质量&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> finished = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> task = <span class=\"variable language_\">window</span>.<span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finished == length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"built_in\">clearInterval</span>(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> allselects = frames[<span class=\"string\">&#x27;iframeautoheight&#x27;</span>].<span class=\"property\">contentDocument</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;select&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt; allselects.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j % <span class=\"number\">7</span> == <span class=\"number\">1</span>) &#123;   <span class=\"comment\">// 每7个选项选一个为较好，剩下的都选好，可以自己在这里编辑</span></span><br><span class=\"line\">            allselects[j].<span class=\"property\">value</span> = <span class=\"string\">&quot;较好&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> allselects[j].<span class=\"property\">value</span> = <span class=\"string\">&quot;好&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    finished++;</span><br><span class=\"line\">    frames[<span class=\"string\">&#x27;iframeautoheight&#x27;</span>].<span class=\"property\">contentDocument</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;Button1&quot;</span>).<span class=\"title function_\">click</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;任务进度：&quot;</span>, finished, <span class=\"string\">&quot; / &quot;</span>, length, <span class=\"string\">&quot; 门课&quot;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"更新（此条不重要）\"><a href=\"#更新（此条不重要）\" class=\"headerlink\" title=\"更新（此条不重要）\"></a>更新（此条不重要）</h1><p>&emsp;之前我用过别人的脚本两年了，但是今年好像用不了了，原因应该是南邮今年使用了<code>iframe</code>元素的原因，所以我对脚本做了更新。有什么问题可以提出来。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<ul>\n<li>@Author: 梁敏智</li>\n<li>@Date: 2022-05-28 18:31:12</li>\n<li>@LastEditors: 梁敏智</li>\n<li>@LastEditTime: 2022-05-28 18:40:51</li>\n<li>@Description：用于南京邮电大学课程评价以及教学质量评价的脚本，教程如下</li>\n</ul>\n<h1 id=\"NJUPT-automatic-evaluation-script\"><a href=\"#NJUPT-automatic-evaluation-script\" class=\"headerlink\" title=\"NJUPT-automatic-evaluation-script\"></a>NJUPT-automatic-evaluation-script</h1><p>&emsp;南京邮电大学期末自动评价脚本，我只测试过<code>Chrome</code>浏览器，是可行的，其他常用的浏览器应该都可以。</p>\n<p>&emsp;<a href=\"https://github.com/MinzhiYoyo/NJUPT-automatic-evaluation-script\">代码仓库</a></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>&emsp;如果按照下面教程，代码出现问题的情况，请自行刷新浏览器重新尝试。</p>\n<h1 id=\"用法介绍一、课程评价\"><a href=\"#用法介绍一、课程评价\" class=\"headerlink\" title=\"用法介绍一、课程评价\"></a>用法介绍一、课程评价</h1><h2 id=\"1、依次点击问卷调查，课程评价，打开课程评价页面\"><a href=\"#1、依次点击问卷调查，课程评价，打开课程评价页面\" class=\"headerlink\" title=\"1、依次点击问卷调查，课程评价，打开课程评价页面\"></a>1、依次点击问卷调查，课程评价，打开课程评价页面</h2><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281857590.png\" alt=\"image-20220528185711507\"></p>\n<h2 id=\"2、右键页面，点击检查\"><a href=\"#2、右键页面，点击检查\" class=\"headerlink\" title=\"2、右键页面，点击检查\"></a>2、右键页面，点击检查</h2><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281857021.png\" alt=\"image-20220528185757922\"></p>\n<h2 id=\"3、切换到控制台（英文版的是：Console），并复制粘贴如下代码，也就是课程评价-js文件的代码，按下回车。等待全部评价完成，即可点击提交。\"><a href=\"#3、切换到控制台（英文版的是：Console），并复制粘贴如下代码，也就是课程评价-js文件的代码，按下回车。等待全部评价完成，即可点击提交。\" class=\"headerlink\" title=\"3、切换到控制台（英文版的是：Console），并复制粘贴如下代码，也就是课程评价.js文件的代码，按下回车。等待全部评价完成，即可点击提交。\"></a>3、切换到控制台（英文版的是：<code>Console</code>），并复制粘贴如下代码，也就是<code>课程评价.js</code>文件的代码，按下回车。等待全部评价完成，即可点击提交。</h2><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281900039.png\" alt=\"image-20220528190033917\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 也就是&#x27;课程评价.js&#x27;文件的代码（此行不要复制）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = frames[<span class=\"string\">&#x27;iframeautoheight&#x27;</span>].<span class=\"property\">contentDocument</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;pjkc&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> length = obj.<span class=\"property\">options</span>.<span class=\"property\">length</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;你有&quot;</span>, length, <span class=\"string\">&quot;门课程需要进行课程评价&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> finished = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> task = <span class=\"variable language_\">window</span>.<span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finished == length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"built_in\">clearInterval</span>(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> allselects = frames[<span class=\"string\">&#x27;iframeautoheight&#x27;</span>].<span class=\"property\">contentDocument</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;select&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt; allselects.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == allselects.<span class=\"property\">length</span> / <span class=\"number\">2</span> - <span class=\"number\">1</span> || j == allselects.<span class=\"property\">length</span> / <span class=\"number\">2</span> + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            allselects[j].<span class=\"property\">value</span> = <span class=\"string\">&quot;相对认同&quot;</span> </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> allselects[j].<span class=\"property\">value</span> = <span class=\"string\">&quot;完全认同&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    finished++;</span><br><span class=\"line\">    frames[<span class=\"string\">&#x27;iframeautoheight&#x27;</span>].<span class=\"property\">contentDocument</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;Button1&quot;</span>).<span class=\"title function_\">click</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;任务进度：&quot;</span>, finished, <span class=\"string\">&quot; / &quot;</span>, length, <span class=\"string\">&quot; 门课&quot;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"用法介绍二、教学质量评价\"><a href=\"#用法介绍二、教学质量评价\" class=\"headerlink\" title=\"用法介绍二、教学质量评价\"></a>用法介绍二、教学质量评价</h1><p><strong><em>&emsp;和上面一样的，不过我还是写了一点教程。</em></strong></p>\n<h2 id=\"1、点击教学质量评价，打开教学质量评价主页面\"><a href=\"#1、点击教学质量评价，打开教学质量评价主页面\" class=\"headerlink\" title=\"1、点击教学质量评价，打开教学质量评价主页面\"></a>1、点击教学质量评价，打开教学质量评价主页面</h2><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281903546.png\" alt=\"image-20220528190304452\"></p>\n<h2 id=\"2、右键页面，点击检查-1\"><a href=\"#2、右键页面，点击检查-1\" class=\"headerlink\" title=\"2、右键页面，点击检查\"></a>2、右键页面，点击检查</h2><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281904616.png\" alt=\"image-20220528190431520\"></p>\n<h2 id=\"3、切换到控制台（英文版的是：Console），并复制粘贴如下代码，也就是教学质量评价-js文件的代码，按下回车。等待全部评价完成，即可点击提交。\"><a href=\"#3、切换到控制台（英文版的是：Console），并复制粘贴如下代码，也就是教学质量评价-js文件的代码，按下回车。等待全部评价完成，即可点击提交。\" class=\"headerlink\" title=\"3、切换到控制台（英文版的是：Console），并复制粘贴如下代码，也就是教学质量评价.js文件的代码，按下回车。等待全部评价完成，即可点击提交。\"></a>3、切换到控制台（英文版的是：<code>Console</code>），并复制粘贴如下代码，也就是<code>教学质量评价.js</code>文件的代码，按下回车。等待全部评价完成，即可点击提交。</h2><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205281906022.png\" alt=\"image-20220528190621902\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 也就是&#x27;教学质量评价.js&#x27;文件的代码（此行不要复制）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = frames[<span class=\"string\">&#x27;iframeautoheight&#x27;</span>].<span class=\"property\">contentDocument</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;pjkc&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> length = obj.<span class=\"property\">options</span>.<span class=\"property\">length</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;你有&quot;</span>, length, <span class=\"string\">&quot;门课程需要进行教学质量&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> finished = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> task = <span class=\"variable language_\">window</span>.<span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finished == length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"built_in\">clearInterval</span>(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> allselects = frames[<span class=\"string\">&#x27;iframeautoheight&#x27;</span>].<span class=\"property\">contentDocument</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;select&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt; allselects.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j % <span class=\"number\">7</span> == <span class=\"number\">1</span>) &#123;   <span class=\"comment\">// 每7个选项选一个为较好，剩下的都选好，可以自己在这里编辑</span></span><br><span class=\"line\">            allselects[j].<span class=\"property\">value</span> = <span class=\"string\">&quot;较好&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> allselects[j].<span class=\"property\">value</span> = <span class=\"string\">&quot;好&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    finished++;</span><br><span class=\"line\">    frames[<span class=\"string\">&#x27;iframeautoheight&#x27;</span>].<span class=\"property\">contentDocument</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;Button1&quot;</span>).<span class=\"title function_\">click</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;任务进度：&quot;</span>, finished, <span class=\"string\">&quot; / &quot;</span>, length, <span class=\"string\">&quot; 门课&quot;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"更新（此条不重要）\"><a href=\"#更新（此条不重要）\" class=\"headerlink\" title=\"更新（此条不重要）\"></a>更新（此条不重要）</h1><p>&emsp;之前我用过别人的脚本两年了，但是今年好像用不了了，原因应该是南邮今年使用了<code>iframe</code>元素的原因，所以我对脚本做了更新。有什么问题可以提出来。</p>\n"},{"title":"图床搭建","excerpt":"搭建图床，目前只介绍了 Gitee","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205181415436.png","date":"2022-05-18T05:54:33.000Z","_content":"\n# ImageRepository\n\n# 介绍\n图床，个人用来存图的图床\n\n## 简单的讲讲教程\n> 主要是害怕自己忘了，hhh\n> 因为直接在网页上写的，不想搞图片了，直接用文字代替了\n\n### 1、gitee上的操作\n>（1）在gitee上建一个仓库，然后记一下仓库名称 \n> > - 比如该仓库名称是: lmz2498369702/image-repository\n> > - 发现，是进入仓库，上面链接 gitee.com/后面的内容\n\n> (2) 生成私人令牌\n> > - 点击右上角个人头像的三角形\n> > - 点击设置\n> > - 点击左下角`私人令牌`\n> > - 之后`私人令牌`只会生成一次明码，一定要复制下来，后面有用\n\n### 2、`PicGo`设置\n>（1）下载\n> > - [`点击下载PicGo`](https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0)\n\n> (2) 设置图床\n> > - 点击`PicGo`左侧`图床设置`，选择`gitee`\n> > - `repo`中填入`仓库名称`,如`lmz2498369702/image-repository`\n> > - `token`中填入`私人令牌`\n\n> (3) 设置服务器端口\n> > 如果使用`Typora`的话，就需要这一步\n> > - 点击`PicGo`左侧`PicGo设置`\n> > - 往下滑，点击`设置Server`\n> > - 将监听端口改为`36677`，因为`Typora`默认的就是`36677`\n> > - 如果`36677`端口被用了，自行查找更改`Typora`的端口和这个端口，反正要一致\n\n### 3、`Typora`设置\n> (1) 下载，这个好像不用说吧\n\n> (2) 设置图床\n> > - 点到`偏好设置`中的`图像`\n> > - 选择`上传服务`中的`PicGo(app)`\n> > - `PicGo路径`选择你电脑安装的`PicGo`路径即可\n> > - 然后点击`验证图片上传选项`，出现上传成功即可\n\n","source":"_posts/图床搭建.md","raw":"---\ntitle: 图床搭建\ntags: \n- 图床\nexcerpt: 搭建图床，目前只介绍了 Gitee\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202205181415436.png\ncategories: 计算机事半功倍\ndate: 2022-05-18 13:54:33\n---\n\n# ImageRepository\n\n# 介绍\n图床，个人用来存图的图床\n\n## 简单的讲讲教程\n> 主要是害怕自己忘了，hhh\n> 因为直接在网页上写的，不想搞图片了，直接用文字代替了\n\n### 1、gitee上的操作\n>（1）在gitee上建一个仓库，然后记一下仓库名称 \n> > - 比如该仓库名称是: lmz2498369702/image-repository\n> > - 发现，是进入仓库，上面链接 gitee.com/后面的内容\n\n> (2) 生成私人令牌\n> > - 点击右上角个人头像的三角形\n> > - 点击设置\n> > - 点击左下角`私人令牌`\n> > - 之后`私人令牌`只会生成一次明码，一定要复制下来，后面有用\n\n### 2、`PicGo`设置\n>（1）下载\n> > - [`点击下载PicGo`](https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0)\n\n> (2) 设置图床\n> > - 点击`PicGo`左侧`图床设置`，选择`gitee`\n> > - `repo`中填入`仓库名称`,如`lmz2498369702/image-repository`\n> > - `token`中填入`私人令牌`\n\n> (3) 设置服务器端口\n> > 如果使用`Typora`的话，就需要这一步\n> > - 点击`PicGo`左侧`PicGo设置`\n> > - 往下滑，点击`设置Server`\n> > - 将监听端口改为`36677`，因为`Typora`默认的就是`36677`\n> > - 如果`36677`端口被用了，自行查找更改`Typora`的端口和这个端口，反正要一致\n\n### 3、`Typora`设置\n> (1) 下载，这个好像不用说吧\n\n> (2) 设置图床\n> > - 点到`偏好设置`中的`图像`\n> > - 选择`上传服务`中的`PicGo(app)`\n> > - `PicGo路径`选择你电脑安装的`PicGo`路径即可\n> > - 然后点击`验证图片上传选项`，出现上传成功即可\n\n","slug":"图床搭建","published":1,"updated":"2022-06-05T06:12:05.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl40x92o8001bp0u5cmtifsup","content":"<h1 id=\"ImageRepository\"><a href=\"#ImageRepository\" class=\"headerlink\" title=\"ImageRepository\"></a>ImageRepository</h1><h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>图床，个人用来存图的图床</p>\n<h2 id=\"简单的讲讲教程\"><a href=\"#简单的讲讲教程\" class=\"headerlink\" title=\"简单的讲讲教程\"></a>简单的讲讲教程</h2><blockquote>\n<p>主要是害怕自己忘了，hhh<br>因为直接在网页上写的，不想搞图片了，直接用文字代替了</p>\n</blockquote>\n<h3 id=\"1、gitee上的操作\"><a href=\"#1、gitee上的操作\" class=\"headerlink\" title=\"1、gitee上的操作\"></a>1、gitee上的操作</h3><blockquote>\n<p>（1）在gitee上建一个仓库，然后记一下仓库名称 </p>\n<blockquote>\n<ul>\n<li>比如该仓库名称是: lmz2498369702/image-repository</li>\n<li>发现，是进入仓库，上面链接 gitee.com/后面的内容</li>\n</ul>\n</blockquote>\n<p>(2) 生成私人令牌</p>\n<blockquote>\n<ul>\n<li>点击右上角个人头像的三角形</li>\n<li>点击设置</li>\n<li>点击左下角<code>私人令牌</code></li>\n<li>之后<code>私人令牌</code>只会生成一次明码，一定要复制下来，后面有用</li>\n</ul>\n</blockquote>\n</blockquote>\n<h3 id=\"2、PicGo设置\"><a href=\"#2、PicGo设置\" class=\"headerlink\" title=\"2、PicGo设置\"></a>2、<code>PicGo</code>设置</h3><blockquote>\n<p>（1）下载</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0\"><code>点击下载PicGo</code></a></li>\n</ul>\n</blockquote>\n<p>(2) 设置图床</p>\n<blockquote>\n<ul>\n<li>点击<code>PicGo</code>左侧<code>图床设置</code>，选择<code>gitee</code></li>\n<li><code>repo</code>中填入<code>仓库名称</code>,如<code>lmz2498369702/image-repository</code></li>\n<li><code>token</code>中填入<code>私人令牌</code></li>\n</ul>\n</blockquote>\n<p>(3) 设置服务器端口</p>\n<blockquote>\n<p>如果使用<code>Typora</code>的话，就需要这一步</p>\n<ul>\n<li>点击<code>PicGo</code>左侧<code>PicGo设置</code></li>\n<li>往下滑，点击<code>设置Server</code></li>\n<li>将监听端口改为<code>36677</code>，因为<code>Typora</code>默认的就是<code>36677</code></li>\n<li>如果<code>36677</code>端口被用了，自行查找更改<code>Typora</code>的端口和这个端口，反正要一致</li>\n</ul>\n</blockquote>\n</blockquote>\n<h3 id=\"3、Typora设置\"><a href=\"#3、Typora设置\" class=\"headerlink\" title=\"3、Typora设置\"></a>3、<code>Typora</code>设置</h3><blockquote>\n<p>(1) 下载，这个好像不用说吧</p>\n<p>(2) 设置图床</p>\n<blockquote>\n<ul>\n<li>点到<code>偏好设置</code>中的<code>图像</code></li>\n<li>选择<code>上传服务</code>中的<code>PicGo(app)</code></li>\n<li><code>PicGo路径</code>选择你电脑安装的<code>PicGo</code>路径即可</li>\n<li>然后点击<code>验证图片上传选项</code>，出现上传成功即可</li>\n</ul>\n</blockquote>\n</blockquote>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"ImageRepository\"><a href=\"#ImageRepository\" class=\"headerlink\" title=\"ImageRepository\"></a>ImageRepository</h1><h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>图床，个人用来存图的图床</p>\n<h2 id=\"简单的讲讲教程\"><a href=\"#简单的讲讲教程\" class=\"headerlink\" title=\"简单的讲讲教程\"></a>简单的讲讲教程</h2><blockquote>\n<p>主要是害怕自己忘了，hhh<br>因为直接在网页上写的，不想搞图片了，直接用文字代替了</p>\n</blockquote>\n<h3 id=\"1、gitee上的操作\"><a href=\"#1、gitee上的操作\" class=\"headerlink\" title=\"1、gitee上的操作\"></a>1、gitee上的操作</h3><blockquote>\n<p>（1）在gitee上建一个仓库，然后记一下仓库名称 </p>\n<blockquote>\n<ul>\n<li>比如该仓库名称是: lmz2498369702/image-repository</li>\n<li>发现，是进入仓库，上面链接 gitee.com/后面的内容</li>\n</ul>\n</blockquote>\n<p>(2) 生成私人令牌</p>\n<blockquote>\n<ul>\n<li>点击右上角个人头像的三角形</li>\n<li>点击设置</li>\n<li>点击左下角<code>私人令牌</code></li>\n<li>之后<code>私人令牌</code>只会生成一次明码，一定要复制下来，后面有用</li>\n</ul>\n</blockquote>\n</blockquote>\n<h3 id=\"2、PicGo设置\"><a href=\"#2、PicGo设置\" class=\"headerlink\" title=\"2、PicGo设置\"></a>2、<code>PicGo</code>设置</h3><blockquote>\n<p>（1）下载</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0\"><code>点击下载PicGo</code></a></li>\n</ul>\n</blockquote>\n<p>(2) 设置图床</p>\n<blockquote>\n<ul>\n<li>点击<code>PicGo</code>左侧<code>图床设置</code>，选择<code>gitee</code></li>\n<li><code>repo</code>中填入<code>仓库名称</code>,如<code>lmz2498369702/image-repository</code></li>\n<li><code>token</code>中填入<code>私人令牌</code></li>\n</ul>\n</blockquote>\n<p>(3) 设置服务器端口</p>\n<blockquote>\n<p>如果使用<code>Typora</code>的话，就需要这一步</p>\n<ul>\n<li>点击<code>PicGo</code>左侧<code>PicGo设置</code></li>\n<li>往下滑，点击<code>设置Server</code></li>\n<li>将监听端口改为<code>36677</code>，因为<code>Typora</code>默认的就是<code>36677</code></li>\n<li>如果<code>36677</code>端口被用了，自行查找更改<code>Typora</code>的端口和这个端口，反正要一致</li>\n</ul>\n</blockquote>\n</blockquote>\n<h3 id=\"3、Typora设置\"><a href=\"#3、Typora设置\" class=\"headerlink\" title=\"3、Typora设置\"></a>3、<code>Typora</code>设置</h3><blockquote>\n<p>(1) 下载，这个好像不用说吧</p>\n<p>(2) 设置图床</p>\n<blockquote>\n<ul>\n<li>点到<code>偏好设置</code>中的<code>图像</code></li>\n<li>选择<code>上传服务</code>中的<code>PicGo(app)</code></li>\n<li><code>PicGo路径</code>选择你电脑安装的<code>PicGo</code>路径即可</li>\n<li>然后点击<code>验证图片上传选项</code>，出现上传成功即可</li>\n</ul>\n</blockquote>\n</blockquote>\n"},{"title":"数据结构——串 KMP算法","excerpt":"数据结构——字符串 KMP算法 学习与记录","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161227444.png","date":"2022-05-16T04:25:41.000Z","_content":"\n# 字符串\n\n## 1、字符串存储\n\n## 2、字符串的模式匹配\n\n&emsp;模式匹配是指，在主串中寻找模式串的位置。\n\n- 简单模式匹配\n\n  > 依次匹配，如果失配，就后移一位\n\n- KMP模式匹配\n\n  > 依次匹配，如果失配，根据`next数组`后移\n\n## 3、KMP算法\n\n&emsp;***假设所有下标都是从1开始***\n\n### 基本概念\n\n- 前缀集合：假设字符串为`p`，$$ \\{ p_0,\\quad p_0p_1, \\quad... \\quad,\\quad p_0p_1...p_{n-1}  \\}$$\n- 后缀集合：假设字符串为`p`，$$ \\{ p_1,\\quad p_1p_2, \\quad... \\quad,\\quad p_1p_2...p_{n}  \\}$$\n- 最长匹配长度：前缀集合与后缀结合中，最长相等元素的长度。\n- 注意：**前**缀集合**不包含**$$p_n$$，**后**缀集合中**不包含**$$p_0$$，如果字串只有一个字符，那么前缀集合和后缀集合都为**空**。\n\n### KMP算法基本\n\n&emsp;假设我们已经有了`next`数组（下面会介绍`next`数组求解），假如在主串(`S`)下标为`i`，模式串(`P`)下标为`j`的位置失配了。\n\n&emsp;暴力算法中，我们将会把`i`和`j`都回溯了，`i`回溯到`j`个，`j`回溯到1。KMP算法中，我们让`i`不进行回溯，仅仅只回溯`j`。那么，`j`应该如何回溯呢?\n\n&emsp;首先，这里只需要考虑模式串，next数组含义就是，在位置`j`前面有`next[j]-1`个字符组成的字符串与从位置1开始往后的`next[j]-1`个字符组成的字符串是相等的。\n\n&emsp;然后，因为主串与模式串在位置j前面的字符串完全相等。我们就只需要把模式串回溯到不相等的位置，最开始不相等的位置，应该是第`next[j]`个位置。\n\n&emsp;解释，因为我们知道$$P_1...P_{next[j]-1}$$与$$P_{j-next[j]}...P_{j-1}$$是相等的，所以只需要从主串当前位置与模式串`P[next[j]]`开始继续比较即可。\n\n### `Next`数组求解\n\n&emsp;定义：模式串为`p`（下标从1开始），`next[i]`代表`p[1]~p[i-1]`组成的**子串**的最长匹配长度**加**1。特殊地，`next[0] = 0`。`next`数组只与模式串有关系，与主串无关地。`next[i]`的值与`p[i]`**无关**，只与`p[i]`**前面的值**有关。\n$$\nnext[j] = \\begin{cases}\n0 & j=1\\\\\nmax \\{ k \\quad|\\quad 1<k<j 且 'p_1...p_{k-1}'='p_{j-k+1}...p_{j-1}'  \\} & 当此结合不为空时\\\\\n1 & 其他情况\n\\end{cases}\n$$\n&emsp;上述公式看不懂，问题不大，我也没看懂。\n\n- 人为求解\n\n  > 人为求解的话，根据定义来即可，一步一步算\n\n- 代码求解\n\n  > 比较复杂\n\n&emsp;***附上代码***\n\n``` cpp\n// 模式串为p\nint next[p.size] = {0};\nnext[1] = 0;\nfor(int i = 2 ; i < p.size; i++){\n    int j = next[i-1];\n    while(true){\n        if(j==0 || p[j] == p[i-1]){\n            next[i] = j;\n            break;\n\t\t}else {\n            j = next[j];\n        }\n    }\n}\n```\n\n\n\n### KMP算法优化，`NextVal`数组求解\n\n&emsp;前面提到`next[j]`值与`p[j]`无关，只与前前面的字符串有关。如果在`j`失配，也就是`p[j]!=s[i]`的话，那么下一个`j`回溯到`next[j]`的位置。如果此时`p[next[j]]!=s[i]`的话，那么还得继续回溯到`p[next[next[j]]]`，不如我们在构建`next`数组就把这种情况规避掉。因此，有了下列优化算法。\n\n&emsp;其他情况与上述`next`数组构造一样，不同的是，如果`p[j]==p[next[j]]`，就把上面代码改为如下：\n\n``` cpp\n...\n        if(j==0 || p[j] == p[i-1]){\n            if(p[j] != p[i]) next[i] = j;\n            else next[i] = next[j];\n            break;\n\t\t}else {\n            j = next[j];\n        }\n...\n```\n\n&emsp;如何在考试中人为求解呢？\n\n答：我的建议是，先求出`next`数组，然后在`next`数组的基础上，再看。如果`p[j]==p[next[j]]`，就修正`nextval[j]=nextval[next[j]]`。否则不变。因为是从前往后的，所以我们在`next`和已修正`nextval`的基础上，构造出`nextval[j]`。\n\n&emsp;如题所示，`\"ababaaababaa\"`的`nextval`数组应该是什么样的？\n\n|    下标    |  1   |  2   |  3   |  4   |  5   |  6   |  7   |  8   |  9   |  10  |  11  |  12  |\n| :--------: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: |\n| **模式串** |  a   |  b   |  a   |  b   |  a   |  a   |  a   |  b   |  a   |  b   |  a   |  a   |\n|   `next`   |  0   |  1   |  1   |  2   |  3   |  4   |  2   |  2   |  3   |  4   |  5   |  4   |\n| `nextval`  |  0   |  1   |  0   |  1   |  0   |  4   |  2   |  1   |  0   |  1   |  0   |  4   |\n\n","source":"_posts/数据结构——串-KMP算法.md","raw":"---\ntitle: 数据结构——串 KMP算法\ntags: \n- 数据结构\n- 考研\n- 字符串\n- KMP\nexcerpt: 数据结构——字符串 KMP算法 学习与记录\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161227444.png\ncategories:\n- 数据结构与算法\ndate: 2022-05-16 12:25:41\n---\n\n# 字符串\n\n## 1、字符串存储\n\n## 2、字符串的模式匹配\n\n&emsp;模式匹配是指，在主串中寻找模式串的位置。\n\n- 简单模式匹配\n\n  > 依次匹配，如果失配，就后移一位\n\n- KMP模式匹配\n\n  > 依次匹配，如果失配，根据`next数组`后移\n\n## 3、KMP算法\n\n&emsp;***假设所有下标都是从1开始***\n\n### 基本概念\n\n- 前缀集合：假设字符串为`p`，$$ \\{ p_0,\\quad p_0p_1, \\quad... \\quad,\\quad p_0p_1...p_{n-1}  \\}$$\n- 后缀集合：假设字符串为`p`，$$ \\{ p_1,\\quad p_1p_2, \\quad... \\quad,\\quad p_1p_2...p_{n}  \\}$$\n- 最长匹配长度：前缀集合与后缀结合中，最长相等元素的长度。\n- 注意：**前**缀集合**不包含**$$p_n$$，**后**缀集合中**不包含**$$p_0$$，如果字串只有一个字符，那么前缀集合和后缀集合都为**空**。\n\n### KMP算法基本\n\n&emsp;假设我们已经有了`next`数组（下面会介绍`next`数组求解），假如在主串(`S`)下标为`i`，模式串(`P`)下标为`j`的位置失配了。\n\n&emsp;暴力算法中，我们将会把`i`和`j`都回溯了，`i`回溯到`j`个，`j`回溯到1。KMP算法中，我们让`i`不进行回溯，仅仅只回溯`j`。那么，`j`应该如何回溯呢?\n\n&emsp;首先，这里只需要考虑模式串，next数组含义就是，在位置`j`前面有`next[j]-1`个字符组成的字符串与从位置1开始往后的`next[j]-1`个字符组成的字符串是相等的。\n\n&emsp;然后，因为主串与模式串在位置j前面的字符串完全相等。我们就只需要把模式串回溯到不相等的位置，最开始不相等的位置，应该是第`next[j]`个位置。\n\n&emsp;解释，因为我们知道$$P_1...P_{next[j]-1}$$与$$P_{j-next[j]}...P_{j-1}$$是相等的，所以只需要从主串当前位置与模式串`P[next[j]]`开始继续比较即可。\n\n### `Next`数组求解\n\n&emsp;定义：模式串为`p`（下标从1开始），`next[i]`代表`p[1]~p[i-1]`组成的**子串**的最长匹配长度**加**1。特殊地，`next[0] = 0`。`next`数组只与模式串有关系，与主串无关地。`next[i]`的值与`p[i]`**无关**，只与`p[i]`**前面的值**有关。\n$$\nnext[j] = \\begin{cases}\n0 & j=1\\\\\nmax \\{ k \\quad|\\quad 1<k<j 且 'p_1...p_{k-1}'='p_{j-k+1}...p_{j-1}'  \\} & 当此结合不为空时\\\\\n1 & 其他情况\n\\end{cases}\n$$\n&emsp;上述公式看不懂，问题不大，我也没看懂。\n\n- 人为求解\n\n  > 人为求解的话，根据定义来即可，一步一步算\n\n- 代码求解\n\n  > 比较复杂\n\n&emsp;***附上代码***\n\n``` cpp\n// 模式串为p\nint next[p.size] = {0};\nnext[1] = 0;\nfor(int i = 2 ; i < p.size; i++){\n    int j = next[i-1];\n    while(true){\n        if(j==0 || p[j] == p[i-1]){\n            next[i] = j;\n            break;\n\t\t}else {\n            j = next[j];\n        }\n    }\n}\n```\n\n\n\n### KMP算法优化，`NextVal`数组求解\n\n&emsp;前面提到`next[j]`值与`p[j]`无关，只与前前面的字符串有关。如果在`j`失配，也就是`p[j]!=s[i]`的话，那么下一个`j`回溯到`next[j]`的位置。如果此时`p[next[j]]!=s[i]`的话，那么还得继续回溯到`p[next[next[j]]]`，不如我们在构建`next`数组就把这种情况规避掉。因此，有了下列优化算法。\n\n&emsp;其他情况与上述`next`数组构造一样，不同的是，如果`p[j]==p[next[j]]`，就把上面代码改为如下：\n\n``` cpp\n...\n        if(j==0 || p[j] == p[i-1]){\n            if(p[j] != p[i]) next[i] = j;\n            else next[i] = next[j];\n            break;\n\t\t}else {\n            j = next[j];\n        }\n...\n```\n\n&emsp;如何在考试中人为求解呢？\n\n答：我的建议是，先求出`next`数组，然后在`next`数组的基础上，再看。如果`p[j]==p[next[j]]`，就修正`nextval[j]=nextval[next[j]]`。否则不变。因为是从前往后的，所以我们在`next`和已修正`nextval`的基础上，构造出`nextval[j]`。\n\n&emsp;如题所示，`\"ababaaababaa\"`的`nextval`数组应该是什么样的？\n\n|    下标    |  1   |  2   |  3   |  4   |  5   |  6   |  7   |  8   |  9   |  10  |  11  |  12  |\n| :--------: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: |\n| **模式串** |  a   |  b   |  a   |  b   |  a   |  a   |  a   |  b   |  a   |  b   |  a   |  a   |\n|   `next`   |  0   |  1   |  1   |  2   |  3   |  4   |  2   |  2   |  3   |  4   |  5   |  4   |\n| `nextval`  |  0   |  1   |  0   |  1   |  0   |  4   |  2   |  1   |  0   |  1   |  0   |  4   |\n\n","slug":"数据结构——串-KMP算法","published":1,"updated":"2022-10-03T13:34:38.825Z","_id":"cl40x92oa001cp0u54ejr1w1s","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><h2 id=\"1、字符串存储\"><a href=\"#1、字符串存储\" class=\"headerlink\" title=\"1、字符串存储\"></a>1、字符串存储</h2><h2 id=\"2、字符串的模式匹配\"><a href=\"#2、字符串的模式匹配\" class=\"headerlink\" title=\"2、字符串的模式匹配\"></a>2、字符串的模式匹配</h2><p>&emsp;模式匹配是指，在主串中寻找模式串的位置。</p>\n<ul>\n<li><p>简单模式匹配</p>\n<blockquote>\n<p>依次匹配，如果失配，就后移一位</p>\n</blockquote>\n</li>\n<li><p>KMP模式匹配</p>\n<blockquote>\n<p>依次匹配，如果失配，根据<code>next数组</code>后移</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"3、KMP算法\"><a href=\"#3、KMP算法\" class=\"headerlink\" title=\"3、KMP算法\"></a>3、KMP算法</h2><p>&emsp;<strong><em>假设所有下标都是从1开始</em></strong></p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ul>\n<li>前缀集合：假设字符串为<code>p</code>，<script type=\"math/tex\">\\{ p_0,\\quad p_0p_1, \\quad... \\quad,\\quad p_0p_1...p_{n-1}  \\}</script></li>\n<li>后缀集合：假设字符串为<code>p</code>，<script type=\"math/tex\">\\{ p_1,\\quad p_1p_2, \\quad... \\quad,\\quad p_1p_2...p_{n}  \\}</script></li>\n<li>最长匹配长度：前缀集合与后缀结合中，最长相等元素的长度。</li>\n<li>注意：<strong>前</strong>缀集合<strong>不包含</strong><script type=\"math/tex\">p_n</script>，<strong>后</strong>缀集合中<strong>不包含</strong><script type=\"math/tex\">p_0</script>，如果字串只有一个字符，那么前缀集合和后缀集合都为<strong>空</strong>。</li>\n</ul>\n<h3 id=\"KMP算法基本\"><a href=\"#KMP算法基本\" class=\"headerlink\" title=\"KMP算法基本\"></a>KMP算法基本</h3><p>&emsp;假设我们已经有了<code>next</code>数组（下面会介绍<code>next</code>数组求解），假如在主串(<code>S</code>)下标为<code>i</code>，模式串(<code>P</code>)下标为<code>j</code>的位置失配了。</p>\n<p>&emsp;暴力算法中，我们将会把<code>i</code>和<code>j</code>都回溯了，<code>i</code>回溯到<code>j</code>个，<code>j</code>回溯到1。KMP算法中，我们让<code>i</code>不进行回溯，仅仅只回溯<code>j</code>。那么，<code>j</code>应该如何回溯呢?</p>\n<p>&emsp;首先，这里只需要考虑模式串，next数组含义就是，在位置<code>j</code>前面有<code>next[j]-1</code>个字符组成的字符串与从位置1开始往后的<code>next[j]-1</code>个字符组成的字符串是相等的。</p>\n<p>&emsp;然后，因为主串与模式串在位置j前面的字符串完全相等。我们就只需要把模式串回溯到不相等的位置，最开始不相等的位置，应该是第<code>next[j]</code>个位置。</p>\n<p>&emsp;解释，因为我们知道<script type=\"math/tex\">P_1...P_{next[j]-1}</script>与<script type=\"math/tex\">P_{j-next[j]}...P_{j-1}</script>是相等的，所以只需要从主串当前位置与模式串<code>P[next[j]]</code>开始继续比较即可。</p>\n<h3 id=\"Next数组求解\"><a href=\"#Next数组求解\" class=\"headerlink\" title=\"Next数组求解\"></a><code>Next</code>数组求解</h3><p>&emsp;定义：模式串为<code>p</code>（下标从1开始），<code>next[i]</code>代表<code>p[1]~p[i-1]</code>组成的<strong>子串</strong>的最长匹配长度<strong>加</strong>1。特殊地，<code>next[0] = 0</code>。<code>next</code>数组只与模式串有关系，与主串无关地。<code>next[i]</code>的值与<code>p[i]</code><strong>无关</strong>，只与<code>p[i]</code><strong>前面的值</strong>有关。</p>\n<script type=\"math/tex; mode=display\">\nnext[j] = \\begin{cases}\n0 & j=1\\\\\nmax \\{ k \\quad|\\quad 1<k<j 且 'p_1...p_{k-1}'='p_{j-k+1}...p_{j-1}'  \\} & 当此结合不为空时\\\\\n1 & 其他情况\n\\end{cases}</script><p>&emsp;上述公式看不懂，问题不大，我也没看懂。</p>\n<ul>\n<li><p>人为求解</p>\n<blockquote>\n<p>人为求解的话，根据定义来即可，一步一步算</p>\n</blockquote>\n</li>\n<li><p>代码求解</p>\n<blockquote>\n<p>比较复杂</p>\n</blockquote>\n</li>\n</ul>\n<p>&emsp;<strong><em>附上代码</em></strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模式串为p</span></span><br><span class=\"line\"><span class=\"type\">int</span> next[p.size] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">next[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span> ; i &lt; p.size; i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = next[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j==<span class=\"number\">0</span> || p[j] == p[i<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">            next[i] = j;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            j = next[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"KMP算法优化，NextVal数组求解\"><a href=\"#KMP算法优化，NextVal数组求解\" class=\"headerlink\" title=\"KMP算法优化，NextVal数组求解\"></a>KMP算法优化，<code>NextVal</code>数组求解</h3><p>&emsp;前面提到<code>next[j]</code>值与<code>p[j]</code>无关，只与前前面的字符串有关。如果在<code>j</code>失配，也就是<code>p[j]!=s[i]</code>的话，那么下一个<code>j</code>回溯到<code>next[j]</code>的位置。如果此时<code>p[next[j]]!=s[i]</code>的话，那么还得继续回溯到<code>p[next[next[j]]]</code>，不如我们在构建<code>next</code>数组就把这种情况规避掉。因此，有了下列优化算法。</p>\n<p>&emsp;其他情况与上述<code>next</code>数组构造一样，不同的是，如果<code>p[j]==p[next[j]]</code>，就把上面代码改为如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j==<span class=\"number\">0</span> || p[j] == p[i<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p[j] != p[i]) next[i] = j;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> next[i] = next[j];</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            j = next[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>&emsp;如何在考试中人为求解呢？</p>\n<p>答：我的建议是，先求出<code>next</code>数组，然后在<code>next</code>数组的基础上，再看。如果<code>p[j]==p[next[j]]</code>，就修正<code>nextval[j]=nextval[next[j]]</code>。否则不变。因为是从前往后的，所以我们在<code>next</code>和已修正<code>nextval</code>的基础上，构造出<code>nextval[j]</code>。</p>\n<p>&emsp;如题所示，<code>&quot;ababaaababaa&quot;</code>的<code>nextval</code>数组应该是什么样的？</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">下标</th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n<th style=\"text-align:center\">6</th>\n<th style=\"text-align:center\">7</th>\n<th style=\"text-align:center\">8</th>\n<th style=\"text-align:center\">9</th>\n<th style=\"text-align:center\">10</th>\n<th style=\"text-align:center\">11</th>\n<th style=\"text-align:center\">12</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>模式串</strong></td>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">b</td>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">b</td>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">b</td>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">b</td>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">a</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>next</code></td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>nextval</code></td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n</tbody>\n</table>\n</div>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><h2 id=\"1、字符串存储\"><a href=\"#1、字符串存储\" class=\"headerlink\" title=\"1、字符串存储\"></a>1、字符串存储</h2><h2 id=\"2、字符串的模式匹配\"><a href=\"#2、字符串的模式匹配\" class=\"headerlink\" title=\"2、字符串的模式匹配\"></a>2、字符串的模式匹配</h2><p>&emsp;模式匹配是指，在主串中寻找模式串的位置。</p>\n<ul>\n<li><p>简单模式匹配</p>\n<blockquote>\n<p>依次匹配，如果失配，就后移一位</p>\n</blockquote>\n</li>\n<li><p>KMP模式匹配</p>\n<blockquote>\n<p>依次匹配，如果失配，根据<code>next数组</code>后移</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"3、KMP算法\"><a href=\"#3、KMP算法\" class=\"headerlink\" title=\"3、KMP算法\"></a>3、KMP算法</h2><p>&emsp;<strong><em>假设所有下标都是从1开始</em></strong></p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ul>\n<li>前缀集合：假设字符串为<code>p</code>，<script type=\"math/tex\">\\{ p_0,\\quad p_0p_1, \\quad... \\quad,\\quad p_0p_1...p_{n-1}  \\}</script></li>\n<li>后缀集合：假设字符串为<code>p</code>，<script type=\"math/tex\">\\{ p_1,\\quad p_1p_2, \\quad... \\quad,\\quad p_1p_2...p_{n}  \\}</script></li>\n<li>最长匹配长度：前缀集合与后缀结合中，最长相等元素的长度。</li>\n<li>注意：<strong>前</strong>缀集合<strong>不包含</strong><script type=\"math/tex\">p_n</script>，<strong>后</strong>缀集合中<strong>不包含</strong><script type=\"math/tex\">p_0</script>，如果字串只有一个字符，那么前缀集合和后缀集合都为<strong>空</strong>。</li>\n</ul>\n<h3 id=\"KMP算法基本\"><a href=\"#KMP算法基本\" class=\"headerlink\" title=\"KMP算法基本\"></a>KMP算法基本</h3><p>&emsp;假设我们已经有了<code>next</code>数组（下面会介绍<code>next</code>数组求解），假如在主串(<code>S</code>)下标为<code>i</code>，模式串(<code>P</code>)下标为<code>j</code>的位置失配了。</p>\n<p>&emsp;暴力算法中，我们将会把<code>i</code>和<code>j</code>都回溯了，<code>i</code>回溯到<code>j</code>个，<code>j</code>回溯到1。KMP算法中，我们让<code>i</code>不进行回溯，仅仅只回溯<code>j</code>。那么，<code>j</code>应该如何回溯呢?</p>\n<p>&emsp;首先，这里只需要考虑模式串，next数组含义就是，在位置<code>j</code>前面有<code>next[j]-1</code>个字符组成的字符串与从位置1开始往后的<code>next[j]-1</code>个字符组成的字符串是相等的。</p>\n<p>&emsp;然后，因为主串与模式串在位置j前面的字符串完全相等。我们就只需要把模式串回溯到不相等的位置，最开始不相等的位置，应该是第<code>next[j]</code>个位置。</p>\n<p>&emsp;解释，因为我们知道<script type=\"math/tex\">P_1...P_{next[j]-1}</script>与<script type=\"math/tex\">P_{j-next[j]}...P_{j-1}</script>是相等的，所以只需要从主串当前位置与模式串<code>P[next[j]]</code>开始继续比较即可。</p>\n<h3 id=\"Next数组求解\"><a href=\"#Next数组求解\" class=\"headerlink\" title=\"Next数组求解\"></a><code>Next</code>数组求解</h3><p>&emsp;定义：模式串为<code>p</code>（下标从1开始），<code>next[i]</code>代表<code>p[1]~p[i-1]</code>组成的<strong>子串</strong>的最长匹配长度<strong>加</strong>1。特殊地，<code>next[0] = 0</code>。<code>next</code>数组只与模式串有关系，与主串无关地。<code>next[i]</code>的值与<code>p[i]</code><strong>无关</strong>，只与<code>p[i]</code><strong>前面的值</strong>有关。</p>\n<script type=\"math/tex; mode=display\">\nnext[j] = \\begin{cases}\n0 & j=1\\\\\nmax \\{ k \\quad|\\quad 1<k<j 且 'p_1...p_{k-1}'='p_{j-k+1}...p_{j-1}'  \\} & 当此结合不为空时\\\\\n1 & 其他情况\n\\end{cases}</script><p>&emsp;上述公式看不懂，问题不大，我也没看懂。</p>\n<ul>\n<li><p>人为求解</p>\n<blockquote>\n<p>人为求解的话，根据定义来即可，一步一步算</p>\n</blockquote>\n</li>\n<li><p>代码求解</p>\n<blockquote>\n<p>比较复杂</p>\n</blockquote>\n</li>\n</ul>\n<p>&emsp;<strong><em>附上代码</em></strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模式串为p</span></span><br><span class=\"line\"><span class=\"type\">int</span> next[p.size] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">next[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span> ; i &lt; p.size; i++)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = next[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j==<span class=\"number\">0</span> || p[j] == p[i<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">            next[i] = j;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            j = next[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"KMP算法优化，NextVal数组求解\"><a href=\"#KMP算法优化，NextVal数组求解\" class=\"headerlink\" title=\"KMP算法优化，NextVal数组求解\"></a>KMP算法优化，<code>NextVal</code>数组求解</h3><p>&emsp;前面提到<code>next[j]</code>值与<code>p[j]</code>无关，只与前前面的字符串有关。如果在<code>j</code>失配，也就是<code>p[j]!=s[i]</code>的话，那么下一个<code>j</code>回溯到<code>next[j]</code>的位置。如果此时<code>p[next[j]]!=s[i]</code>的话，那么还得继续回溯到<code>p[next[next[j]]]</code>，不如我们在构建<code>next</code>数组就把这种情况规避掉。因此，有了下列优化算法。</p>\n<p>&emsp;其他情况与上述<code>next</code>数组构造一样，不同的是，如果<code>p[j]==p[next[j]]</code>，就把上面代码改为如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j==<span class=\"number\">0</span> || p[j] == p[i<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p[j] != p[i]) next[i] = j;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> next[i] = next[j];</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            j = next[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>&emsp;如何在考试中人为求解呢？</p>\n<p>答：我的建议是，先求出<code>next</code>数组，然后在<code>next</code>数组的基础上，再看。如果<code>p[j]==p[next[j]]</code>，就修正<code>nextval[j]=nextval[next[j]]</code>。否则不变。因为是从前往后的，所以我们在<code>next</code>和已修正<code>nextval</code>的基础上，构造出<code>nextval[j]</code>。</p>\n<p>&emsp;如题所示，<code>&quot;ababaaababaa&quot;</code>的<code>nextval</code>数组应该是什么样的？</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">下标</th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n<th style=\"text-align:center\">6</th>\n<th style=\"text-align:center\">7</th>\n<th style=\"text-align:center\">8</th>\n<th style=\"text-align:center\">9</th>\n<th style=\"text-align:center\">10</th>\n<th style=\"text-align:center\">11</th>\n<th style=\"text-align:center\">12</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>模式串</strong></td>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">b</td>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">b</td>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">b</td>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">b</td>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">a</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>next</code></td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>nextval</code></td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n</tbody>\n</table>\n</div>\n"},{"title":"数据结构--图","excerpt":"数据结构——图 学习与记录","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161215408.png","date":"2022-05-16T02:10:42.000Z","_content":"\n___\n\n# 图\n\n## 1、基本概念\n\n### 极大连通、极小连通、极大连通子图、极小连通子图、连通分量\n\n- 极大连通\n\n  > 在无向图中，指的是任意两点都有直接或者间接的路径\n\n- 极小连通\n\n  > 在无向图中，生成树就是一个极小连通；如果加一条边就会形成一个环，如果减一条边就会出现孤立的节点；**n**个节点应该有**n-1**条边\n\n- 极大连通子图和极小连通子图\n\n  > 满足上述极大连通和极小连通的子图\n  \n- 连通分量\n\n  > 指的是极大连通子图的数目\n\n- 思考：假如一个图有**n**个节点\n\n  > 如果边数小于**n-1**的话，此图必定是非连通图\n  >\n  > 非连通图最多应该有 $\\frac{(n-1)(n-2)}{2}$ 条边 ，解释：由**n-1**构成完全图，如果此时再加入一条边，那么就会形成连通图了\n\n  \n\n### 强连通图、强连通分量\n\n- 强连通图\n\n  > 有向图中，任意两个顶点都有直接或者间接的路径到达（注意，路径是有方向的），此图称为强连通图\n\n- 强连通分量\n\n  > 有向图的强连通子图的数量就是强连通分量，书上是说‘有向图的极大连通子图就是强连通分量’\n  >\n  > 如下图所示，三个强连通分量 {1,2,3,4}, {5}, {6}\n\n  ![image-20220516103614869](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161036960.png)\n\n- 思考：假如有n个节点的有向图\n\n  > 强连通情况下，至少需要**n**条边；解释：构成一个环就行了，这样，任意两点直接都可循环到达。\n\n### 生成树与最小生成树\n\n- 生成树\n\n  > 无向图$G = (V,E)$和无向图图$G^1 = (V^1, E^1)$，若$G^1包含G$的所有顶点，且边是$G$的子集，那么$G^1就是G的生成树$\n  >\n  > ***生成树不唯一***\n  >\n  > 维基百科如下图定义\n\n  ![](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161253998.png)\n\n- 最小生成树\n\n  > 每条边都有权值，最小生成树就是最后生成的树，权值和最小\n\n---\n\n## 2、最小生成树算法\n\n### `Prim`算法\n\n### `Kruskal`算法\n\n## 3、最短路径算法\n\n### `Dijkstra`算法\n\n### `Floyd`算法\n\n## 4、拓扑排序与关键路径（AOV与AOE）\n\n## 5、`Graphviz`简单介绍\n\n​\t`Graphviz`是用来可视化图和树的工具，常用`.dot`文件或者`api`进行操作，[官网链接](https://graphviz.org/)。\n\n### 用法一、dot文件使用\n\n***目前还不会使用这个软件，先挖坑。***\n","source":"_posts/数据结构-图.md","raw":"---\ntitle: 数据结构--图\ntags: \n- 数据结构\n- 考研\n- 图\nexcerpt: 数据结构——图 学习与记录\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161215408.png\ncategories:\n- 数据结构与算法\ndate: 2022-05-16 10:10:42\n---\n\n___\n\n# 图\n\n## 1、基本概念\n\n### 极大连通、极小连通、极大连通子图、极小连通子图、连通分量\n\n- 极大连通\n\n  > 在无向图中，指的是任意两点都有直接或者间接的路径\n\n- 极小连通\n\n  > 在无向图中，生成树就是一个极小连通；如果加一条边就会形成一个环，如果减一条边就会出现孤立的节点；**n**个节点应该有**n-1**条边\n\n- 极大连通子图和极小连通子图\n\n  > 满足上述极大连通和极小连通的子图\n  \n- 连通分量\n\n  > 指的是极大连通子图的数目\n\n- 思考：假如一个图有**n**个节点\n\n  > 如果边数小于**n-1**的话，此图必定是非连通图\n  >\n  > 非连通图最多应该有 $\\frac{(n-1)(n-2)}{2}$ 条边 ，解释：由**n-1**构成完全图，如果此时再加入一条边，那么就会形成连通图了\n\n  \n\n### 强连通图、强连通分量\n\n- 强连通图\n\n  > 有向图中，任意两个顶点都有直接或者间接的路径到达（注意，路径是有方向的），此图称为强连通图\n\n- 强连通分量\n\n  > 有向图的强连通子图的数量就是强连通分量，书上是说‘有向图的极大连通子图就是强连通分量’\n  >\n  > 如下图所示，三个强连通分量 {1,2,3,4}, {5}, {6}\n\n  ![image-20220516103614869](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161036960.png)\n\n- 思考：假如有n个节点的有向图\n\n  > 强连通情况下，至少需要**n**条边；解释：构成一个环就行了，这样，任意两点直接都可循环到达。\n\n### 生成树与最小生成树\n\n- 生成树\n\n  > 无向图$G = (V,E)$和无向图图$G^1 = (V^1, E^1)$，若$G^1包含G$的所有顶点，且边是$G$的子集，那么$G^1就是G的生成树$\n  >\n  > ***生成树不唯一***\n  >\n  > 维基百科如下图定义\n\n  ![](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161253998.png)\n\n- 最小生成树\n\n  > 每条边都有权值，最小生成树就是最后生成的树，权值和最小\n\n---\n\n## 2、最小生成树算法\n\n### `Prim`算法\n\n### `Kruskal`算法\n\n## 3、最短路径算法\n\n### `Dijkstra`算法\n\n### `Floyd`算法\n\n## 4、拓扑排序与关键路径（AOV与AOE）\n\n## 5、`Graphviz`简单介绍\n\n​\t`Graphviz`是用来可视化图和树的工具，常用`.dot`文件或者`api`进行操作，[官网链接](https://graphviz.org/)。\n\n### 用法一、dot文件使用\n\n***目前还不会使用这个软件，先挖坑。***\n","slug":"数据结构-图","published":1,"updated":"2022-05-17T05:34:45.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl40x92oc001fp0u5d7rf9uor","content":"<hr>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><h3 id=\"极大连通、极小连通、极大连通子图、极小连通子图、连通分量\"><a href=\"#极大连通、极小连通、极大连通子图、极小连通子图、连通分量\" class=\"headerlink\" title=\"极大连通、极小连通、极大连通子图、极小连通子图、连通分量\"></a>极大连通、极小连通、极大连通子图、极小连通子图、连通分量</h3><ul>\n<li><p>极大连通</p>\n<blockquote>\n<p>在无向图中，指的是任意两点都有直接或者间接的路径</p>\n</blockquote>\n</li>\n<li><p>极小连通</p>\n<blockquote>\n<p>在无向图中，生成树就是一个极小连通；如果加一条边就会形成一个环，如果减一条边就会出现孤立的节点；<strong>n</strong>个节点应该有<strong>n-1</strong>条边</p>\n</blockquote>\n</li>\n<li><p>极大连通子图和极小连通子图</p>\n<blockquote>\n<p>满足上述极大连通和极小连通的子图</p>\n</blockquote>\n</li>\n<li><p>连通分量</p>\n<blockquote>\n<p>指的是极大连通子图的数目</p>\n</blockquote>\n</li>\n<li><p>思考：假如一个图有<strong>n</strong>个节点</p>\n<blockquote>\n<p>如果边数小于<strong>n-1</strong>的话，此图必定是非连通图</p>\n<p>非连通图最多应该有 $\\frac{(n-1)(n-2)}{2}$ 条边 ，解释：由<strong>n-1</strong>构成完全图，如果此时再加入一条边，那么就会形成连通图了</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"强连通图、强连通分量\"><a href=\"#强连通图、强连通分量\" class=\"headerlink\" title=\"强连通图、强连通分量\"></a>强连通图、强连通分量</h3><ul>\n<li><p>强连通图</p>\n<blockquote>\n<p>有向图中，任意两个顶点都有直接或者间接的路径到达（注意，路径是有方向的），此图称为强连通图</p>\n</blockquote>\n</li>\n<li><p>强连通分量</p>\n<blockquote>\n<p>有向图的强连通子图的数量就是强连通分量，书上是说‘有向图的极大连通子图就是强连通分量’</p>\n<p>如下图所示，三个强连通分量 {1,2,3,4}, {5}, {6}</p>\n</blockquote>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161036960.png\" alt=\"image-20220516103614869\"></p>\n</li>\n<li><p>思考：假如有n个节点的有向图</p>\n<blockquote>\n<p>强连通情况下，至少需要<strong>n</strong>条边；解释：构成一个环就行了，这样，任意两点直接都可循环到达。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"生成树与最小生成树\"><a href=\"#生成树与最小生成树\" class=\"headerlink\" title=\"生成树与最小生成树\"></a>生成树与最小生成树</h3><ul>\n<li><p>生成树</p>\n<blockquote>\n<p>无向图$G = (V,E)$和无向图图$G^1 = (V^1, E^1)$，若$G^1包含G$的所有顶点，且边是$G$的子集，那么$G^1就是G的生成树$</p>\n<p><strong><em>生成树不唯一</em></strong></p>\n<p>维基百科如下图定义</p>\n</blockquote>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161253998.png\" alt=\"\"></p>\n</li>\n<li><p>最小生成树</p>\n<blockquote>\n<p>每条边都有权值，最小生成树就是最后生成的树，权值和最小</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h2 id=\"2、最小生成树算法\"><a href=\"#2、最小生成树算法\" class=\"headerlink\" title=\"2、最小生成树算法\"></a>2、最小生成树算法</h2><h3 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a><code>Prim</code>算法</h3><h3 id=\"Kruskal算法\"><a href=\"#Kruskal算法\" class=\"headerlink\" title=\"Kruskal算法\"></a><code>Kruskal</code>算法</h3><h2 id=\"3、最短路径算法\"><a href=\"#3、最短路径算法\" class=\"headerlink\" title=\"3、最短路径算法\"></a>3、最短路径算法</h2><h3 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a><code>Dijkstra</code>算法</h3><h3 id=\"Floyd算法\"><a href=\"#Floyd算法\" class=\"headerlink\" title=\"Floyd算法\"></a><code>Floyd</code>算法</h3><h2 id=\"4、拓扑排序与关键路径（AOV与AOE）\"><a href=\"#4、拓扑排序与关键路径（AOV与AOE）\" class=\"headerlink\" title=\"4、拓扑排序与关键路径（AOV与AOE）\"></a>4、拓扑排序与关键路径（AOV与AOE）</h2><h2 id=\"5、Graphviz简单介绍\"><a href=\"#5、Graphviz简单介绍\" class=\"headerlink\" title=\"5、Graphviz简单介绍\"></a>5、<code>Graphviz</code>简单介绍</h2><p>​    <code>Graphviz</code>是用来可视化图和树的工具，常用<code>.dot</code>文件或者<code>api</code>进行操作，<a href=\"https://graphviz.org/\">官网链接</a>。</p>\n<h3 id=\"用法一、dot文件使用\"><a href=\"#用法一、dot文件使用\" class=\"headerlink\" title=\"用法一、dot文件使用\"></a>用法一、dot文件使用</h3><p><strong><em>目前还不会使用这个软件，先挖坑。</em></strong></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<hr>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><h3 id=\"极大连通、极小连通、极大连通子图、极小连通子图、连通分量\"><a href=\"#极大连通、极小连通、极大连通子图、极小连通子图、连通分量\" class=\"headerlink\" title=\"极大连通、极小连通、极大连通子图、极小连通子图、连通分量\"></a>极大连通、极小连通、极大连通子图、极小连通子图、连通分量</h3><ul>\n<li><p>极大连通</p>\n<blockquote>\n<p>在无向图中，指的是任意两点都有直接或者间接的路径</p>\n</blockquote>\n</li>\n<li><p>极小连通</p>\n<blockquote>\n<p>在无向图中，生成树就是一个极小连通；如果加一条边就会形成一个环，如果减一条边就会出现孤立的节点；<strong>n</strong>个节点应该有<strong>n-1</strong>条边</p>\n</blockquote>\n</li>\n<li><p>极大连通子图和极小连通子图</p>\n<blockquote>\n<p>满足上述极大连通和极小连通的子图</p>\n</blockquote>\n</li>\n<li><p>连通分量</p>\n<blockquote>\n<p>指的是极大连通子图的数目</p>\n</blockquote>\n</li>\n<li><p>思考：假如一个图有<strong>n</strong>个节点</p>\n<blockquote>\n<p>如果边数小于<strong>n-1</strong>的话，此图必定是非连通图</p>\n<p>非连通图最多应该有 $\\frac{(n-1)(n-2)}{2}$ 条边 ，解释：由<strong>n-1</strong>构成完全图，如果此时再加入一条边，那么就会形成连通图了</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"强连通图、强连通分量\"><a href=\"#强连通图、强连通分量\" class=\"headerlink\" title=\"强连通图、强连通分量\"></a>强连通图、强连通分量</h3><ul>\n<li><p>强连通图</p>\n<blockquote>\n<p>有向图中，任意两个顶点都有直接或者间接的路径到达（注意，路径是有方向的），此图称为强连通图</p>\n</blockquote>\n</li>\n<li><p>强连通分量</p>\n<blockquote>\n<p>有向图的强连通子图的数量就是强连通分量，书上是说‘有向图的极大连通子图就是强连通分量’</p>\n<p>如下图所示，三个强连通分量 {1,2,3,4}, {5}, {6}</p>\n</blockquote>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161036960.png\" alt=\"image-20220516103614869\"></p>\n</li>\n<li><p>思考：假如有n个节点的有向图</p>\n<blockquote>\n<p>强连通情况下，至少需要<strong>n</strong>条边；解释：构成一个环就行了，这样，任意两点直接都可循环到达。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"生成树与最小生成树\"><a href=\"#生成树与最小生成树\" class=\"headerlink\" title=\"生成树与最小生成树\"></a>生成树与最小生成树</h3><ul>\n<li><p>生成树</p>\n<blockquote>\n<p>无向图$G = (V,E)$和无向图图$G^1 = (V^1, E^1)$，若$G^1包含G$的所有顶点，且边是$G$的子集，那么$G^1就是G的生成树$</p>\n<p><strong><em>生成树不唯一</em></strong></p>\n<p>维基百科如下图定义</p>\n</blockquote>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205161253998.png\" alt=\"\"></p>\n</li>\n<li><p>最小生成树</p>\n<blockquote>\n<p>每条边都有权值，最小生成树就是最后生成的树，权值和最小</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h2 id=\"2、最小生成树算法\"><a href=\"#2、最小生成树算法\" class=\"headerlink\" title=\"2、最小生成树算法\"></a>2、最小生成树算法</h2><h3 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a><code>Prim</code>算法</h3><h3 id=\"Kruskal算法\"><a href=\"#Kruskal算法\" class=\"headerlink\" title=\"Kruskal算法\"></a><code>Kruskal</code>算法</h3><h2 id=\"3、最短路径算法\"><a href=\"#3、最短路径算法\" class=\"headerlink\" title=\"3、最短路径算法\"></a>3、最短路径算法</h2><h3 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a><code>Dijkstra</code>算法</h3><h3 id=\"Floyd算法\"><a href=\"#Floyd算法\" class=\"headerlink\" title=\"Floyd算法\"></a><code>Floyd</code>算法</h3><h2 id=\"4、拓扑排序与关键路径（AOV与AOE）\"><a href=\"#4、拓扑排序与关键路径（AOV与AOE）\" class=\"headerlink\" title=\"4、拓扑排序与关键路径（AOV与AOE）\"></a>4、拓扑排序与关键路径（AOV与AOE）</h2><h2 id=\"5、Graphviz简单介绍\"><a href=\"#5、Graphviz简单介绍\" class=\"headerlink\" title=\"5、Graphviz简单介绍\"></a>5、<code>Graphviz</code>简单介绍</h2><p>​    <code>Graphviz</code>是用来可视化图和树的工具，常用<code>.dot</code>文件或者<code>api</code>进行操作，<a href=\"https://graphviz.org/\">官网链接</a>。</p>\n<h3 id=\"用法一、dot文件使用\"><a href=\"#用法一、dot文件使用\" class=\"headerlink\" title=\"用法一、dot文件使用\"></a>用法一、dot文件使用</h3><p><strong><em>目前还不会使用这个软件，先挖坑。</em></strong></p>\n"},{"title":"数据结构之排序大法","excerpt":"几大排序","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205181820625.png","mathjax":true,"date":"2022-05-18T10:19:55.000Z","_content":"\n# 排序大法\n\n## 1、基本概念\n\n- 排序，就是重新排列表中的元素，使得表中的元素按照关键字有序的过程。\n- 算法稳定性：如果两个元素关键字相同，排完序后在表中位置先后顺序和排序前一样，则称其排序为稳定的。\n\n## 2、分类\n\n### 内部排序\n\n- [插入排序](https://lmzyoyo.top/2022/06/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/)\n\n  > - 直接插入排序\n  >\n  >   > 时间复杂度：最好：$O(n)$，最坏：$O(n^2)$，平均：$O(n^2)$\n  >   >\n  >   > 空间复杂度：$O(1)$\n  >   >\n  >   > 稳定排序，适用线性表和链式表\n  >\n  > - 折半插入排序\n  >\n  >   > 时间复杂度：最坏：$O(n^2)$，平均：$O(n^2)$\n  >   >\n  >   > 空间复杂度：$O(1)$\n  >   >\n  >   > 稳定排序\n  >\n  > - 希尔排序\n  >\n  >   > 时间复杂度：最坏：$O(n^2)$，平均：$O(n^{1.3})$（现代数学没法证明）\n  >   >\n  >   > 空间复杂度：$O(1)$\n  >   >\n  >   > 不稳定排序，只适用于线性表\n\n- [交换排序]()\n\n  > - 冒泡排序\n  > \n  >    > 时间复杂度：最好：$O(n)$，最坏：$O(n^2)$，平均：$O(n^2)$\n  >    >\n  >    > 空间复杂度：$O(1)$\n  >    >\n  >    > 稳定排序：适用于线性表和链式表\n  > \n  > \n  >   - 快速排序\n  > \n  >     > 时间复杂度：最坏：$O(n^2)$，平均：$O(nlog_2n)$\n  >     >\n  >     > 空间复杂度：最好：$O(log_2n)$，最坏：$O(n)$，平均：$O(log_2n)$\n  >     >\n  >     > 不稳定排序\n  >     > \n  \n\n\n- [选择排序]()\n  >  - 简单选择排序\n  >  \n  >      > 时间复杂度：$O(n^2)$\n  >      >\n  >      > 空间复杂度：$O(1)$\n  >      >\n  >      > 不稳定排序：很明显没有元素的移动，那么交换很有可能导致后面的元素交换到前面来了\n  >  \n  >  - 堆排序\n  >\n  >    > 时间复杂度：$O(nlog_2n)$，其中建堆的时间复杂度为$O(n)$\n  >    >\n  >    > 空间复杂度：$O(1)$\n  >    >\n  >    > 不稳定排序：选择排序都不是稳定的，因为没有整体后移\n\n- [归并排序]()\n\n    > 时间复杂度：$O(nlog_2n)$\n    >\n    > 空间复杂度：$O(n)$\n    >\n    > 稳定排序\n\n- [基数排序]()\n\n    > 时间复杂度：$O(r)$\n    >\n    > 空间复杂度：$O(d(n+r))$\n    >\n    > 稳定排序\n\n### 外部排序\n\n","source":"_posts/数据结构之排序大法.md","raw":"---\ntitle: 数据结构之排序大法\ntags: \n- 数据结构\n- 排序\n- 考研\nexcerpt: 几大排序\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202205181820625.png\ncategories:\n- 数据结构与算法\nmathjax: true\ndate: 2022-05-18 18:19:55\n---\n\n# 排序大法\n\n## 1、基本概念\n\n- 排序，就是重新排列表中的元素，使得表中的元素按照关键字有序的过程。\n- 算法稳定性：如果两个元素关键字相同，排完序后在表中位置先后顺序和排序前一样，则称其排序为稳定的。\n\n## 2、分类\n\n### 内部排序\n\n- [插入排序](https://lmzyoyo.top/2022/06/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/)\n\n  > - 直接插入排序\n  >\n  >   > 时间复杂度：最好：$O(n)$，最坏：$O(n^2)$，平均：$O(n^2)$\n  >   >\n  >   > 空间复杂度：$O(1)$\n  >   >\n  >   > 稳定排序，适用线性表和链式表\n  >\n  > - 折半插入排序\n  >\n  >   > 时间复杂度：最坏：$O(n^2)$，平均：$O(n^2)$\n  >   >\n  >   > 空间复杂度：$O(1)$\n  >   >\n  >   > 稳定排序\n  >\n  > - 希尔排序\n  >\n  >   > 时间复杂度：最坏：$O(n^2)$，平均：$O(n^{1.3})$（现代数学没法证明）\n  >   >\n  >   > 空间复杂度：$O(1)$\n  >   >\n  >   > 不稳定排序，只适用于线性表\n\n- [交换排序]()\n\n  > - 冒泡排序\n  > \n  >    > 时间复杂度：最好：$O(n)$，最坏：$O(n^2)$，平均：$O(n^2)$\n  >    >\n  >    > 空间复杂度：$O(1)$\n  >    >\n  >    > 稳定排序：适用于线性表和链式表\n  > \n  > \n  >   - 快速排序\n  > \n  >     > 时间复杂度：最坏：$O(n^2)$，平均：$O(nlog_2n)$\n  >     >\n  >     > 空间复杂度：最好：$O(log_2n)$，最坏：$O(n)$，平均：$O(log_2n)$\n  >     >\n  >     > 不稳定排序\n  >     > \n  \n\n\n- [选择排序]()\n  >  - 简单选择排序\n  >  \n  >      > 时间复杂度：$O(n^2)$\n  >      >\n  >      > 空间复杂度：$O(1)$\n  >      >\n  >      > 不稳定排序：很明显没有元素的移动，那么交换很有可能导致后面的元素交换到前面来了\n  >  \n  >  - 堆排序\n  >\n  >    > 时间复杂度：$O(nlog_2n)$，其中建堆的时间复杂度为$O(n)$\n  >    >\n  >    > 空间复杂度：$O(1)$\n  >    >\n  >    > 不稳定排序：选择排序都不是稳定的，因为没有整体后移\n\n- [归并排序]()\n\n    > 时间复杂度：$O(nlog_2n)$\n    >\n    > 空间复杂度：$O(n)$\n    >\n    > 稳定排序\n\n- [基数排序]()\n\n    > 时间复杂度：$O(r)$\n    >\n    > 空间复杂度：$O(d(n+r))$\n    >\n    > 稳定排序\n\n### 外部排序\n\n","slug":"数据结构之排序大法","published":1,"updated":"2022-06-18T11:07:40.682Z","_id":"cl40x92od001gp0u53766hwve","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"排序大法\"><a href=\"#排序大法\" class=\"headerlink\" title=\"排序大法\"></a>排序大法</h1><h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><ul>\n<li>排序，就是重新排列表中的元素，使得表中的元素按照关键字有序的过程。</li>\n<li>算法稳定性：如果两个元素关键字相同，排完序后在表中位置先后顺序和排序前一样，则称其排序为稳定的。</li>\n</ul>\n<h2 id=\"2、分类\"><a href=\"#2、分类\" class=\"headerlink\" title=\"2、分类\"></a>2、分类</h2><h3 id=\"内部排序\"><a href=\"#内部排序\" class=\"headerlink\" title=\"内部排序\"></a>内部排序</h3><ul>\n<li><p><a href=\"https://lmzyoyo.top/2022/06/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/\">插入排序</a></p>\n<blockquote>\n<ul>\n<li><p>直接插入排序</p>\n<blockquote>\n<p>时间复杂度：最好：$O(n)$，最坏：$O(n^2)$，平均：$O(n^2)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>稳定排序，适用线性表和链式表</p>\n</blockquote>\n</li>\n<li><p>折半插入排序</p>\n<blockquote>\n<p>时间复杂度：最坏：$O(n^2)$，平均：$O(n^2)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>稳定排序</p>\n</blockquote>\n</li>\n<li><p>希尔排序</p>\n<blockquote>\n<p>时间复杂度：最坏：$O(n^2)$，平均：$O(n^{1.3})$（现代数学没法证明）</p>\n<p>空间复杂度：$O(1)$</p>\n<p>不稳定排序，只适用于线性表</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p><a href=\"\">交换排序</a></p>\n<blockquote>\n<ul>\n<li><p>冒泡排序</p>\n<blockquote>\n<p>时间复杂度：最好：$O(n)$，最坏：$O(n^2)$，平均：$O(n^2)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>稳定排序：适用于线性表和链式表</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>快速排序</p>\n<blockquote>\n<p>时间复杂度：最坏：$O(n^2)$，平均：$O(nlog_2n)$</p>\n<p>空间复杂度：最好：$O(log_2n)$，最坏：$O(n)$，平均：$O(log_2n)$</p>\n<p>不稳定排序</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p><a href=\"\">选择排序</a></p>\n<blockquote>\n<ul>\n<li><p>简单选择排序</p>\n<blockquote>\n<p>时间复杂度：$O(n^2)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>不稳定排序：很明显没有元素的移动，那么交换很有可能导致后面的元素交换到前面来了</p>\n</blockquote>\n</li>\n<li><p>堆排序</p>\n<blockquote>\n<p>时间复杂度：$O(nlog_2n)$，其中建堆的时间复杂度为$O(n)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>不稳定排序：选择排序都不是稳定的，因为没有整体后移</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p><a href=\"\">归并排序</a></p>\n<blockquote>\n<p>时间复杂度：$O(nlog_2n)$</p>\n<p>空间复杂度：$O(n)$</p>\n<p>稳定排序</p>\n</blockquote>\n</li>\n<li><p><a href=\"\">基数排序</a></p>\n<blockquote>\n<p>时间复杂度：$O(r)$</p>\n<p>空间复杂度：$O(d(n+r))$</p>\n<p>稳定排序</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"外部排序\"><a href=\"#外部排序\" class=\"headerlink\" title=\"外部排序\"></a>外部排序</h3><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"排序大法\"><a href=\"#排序大法\" class=\"headerlink\" title=\"排序大法\"></a>排序大法</h1><h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><ul>\n<li>排序，就是重新排列表中的元素，使得表中的元素按照关键字有序的过程。</li>\n<li>算法稳定性：如果两个元素关键字相同，排完序后在表中位置先后顺序和排序前一样，则称其排序为稳定的。</li>\n</ul>\n<h2 id=\"2、分类\"><a href=\"#2、分类\" class=\"headerlink\" title=\"2、分类\"></a>2、分类</h2><h3 id=\"内部排序\"><a href=\"#内部排序\" class=\"headerlink\" title=\"内部排序\"></a>内部排序</h3><ul>\n<li><p><a href=\"https://lmzyoyo.top/2022/06/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/\">插入排序</a></p>\n<blockquote>\n<ul>\n<li><p>直接插入排序</p>\n<blockquote>\n<p>时间复杂度：最好：$O(n)$，最坏：$O(n^2)$，平均：$O(n^2)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>稳定排序，适用线性表和链式表</p>\n</blockquote>\n</li>\n<li><p>折半插入排序</p>\n<blockquote>\n<p>时间复杂度：最坏：$O(n^2)$，平均：$O(n^2)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>稳定排序</p>\n</blockquote>\n</li>\n<li><p>希尔排序</p>\n<blockquote>\n<p>时间复杂度：最坏：$O(n^2)$，平均：$O(n^{1.3})$（现代数学没法证明）</p>\n<p>空间复杂度：$O(1)$</p>\n<p>不稳定排序，只适用于线性表</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p><a href=\"\">交换排序</a></p>\n<blockquote>\n<ul>\n<li><p>冒泡排序</p>\n<blockquote>\n<p>时间复杂度：最好：$O(n)$，最坏：$O(n^2)$，平均：$O(n^2)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>稳定排序：适用于线性表和链式表</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>快速排序</p>\n<blockquote>\n<p>时间复杂度：最坏：$O(n^2)$，平均：$O(nlog_2n)$</p>\n<p>空间复杂度：最好：$O(log_2n)$，最坏：$O(n)$，平均：$O(log_2n)$</p>\n<p>不稳定排序</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p><a href=\"\">选择排序</a></p>\n<blockquote>\n<ul>\n<li><p>简单选择排序</p>\n<blockquote>\n<p>时间复杂度：$O(n^2)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>不稳定排序：很明显没有元素的移动，那么交换很有可能导致后面的元素交换到前面来了</p>\n</blockquote>\n</li>\n<li><p>堆排序</p>\n<blockquote>\n<p>时间复杂度：$O(nlog_2n)$，其中建堆的时间复杂度为$O(n)$</p>\n<p>空间复杂度：$O(1)$</p>\n<p>不稳定排序：选择排序都不是稳定的，因为没有整体后移</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p><a href=\"\">归并排序</a></p>\n<blockquote>\n<p>时间复杂度：$O(nlog_2n)$</p>\n<p>空间复杂度：$O(n)$</p>\n<p>稳定排序</p>\n</blockquote>\n</li>\n<li><p><a href=\"\">基数排序</a></p>\n<blockquote>\n<p>时间复杂度：$O(r)$</p>\n<p>空间复杂度：$O(d(n+r))$</p>\n<p>稳定排序</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"外部排序\"><a href=\"#外部排序\" class=\"headerlink\" title=\"外部排序\"></a>外部排序</h3>"},{"title":"数据结构之树","excerpt":"数据结构考研复习中，树的学习","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205282006533.png","mathjax":true,"date":"2022-05-28T12:06:19.000Z","_content":"\n# 树\n\n## 1、普通的树\n\n&emsp;这个好像没什么好说的，唯一就是记住下面一些点。\n\n- 树边与节点关系，边数量=节点数量-1，考虑到个节点都从父亲那边拿了一条边，而根节点没有，所以就差1，做题很好用\n- 度为m的树，所有节点之和为$$\\sum{度为i的节点}$$\n\n## 2、二叉树分类\n\n- 满二叉树\n\n![](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205282011302.png)\n\n- 完全二叉树\n\n![image-20220528201406687](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205282014752.png)\n\n- 普通二叉树，这没啥好说的。\n\n## 3、二叉树存储结构\n\n- 顺序存储\n\n  > 对于满二叉树和完全二叉树，最适合了\n  >\n  > - 结论1、为什么下标为i节点（下标从0开始）的左右孩子分别为2i+1、2i+2，设i节点在第**h**层，i节点**左**边有**m**个，右边有**n**个，左孩子下标为**g**\n  >\n  >   > 第**0~h-1**层总共有$$2^{h-1}-1$$个节点\n  >   >\n  >   > **i**左边有**m**个节点，顺序存储中，i前面就有$$2^{h-1}-1+m$$个节点\n  >   >\n  >   > 所以**i**的下标就是$$2^{h-1}-1+m$$，得到**公式①：**$$i=2^{h-1}-1+m$$\n  >   >\n  >   > 第**h**层有$$2^{h-1}$$个节点，那么得到**公式②：**$$2^{h-1} = m+n+1$$\n  >   >\n  >   > **i**与**g**之间应该有$$2m+n$$个节点，所以有**公式③：**$$g-i=2m+n+1$$\n  >   >\n  >   > 联立公式①②③：$$g = 2i+1$$\n  >\n  > - 结论2、g节点的父母是$$\\lceil i/2 \\rceil-1$$，证明跟上面一样\n\n- 链式存储\n\n  > 左指针，数据域，右指针\n\n## 4、二叉树的性质\n\n&emsp;假设$$n_0,n_1,n_2$$分别表示度为0，1，2的节点个数，$$n$$表示总结点个数，$$m$$表示边，$$h$$表示高度\n\n- $$n_0 = n_2+1$$\n- $$m = n-1$$\n- $$h = \\lceil log_2(n+1) \\rceil = \\lfloor log_2n+1 \\rfloor$$\n- $$2^{h-1} \\leq h \\leq 2^h$$\n\n## 5、二叉树的遍历\n\n- 前序遍历\n\n  > 先遍历根节点，再遍历左子树，最后遍历右子树。如果有为空的，直接跳过。\n\n- 中序遍历\n\n  > 先遍历左子树，再遍历根节点，最后遍历右子树。如果有为空的，直接跳过。\n\n- 后序遍历\n\n  > 先遍历左子树，再遍历右子树，最后遍历根节点。如果有为空的，直接跳过。\n\n- 前序遍历与后序遍历序列恰好相反\n\n  > 该二叉树的节点数等于树高\n  >\n  > 该二叉树的中序遍历便是，依次去掉前序遍历的值和中序的值，接下来的值在中序中的值应该是两边而不是中间。\n\n## 6、线索二叉树\n\n\n\n## 7、树与森林\n\n### 1）树的存储结构\n\n- 双亲表示法\n- 孩子表示法\n- 孩子兄弟表示法\n\n### 2）树、森林、二叉树的转换\n\n|          树          |   森林   |  二叉树  |\n| :------------------: | :------: | :------: |\n|       先根遍历       | 先序遍历 | 先序遍历 |\n| 后根遍历（中根遍历） | 中序遍历 | 中序遍历 |\n\n- 遍历方式\n\n  > - 树\n  >\n  >   > 先根遍历：先遍历根，再按先根遍历依次遍历子树。\n  >   >\n  >   > 后根遍历（中根遍历）：先按后根遍历依次遍历子树，再遍历根。\n  >\n  > - 森林\n  >\n  >   > 先序遍历：先访问第一棵树的根节点，再按先序遍历依次遍历第一棵树的子树森林，最后遍历森林中剩下的森林。\n  >   >\n  >   > 中序遍历：先按中序遍历遍历第一棵树的子树森林，再访问根，最后遍历森林剩下的森林。\n\n- 若F是一个森林，B是由F变换成的二叉树\n\n  > - 假设F有n个非终端节点，求B中无右孩子的结点数？\n  >\n  > 答：F中每一个非终端节点`Node`的m个孩子，转换到B中，应该有一个无右孩子（`Node`的最右边那个孩子）。F中最右边的树的根节点也不会有右孩子的。所以总共无右孩子的节点数为**n+1**。同理，若F是一棵树，也可以推导一些定理。\n  >\n  > - F中的叶节点和B的关系\n  >\n  > 答：F中的叶节点数是B中左孩子为空的节点数。因为B中左孩子为空的话，说明在F中没有子树，那么就说明是叶节点。\n\n## 8、哈夫曼树\n\n&emsp;若**没有**一个编码是另一个编码的**前缀**，称这样的编码为**前缀编码**，前缀编码可以被唯一翻译。\n\n- 哈夫曼树：带权路径（WPL）最小的树\n\n- 哈夫曼树构造过程\n\n  > 下面四个节点，字母代表节点名称，数字代码权重\n  >\n  > 选取所有节点中最小的两个节点，构造新节点代替两个旧节点，一直重复，知道只剩一个节点\n\n```mermaid\ngraph TB\nA((a:7))\nB((b:5))\nC((c:2))\nD((d:4))\n```\n\n```mermaid\ngraph TB\nA((a:7))\nB((b:5))\nC((c:2))\nD((d:4))\nE((c+d:6))\nE-->C\nE-->D\n```\n\n```mermaid\ngraph TB\nA((a:7))\nB((b:5))\nC((c:2))\nD((d:4))\nE((c+d:6))\nE-->C\nE-->D\nF((f = b+e:11))\nF-->B\nF-->E\n```\n\n```mermaid\ngraph TB\nA((a:7))\nB((b:5))\nC((c:2))\nD((d:4))\nE((c+d:6))\nE-->C\nE-->D\nF((f = b+e:11))\nF-->B\nF-->E\nG((g = a+f:18))\nG-->A\nG-->F\n```\n\n&emsp;这样生成的带权路径最短，就是一颗哈夫曼树了。\n\n- 哈夫曼树特点\n\n  > 只有**度为0**和**度为2**的节点：即$$n_1 = 0$$，且根据树的特点有：$$n_0 = n_2 + 1 \\quad \\Rightarrow \\quad n=2n_2+1$$\n  >\n  > **度为m**的哈夫曼树，那就只有**度为0**和**度为m**的两种节点。\n  >\n  > 一个叶节点对应一个码字\n\n## 并查集\n\n&emsp;通常使用**双亲表示法**的树作为存储结构，注意不一定是二叉树了。每个集合表示为一棵树，所有的集合，表示成为森林了。并查集最重要的三个操作：`Initial(S)初始化`、`Union(S, Root1, Root2)联合`、`Find(S,x)查找`。\n","source":"_posts/数据结构之树.md","raw":"---\ntitle: 数据结构之树\ntags: \n- 数据结构\n- 考研\n- 树\nexcerpt: 数据结构考研复习中，树的学习\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202205282006533.png\ncategories: \n- 数据结构与算法\nmathjax: true\ndate: 2022-05-28 20:06:19\n---\n\n# 树\n\n## 1、普通的树\n\n&emsp;这个好像没什么好说的，唯一就是记住下面一些点。\n\n- 树边与节点关系，边数量=节点数量-1，考虑到个节点都从父亲那边拿了一条边，而根节点没有，所以就差1，做题很好用\n- 度为m的树，所有节点之和为$$\\sum{度为i的节点}$$\n\n## 2、二叉树分类\n\n- 满二叉树\n\n![](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205282011302.png)\n\n- 完全二叉树\n\n![image-20220528201406687](https://imagere.oss-cn-beijing.aliyuncs.com/img/202205282014752.png)\n\n- 普通二叉树，这没啥好说的。\n\n## 3、二叉树存储结构\n\n- 顺序存储\n\n  > 对于满二叉树和完全二叉树，最适合了\n  >\n  > - 结论1、为什么下标为i节点（下标从0开始）的左右孩子分别为2i+1、2i+2，设i节点在第**h**层，i节点**左**边有**m**个，右边有**n**个，左孩子下标为**g**\n  >\n  >   > 第**0~h-1**层总共有$$2^{h-1}-1$$个节点\n  >   >\n  >   > **i**左边有**m**个节点，顺序存储中，i前面就有$$2^{h-1}-1+m$$个节点\n  >   >\n  >   > 所以**i**的下标就是$$2^{h-1}-1+m$$，得到**公式①：**$$i=2^{h-1}-1+m$$\n  >   >\n  >   > 第**h**层有$$2^{h-1}$$个节点，那么得到**公式②：**$$2^{h-1} = m+n+1$$\n  >   >\n  >   > **i**与**g**之间应该有$$2m+n$$个节点，所以有**公式③：**$$g-i=2m+n+1$$\n  >   >\n  >   > 联立公式①②③：$$g = 2i+1$$\n  >\n  > - 结论2、g节点的父母是$$\\lceil i/2 \\rceil-1$$，证明跟上面一样\n\n- 链式存储\n\n  > 左指针，数据域，右指针\n\n## 4、二叉树的性质\n\n&emsp;假设$$n_0,n_1,n_2$$分别表示度为0，1，2的节点个数，$$n$$表示总结点个数，$$m$$表示边，$$h$$表示高度\n\n- $$n_0 = n_2+1$$\n- $$m = n-1$$\n- $$h = \\lceil log_2(n+1) \\rceil = \\lfloor log_2n+1 \\rfloor$$\n- $$2^{h-1} \\leq h \\leq 2^h$$\n\n## 5、二叉树的遍历\n\n- 前序遍历\n\n  > 先遍历根节点，再遍历左子树，最后遍历右子树。如果有为空的，直接跳过。\n\n- 中序遍历\n\n  > 先遍历左子树，再遍历根节点，最后遍历右子树。如果有为空的，直接跳过。\n\n- 后序遍历\n\n  > 先遍历左子树，再遍历右子树，最后遍历根节点。如果有为空的，直接跳过。\n\n- 前序遍历与后序遍历序列恰好相反\n\n  > 该二叉树的节点数等于树高\n  >\n  > 该二叉树的中序遍历便是，依次去掉前序遍历的值和中序的值，接下来的值在中序中的值应该是两边而不是中间。\n\n## 6、线索二叉树\n\n\n\n## 7、树与森林\n\n### 1）树的存储结构\n\n- 双亲表示法\n- 孩子表示法\n- 孩子兄弟表示法\n\n### 2）树、森林、二叉树的转换\n\n|          树          |   森林   |  二叉树  |\n| :------------------: | :------: | :------: |\n|       先根遍历       | 先序遍历 | 先序遍历 |\n| 后根遍历（中根遍历） | 中序遍历 | 中序遍历 |\n\n- 遍历方式\n\n  > - 树\n  >\n  >   > 先根遍历：先遍历根，再按先根遍历依次遍历子树。\n  >   >\n  >   > 后根遍历（中根遍历）：先按后根遍历依次遍历子树，再遍历根。\n  >\n  > - 森林\n  >\n  >   > 先序遍历：先访问第一棵树的根节点，再按先序遍历依次遍历第一棵树的子树森林，最后遍历森林中剩下的森林。\n  >   >\n  >   > 中序遍历：先按中序遍历遍历第一棵树的子树森林，再访问根，最后遍历森林剩下的森林。\n\n- 若F是一个森林，B是由F变换成的二叉树\n\n  > - 假设F有n个非终端节点，求B中无右孩子的结点数？\n  >\n  > 答：F中每一个非终端节点`Node`的m个孩子，转换到B中，应该有一个无右孩子（`Node`的最右边那个孩子）。F中最右边的树的根节点也不会有右孩子的。所以总共无右孩子的节点数为**n+1**。同理，若F是一棵树，也可以推导一些定理。\n  >\n  > - F中的叶节点和B的关系\n  >\n  > 答：F中的叶节点数是B中左孩子为空的节点数。因为B中左孩子为空的话，说明在F中没有子树，那么就说明是叶节点。\n\n## 8、哈夫曼树\n\n&emsp;若**没有**一个编码是另一个编码的**前缀**，称这样的编码为**前缀编码**，前缀编码可以被唯一翻译。\n\n- 哈夫曼树：带权路径（WPL）最小的树\n\n- 哈夫曼树构造过程\n\n  > 下面四个节点，字母代表节点名称，数字代码权重\n  >\n  > 选取所有节点中最小的两个节点，构造新节点代替两个旧节点，一直重复，知道只剩一个节点\n\n```mermaid\ngraph TB\nA((a:7))\nB((b:5))\nC((c:2))\nD((d:4))\n```\n\n```mermaid\ngraph TB\nA((a:7))\nB((b:5))\nC((c:2))\nD((d:4))\nE((c+d:6))\nE-->C\nE-->D\n```\n\n```mermaid\ngraph TB\nA((a:7))\nB((b:5))\nC((c:2))\nD((d:4))\nE((c+d:6))\nE-->C\nE-->D\nF((f = b+e:11))\nF-->B\nF-->E\n```\n\n```mermaid\ngraph TB\nA((a:7))\nB((b:5))\nC((c:2))\nD((d:4))\nE((c+d:6))\nE-->C\nE-->D\nF((f = b+e:11))\nF-->B\nF-->E\nG((g = a+f:18))\nG-->A\nG-->F\n```\n\n&emsp;这样生成的带权路径最短，就是一颗哈夫曼树了。\n\n- 哈夫曼树特点\n\n  > 只有**度为0**和**度为2**的节点：即$$n_1 = 0$$，且根据树的特点有：$$n_0 = n_2 + 1 \\quad \\Rightarrow \\quad n=2n_2+1$$\n  >\n  > **度为m**的哈夫曼树，那就只有**度为0**和**度为m**的两种节点。\n  >\n  > 一个叶节点对应一个码字\n\n## 并查集\n\n&emsp;通常使用**双亲表示法**的树作为存储结构，注意不一定是二叉树了。每个集合表示为一棵树，所有的集合，表示成为森林了。并查集最重要的三个操作：`Initial(S)初始化`、`Union(S, Root1, Root2)联合`、`Find(S,x)查找`。\n","slug":"数据结构之树","published":1,"updated":"2022-06-04T03:37:04.428Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl40x92oe001kp0u51dm4hfdn","content":"<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><h2 id=\"1、普通的树\"><a href=\"#1、普通的树\" class=\"headerlink\" title=\"1、普通的树\"></a>1、普通的树</h2><p>&emsp;这个好像没什么好说的，唯一就是记住下面一些点。</p>\n<ul>\n<li>树边与节点关系，边数量=节点数量-1，考虑到个节点都从父亲那边拿了一条边，而根节点没有，所以就差1，做题很好用</li>\n<li>度为m的树，所有节点之和为<script type=\"math/tex\">\\sum{度为i的节点}</script></li>\n</ul>\n<h2 id=\"2、二叉树分类\"><a href=\"#2、二叉树分类\" class=\"headerlink\" title=\"2、二叉树分类\"></a>2、二叉树分类</h2><ul>\n<li>满二叉树</li>\n</ul>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205282011302.png\" alt=\"\"></p>\n<ul>\n<li>完全二叉树</li>\n</ul>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205282014752.png\" alt=\"image-20220528201406687\"></p>\n<ul>\n<li>普通二叉树，这没啥好说的。</li>\n</ul>\n<h2 id=\"3、二叉树存储结构\"><a href=\"#3、二叉树存储结构\" class=\"headerlink\" title=\"3、二叉树存储结构\"></a>3、二叉树存储结构</h2><ul>\n<li><p>顺序存储</p>\n<blockquote>\n<p>对于满二叉树和完全二叉树，最适合了</p>\n<ul>\n<li><p>结论1、为什么下标为i节点（下标从0开始）的左右孩子分别为2i+1、2i+2，设i节点在第<strong>h</strong>层，i节点<strong>左</strong>边有<strong>m</strong>个，右边有<strong>n</strong>个，左孩子下标为<strong>g</strong></p>\n<blockquote>\n<p>第<strong>0~h-1</strong>层总共有<script type=\"math/tex\">2^{h-1}-1</script>个节点</p>\n<p><strong>i</strong>左边有<strong>m</strong>个节点，顺序存储中，i前面就有<script type=\"math/tex\">2^{h-1}-1+m</script>个节点</p>\n<p>所以<strong>i</strong>的下标就是<script type=\"math/tex\">2^{h-1}-1+m</script>，得到<strong>公式①：</strong><script type=\"math/tex\">i=2^{h-1}-1+m</script></p>\n<p>第<strong>h</strong>层有<script type=\"math/tex\">2^{h-1}</script>个节点，那么得到<strong>公式②：</strong><script type=\"math/tex\">2^{h-1} = m+n+1</script></p>\n<p><strong>i</strong>与<strong>g</strong>之间应该有<script type=\"math/tex\">2m+n</script>个节点，所以有<strong>公式③：</strong><script type=\"math/tex\">g-i=2m+n+1</script></p>\n<p>联立公式①②③：<script type=\"math/tex\">g = 2i+1</script></p>\n</blockquote>\n</li>\n<li><p>结论2、g节点的父母是<script type=\"math/tex\">\\lceil i/2 \\rceil-1</script>，证明跟上面一样</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>链式存储</p>\n<blockquote>\n<p>左指针，数据域，右指针</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"4、二叉树的性质\"><a href=\"#4、二叉树的性质\" class=\"headerlink\" title=\"4、二叉树的性质\"></a>4、二叉树的性质</h2><p>&emsp;假设<script type=\"math/tex\">n_0,n_1,n_2</script>分别表示度为0，1，2的节点个数，<script type=\"math/tex\">n</script>表示总结点个数，<script type=\"math/tex\">m</script>表示边，<script type=\"math/tex\">h</script>表示高度</p>\n<ul>\n<li><script type=\"math/tex; mode=display\">n_0 = n_2+1</script></li>\n<li><script type=\"math/tex; mode=display\">m = n-1</script></li>\n<li><script type=\"math/tex; mode=display\">h = \\lceil log_2(n+1) \\rceil = \\lfloor log_2n+1 \\rfloor</script></li>\n<li><script type=\"math/tex; mode=display\">2^{h-1} \\leq h \\leq 2^h</script></li>\n</ul>\n<h2 id=\"5、二叉树的遍历\"><a href=\"#5、二叉树的遍历\" class=\"headerlink\" title=\"5、二叉树的遍历\"></a>5、二叉树的遍历</h2><ul>\n<li><p>前序遍历</p>\n<blockquote>\n<p>先遍历根节点，再遍历左子树，最后遍历右子树。如果有为空的，直接跳过。</p>\n</blockquote>\n</li>\n<li><p>中序遍历</p>\n<blockquote>\n<p>先遍历左子树，再遍历根节点，最后遍历右子树。如果有为空的，直接跳过。</p>\n</blockquote>\n</li>\n<li><p>后序遍历</p>\n<blockquote>\n<p>先遍历左子树，再遍历右子树，最后遍历根节点。如果有为空的，直接跳过。</p>\n</blockquote>\n</li>\n<li><p>前序遍历与后序遍历序列恰好相反</p>\n<blockquote>\n<p>该二叉树的节点数等于树高</p>\n<p>该二叉树的中序遍历便是，依次去掉前序遍历的值和中序的值，接下来的值在中序中的值应该是两边而不是中间。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"6、线索二叉树\"><a href=\"#6、线索二叉树\" class=\"headerlink\" title=\"6、线索二叉树\"></a>6、线索二叉树</h2><h2 id=\"7、树与森林\"><a href=\"#7、树与森林\" class=\"headerlink\" title=\"7、树与森林\"></a>7、树与森林</h2><h3 id=\"1）树的存储结构\"><a href=\"#1）树的存储结构\" class=\"headerlink\" title=\"1）树的存储结构\"></a>1）树的存储结构</h3><ul>\n<li>双亲表示法</li>\n<li>孩子表示法</li>\n<li>孩子兄弟表示法</li>\n</ul>\n<h3 id=\"2）树、森林、二叉树的转换\"><a href=\"#2）树、森林、二叉树的转换\" class=\"headerlink\" title=\"2）树、森林、二叉树的转换\"></a>2）树、森林、二叉树的转换</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">树</th>\n<th style=\"text-align:center\">森林</th>\n<th style=\"text-align:center\">二叉树</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">先根遍历</td>\n<td style=\"text-align:center\">先序遍历</td>\n<td style=\"text-align:center\">先序遍历</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">后根遍历（中根遍历）</td>\n<td style=\"text-align:center\">中序遍历</td>\n<td style=\"text-align:center\">中序遍历</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><p>遍历方式</p>\n<blockquote>\n<ul>\n<li><p>树</p>\n<blockquote>\n<p>先根遍历：先遍历根，再按先根遍历依次遍历子树。</p>\n<p>后根遍历（中根遍历）：先按后根遍历依次遍历子树，再遍历根。</p>\n</blockquote>\n</li>\n<li><p>森林</p>\n<blockquote>\n<p>先序遍历：先访问第一棵树的根节点，再按先序遍历依次遍历第一棵树的子树森林，最后遍历森林中剩下的森林。</p>\n<p>中序遍历：先按中序遍历遍历第一棵树的子树森林，再访问根，最后遍历森林剩下的森林。</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>若F是一个森林，B是由F变换成的二叉树</p>\n<blockquote>\n<ul>\n<li>假设F有n个非终端节点，求B中无右孩子的结点数？</li>\n</ul>\n<p>答：F中每一个非终端节点<code>Node</code>的m个孩子，转换到B中，应该有一个无右孩子（<code>Node</code>的最右边那个孩子）。F中最右边的树的根节点也不会有右孩子的。所以总共无右孩子的节点数为<strong>n+1</strong>。同理，若F是一棵树，也可以推导一些定理。</p>\n<ul>\n<li>F中的叶节点和B的关系</li>\n</ul>\n<p>答：F中的叶节点数是B中左孩子为空的节点数。因为B中左孩子为空的话，说明在F中没有子树，那么就说明是叶节点。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"8、哈夫曼树\"><a href=\"#8、哈夫曼树\" class=\"headerlink\" title=\"8、哈夫曼树\"></a>8、哈夫曼树</h2><p>&emsp;若<strong>没有</strong>一个编码是另一个编码的<strong>前缀</strong>，称这样的编码为<strong>前缀编码</strong>，前缀编码可以被唯一翻译。</p>\n<ul>\n<li><p>哈夫曼树：带权路径（WPL）最小的树</p>\n</li>\n<li><p>哈夫曼树构造过程</p>\n<blockquote>\n<p>下面四个节点，字母代表节点名称，数字代码权重</p>\n<p>选取所有节点中最小的两个节点，构造新节点代替两个旧节点，一直重复，知道只剩一个节点</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"mermaid\">graph TB\nA((a:7))\nB((b:5))\nC((c:2))\nD((d:4))</pre>\n\n<pre class=\"mermaid\">graph TB\nA((a:7))\nB((b:5))\nC((c:2))\nD((d:4))\nE((c+d:6))\nE-->C\nE-->D</pre>\n\n<pre class=\"mermaid\">graph TB\nA((a:7))\nB((b:5))\nC((c:2))\nD((d:4))\nE((c+d:6))\nE-->C\nE-->D\nF((f = b+e:11))\nF-->B\nF-->E</pre>\n\n<pre class=\"mermaid\">graph TB\nA((a:7))\nB((b:5))\nC((c:2))\nD((d:4))\nE((c+d:6))\nE-->C\nE-->D\nF((f = b+e:11))\nF-->B\nF-->E\nG((g = a+f:18))\nG-->A\nG-->F</pre>\n\n<p>&emsp;这样生成的带权路径最短，就是一颗哈夫曼树了。</p>\n<ul>\n<li><p>哈夫曼树特点</p>\n<blockquote>\n<p>只有<strong>度为0</strong>和<strong>度为2</strong>的节点：即<script type=\"math/tex\">n_1 = 0</script>，且根据树的特点有：<script type=\"math/tex\">n_0 = n_2 + 1 \\quad \\Rightarrow \\quad n=2n_2+1</script></p>\n<p><strong>度为m</strong>的哈夫曼树，那就只有<strong>度为0</strong>和<strong>度为m</strong>的两种节点。</p>\n<p>一个叶节点对应一个码字</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h2><p>&emsp;通常使用<strong>双亲表示法</strong>的树作为存储结构，注意不一定是二叉树了。每个集合表示为一棵树，所有的集合，表示成为森林了。并查集最重要的三个操作：<code>Initial(S)初始化</code>、<code>Union(S, Root1, Root2)联合</code>、<code>Find(S,x)查找</code>。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><h2 id=\"1、普通的树\"><a href=\"#1、普通的树\" class=\"headerlink\" title=\"1、普通的树\"></a>1、普通的树</h2><p>&emsp;这个好像没什么好说的，唯一就是记住下面一些点。</p>\n<ul>\n<li>树边与节点关系，边数量=节点数量-1，考虑到个节点都从父亲那边拿了一条边，而根节点没有，所以就差1，做题很好用</li>\n<li>度为m的树，所有节点之和为<script type=\"math/tex\">\\sum{度为i的节点}</script></li>\n</ul>\n<h2 id=\"2、二叉树分类\"><a href=\"#2、二叉树分类\" class=\"headerlink\" title=\"2、二叉树分类\"></a>2、二叉树分类</h2><ul>\n<li>满二叉树</li>\n</ul>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205282011302.png\" alt=\"\"></p>\n<ul>\n<li>完全二叉树</li>\n</ul>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205282014752.png\" alt=\"image-20220528201406687\"></p>\n<ul>\n<li>普通二叉树，这没啥好说的。</li>\n</ul>\n<h2 id=\"3、二叉树存储结构\"><a href=\"#3、二叉树存储结构\" class=\"headerlink\" title=\"3、二叉树存储结构\"></a>3、二叉树存储结构</h2><ul>\n<li><p>顺序存储</p>\n<blockquote>\n<p>对于满二叉树和完全二叉树，最适合了</p>\n<ul>\n<li><p>结论1、为什么下标为i节点（下标从0开始）的左右孩子分别为2i+1、2i+2，设i节点在第<strong>h</strong>层，i节点<strong>左</strong>边有<strong>m</strong>个，右边有<strong>n</strong>个，左孩子下标为<strong>g</strong></p>\n<blockquote>\n<p>第<strong>0~h-1</strong>层总共有<script type=\"math/tex\">2^{h-1}-1</script>个节点</p>\n<p><strong>i</strong>左边有<strong>m</strong>个节点，顺序存储中，i前面就有<script type=\"math/tex\">2^{h-1}-1+m</script>个节点</p>\n<p>所以<strong>i</strong>的下标就是<script type=\"math/tex\">2^{h-1}-1+m</script>，得到<strong>公式①：</strong><script type=\"math/tex\">i=2^{h-1}-1+m</script></p>\n<p>第<strong>h</strong>层有<script type=\"math/tex\">2^{h-1}</script>个节点，那么得到<strong>公式②：</strong><script type=\"math/tex\">2^{h-1} = m+n+1</script></p>\n<p><strong>i</strong>与<strong>g</strong>之间应该有<script type=\"math/tex\">2m+n</script>个节点，所以有<strong>公式③：</strong><script type=\"math/tex\">g-i=2m+n+1</script></p>\n<p>联立公式①②③：<script type=\"math/tex\">g = 2i+1</script></p>\n</blockquote>\n</li>\n<li><p>结论2、g节点的父母是<script type=\"math/tex\">\\lceil i/2 \\rceil-1</script>，证明跟上面一样</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>链式存储</p>\n<blockquote>\n<p>左指针，数据域，右指针</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"4、二叉树的性质\"><a href=\"#4、二叉树的性质\" class=\"headerlink\" title=\"4、二叉树的性质\"></a>4、二叉树的性质</h2><p>&emsp;假设<script type=\"math/tex\">n_0,n_1,n_2</script>分别表示度为0，1，2的节点个数，<script type=\"math/tex\">n</script>表示总结点个数，<script type=\"math/tex\">m</script>表示边，<script type=\"math/tex\">h</script>表示高度</p>\n<ul>\n<li><script type=\"math/tex; mode=display\">n_0 = n_2+1</script></li>\n<li><script type=\"math/tex; mode=display\">m = n-1</script></li>\n<li><script type=\"math/tex; mode=display\">h = \\lceil log_2(n+1) \\rceil = \\lfloor log_2n+1 \\rfloor</script></li>\n<li><script type=\"math/tex; mode=display\">2^{h-1} \\leq h \\leq 2^h</script></li>\n</ul>\n<h2 id=\"5、二叉树的遍历\"><a href=\"#5、二叉树的遍历\" class=\"headerlink\" title=\"5、二叉树的遍历\"></a>5、二叉树的遍历</h2><ul>\n<li><p>前序遍历</p>\n<blockquote>\n<p>先遍历根节点，再遍历左子树，最后遍历右子树。如果有为空的，直接跳过。</p>\n</blockquote>\n</li>\n<li><p>中序遍历</p>\n<blockquote>\n<p>先遍历左子树，再遍历根节点，最后遍历右子树。如果有为空的，直接跳过。</p>\n</blockquote>\n</li>\n<li><p>后序遍历</p>\n<blockquote>\n<p>先遍历左子树，再遍历右子树，最后遍历根节点。如果有为空的，直接跳过。</p>\n</blockquote>\n</li>\n<li><p>前序遍历与后序遍历序列恰好相反</p>\n<blockquote>\n<p>该二叉树的节点数等于树高</p>\n<p>该二叉树的中序遍历便是，依次去掉前序遍历的值和中序的值，接下来的值在中序中的值应该是两边而不是中间。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"6、线索二叉树\"><a href=\"#6、线索二叉树\" class=\"headerlink\" title=\"6、线索二叉树\"></a>6、线索二叉树</h2><h2 id=\"7、树与森林\"><a href=\"#7、树与森林\" class=\"headerlink\" title=\"7、树与森林\"></a>7、树与森林</h2><h3 id=\"1）树的存储结构\"><a href=\"#1）树的存储结构\" class=\"headerlink\" title=\"1）树的存储结构\"></a>1）树的存储结构</h3><ul>\n<li>双亲表示法</li>\n<li>孩子表示法</li>\n<li>孩子兄弟表示法</li>\n</ul>\n<h3 id=\"2）树、森林、二叉树的转换\"><a href=\"#2）树、森林、二叉树的转换\" class=\"headerlink\" title=\"2）树、森林、二叉树的转换\"></a>2）树、森林、二叉树的转换</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">树</th>\n<th style=\"text-align:center\">森林</th>\n<th style=\"text-align:center\">二叉树</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">先根遍历</td>\n<td style=\"text-align:center\">先序遍历</td>\n<td style=\"text-align:center\">先序遍历</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">后根遍历（中根遍历）</td>\n<td style=\"text-align:center\">中序遍历</td>\n<td style=\"text-align:center\">中序遍历</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><p>遍历方式</p>\n<blockquote>\n<ul>\n<li><p>树</p>\n<blockquote>\n<p>先根遍历：先遍历根，再按先根遍历依次遍历子树。</p>\n<p>后根遍历（中根遍历）：先按后根遍历依次遍历子树，再遍历根。</p>\n</blockquote>\n</li>\n<li><p>森林</p>\n<blockquote>\n<p>先序遍历：先访问第一棵树的根节点，再按先序遍历依次遍历第一棵树的子树森林，最后遍历森林中剩下的森林。</p>\n<p>中序遍历：先按中序遍历遍历第一棵树的子树森林，再访问根，最后遍历森林剩下的森林。</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>若F是一个森林，B是由F变换成的二叉树</p>\n<blockquote>\n<ul>\n<li>假设F有n个非终端节点，求B中无右孩子的结点数？</li>\n</ul>\n<p>答：F中每一个非终端节点<code>Node</code>的m个孩子，转换到B中，应该有一个无右孩子（<code>Node</code>的最右边那个孩子）。F中最右边的树的根节点也不会有右孩子的。所以总共无右孩子的节点数为<strong>n+1</strong>。同理，若F是一棵树，也可以推导一些定理。</p>\n<ul>\n<li>F中的叶节点和B的关系</li>\n</ul>\n<p>答：F中的叶节点数是B中左孩子为空的节点数。因为B中左孩子为空的话，说明在F中没有子树，那么就说明是叶节点。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"8、哈夫曼树\"><a href=\"#8、哈夫曼树\" class=\"headerlink\" title=\"8、哈夫曼树\"></a>8、哈夫曼树</h2><p>&emsp;若<strong>没有</strong>一个编码是另一个编码的<strong>前缀</strong>，称这样的编码为<strong>前缀编码</strong>，前缀编码可以被唯一翻译。</p>\n<ul>\n<li><p>哈夫曼树：带权路径（WPL）最小的树</p>\n</li>\n<li><p>哈夫曼树构造过程</p>\n<blockquote>\n<p>下面四个节点，字母代表节点名称，数字代码权重</p>\n<p>选取所有节点中最小的两个节点，构造新节点代替两个旧节点，一直重复，知道只剩一个节点</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"mermaid\">graph TB\nA((a:7))\nB((b:5))\nC((c:2))\nD((d:4))</pre>\n\n<pre class=\"mermaid\">graph TB\nA((a:7))\nB((b:5))\nC((c:2))\nD((d:4))\nE((c+d:6))\nE-->C\nE-->D</pre>\n\n<pre class=\"mermaid\">graph TB\nA((a:7))\nB((b:5))\nC((c:2))\nD((d:4))\nE((c+d:6))\nE-->C\nE-->D\nF((f = b+e:11))\nF-->B\nF-->E</pre>\n\n<pre class=\"mermaid\">graph TB\nA((a:7))\nB((b:5))\nC((c:2))\nD((d:4))\nE((c+d:6))\nE-->C\nE-->D\nF((f = b+e:11))\nF-->B\nF-->E\nG((g = a+f:18))\nG-->A\nG-->F</pre>\n\n<p>&emsp;这样生成的带权路径最短，就是一颗哈夫曼树了。</p>\n<ul>\n<li><p>哈夫曼树特点</p>\n<blockquote>\n<p>只有<strong>度为0</strong>和<strong>度为2</strong>的节点：即<script type=\"math/tex\">n_1 = 0</script>，且根据树的特点有：<script type=\"math/tex\">n_0 = n_2 + 1 \\quad \\Rightarrow \\quad n=2n_2+1</script></p>\n<p><strong>度为m</strong>的哈夫曼树，那就只有<strong>度为0</strong>和<strong>度为m</strong>的两种节点。</p>\n<p>一个叶节点对应一个码字</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h2><p>&emsp;通常使用<strong>双亲表示法</strong>的树作为存储结构，注意不一定是二叉树了。每个集合表示为一棵树，所有的集合，表示成为森林了。并查集最重要的三个操作：<code>Initial(S)初始化</code>、<code>Union(S, Root1, Root2)联合</code>、<code>Find(S,x)查找</code>。</p>\n"},{"title":"编译Linux与Uboot","cover":"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141843271749.png","date":"2022-04-05T11:53:21.000Z","excerpt":"编译你自己的Linux和uboot","_content":"\n# 一、前言\n\n目前没有前言\n\n# 二、准备工作\n\n准备太久了\n\n# 三、PCB绘制\n\n不是我绘制的\n\n# 四、下载编译工具链\n\n我下的是`arm-linux-gnueabi-`\n\n# 五、u-boot移植\n\n## 1、下载`u-boot`\n\n``` shell\ngit clone https://github.com/Lichee-Pi/u-boot.git\ngit branch -a  # 查看分支，我们使用的是nano-v2018.01u-boot\ngit checkout nano-v2018.01u-boot  # 切换到nano-v2018.01u-boot这个分支\n```\n\n## 2、选取`config`配置\n\n考虑到水平有限，我们采用从现有的配置上进行更改。或者，我完全不进行更改，就直接使用了。\n\n### *对几个config简单介绍：*\n\n>`f1c100s_nano_uboot_defconfig`：`SPI Flash`支持版\n>\n>`licheepi_nano_defconfig`：不带`SPI Flash`，从`TF`卡启动\n>\n>`licheepi_nano_spiflash_defconfig`：从`SPI`设备启动\n\n其实上面三种我也分不清楚，我第一次采用的是 `licheepi_nano_defconfig`。我也找不到 `f1c100s_nano_uboot_defconfig`，但是在[这](https://gitee.com/LicheePiNano/u-boot)可以找到，这个是荔枝派的 `u-boot`，可能毕竟这款 `f1c100s`是国产芯片，在`GitHub`上面找不到。\n\n### 选取`config`操作\n\n``` shell\ncd ~/u-boot  # 切换到 下载的 u-boot 的根目录\nmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- licheepi_nano_defconfig  \n# 参数介绍：\n# ARCH=arm 是arm架构的\n# CROSS_COMPILE=arm-linux-gnueabi-  是之前的下载的编译工具链\n# licheepi_nano_defconfig 选取的默认config\n```\n\n## 3、可视化配置\n\n### 打开菜单命令\n\n``` shell\nmake ARCH=arm menuconfig\n# 之后上下键进行移动\n# 空格或者回车进行选择\n# 左右可以选择下方菜单\n# ctrl+退格才能删除已经填入的默认参数\n```\n\n### 参数讲解\n\n注意下面这两个参数就行\n\n![image-20220305195147976](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141844131100.png)\n\n#### `boot arguments`\n\n> - `console=ttyS0,115200 panic=5 rootwait root=/dev/mmcblk0p2 earlyprintk rw`\n>\n> > **`console=ttyS0,115200`** 表示终端为ttyS0即串口0,波特率为115200；\n> >\n> > **`panic=5` **字面意思是恐慌，即linux内核恐慌，其实就是linux不知道怎么执行了，此时内核就需要做一些相关的处理，这里的5表示超时时间，当Linux卡住5秒后仍未成功就会执行Linux恐慌异常的一些操作。\n> >\n> > `rootwait` 该参数是告诉内核挂在文件系统之前需要先加载相关驱动，这样做的目的是防止因mmc驱动还未加载就开始挂载驱动而导致文件系统挂载失败，所以一般bootargs中都要加上这个参数。\n> >\n> > **root=/dev/mmcblk0p2** 表示根文件系统的位置在mmc的0:2分区处，**/dev**是设备文件夹，内核在加载mmc中的时候就会在根文件系统中生成**mmcblk0p2**设备文件，这个设备文件其实就是mmc的0:2分区(这里对应TF卡的第二个分区：rootfs)，这样内核对文件系统的读写操作方式本质上就是读写/dev/mmcblk0p2该设备文件。\n> >\n> > **`earlyprintk`** 参数是指在内核加载的过程中打印输出信息，这样内核在加载的时候终端就会输出相应的启动信息。rw表示文件系统的操作属性，此处rw表示可读可写。\n\n#### `bootcmd`\n\n> - `load mmc 0:1 0x80008000 zImage;load mmc 0:1 0x80c08000 suniv-f1c100s-licheepi-nano.dtb;bootz 0x80008000 - 0x80c08000;`\n>\n> > ![image-20220305195531843](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141844720138.png)\n\n\n\n## 、遇到问题不要慌\n\n### （1）` execute 'swig'`\n\n> 没有`swig`这个东西，安装即可：`sudo apt install swig`\n>\n> `swig`：我从[网上](https://zh.wikipedia.org/wiki/SWIG)了解到是一个将`C/C++`的类封装成库，给`Python、Lua、PHP`等脚本语言调用。（题外话）\n\n## 、参考链接\n\n> [参考博客](https://cnblogs.com/twzy/p/14865952.html)\n>\n> [参考荔枝派](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141846763856.png)\n\n# 六、`Linux`的移植\n\n## 1、分区操作\n\n​\t一个硬盘对于`Linux`来说，需要进行**挂载**命令是：`mount`，一般插上自动挂载），然后再能使用，然后需要**卸载**（命令：`umount`）才能操作，如格式化，分区之类的。我们借助了`Ubuntu`下图形化工具——**`Gparted`**，命令行进行下载就行了。\n\n​\t然后，买到手的`sd`卡，可能已经分区了，有一个主分区。如果没法删除，或者进场出现例如*`/dev/sdb contains a mounted filesystem`*，我的建议，使用一个全0的映像文件写入`sd`卡，将前面的数据覆盖。\n\n​\t之后便是分区了，将只有一个未分区的，且没有任何分区的`sd`卡连接`Ubuntu`。\n\n### 分区1、`boot`\n\n> 新建一个分区\n>\n> 之前剩余空间为**1M**，新大小为**32M**，文件系统为**`fat16`**，卷标就设置为**`boot`**\n>\n> 对于之前的`1M`，是留给**`uboot`**的，而且在`gparted`是看不到的\n>\n> **图片来源于网络**\n>\n> ![image-20220314221728714](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141847334316.png)\n\n### 分区2、`rootfs`\n\n> 新建一个分区\n>\n> 之前剩余空间为**0M**，新大小为**100M**，文件系统为**`ext4`**，卷标就设置为**`rootfs`**\n>\n> ***图片来源于网络***\n>\n> ![image-20220314221807562](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141848448533.png)\n\n### 最后的效果\n\n![image-20220314221850652](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141849061332.png)\n\n## 2、编译**`Linux`**\n\n### 更改设备树\n\n# 七、编译`rootfs`\n\n","source":"_posts/编译Linux与Uboot.md","raw":"---\ntitle: 编译Linux与Uboot\ncover: 'http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141843271749.png'\ndate: 2022-04-05 19:53:21\ntags: \n\t- Linux\n\t- Uboot\n\t- 编译\nexcerpt: 编译你自己的Linux和uboot\ncategories: Linux\n\n---\n\n# 一、前言\n\n目前没有前言\n\n# 二、准备工作\n\n准备太久了\n\n# 三、PCB绘制\n\n不是我绘制的\n\n# 四、下载编译工具链\n\n我下的是`arm-linux-gnueabi-`\n\n# 五、u-boot移植\n\n## 1、下载`u-boot`\n\n``` shell\ngit clone https://github.com/Lichee-Pi/u-boot.git\ngit branch -a  # 查看分支，我们使用的是nano-v2018.01u-boot\ngit checkout nano-v2018.01u-boot  # 切换到nano-v2018.01u-boot这个分支\n```\n\n## 2、选取`config`配置\n\n考虑到水平有限，我们采用从现有的配置上进行更改。或者，我完全不进行更改，就直接使用了。\n\n### *对几个config简单介绍：*\n\n>`f1c100s_nano_uboot_defconfig`：`SPI Flash`支持版\n>\n>`licheepi_nano_defconfig`：不带`SPI Flash`，从`TF`卡启动\n>\n>`licheepi_nano_spiflash_defconfig`：从`SPI`设备启动\n\n其实上面三种我也分不清楚，我第一次采用的是 `licheepi_nano_defconfig`。我也找不到 `f1c100s_nano_uboot_defconfig`，但是在[这](https://gitee.com/LicheePiNano/u-boot)可以找到，这个是荔枝派的 `u-boot`，可能毕竟这款 `f1c100s`是国产芯片，在`GitHub`上面找不到。\n\n### 选取`config`操作\n\n``` shell\ncd ~/u-boot  # 切换到 下载的 u-boot 的根目录\nmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- licheepi_nano_defconfig  \n# 参数介绍：\n# ARCH=arm 是arm架构的\n# CROSS_COMPILE=arm-linux-gnueabi-  是之前的下载的编译工具链\n# licheepi_nano_defconfig 选取的默认config\n```\n\n## 3、可视化配置\n\n### 打开菜单命令\n\n``` shell\nmake ARCH=arm menuconfig\n# 之后上下键进行移动\n# 空格或者回车进行选择\n# 左右可以选择下方菜单\n# ctrl+退格才能删除已经填入的默认参数\n```\n\n### 参数讲解\n\n注意下面这两个参数就行\n\n![image-20220305195147976](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141844131100.png)\n\n#### `boot arguments`\n\n> - `console=ttyS0,115200 panic=5 rootwait root=/dev/mmcblk0p2 earlyprintk rw`\n>\n> > **`console=ttyS0,115200`** 表示终端为ttyS0即串口0,波特率为115200；\n> >\n> > **`panic=5` **字面意思是恐慌，即linux内核恐慌，其实就是linux不知道怎么执行了，此时内核就需要做一些相关的处理，这里的5表示超时时间，当Linux卡住5秒后仍未成功就会执行Linux恐慌异常的一些操作。\n> >\n> > `rootwait` 该参数是告诉内核挂在文件系统之前需要先加载相关驱动，这样做的目的是防止因mmc驱动还未加载就开始挂载驱动而导致文件系统挂载失败，所以一般bootargs中都要加上这个参数。\n> >\n> > **root=/dev/mmcblk0p2** 表示根文件系统的位置在mmc的0:2分区处，**/dev**是设备文件夹，内核在加载mmc中的时候就会在根文件系统中生成**mmcblk0p2**设备文件，这个设备文件其实就是mmc的0:2分区(这里对应TF卡的第二个分区：rootfs)，这样内核对文件系统的读写操作方式本质上就是读写/dev/mmcblk0p2该设备文件。\n> >\n> > **`earlyprintk`** 参数是指在内核加载的过程中打印输出信息，这样内核在加载的时候终端就会输出相应的启动信息。rw表示文件系统的操作属性，此处rw表示可读可写。\n\n#### `bootcmd`\n\n> - `load mmc 0:1 0x80008000 zImage;load mmc 0:1 0x80c08000 suniv-f1c100s-licheepi-nano.dtb;bootz 0x80008000 - 0x80c08000;`\n>\n> > ![image-20220305195531843](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141844720138.png)\n\n\n\n## 、遇到问题不要慌\n\n### （1）` execute 'swig'`\n\n> 没有`swig`这个东西，安装即可：`sudo apt install swig`\n>\n> `swig`：我从[网上](https://zh.wikipedia.org/wiki/SWIG)了解到是一个将`C/C++`的类封装成库，给`Python、Lua、PHP`等脚本语言调用。（题外话）\n\n## 、参考链接\n\n> [参考博客](https://cnblogs.com/twzy/p/14865952.html)\n>\n> [参考荔枝派](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141846763856.png)\n\n# 六、`Linux`的移植\n\n## 1、分区操作\n\n​\t一个硬盘对于`Linux`来说，需要进行**挂载**命令是：`mount`，一般插上自动挂载），然后再能使用，然后需要**卸载**（命令：`umount`）才能操作，如格式化，分区之类的。我们借助了`Ubuntu`下图形化工具——**`Gparted`**，命令行进行下载就行了。\n\n​\t然后，买到手的`sd`卡，可能已经分区了，有一个主分区。如果没法删除，或者进场出现例如*`/dev/sdb contains a mounted filesystem`*，我的建议，使用一个全0的映像文件写入`sd`卡，将前面的数据覆盖。\n\n​\t之后便是分区了，将只有一个未分区的，且没有任何分区的`sd`卡连接`Ubuntu`。\n\n### 分区1、`boot`\n\n> 新建一个分区\n>\n> 之前剩余空间为**1M**，新大小为**32M**，文件系统为**`fat16`**，卷标就设置为**`boot`**\n>\n> 对于之前的`1M`，是留给**`uboot`**的，而且在`gparted`是看不到的\n>\n> **图片来源于网络**\n>\n> ![image-20220314221728714](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141847334316.png)\n\n### 分区2、`rootfs`\n\n> 新建一个分区\n>\n> 之前剩余空间为**0M**，新大小为**100M**，文件系统为**`ext4`**，卷标就设置为**`rootfs`**\n>\n> ***图片来源于网络***\n>\n> ![image-20220314221807562](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141848448533.png)\n\n### 最后的效果\n\n![image-20220314221850652](http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141849061332.png)\n\n## 2、编译**`Linux`**\n\n### 更改设备树\n\n# 七、编译`rootfs`\n\n","slug":"编译Linux与Uboot","published":1,"updated":"2022-06-05T06:40:50.951Z","_id":"cl40x92og001mp0u5aity313o","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h1><p>目前没有前言</p>\n<h1 id=\"二、准备工作\"><a href=\"#二、准备工作\" class=\"headerlink\" title=\"二、准备工作\"></a>二、准备工作</h1><p>准备太久了</p>\n<h1 id=\"三、PCB绘制\"><a href=\"#三、PCB绘制\" class=\"headerlink\" title=\"三、PCB绘制\"></a>三、PCB绘制</h1><p>不是我绘制的</p>\n<h1 id=\"四、下载编译工具链\"><a href=\"#四、下载编译工具链\" class=\"headerlink\" title=\"四、下载编译工具链\"></a>四、下载编译工具链</h1><p>我下的是<code>arm-linux-gnueabi-</code></p>\n<h1 id=\"五、u-boot移植\"><a href=\"#五、u-boot移植\" class=\"headerlink\" title=\"五、u-boot移植\"></a>五、u-boot移植</h1><h2 id=\"1、下载u-boot\"><a href=\"#1、下载u-boot\" class=\"headerlink\" title=\"1、下载u-boot\"></a>1、下载<code>u-boot</code></h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Lichee-Pi/u-boot.git</span><br><span class=\"line\">git branch -a  # 查看分支，我们使用的是nano-v2018.01u-boot</span><br><span class=\"line\">git checkout nano-v2018.01u-boot  # 切换到nano-v2018.01u-boot这个分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、选取config配置\"><a href=\"#2、选取config配置\" class=\"headerlink\" title=\"2、选取config配置\"></a>2、选取<code>config</code>配置</h2><p>考虑到水平有限，我们采用从现有的配置上进行更改。或者，我完全不进行更改，就直接使用了。</p>\n<h3 id=\"对几个config简单介绍：\"><a href=\"#对几个config简单介绍：\" class=\"headerlink\" title=\"对几个config简单介绍：\"></a><em>对几个config简单介绍：</em></h3><blockquote>\n<p><code>f1c100s_nano_uboot_defconfig</code>：<code>SPI Flash</code>支持版</p>\n<p><code>licheepi_nano_defconfig</code>：不带<code>SPI Flash</code>，从<code>TF</code>卡启动</p>\n<p><code>licheepi_nano_spiflash_defconfig</code>：从<code>SPI</code>设备启动</p>\n</blockquote>\n<p>其实上面三种我也分不清楚，我第一次采用的是 <code>licheepi_nano_defconfig</code>。我也找不到 <code>f1c100s_nano_uboot_defconfig</code>，但是在<a href=\"https://gitee.com/LicheePiNano/u-boot\">这</a>可以找到，这个是荔枝派的 <code>u-boot</code>，可能毕竟这款 <code>f1c100s</code>是国产芯片，在<code>GitHub</code>上面找不到。</p>\n<h3 id=\"选取config操作\"><a href=\"#选取config操作\" class=\"headerlink\" title=\"选取config操作\"></a>选取<code>config</code>操作</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/u-boot  # 切换到 下载的 u-boot 的根目录</span><br><span class=\"line\">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- licheepi_nano_defconfig  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数介绍：</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ARCH=arm 是arm架构的</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">CROSS_COMPILE=arm-linux-gnueabi-  是之前的下载的编译工具链</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">licheepi_nano_defconfig 选取的默认config</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3、可视化配置\"><a href=\"#3、可视化配置\" class=\"headerlink\" title=\"3、可视化配置\"></a>3、可视化配置</h2><h3 id=\"打开菜单命令\"><a href=\"#打开菜单命令\" class=\"headerlink\" title=\"打开菜单命令\"></a>打开菜单命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make ARCH=arm menuconfig</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">之后上下键进行移动</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">空格或者回车进行选择</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">左右可以选择下方菜单</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ctrl+退格才能删除已经填入的默认参数</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参数讲解\"><a href=\"#参数讲解\" class=\"headerlink\" title=\"参数讲解\"></a>参数讲解</h3><p>注意下面这两个参数就行</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141844131100.png\" alt=\"image-20220305195147976\"></p>\n<h4 id=\"boot-arguments\"><a href=\"#boot-arguments\" class=\"headerlink\" title=\"boot arguments\"></a><code>boot arguments</code></h4><blockquote>\n<ul>\n<li><code>console=ttyS0,115200 panic=5 rootwait root=/dev/mmcblk0p2 earlyprintk rw</code></li>\n</ul>\n<blockquote>\n<p><strong><code>console=ttyS0,115200</code></strong> 表示终端为ttyS0即串口0,波特率为115200；</p>\n<p><strong><code>panic=5</code> </strong>字面意思是恐慌，即linux内核恐慌，其实就是linux不知道怎么执行了，此时内核就需要做一些相关的处理，这里的5表示超时时间，当Linux卡住5秒后仍未成功就会执行Linux恐慌异常的一些操作。</p>\n<p><code>rootwait</code> 该参数是告诉内核挂在文件系统之前需要先加载相关驱动，这样做的目的是防止因mmc驱动还未加载就开始挂载驱动而导致文件系统挂载失败，所以一般bootargs中都要加上这个参数。</p>\n<p><strong>root=/dev/mmcblk0p2</strong> 表示根文件系统的位置在mmc的0:2分区处，<strong>/dev</strong>是设备文件夹，内核在加载mmc中的时候就会在根文件系统中生成<strong>mmcblk0p2</strong>设备文件，这个设备文件其实就是mmc的0:2分区(这里对应TF卡的第二个分区：rootfs)，这样内核对文件系统的读写操作方式本质上就是读写/dev/mmcblk0p2该设备文件。</p>\n<p><strong><code>earlyprintk</code></strong> 参数是指在内核加载的过程中打印输出信息，这样内核在加载的时候终端就会输出相应的启动信息。rw表示文件系统的操作属性，此处rw表示可读可写。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"bootcmd\"><a href=\"#bootcmd\" class=\"headerlink\" title=\"bootcmd\"></a><code>bootcmd</code></h4><blockquote>\n<ul>\n<li><code>load mmc 0:1 0x80008000 zImage;load mmc 0:1 0x80c08000 suniv-f1c100s-licheepi-nano.dtb;bootz 0x80008000 - 0x80c08000;</code></li>\n</ul>\n<blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141844720138.png\" alt=\"image-20220305195531843\"></p>\n</blockquote>\n</blockquote>\n<h2 id=\"、遇到问题不要慌\"><a href=\"#、遇到问题不要慌\" class=\"headerlink\" title=\"、遇到问题不要慌\"></a>、遇到问题不要慌</h2><h3 id=\"（1）execute-39-swig-39\"><a href=\"#（1）execute-39-swig-39\" class=\"headerlink\" title=\"（1）execute &#39;swig&#39;\"></a>（1）<code>execute &#39;swig&#39;</code></h3><blockquote>\n<p>没有<code>swig</code>这个东西，安装即可：<code>sudo apt install swig</code></p>\n<p><code>swig</code>：我从<a href=\"https://zh.wikipedia.org/wiki/SWIG\">网上</a>了解到是一个将<code>C/C++</code>的类封装成库，给<code>Python、Lua、PHP</code>等脚本语言调用。（题外话）</p>\n</blockquote>\n<h2 id=\"、参考链接\"><a href=\"#、参考链接\" class=\"headerlink\" title=\"、参考链接\"></a>、参考链接</h2><blockquote>\n<p><a href=\"https://cnblogs.com/twzy/p/14865952.html\">参考博客</a></p>\n<p><a href=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141846763856.png\">参考荔枝派</a></p>\n</blockquote>\n<h1 id=\"六、Linux的移植\"><a href=\"#六、Linux的移植\" class=\"headerlink\" title=\"六、Linux的移植\"></a>六、<code>Linux</code>的移植</h1><h2 id=\"1、分区操作\"><a href=\"#1、分区操作\" class=\"headerlink\" title=\"1、分区操作\"></a>1、分区操作</h2><p>​    一个硬盘对于<code>Linux</code>来说，需要进行<strong>挂载</strong>命令是：<code>mount</code>，一般插上自动挂载），然后再能使用，然后需要<strong>卸载</strong>（命令：<code>umount</code>）才能操作，如格式化，分区之类的。我们借助了<code>Ubuntu</code>下图形化工具——<strong><code>Gparted</code></strong>，命令行进行下载就行了。</p>\n<p>​    然后，买到手的<code>sd</code>卡，可能已经分区了，有一个主分区。如果没法删除，或者进场出现例如<em><code>/dev/sdb contains a mounted filesystem</code></em>，我的建议，使用一个全0的映像文件写入<code>sd</code>卡，将前面的数据覆盖。</p>\n<p>​    之后便是分区了，将只有一个未分区的，且没有任何分区的<code>sd</code>卡连接<code>Ubuntu</code>。</p>\n<h3 id=\"分区1、boot\"><a href=\"#分区1、boot\" class=\"headerlink\" title=\"分区1、boot\"></a>分区1、<code>boot</code></h3><blockquote>\n<p>新建一个分区</p>\n<p>之前剩余空间为<strong>1M</strong>，新大小为<strong>32M</strong>，文件系统为<strong><code>fat16</code></strong>，卷标就设置为<strong><code>boot</code></strong></p>\n<p>对于之前的<code>1M</code>，是留给<strong><code>uboot</code></strong>的，而且在<code>gparted</code>是看不到的</p>\n<p><strong>图片来源于网络</strong></p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141847334316.png\" alt=\"image-20220314221728714\"></p>\n</blockquote>\n<h3 id=\"分区2、rootfs\"><a href=\"#分区2、rootfs\" class=\"headerlink\" title=\"分区2、rootfs\"></a>分区2、<code>rootfs</code></h3><blockquote>\n<p>新建一个分区</p>\n<p>之前剩余空间为<strong>0M</strong>，新大小为<strong>100M</strong>，文件系统为<strong><code>ext4</code></strong>，卷标就设置为<strong><code>rootfs</code></strong></p>\n<p><strong><em>图片来源于网络</em></strong></p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141848448533.png\" alt=\"image-20220314221807562\"></p>\n</blockquote>\n<h3 id=\"最后的效果\"><a href=\"#最后的效果\" class=\"headerlink\" title=\"最后的效果\"></a>最后的效果</h3><p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141849061332.png\" alt=\"image-20220314221850652\"></p>\n<h2 id=\"2、编译Linux\"><a href=\"#2、编译Linux\" class=\"headerlink\" title=\"2、编译Linux\"></a>2、编译<strong><code>Linux</code></strong></h2><h3 id=\"更改设备树\"><a href=\"#更改设备树\" class=\"headerlink\" title=\"更改设备树\"></a>更改设备树</h3><h1 id=\"七、编译rootfs\"><a href=\"#七、编译rootfs\" class=\"headerlink\" title=\"七、编译rootfs\"></a>七、编译<code>rootfs</code></h1><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h1><p>目前没有前言</p>\n<h1 id=\"二、准备工作\"><a href=\"#二、准备工作\" class=\"headerlink\" title=\"二、准备工作\"></a>二、准备工作</h1><p>准备太久了</p>\n<h1 id=\"三、PCB绘制\"><a href=\"#三、PCB绘制\" class=\"headerlink\" title=\"三、PCB绘制\"></a>三、PCB绘制</h1><p>不是我绘制的</p>\n<h1 id=\"四、下载编译工具链\"><a href=\"#四、下载编译工具链\" class=\"headerlink\" title=\"四、下载编译工具链\"></a>四、下载编译工具链</h1><p>我下的是<code>arm-linux-gnueabi-</code></p>\n<h1 id=\"五、u-boot移植\"><a href=\"#五、u-boot移植\" class=\"headerlink\" title=\"五、u-boot移植\"></a>五、u-boot移植</h1><h2 id=\"1、下载u-boot\"><a href=\"#1、下载u-boot\" class=\"headerlink\" title=\"1、下载u-boot\"></a>1、下载<code>u-boot</code></h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Lichee-Pi/u-boot.git</span><br><span class=\"line\">git branch -a  # 查看分支，我们使用的是nano-v2018.01u-boot</span><br><span class=\"line\">git checkout nano-v2018.01u-boot  # 切换到nano-v2018.01u-boot这个分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、选取config配置\"><a href=\"#2、选取config配置\" class=\"headerlink\" title=\"2、选取config配置\"></a>2、选取<code>config</code>配置</h2><p>考虑到水平有限，我们采用从现有的配置上进行更改。或者，我完全不进行更改，就直接使用了。</p>\n<h3 id=\"对几个config简单介绍：\"><a href=\"#对几个config简单介绍：\" class=\"headerlink\" title=\"对几个config简单介绍：\"></a><em>对几个config简单介绍：</em></h3><blockquote>\n<p><code>f1c100s_nano_uboot_defconfig</code>：<code>SPI Flash</code>支持版</p>\n<p><code>licheepi_nano_defconfig</code>：不带<code>SPI Flash</code>，从<code>TF</code>卡启动</p>\n<p><code>licheepi_nano_spiflash_defconfig</code>：从<code>SPI</code>设备启动</p>\n</blockquote>\n<p>其实上面三种我也分不清楚，我第一次采用的是 <code>licheepi_nano_defconfig</code>。我也找不到 <code>f1c100s_nano_uboot_defconfig</code>，但是在<a href=\"https://gitee.com/LicheePiNano/u-boot\">这</a>可以找到，这个是荔枝派的 <code>u-boot</code>，可能毕竟这款 <code>f1c100s</code>是国产芯片，在<code>GitHub</code>上面找不到。</p>\n<h3 id=\"选取config操作\"><a href=\"#选取config操作\" class=\"headerlink\" title=\"选取config操作\"></a>选取<code>config</code>操作</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/u-boot  # 切换到 下载的 u-boot 的根目录</span><br><span class=\"line\">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- licheepi_nano_defconfig  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数介绍：</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ARCH=arm 是arm架构的</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">CROSS_COMPILE=arm-linux-gnueabi-  是之前的下载的编译工具链</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">licheepi_nano_defconfig 选取的默认config</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3、可视化配置\"><a href=\"#3、可视化配置\" class=\"headerlink\" title=\"3、可视化配置\"></a>3、可视化配置</h2><h3 id=\"打开菜单命令\"><a href=\"#打开菜单命令\" class=\"headerlink\" title=\"打开菜单命令\"></a>打开菜单命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make ARCH=arm menuconfig</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">之后上下键进行移动</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">空格或者回车进行选择</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">左右可以选择下方菜单</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ctrl+退格才能删除已经填入的默认参数</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参数讲解\"><a href=\"#参数讲解\" class=\"headerlink\" title=\"参数讲解\"></a>参数讲解</h3><p>注意下面这两个参数就行</p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141844131100.png\" alt=\"image-20220305195147976\"></p>\n<h4 id=\"boot-arguments\"><a href=\"#boot-arguments\" class=\"headerlink\" title=\"boot arguments\"></a><code>boot arguments</code></h4><blockquote>\n<ul>\n<li><code>console=ttyS0,115200 panic=5 rootwait root=/dev/mmcblk0p2 earlyprintk rw</code></li>\n</ul>\n<blockquote>\n<p><strong><code>console=ttyS0,115200</code></strong> 表示终端为ttyS0即串口0,波特率为115200；</p>\n<p><strong><code>panic=5</code> </strong>字面意思是恐慌，即linux内核恐慌，其实就是linux不知道怎么执行了，此时内核就需要做一些相关的处理，这里的5表示超时时间，当Linux卡住5秒后仍未成功就会执行Linux恐慌异常的一些操作。</p>\n<p><code>rootwait</code> 该参数是告诉内核挂在文件系统之前需要先加载相关驱动，这样做的目的是防止因mmc驱动还未加载就开始挂载驱动而导致文件系统挂载失败，所以一般bootargs中都要加上这个参数。</p>\n<p><strong>root=/dev/mmcblk0p2</strong> 表示根文件系统的位置在mmc的0:2分区处，<strong>/dev</strong>是设备文件夹，内核在加载mmc中的时候就会在根文件系统中生成<strong>mmcblk0p2</strong>设备文件，这个设备文件其实就是mmc的0:2分区(这里对应TF卡的第二个分区：rootfs)，这样内核对文件系统的读写操作方式本质上就是读写/dev/mmcblk0p2该设备文件。</p>\n<p><strong><code>earlyprintk</code></strong> 参数是指在内核加载的过程中打印输出信息，这样内核在加载的时候终端就会输出相应的启动信息。rw表示文件系统的操作属性，此处rw表示可读可写。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"bootcmd\"><a href=\"#bootcmd\" class=\"headerlink\" title=\"bootcmd\"></a><code>bootcmd</code></h4><blockquote>\n<ul>\n<li><code>load mmc 0:1 0x80008000 zImage;load mmc 0:1 0x80c08000 suniv-f1c100s-licheepi-nano.dtb;bootz 0x80008000 - 0x80c08000;</code></li>\n</ul>\n<blockquote>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141844720138.png\" alt=\"image-20220305195531843\"></p>\n</blockquote>\n</blockquote>\n<h2 id=\"、遇到问题不要慌\"><a href=\"#、遇到问题不要慌\" class=\"headerlink\" title=\"、遇到问题不要慌\"></a>、遇到问题不要慌</h2><h3 id=\"（1）execute-39-swig-39\"><a href=\"#（1）execute-39-swig-39\" class=\"headerlink\" title=\"（1）execute &#39;swig&#39;\"></a>（1）<code>execute &#39;swig&#39;</code></h3><blockquote>\n<p>没有<code>swig</code>这个东西，安装即可：<code>sudo apt install swig</code></p>\n<p><code>swig</code>：我从<a href=\"https://zh.wikipedia.org/wiki/SWIG\">网上</a>了解到是一个将<code>C/C++</code>的类封装成库，给<code>Python、Lua、PHP</code>等脚本语言调用。（题外话）</p>\n</blockquote>\n<h2 id=\"、参考链接\"><a href=\"#、参考链接\" class=\"headerlink\" title=\"、参考链接\"></a>、参考链接</h2><blockquote>\n<p><a href=\"https://cnblogs.com/twzy/p/14865952.html\">参考博客</a></p>\n<p><a href=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141846763856.png\">参考荔枝派</a></p>\n</blockquote>\n<h1 id=\"六、Linux的移植\"><a href=\"#六、Linux的移植\" class=\"headerlink\" title=\"六、Linux的移植\"></a>六、<code>Linux</code>的移植</h1><h2 id=\"1、分区操作\"><a href=\"#1、分区操作\" class=\"headerlink\" title=\"1、分区操作\"></a>1、分区操作</h2><p>​    一个硬盘对于<code>Linux</code>来说，需要进行<strong>挂载</strong>命令是：<code>mount</code>，一般插上自动挂载），然后再能使用，然后需要<strong>卸载</strong>（命令：<code>umount</code>）才能操作，如格式化，分区之类的。我们借助了<code>Ubuntu</code>下图形化工具——<strong><code>Gparted</code></strong>，命令行进行下载就行了。</p>\n<p>​    然后，买到手的<code>sd</code>卡，可能已经分区了，有一个主分区。如果没法删除，或者进场出现例如<em><code>/dev/sdb contains a mounted filesystem</code></em>，我的建议，使用一个全0的映像文件写入<code>sd</code>卡，将前面的数据覆盖。</p>\n<p>​    之后便是分区了，将只有一个未分区的，且没有任何分区的<code>sd</code>卡连接<code>Ubuntu</code>。</p>\n<h3 id=\"分区1、boot\"><a href=\"#分区1、boot\" class=\"headerlink\" title=\"分区1、boot\"></a>分区1、<code>boot</code></h3><blockquote>\n<p>新建一个分区</p>\n<p>之前剩余空间为<strong>1M</strong>，新大小为<strong>32M</strong>，文件系统为<strong><code>fat16</code></strong>，卷标就设置为<strong><code>boot</code></strong></p>\n<p>对于之前的<code>1M</code>，是留给<strong><code>uboot</code></strong>的，而且在<code>gparted</code>是看不到的</p>\n<p><strong>图片来源于网络</strong></p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141847334316.png\" alt=\"image-20220314221728714\"></p>\n</blockquote>\n<h3 id=\"分区2、rootfs\"><a href=\"#分区2、rootfs\" class=\"headerlink\" title=\"分区2、rootfs\"></a>分区2、<code>rootfs</code></h3><blockquote>\n<p>新建一个分区</p>\n<p>之前剩余空间为<strong>0M</strong>，新大小为<strong>100M</strong>，文件系统为<strong><code>ext4</code></strong>，卷标就设置为<strong><code>rootfs</code></strong></p>\n<p><strong><em>图片来源于网络</em></strong></p>\n<p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141848448533.png\" alt=\"image-20220314221807562\"></p>\n</blockquote>\n<h3 id=\"最后的效果\"><a href=\"#最后的效果\" class=\"headerlink\" title=\"最后的效果\"></a>最后的效果</h3><p><img src=\"http://imagere.oss-cn-beijing.aliyuncs.com/img/20220605141849061332.png\" alt=\"image-20220314221850652\"></p>\n<h2 id=\"2、编译Linux\"><a href=\"#2、编译Linux\" class=\"headerlink\" title=\"2、编译Linux\"></a>2、编译<strong><code>Linux</code></strong></h2><h3 id=\"更改设备树\"><a href=\"#更改设备树\" class=\"headerlink\" title=\"更改设备树\"></a>更改设备树</h3><h1 id=\"七、编译rootfs\"><a href=\"#七、编译rootfs\" class=\"headerlink\" title=\"七、编译rootfs\"></a>七、编译<code>rootfs</code></h1>"},{"title":"数据结构之查找","excerpt":"数据结构之查找、二分查找、红黑树、树","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202205181200710.png","mathjax":true,"date":"2022-05-18T03:55:45.000Z","_content":"\n# 查找大法\n\n## 1、顺序查找与二分法查找\n\n---\n## 2、顺序二叉树与平衡二叉树\n\n### 顺序二叉树\n\n- 题目：下列哪个序列不是顺序二叉树的搜索序列\n\n  > 如：$$a_1, a_2, a_3, a_4,a_5,a_6$$\n  >\n  > 如何判断：对于$$a_i$$来说，如果$$a_{i+1}>a_i$$，那么，所有$$n>i都有a_n>a_i$$。\n  \n- 计算顺序二叉树的成功查找长度\n\n  > $$ASL_{成功} = \\frac{\\sum{第i层节点数*i}}{节点总数}$$\n\n- 计算顺序二叉树的失败查找长度\n\n  > $$ASL_{失败} = \\frac{\\sum{空链的父节点高度}}{空链的个数}$$\n\n### 平衡二叉树\n\n- 平衡因子：**左**子树的高度**减**去**右**子树的高度，$$h_左-h_右$$\n- 分支节点：度不为0的节点\n\n- 平衡二叉树的**旋转**\n\n  > - 对节点`A`左旋：\n  >\n  >   > 1、`A` **右**孩子的**左**孩子变成`A`的**右**孩子：`A->right = A->right->left`\n  >   >\n  >   > 2、`A`的**右**孩子取代`A`的位置\n  >   >\n  >   > 3、`A`变成**右**孩子的**左**孩子：`A->right->left = A`\n  >\n  > - 对节点`A`右旋：\n  >\n  >   > 1、`A` 左孩子的右孩子变成`A`的左孩子：`A->left = A->left->right`\n  >   >\n  >   > 2、`A`的左孩子取代A的位置\n  >   >\n  >   > 3、`A`变成左孩子的右孩子：`A->left->right = A`\n\n\n\n\n- 平衡二叉树的**插入**（王道书  $$P_{274}$$）\n\n  > - 基本假设：找到**插入路径**上离**插入点**最近的**不平衡**节点`A`，`A`一般是插入树`C`的**爷爷**，设`B`是`C`的**父亲**\n  >\n  >   > 第一是找**不平衡节点**\n  >   >\n  >   > 第二是`C`可能是新节点也可能不是，是在`C`的**子树**或者`C`处插入，但是`C`没有失衡\n  >   >\n  >   > 第三是`B`必须是**插入路径**上的节点，插入路径和排序二叉树一样的\n  >\n  > - 核心思想：将中间大小的节点旋转到`A`的位置，这里很混乱，没关系，看下面的\n  >\n  > - 1、`LL`平衡旋转：`A`的**左（L）**孩子是`B`，`B`的**左（L）**孩子是`C`\n  >\n  >   > 1）**右**单旋转即可\n  >   >\n  >   > 2）对`A`点右旋一次即可\n  >   >\n  >   > 3）核心思想：显然有`A>B>C`，最后右旋一下，`B（中间大小）`取代了`A`\n  >\n  > - 2、`RR`平衡旋转：`A`的**右（R）**孩子是`B`，`B`的**右（R）**孩子是`C`\n  >\n  >   > 1）左单旋转即可\n  >   >\n  >   > 2）对`A`点左旋一次即可\n  >   >\n  >   > 3）核心思想：显然有`A<B<C`，最后右旋一下，`B（中间大小）`取代了`A`\n  >\n  > - 3、`LR`平衡旋转：`A`的**左（L）**孩子是`B`，`B`的**右（R）**孩子是`C`\n  >\n  >   > 1）先左后右旋转\n  >   >\n  >   > 2）先对`B`**左**旋，后对`A`**右**旋\n  >   >\n  >   > 3）核心思想：显然是`B<C<A`，最后是把`C`旋转到`A`的位置\n  >   >\n  >   > 4）解释：\n  >   >\n  >   > - 对`B`左旋：将`C`提升到`B`的位置，提升第一次，`C`变成儿子，`B`变成孙子\n  >   > - 对`A`右旋：将`C`提升到`A`的位置，提升第二次，`C`变成爷爷，`A`变成儿子\n  >\n  > - 4、`RL`平衡旋转：`A`的**右（R）**孩子是`B`，`B`的**左（L）**孩子是`C`\n  >\n  >   > 1）先右后左旋转\n  >   >\n  >   > 2）先对`B`**右**旋，后对`A`**左**旋\n  >   >\n  >   > 3）核心思想：显然是`B>C>A`，最后是把`C`旋转到`A`的位置\n  >   >\n  >   > 4）解释：\n  >   >\n  >   > - 对`B`右旋：将`C`提升到`B`的位置，提升第一次，`C`变成儿子，`B`变成孙子\n  >   > - 对`A`左旋：将`C`提升到`A`的位置，提升第二次，`C`变成爷爷，`A`变成儿子\n\n\n\n- 平衡二叉树的**删除**\n\n  > - 基本假设：`w`是需要**删除**的节点，从`w`向上面找，离`w`**最近且失衡**的节点为`z`\n  >\n  >   > `z`有左右子树，左右子树高度差大于1，设高度较**高**的**子树根节点**为`y`\n  >   >\n  >   > `y`有左右子树，左右子树高度差小于等于1，设高度较**高**的**子树根节点**为`x`\n  >   >\n  >   > 如果`y`的左右子树高度相等，那么`x`任意左还是右\n  >   >\n  >   > 还是有，`z`是爷爷，`y`是父亲，`x`是孙子\n  >\n  > - 核心思想：还是把中间大小的节点旋转到`z`处\n  >\n  > - 1、`LL`平衡旋转：`z`的**左（L）**孩子是`y`，`y`的**左（L）**孩子是`x`\n  >\n  >   > 1）**右**单旋转即可\n  >   >\n  >   > 2）对`z`点右旋一次即可\n  >   >\n  >   > 3）核心思想：显然有`z>y>x`，最后右旋一下，`y（中间大小）`取代了`z`\n  >\n  > - 2、`RR`平衡旋转：`z`的**右（R）**孩子是`y`，`y`的**右（R）**孩子是`x`\n  >\n  >   > 1）左单旋转即可\n  >   >\n  >   > 2）对`z`点左旋一次即可\n  >   >\n  >   > 3）核心思想：显然有`z<y<x`，最后右旋一下，`y（中间大小）`取代了`z`\n  >\n  > - 3、`LR`平衡旋转：`z`的**左（L）**孩子是`y`，`y`的**右（R）**孩子是`x`\n  >\n  >   > 1）先左后右旋转\n  >   >\n  >   > 2）先对`y`**左**旋，后对`z`**右**旋\n  >   >\n  >   > 3）核心思想：显然是`y<x<z`，最后是把`x`旋转到`z`的位置\n  >   \n  > - 4、`RL`平衡旋转：`z`的**右（R）**孩子是`y`，`y`的**左（L）**孩子是`x`\n  >\n  >   > 1）先右后左旋转\n  >   >\n  >   > 2）先对`y`**右**旋，后对`z`**左**旋\n  >   >\n  >   > 3）核心思想：显然是`y>x>z`，最后是把`x`旋转到`z`的位置\n  >\n\n\n\n- 树高为`h`时，节点数`n`的最小值怎么计算\n\n  > 1、先给出答案：$$n(h)_{min} = n(h-1)_{min} + n(h-2)_{min} + 1$$\n  >\n  > ​\t\t\t且 $$n(0)_{min} = 0;n(1)_{min} = 1 ; n(2)_{min} = 2;$$ 这个应该很好得知，就像下面图示一样，\n  >\n  > 2、证明吧：首先，设定$n(x)_{min}$为树高为$x$时，最少需要的节点数目\n  >\n  > 3、假设现在有两棵$AVL$，且$AVL_1$的树高为`h-1`，$AVL_2$的树高为`h-2`\n  >\n  > 4、树高为`h`的`AVL`，左右子树也是一颗`AVL`，且左右子树的树高差不超过`1`\n  >\n  > 5、也就是说，左右子树的树高要么都为`h-1`（方法1）；\n  >\n  > ​\t\t\t\t\t\t要么一个为`h-1`，一个为`h-2`（方法2）。\n  >\n  > 6、既然想要追求节点少，那么肯定是树高最小最好，肯定选择方法2。\n  >\n  > ​\t\t不妨设左子树为`h-1`，右子树为`h-2`\n  >\n  > 7、那就可以用上述的$AVL_1 和 AVL_2$来作为`AVL`的两棵子树，再加上一个新的根节点\n  >\n  > 8、那么节点数目递推公式就是：$$n(h)_{min} = n(h-1)_{min} + n(h-2)_{min} + 1$$\n\n  $$\n  \\begin{cases}\n  n(h)_{min} & 高度为 h 的最小节点数目\\\\\n  n(h-1)_{min} & 高度为 h-1 左子树的最小节点数目\\\\\n  n(h-2)_{min} & 高度为 h-2 右子树的最小节点数目\\\\\n  1 & 额外的根节点数目\n  \\end{cases}\n  $$\n\n```mermaid\ngraph TB\nA \nB --> C\n显然左边分别是h为1和2的情况\n```\n\n---\n## 3、红黑树（916目前不考，先留坑）\n\n## 4、B树\n\n&emsp;首先，B-Tree称为B树或者B-树，也就是说B树和B-树其实是一个东西，本篇用B树这个名字。B树是用来外查找的，也就说在磁盘上面查找，因为可能内容太多，不适合全部加载到内存中来。\n\n- 高度与关键字数关系先给出：$$log_m(n+1) \\leq h \\leq log_{\\lceil m/2 \\rceil}(\\frac{n+1}{2})+1$$\n\n  > 1、`n`是关键字数，`m`是阶数，`h`是树高\n  >\n  > 2、每个节点关键字最多，那么树高度最低：$$n \\leq (m-1)(1+m+m^2+m^3+...+m^{h-1})$$\n  >\n  > 3、每个节点关键字最少，那么树高度最高\n\n- B树的一些概念\n\n  > 1、终端节点：下图的倒数第二层节点就是**终端节点**（也就是最后一层**非空节点**）\n  >\n  > 2、叶子节点：最后一层的`null`节点，也就是**空节点**叫做**叶子节点**。\n\n```mermaid\ngraph TB\nA[22]-->B[5    11]\nA-->C[36     45]\nB-->D(null)\nB-->E(null)\nB-->F(null)\nC-->g(null)\nC-->h(null)\nC-->i(null)\n```\n\n\n\n- B树的特性（这几个特性决定B树的插入删除操作）\n\n  > 1、树中每个节点之多有`m`棵**子树**，至多有`m-1`个**关键字**\n  >\n  > 2、若根节点不是**终端节点**，则至少有**两棵**子树。（对于根节点不要求子树很多）\n  >\n  > 3、除了根节点之外的所有非叶子节点，至少有$$\\lceil m/2\\rceil$$（向上取整）棵子树，至少含有$$\\lceil (m-1)/2\\rceil$$个关键字。\n  >\n  > 4、所有的非叶子节点的结构如下：n是总数，P是子树，K是关键字\n  >   |   `n`    |   `P0`   |   `K1`   |   `P1`   |  `K2`   |  `...`  | `Kn`   | `Pn`   | \n  >\n  > `Ki`关键字小于`Pi`子树的所有关键字，`Ki`关键字大于`Pi-1`子树的所有关键字，且关键字是有序的。\n  >\n  > 5、所有的叶节点都出现在**同一层次**，并且不携带信息，也就是为`null`。说明每棵子树**高相同**的。\n\n- B树的查找\n\n  > 1、先将一个节点的信息读入内存，然后用顺序查找或者折半查找的方法，找到关键字或者找到子树。\n  >\n  > 2、如果找到关键字就结束，如果找到子树就将当前节点写入磁盘，重复上述过程\n  \n- B树的插入\n\n  > 核心：还是需要满足B树的五条性质。\n  >\n  > 步骤：\n  >\n  > - 找到最低层的某个终端节点\n  >\n  > - 进行插入，分情况情况讨论\n  >\n  >   > 如果插入该关键字时候，该终端节点的关键字个数仍然是$$[\\lceil m/2 \\rceil-1,m-1]$$这个区间中，则直接插入\n  >   >\n  >   > 如果插入关键字时候，关键字数目溢出了，那么，就先将关键字插入对应位置得到一串新的关键字序列，取得这串新关键字序列中间值`m`，并以`m`将序列分割成两段。将`m`插入到本节点的父节点，并将两段序列变成父节点的两个子树孩子。同时判断父节点是否超过了，超过了继续向上迭代。直到根节点仍然超过了，那么就新建根节点，B树高加1。\n\n- B树的删除\n\n  > 核心：还是满足B树的五条性质\n  >\n  > 步骤：\n  >\n  > - 找到需要删除的节点，直接删除\n  >\n  > - 看是否仍然是B树\n  >\n  >   > 删除节点是**非终端节点**的关键字：\n  >   >\n  >   > - 用其前驱或者后继节点替代就行，这样就相当于删除了其前驱或者后继节点\n  >   > - 然后依次迭代，知道变成删除终端节点\n  >   >\n  >   > 删除节点是**终端节点**的关键字：\n  >   >\n  >   > - 如果删除了关键字之后，关键字个数仍然是$$[\\lceil m/2 \\rceil-1,m-1]$$，直接删除，而且终端节点没有子树，所以不用考虑子树如何处理。\n  >   >\n  >   > - 如果删除了关键字之后，关键字个数不够$$\\lceil m/2 \\rceil$$\n  >   >\n  >   >   > 其左（或右）兄弟够借一个节点给他也就是左（或右）兄弟节点关键字借出一个仍然满足$$[\\lceil m/2 \\rceil-1,m-1]$$，那么就用其**前驱（或后继）**关键字替换**此**位置，其**前驱的前驱（或后继的后继）**替换**前驱（或后继）**关键字的位置\n  >   >   >\n  >   >   > 如果其左右兄弟都不够借：说明本节点以及兄弟节点的关键字个数肯定**等于**$$\\lceil m/2 \\rceil-1$$，这样，就可以将**两兄弟**以及**两兄弟在父节点中包围的关键字**合并成一个新节点。至于这样**为什么**不会超过**关键字个数**的要求呢？看下面的解释！！！\n\n- 为什么B树的关键字要求为**$$[\\lceil m/2 \\rceil-1,m-1]$$**呢？\n\n  > 首先，关键字最大值确实为$$m-1$$，这个没问题，因为是有m棵子树，关键字可以少一个，仍然能够走正确的路径寻找。可以参看**性质4**\n  >\n  > 然后，前面说到删除关键字时候，兄弟节点需要合并的情况。那么本节点以及兄弟节点的关键字个数肯定**等于**关键字个数最小值才行的。不妨设最小值为`n`\n  >\n  > 要求合并之后关键字相加仍然满足关键字个数要求。有：\n  >\n  > $$(n-1)+1+n \\leq m-1$$：`(n-1)`是需要删除一个关键字，`1`是父节点中的一个关键字，`n`是兄弟节点的关键字个数\n  >\n  > $$n \\leq \\frac{m-1}{2}$$，但是需要关键字多，这样查找效率高，所以$$n = \\frac{m-1}{2}$$，考虑到奇偶，$$n=\\lceil m/2 \\rceil-1$$为通式（带入$$m=5和m=4$$很容易验证正确性）\n\n  \n\n## 5、B+树\n\n&emsp;B+树是数据库的出现而出现的B树的一种变形，它的插入以及删除和B树的操作基本类似，现在只讲讲它的性质以及和B树的不同点。\n\n> B+树的一些概念\n>\n> - 叶子节点：这个和B树**不同**，这里就是指最低层的非空节点，和普通的树一样\n> - 分支节点：非叶子节点\n\n> B+树的**性质**\n>\n> - 1、每个分支节点最多有m棵子树（与B树没什么区别）\n> - 2、非叶根节点至少有两棵子树，其他每个分支节点至少有$$\\lceil m/2 \\rceil$$棵子树（有点区别）\n> - 3、节点的子树个数与关键字个数相等（有区别）\n> - 4、所有叶节点关键字才有包含数据的指针，且关键字有序（有区别）\n> - 5、所有分支节点中关键字仅包含子节点的指针，而且此关键字是子节点关键字的**最大值**（大区别）\n\n> B树与B+树区别\n>\n> - 1、关键字个数不一样：B+树含有`n`个关键字和`n`棵子树，B树含有`n-1`个关键字和`n`棵子树。\n> - 2、关键字个数的范围不同：$$\\lceil m/2 \\rceil \\leq N_{B+关键字个数} \\leq m$$（$$2 \\leq N_{B+根节点} \\leq m$$），$$\\lceil m/2 \\rceil -1 \\leq N_{B树关键字个数} \\leq m - 1$$（$$1 \\leq N_{B树根节点} \\leq m-1$$）\n> - 3、**B+树**中，只有**叶子节点**包含**数据索引**，**其他节点**只包含**子节点索引**。**B树**中，**所有非空节点**都包含**数据索引**和**子节点索引**。\n> - 4、**B+树**中，关键字**等于**其**子树**的**最大值**；**B树**中，关键字**大于**其**左**边子树**小于**其**右**边子树。\n> - 5、查找操作有点不一样：**B+树**需要查找到叶子节点中关键字相等的地方，**B树**仅需要查找到关键字相等的地方。\n> - 6、**B+树**每个叶子节点直接以**链表**形式存储，所以，**B+树**还可以用链式查找方式查找\n\n## 6、散列查找\n\n&emsp;通过散列函数，直接将关键字映射到地址。散列函数记为$$Hash(Key) = Addr(下标或者索引)$$，理想情况下，如果没有发生碰撞，那么散列函数的查找效率时间复杂度为$$O(1)$$。是一个典型的空间换时间的数据结构。\n\n&emsp;这一小节，最重要的数学科目是《数论》。\n\n- 常见的散列函数\n\n  > 1、直接定址法：$$Hash(Key) = a\\times Key + b$$，这个不会发生碰撞，但是空位较多\n  >\n  > 2、除留余数法：$$Hash(Key) = Key \\%p$$，控制好p是关键，减少碰撞\n  >\n  > 3、数字分析法：根据关键字的数据特征，制定对应的哈希函数。\n  >\n  > 4、平方取中法：将关键字平方之后，取中间几位作为散列地址。\n\n- 处理冲突的方法\n\n  > 1、开放定址法\n  >\n  > - 线性探测法：发生冲突之后，就依次将地址加`k`（k=0，1，2，3……）知道找到空闲位置；寻找数据时也是先找到初步地址处，然后依次向下一个元素查找。\n  > - 平方探测法：将上述的`k`换成$$0^2,1^2,-1^2,2^2,-2^2...$$，这样是为了不让元素太聚集，提高查找和插入效率。\n  > - 双散列法：发生冲突后，用第二个散列函数计算地址增量。\n  > - 伪随机序列法：增量为伪随机序列。我的认为是：伪随机序列是构建此数据结构提前生成的一个没有规律的数列。\n  >\n  > 2、拉链法：发生冲突后，用链表依次存储冲突元素在同一地址，因此，整个哈希地址块存储的不是元素，而是链表头指针。\n\n- 性能分析\n\n  > 散列表查找效率主要取决于三个因素：散列函数，处理冲突的方法和装填因子\n  >\n  > 装填因子：记为$$\\alpha, \\quad \\alpha = \\frac{表中记录数n}{散列表长度m}$$，可以看出装填因子依赖于两者的比值。\n\n","source":"_posts/数据结构之查找.md","raw":"---\ntitle: 数据结构之查找\ntags: \n- 数据结构\n- 红黑树\n- 字符串\n- 查找\n- 平衡二叉树\n- 二分法\n- 考研\nexcerpt: 数据结构之查找、二分查找、红黑树、树\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202205181200710.png\ncategories:\n- 数据结构与算法\nmathjax: true\ndate: 2022-05-18 11:55:45\n---\n\n# 查找大法\n\n## 1、顺序查找与二分法查找\n\n---\n## 2、顺序二叉树与平衡二叉树\n\n### 顺序二叉树\n\n- 题目：下列哪个序列不是顺序二叉树的搜索序列\n\n  > 如：$$a_1, a_2, a_3, a_4,a_5,a_6$$\n  >\n  > 如何判断：对于$$a_i$$来说，如果$$a_{i+1}>a_i$$，那么，所有$$n>i都有a_n>a_i$$。\n  \n- 计算顺序二叉树的成功查找长度\n\n  > $$ASL_{成功} = \\frac{\\sum{第i层节点数*i}}{节点总数}$$\n\n- 计算顺序二叉树的失败查找长度\n\n  > $$ASL_{失败} = \\frac{\\sum{空链的父节点高度}}{空链的个数}$$\n\n### 平衡二叉树\n\n- 平衡因子：**左**子树的高度**减**去**右**子树的高度，$$h_左-h_右$$\n- 分支节点：度不为0的节点\n\n- 平衡二叉树的**旋转**\n\n  > - 对节点`A`左旋：\n  >\n  >   > 1、`A` **右**孩子的**左**孩子变成`A`的**右**孩子：`A->right = A->right->left`\n  >   >\n  >   > 2、`A`的**右**孩子取代`A`的位置\n  >   >\n  >   > 3、`A`变成**右**孩子的**左**孩子：`A->right->left = A`\n  >\n  > - 对节点`A`右旋：\n  >\n  >   > 1、`A` 左孩子的右孩子变成`A`的左孩子：`A->left = A->left->right`\n  >   >\n  >   > 2、`A`的左孩子取代A的位置\n  >   >\n  >   > 3、`A`变成左孩子的右孩子：`A->left->right = A`\n\n\n\n\n- 平衡二叉树的**插入**（王道书  $$P_{274}$$）\n\n  > - 基本假设：找到**插入路径**上离**插入点**最近的**不平衡**节点`A`，`A`一般是插入树`C`的**爷爷**，设`B`是`C`的**父亲**\n  >\n  >   > 第一是找**不平衡节点**\n  >   >\n  >   > 第二是`C`可能是新节点也可能不是，是在`C`的**子树**或者`C`处插入，但是`C`没有失衡\n  >   >\n  >   > 第三是`B`必须是**插入路径**上的节点，插入路径和排序二叉树一样的\n  >\n  > - 核心思想：将中间大小的节点旋转到`A`的位置，这里很混乱，没关系，看下面的\n  >\n  > - 1、`LL`平衡旋转：`A`的**左（L）**孩子是`B`，`B`的**左（L）**孩子是`C`\n  >\n  >   > 1）**右**单旋转即可\n  >   >\n  >   > 2）对`A`点右旋一次即可\n  >   >\n  >   > 3）核心思想：显然有`A>B>C`，最后右旋一下，`B（中间大小）`取代了`A`\n  >\n  > - 2、`RR`平衡旋转：`A`的**右（R）**孩子是`B`，`B`的**右（R）**孩子是`C`\n  >\n  >   > 1）左单旋转即可\n  >   >\n  >   > 2）对`A`点左旋一次即可\n  >   >\n  >   > 3）核心思想：显然有`A<B<C`，最后右旋一下，`B（中间大小）`取代了`A`\n  >\n  > - 3、`LR`平衡旋转：`A`的**左（L）**孩子是`B`，`B`的**右（R）**孩子是`C`\n  >\n  >   > 1）先左后右旋转\n  >   >\n  >   > 2）先对`B`**左**旋，后对`A`**右**旋\n  >   >\n  >   > 3）核心思想：显然是`B<C<A`，最后是把`C`旋转到`A`的位置\n  >   >\n  >   > 4）解释：\n  >   >\n  >   > - 对`B`左旋：将`C`提升到`B`的位置，提升第一次，`C`变成儿子，`B`变成孙子\n  >   > - 对`A`右旋：将`C`提升到`A`的位置，提升第二次，`C`变成爷爷，`A`变成儿子\n  >\n  > - 4、`RL`平衡旋转：`A`的**右（R）**孩子是`B`，`B`的**左（L）**孩子是`C`\n  >\n  >   > 1）先右后左旋转\n  >   >\n  >   > 2）先对`B`**右**旋，后对`A`**左**旋\n  >   >\n  >   > 3）核心思想：显然是`B>C>A`，最后是把`C`旋转到`A`的位置\n  >   >\n  >   > 4）解释：\n  >   >\n  >   > - 对`B`右旋：将`C`提升到`B`的位置，提升第一次，`C`变成儿子，`B`变成孙子\n  >   > - 对`A`左旋：将`C`提升到`A`的位置，提升第二次，`C`变成爷爷，`A`变成儿子\n\n\n\n- 平衡二叉树的**删除**\n\n  > - 基本假设：`w`是需要**删除**的节点，从`w`向上面找，离`w`**最近且失衡**的节点为`z`\n  >\n  >   > `z`有左右子树，左右子树高度差大于1，设高度较**高**的**子树根节点**为`y`\n  >   >\n  >   > `y`有左右子树，左右子树高度差小于等于1，设高度较**高**的**子树根节点**为`x`\n  >   >\n  >   > 如果`y`的左右子树高度相等，那么`x`任意左还是右\n  >   >\n  >   > 还是有，`z`是爷爷，`y`是父亲，`x`是孙子\n  >\n  > - 核心思想：还是把中间大小的节点旋转到`z`处\n  >\n  > - 1、`LL`平衡旋转：`z`的**左（L）**孩子是`y`，`y`的**左（L）**孩子是`x`\n  >\n  >   > 1）**右**单旋转即可\n  >   >\n  >   > 2）对`z`点右旋一次即可\n  >   >\n  >   > 3）核心思想：显然有`z>y>x`，最后右旋一下，`y（中间大小）`取代了`z`\n  >\n  > - 2、`RR`平衡旋转：`z`的**右（R）**孩子是`y`，`y`的**右（R）**孩子是`x`\n  >\n  >   > 1）左单旋转即可\n  >   >\n  >   > 2）对`z`点左旋一次即可\n  >   >\n  >   > 3）核心思想：显然有`z<y<x`，最后右旋一下，`y（中间大小）`取代了`z`\n  >\n  > - 3、`LR`平衡旋转：`z`的**左（L）**孩子是`y`，`y`的**右（R）**孩子是`x`\n  >\n  >   > 1）先左后右旋转\n  >   >\n  >   > 2）先对`y`**左**旋，后对`z`**右**旋\n  >   >\n  >   > 3）核心思想：显然是`y<x<z`，最后是把`x`旋转到`z`的位置\n  >   \n  > - 4、`RL`平衡旋转：`z`的**右（R）**孩子是`y`，`y`的**左（L）**孩子是`x`\n  >\n  >   > 1）先右后左旋转\n  >   >\n  >   > 2）先对`y`**右**旋，后对`z`**左**旋\n  >   >\n  >   > 3）核心思想：显然是`y>x>z`，最后是把`x`旋转到`z`的位置\n  >\n\n\n\n- 树高为`h`时，节点数`n`的最小值怎么计算\n\n  > 1、先给出答案：$$n(h)_{min} = n(h-1)_{min} + n(h-2)_{min} + 1$$\n  >\n  > ​\t\t\t且 $$n(0)_{min} = 0;n(1)_{min} = 1 ; n(2)_{min} = 2;$$ 这个应该很好得知，就像下面图示一样，\n  >\n  > 2、证明吧：首先，设定$n(x)_{min}$为树高为$x$时，最少需要的节点数目\n  >\n  > 3、假设现在有两棵$AVL$，且$AVL_1$的树高为`h-1`，$AVL_2$的树高为`h-2`\n  >\n  > 4、树高为`h`的`AVL`，左右子树也是一颗`AVL`，且左右子树的树高差不超过`1`\n  >\n  > 5、也就是说，左右子树的树高要么都为`h-1`（方法1）；\n  >\n  > ​\t\t\t\t\t\t要么一个为`h-1`，一个为`h-2`（方法2）。\n  >\n  > 6、既然想要追求节点少，那么肯定是树高最小最好，肯定选择方法2。\n  >\n  > ​\t\t不妨设左子树为`h-1`，右子树为`h-2`\n  >\n  > 7、那就可以用上述的$AVL_1 和 AVL_2$来作为`AVL`的两棵子树，再加上一个新的根节点\n  >\n  > 8、那么节点数目递推公式就是：$$n(h)_{min} = n(h-1)_{min} + n(h-2)_{min} + 1$$\n\n  $$\n  \\begin{cases}\n  n(h)_{min} & 高度为 h 的最小节点数目\\\\\n  n(h-1)_{min} & 高度为 h-1 左子树的最小节点数目\\\\\n  n(h-2)_{min} & 高度为 h-2 右子树的最小节点数目\\\\\n  1 & 额外的根节点数目\n  \\end{cases}\n  $$\n\n```mermaid\ngraph TB\nA \nB --> C\n显然左边分别是h为1和2的情况\n```\n\n---\n## 3、红黑树（916目前不考，先留坑）\n\n## 4、B树\n\n&emsp;首先，B-Tree称为B树或者B-树，也就是说B树和B-树其实是一个东西，本篇用B树这个名字。B树是用来外查找的，也就说在磁盘上面查找，因为可能内容太多，不适合全部加载到内存中来。\n\n- 高度与关键字数关系先给出：$$log_m(n+1) \\leq h \\leq log_{\\lceil m/2 \\rceil}(\\frac{n+1}{2})+1$$\n\n  > 1、`n`是关键字数，`m`是阶数，`h`是树高\n  >\n  > 2、每个节点关键字最多，那么树高度最低：$$n \\leq (m-1)(1+m+m^2+m^3+...+m^{h-1})$$\n  >\n  > 3、每个节点关键字最少，那么树高度最高\n\n- B树的一些概念\n\n  > 1、终端节点：下图的倒数第二层节点就是**终端节点**（也就是最后一层**非空节点**）\n  >\n  > 2、叶子节点：最后一层的`null`节点，也就是**空节点**叫做**叶子节点**。\n\n```mermaid\ngraph TB\nA[22]-->B[5    11]\nA-->C[36     45]\nB-->D(null)\nB-->E(null)\nB-->F(null)\nC-->g(null)\nC-->h(null)\nC-->i(null)\n```\n\n\n\n- B树的特性（这几个特性决定B树的插入删除操作）\n\n  > 1、树中每个节点之多有`m`棵**子树**，至多有`m-1`个**关键字**\n  >\n  > 2、若根节点不是**终端节点**，则至少有**两棵**子树。（对于根节点不要求子树很多）\n  >\n  > 3、除了根节点之外的所有非叶子节点，至少有$$\\lceil m/2\\rceil$$（向上取整）棵子树，至少含有$$\\lceil (m-1)/2\\rceil$$个关键字。\n  >\n  > 4、所有的非叶子节点的结构如下：n是总数，P是子树，K是关键字\n  >   |   `n`    |   `P0`   |   `K1`   |   `P1`   |  `K2`   |  `...`  | `Kn`   | `Pn`   | \n  >\n  > `Ki`关键字小于`Pi`子树的所有关键字，`Ki`关键字大于`Pi-1`子树的所有关键字，且关键字是有序的。\n  >\n  > 5、所有的叶节点都出现在**同一层次**，并且不携带信息，也就是为`null`。说明每棵子树**高相同**的。\n\n- B树的查找\n\n  > 1、先将一个节点的信息读入内存，然后用顺序查找或者折半查找的方法，找到关键字或者找到子树。\n  >\n  > 2、如果找到关键字就结束，如果找到子树就将当前节点写入磁盘，重复上述过程\n  \n- B树的插入\n\n  > 核心：还是需要满足B树的五条性质。\n  >\n  > 步骤：\n  >\n  > - 找到最低层的某个终端节点\n  >\n  > - 进行插入，分情况情况讨论\n  >\n  >   > 如果插入该关键字时候，该终端节点的关键字个数仍然是$$[\\lceil m/2 \\rceil-1,m-1]$$这个区间中，则直接插入\n  >   >\n  >   > 如果插入关键字时候，关键字数目溢出了，那么，就先将关键字插入对应位置得到一串新的关键字序列，取得这串新关键字序列中间值`m`，并以`m`将序列分割成两段。将`m`插入到本节点的父节点，并将两段序列变成父节点的两个子树孩子。同时判断父节点是否超过了，超过了继续向上迭代。直到根节点仍然超过了，那么就新建根节点，B树高加1。\n\n- B树的删除\n\n  > 核心：还是满足B树的五条性质\n  >\n  > 步骤：\n  >\n  > - 找到需要删除的节点，直接删除\n  >\n  > - 看是否仍然是B树\n  >\n  >   > 删除节点是**非终端节点**的关键字：\n  >   >\n  >   > - 用其前驱或者后继节点替代就行，这样就相当于删除了其前驱或者后继节点\n  >   > - 然后依次迭代，知道变成删除终端节点\n  >   >\n  >   > 删除节点是**终端节点**的关键字：\n  >   >\n  >   > - 如果删除了关键字之后，关键字个数仍然是$$[\\lceil m/2 \\rceil-1,m-1]$$，直接删除，而且终端节点没有子树，所以不用考虑子树如何处理。\n  >   >\n  >   > - 如果删除了关键字之后，关键字个数不够$$\\lceil m/2 \\rceil$$\n  >   >\n  >   >   > 其左（或右）兄弟够借一个节点给他也就是左（或右）兄弟节点关键字借出一个仍然满足$$[\\lceil m/2 \\rceil-1,m-1]$$，那么就用其**前驱（或后继）**关键字替换**此**位置，其**前驱的前驱（或后继的后继）**替换**前驱（或后继）**关键字的位置\n  >   >   >\n  >   >   > 如果其左右兄弟都不够借：说明本节点以及兄弟节点的关键字个数肯定**等于**$$\\lceil m/2 \\rceil-1$$，这样，就可以将**两兄弟**以及**两兄弟在父节点中包围的关键字**合并成一个新节点。至于这样**为什么**不会超过**关键字个数**的要求呢？看下面的解释！！！\n\n- 为什么B树的关键字要求为**$$[\\lceil m/2 \\rceil-1,m-1]$$**呢？\n\n  > 首先，关键字最大值确实为$$m-1$$，这个没问题，因为是有m棵子树，关键字可以少一个，仍然能够走正确的路径寻找。可以参看**性质4**\n  >\n  > 然后，前面说到删除关键字时候，兄弟节点需要合并的情况。那么本节点以及兄弟节点的关键字个数肯定**等于**关键字个数最小值才行的。不妨设最小值为`n`\n  >\n  > 要求合并之后关键字相加仍然满足关键字个数要求。有：\n  >\n  > $$(n-1)+1+n \\leq m-1$$：`(n-1)`是需要删除一个关键字，`1`是父节点中的一个关键字，`n`是兄弟节点的关键字个数\n  >\n  > $$n \\leq \\frac{m-1}{2}$$，但是需要关键字多，这样查找效率高，所以$$n = \\frac{m-1}{2}$$，考虑到奇偶，$$n=\\lceil m/2 \\rceil-1$$为通式（带入$$m=5和m=4$$很容易验证正确性）\n\n  \n\n## 5、B+树\n\n&emsp;B+树是数据库的出现而出现的B树的一种变形，它的插入以及删除和B树的操作基本类似，现在只讲讲它的性质以及和B树的不同点。\n\n> B+树的一些概念\n>\n> - 叶子节点：这个和B树**不同**，这里就是指最低层的非空节点，和普通的树一样\n> - 分支节点：非叶子节点\n\n> B+树的**性质**\n>\n> - 1、每个分支节点最多有m棵子树（与B树没什么区别）\n> - 2、非叶根节点至少有两棵子树，其他每个分支节点至少有$$\\lceil m/2 \\rceil$$棵子树（有点区别）\n> - 3、节点的子树个数与关键字个数相等（有区别）\n> - 4、所有叶节点关键字才有包含数据的指针，且关键字有序（有区别）\n> - 5、所有分支节点中关键字仅包含子节点的指针，而且此关键字是子节点关键字的**最大值**（大区别）\n\n> B树与B+树区别\n>\n> - 1、关键字个数不一样：B+树含有`n`个关键字和`n`棵子树，B树含有`n-1`个关键字和`n`棵子树。\n> - 2、关键字个数的范围不同：$$\\lceil m/2 \\rceil \\leq N_{B+关键字个数} \\leq m$$（$$2 \\leq N_{B+根节点} \\leq m$$），$$\\lceil m/2 \\rceil -1 \\leq N_{B树关键字个数} \\leq m - 1$$（$$1 \\leq N_{B树根节点} \\leq m-1$$）\n> - 3、**B+树**中，只有**叶子节点**包含**数据索引**，**其他节点**只包含**子节点索引**。**B树**中，**所有非空节点**都包含**数据索引**和**子节点索引**。\n> - 4、**B+树**中，关键字**等于**其**子树**的**最大值**；**B树**中，关键字**大于**其**左**边子树**小于**其**右**边子树。\n> - 5、查找操作有点不一样：**B+树**需要查找到叶子节点中关键字相等的地方，**B树**仅需要查找到关键字相等的地方。\n> - 6、**B+树**每个叶子节点直接以**链表**形式存储，所以，**B+树**还可以用链式查找方式查找\n\n## 6、散列查找\n\n&emsp;通过散列函数，直接将关键字映射到地址。散列函数记为$$Hash(Key) = Addr(下标或者索引)$$，理想情况下，如果没有发生碰撞，那么散列函数的查找效率时间复杂度为$$O(1)$$。是一个典型的空间换时间的数据结构。\n\n&emsp;这一小节，最重要的数学科目是《数论》。\n\n- 常见的散列函数\n\n  > 1、直接定址法：$$Hash(Key) = a\\times Key + b$$，这个不会发生碰撞，但是空位较多\n  >\n  > 2、除留余数法：$$Hash(Key) = Key \\%p$$，控制好p是关键，减少碰撞\n  >\n  > 3、数字分析法：根据关键字的数据特征，制定对应的哈希函数。\n  >\n  > 4、平方取中法：将关键字平方之后，取中间几位作为散列地址。\n\n- 处理冲突的方法\n\n  > 1、开放定址法\n  >\n  > - 线性探测法：发生冲突之后，就依次将地址加`k`（k=0，1，2，3……）知道找到空闲位置；寻找数据时也是先找到初步地址处，然后依次向下一个元素查找。\n  > - 平方探测法：将上述的`k`换成$$0^2,1^2,-1^2,2^2,-2^2...$$，这样是为了不让元素太聚集，提高查找和插入效率。\n  > - 双散列法：发生冲突后，用第二个散列函数计算地址增量。\n  > - 伪随机序列法：增量为伪随机序列。我的认为是：伪随机序列是构建此数据结构提前生成的一个没有规律的数列。\n  >\n  > 2、拉链法：发生冲突后，用链表依次存储冲突元素在同一地址，因此，整个哈希地址块存储的不是元素，而是链表头指针。\n\n- 性能分析\n\n  > 散列表查找效率主要取决于三个因素：散列函数，处理冲突的方法和装填因子\n  >\n  > 装填因子：记为$$\\alpha, \\quad \\alpha = \\frac{表中记录数n}{散列表长度m}$$，可以看出装填因子依赖于两者的比值。\n\n","slug":"数据结构之查找","published":1,"updated":"2022-05-25T06:31:30.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl40x92oz003ap0u55dofapq2","content":"<h1 id=\"查找大法\"><a href=\"#查找大法\" class=\"headerlink\" title=\"查找大法\"></a>查找大法</h1><h2 id=\"1、顺序查找与二分法查找\"><a href=\"#1、顺序查找与二分法查找\" class=\"headerlink\" title=\"1、顺序查找与二分法查找\"></a>1、顺序查找与二分法查找</h2><hr>\n<h2 id=\"2、顺序二叉树与平衡二叉树\"><a href=\"#2、顺序二叉树与平衡二叉树\" class=\"headerlink\" title=\"2、顺序二叉树与平衡二叉树\"></a>2、顺序二叉树与平衡二叉树</h2><h3 id=\"顺序二叉树\"><a href=\"#顺序二叉树\" class=\"headerlink\" title=\"顺序二叉树\"></a>顺序二叉树</h3><ul>\n<li><p>题目：下列哪个序列不是顺序二叉树的搜索序列</p>\n<blockquote>\n<p>如：<script type=\"math/tex\">a_1, a_2, a_3, a_4,a_5,a_6</script></p>\n<p>如何判断：对于<script type=\"math/tex\">a_i</script>来说，如果<script type=\"math/tex\">a_{i+1}>a_i</script>，那么，所有<script type=\"math/tex\">n>i都有a_n>a_i</script>。</p>\n</blockquote>\n</li>\n<li><p>计算顺序二叉树的成功查找长度</p>\n<blockquote>\n<script type=\"math/tex; mode=display\">ASL_{成功} = \\frac{\\sum{第i层节点数*i}}{节点总数}</script></blockquote>\n</li>\n<li><p>计算顺序二叉树的失败查找长度</p>\n<blockquote>\n<script type=\"math/tex; mode=display\">ASL_{失败} = \\frac{\\sum{空链的父节点高度}}{空链的个数}</script></blockquote>\n</li>\n</ul>\n<h3 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h3><ul>\n<li>平衡因子：<strong>左</strong>子树的高度<strong>减</strong>去<strong>右</strong>子树的高度，<script type=\"math/tex\">h_左-h_右</script></li>\n<li><p>分支节点：度不为0的节点</p>\n</li>\n<li><p>平衡二叉树的<strong>旋转</strong></p>\n<blockquote>\n<ul>\n<li><p>对节点<code>A</code>左旋：</p>\n<blockquote>\n<p>1、<code>A</code> <strong>右</strong>孩子的<strong>左</strong>孩子变成<code>A</code>的<strong>右</strong>孩子：<code>A-&gt;right = A-&gt;right-&gt;left</code></p>\n<p>2、<code>A</code>的<strong>右</strong>孩子取代<code>A</code>的位置</p>\n<p>3、<code>A</code>变成<strong>右</strong>孩子的<strong>左</strong>孩子：<code>A-&gt;right-&gt;left = A</code></p>\n</blockquote>\n</li>\n<li><p>对节点<code>A</code>右旋：</p>\n<blockquote>\n<p>1、<code>A</code> 左孩子的右孩子变成<code>A</code>的左孩子：<code>A-&gt;left = A-&gt;left-&gt;right</code></p>\n<p>2、<code>A</code>的左孩子取代A的位置</p>\n<p>3、<code>A</code>变成左孩子的右孩子：<code>A-&gt;left-&gt;right = A</code></p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>平衡二叉树的<strong>插入</strong>（王道书  <script type=\"math/tex\">P_{274}</script>）</p>\n<blockquote>\n<ul>\n<li><p>基本假设：找到<strong>插入路径</strong>上离<strong>插入点</strong>最近的<strong>不平衡</strong>节点<code>A</code>，<code>A</code>一般是插入树<code>C</code>的<strong>爷爷</strong>，设<code>B</code>是<code>C</code>的<strong>父亲</strong></p>\n<blockquote>\n<p>第一是找<strong>不平衡节点</strong></p>\n<p>第二是<code>C</code>可能是新节点也可能不是，是在<code>C</code>的<strong>子树</strong>或者<code>C</code>处插入，但是<code>C</code>没有失衡</p>\n<p>第三是<code>B</code>必须是<strong>插入路径</strong>上的节点，插入路径和排序二叉树一样的</p>\n</blockquote>\n</li>\n<li><p>核心思想：将中间大小的节点旋转到<code>A</code>的位置，这里很混乱，没关系，看下面的</p>\n</li>\n<li><p>1、<code>LL</code>平衡旋转：<code>A</code>的<strong>左（L）</strong>孩子是<code>B</code>，<code>B</code>的<strong>左（L）</strong>孩子是<code>C</code></p>\n<blockquote>\n<p>1）<strong>右</strong>单旋转即可</p>\n<p>2）对<code>A</code>点右旋一次即可</p>\n<p>3）核心思想：显然有<code>A&gt;B&gt;C</code>，最后右旋一下，<code>B（中间大小）</code>取代了<code>A</code></p>\n</blockquote>\n</li>\n<li><p>2、<code>RR</code>平衡旋转：<code>A</code>的<strong>右（R）</strong>孩子是<code>B</code>，<code>B</code>的<strong>右（R）</strong>孩子是<code>C</code></p>\n<blockquote>\n<p>1）左单旋转即可</p>\n<p>2）对<code>A</code>点左旋一次即可</p>\n<p>3）核心思想：显然有<code>A&lt;B&lt;C</code>，最后右旋一下，<code>B（中间大小）</code>取代了<code>A</code></p>\n</blockquote>\n</li>\n<li><p>3、<code>LR</code>平衡旋转：<code>A</code>的<strong>左（L）</strong>孩子是<code>B</code>，<code>B</code>的<strong>右（R）</strong>孩子是<code>C</code></p>\n<blockquote>\n<p>1）先左后右旋转</p>\n<p>2）先对<code>B</code><strong>左</strong>旋，后对<code>A</code><strong>右</strong>旋</p>\n<p>3）核心思想：显然是<code>B&lt;C&lt;A</code>，最后是把<code>C</code>旋转到<code>A</code>的位置</p>\n<p>4）解释：</p>\n<ul>\n<li>对<code>B</code>左旋：将<code>C</code>提升到<code>B</code>的位置，提升第一次，<code>C</code>变成儿子，<code>B</code>变成孙子</li>\n<li>对<code>A</code>右旋：将<code>C</code>提升到<code>A</code>的位置，提升第二次，<code>C</code>变成爷爷，<code>A</code>变成儿子</li>\n</ul>\n</blockquote>\n</li>\n<li><p>4、<code>RL</code>平衡旋转：<code>A</code>的<strong>右（R）</strong>孩子是<code>B</code>，<code>B</code>的<strong>左（L）</strong>孩子是<code>C</code></p>\n<blockquote>\n<p>1）先右后左旋转</p>\n<p>2）先对<code>B</code><strong>右</strong>旋，后对<code>A</code><strong>左</strong>旋</p>\n<p>3）核心思想：显然是<code>B&gt;C&gt;A</code>，最后是把<code>C</code>旋转到<code>A</code>的位置</p>\n<p>4）解释：</p>\n<ul>\n<li>对<code>B</code>右旋：将<code>C</code>提升到<code>B</code>的位置，提升第一次，<code>C</code>变成儿子，<code>B</code>变成孙子</li>\n<li>对<code>A</code>左旋：将<code>C</code>提升到<code>A</code>的位置，提升第二次，<code>C</code>变成爷爷，<code>A</code>变成儿子</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>平衡二叉树的<strong>删除</strong></p>\n<blockquote>\n<ul>\n<li><p>基本假设：<code>w</code>是需要<strong>删除</strong>的节点，从<code>w</code>向上面找，离<code>w</code><strong>最近且失衡</strong>的节点为<code>z</code></p>\n<blockquote>\n<p><code>z</code>有左右子树，左右子树高度差大于1，设高度较<strong>高</strong>的<strong>子树根节点</strong>为<code>y</code></p>\n<p><code>y</code>有左右子树，左右子树高度差小于等于1，设高度较<strong>高</strong>的<strong>子树根节点</strong>为<code>x</code></p>\n<p>如果<code>y</code>的左右子树高度相等，那么<code>x</code>任意左还是右</p>\n<p>还是有，<code>z</code>是爷爷，<code>y</code>是父亲，<code>x</code>是孙子</p>\n</blockquote>\n</li>\n<li><p>核心思想：还是把中间大小的节点旋转到<code>z</code>处</p>\n</li>\n<li><p>1、<code>LL</code>平衡旋转：<code>z</code>的<strong>左（L）</strong>孩子是<code>y</code>，<code>y</code>的<strong>左（L）</strong>孩子是<code>x</code></p>\n<blockquote>\n<p>1）<strong>右</strong>单旋转即可</p>\n<p>2）对<code>z</code>点右旋一次即可</p>\n<p>3）核心思想：显然有<code>z&gt;y&gt;x</code>，最后右旋一下，<code>y（中间大小）</code>取代了<code>z</code></p>\n</blockquote>\n</li>\n<li><p>2、<code>RR</code>平衡旋转：<code>z</code>的<strong>右（R）</strong>孩子是<code>y</code>，<code>y</code>的<strong>右（R）</strong>孩子是<code>x</code></p>\n<blockquote>\n<p>1）左单旋转即可</p>\n<p>2）对<code>z</code>点左旋一次即可</p>\n<p>3）核心思想：显然有<code>z&lt;y&lt;x</code>，最后右旋一下，<code>y（中间大小）</code>取代了<code>z</code></p>\n</blockquote>\n</li>\n<li><p>3、<code>LR</code>平衡旋转：<code>z</code>的<strong>左（L）</strong>孩子是<code>y</code>，<code>y</code>的<strong>右（R）</strong>孩子是<code>x</code></p>\n<blockquote>\n<p>1）先左后右旋转</p>\n<p>2）先对<code>y</code><strong>左</strong>旋，后对<code>z</code><strong>右</strong>旋</p>\n<p>3）核心思想：显然是<code>y&lt;x&lt;z</code>，最后是把<code>x</code>旋转到<code>z</code>的位置</p>\n</blockquote>\n</li>\n<li><p>4、<code>RL</code>平衡旋转：<code>z</code>的<strong>右（R）</strong>孩子是<code>y</code>，<code>y</code>的<strong>左（L）</strong>孩子是<code>x</code></p>\n<blockquote>\n<p>1）先右后左旋转</p>\n<p>2）先对<code>y</code><strong>右</strong>旋，后对<code>z</code><strong>左</strong>旋</p>\n<p>3）核心思想：显然是<code>y&gt;x&gt;z</code>，最后是把<code>x</code>旋转到<code>z</code>的位置</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>树高为<code>h</code>时，节点数<code>n</code>的最小值怎么计算</p>\n<blockquote>\n<p>1、先给出答案：<script type=\"math/tex\">n(h)_{min} = n(h-1)_{min} + n(h-2)_{min} + 1</script></p>\n<p>​            且 <script type=\"math/tex\">n(0)_{min} = 0;n(1)_{min} = 1 ; n(2)_{min} = 2;</script> 这个应该很好得知，就像下面图示一样，</p>\n<p>2、证明吧：首先，设定$n(x)_{min}$为树高为$x$时，最少需要的节点数目</p>\n<p>3、假设现在有两棵$AVL$，且$AVL_1$的树高为<code>h-1</code>，$AVL_2$的树高为<code>h-2</code></p>\n<p>4、树高为<code>h</code>的<code>AVL</code>，左右子树也是一颗<code>AVL</code>，且左右子树的树高差不超过<code>1</code></p>\n<p>5、也就是说，左右子树的树高要么都为<code>h-1</code>（方法1）；</p>\n<p>​                        要么一个为<code>h-1</code>，一个为<code>h-2</code>（方法2）。</p>\n<p>6、既然想要追求节点少，那么肯定是树高最小最好，肯定选择方法2。</p>\n<p>​        不妨设左子树为<code>h-1</code>，右子树为<code>h-2</code></p>\n<p>7、那就可以用上述的$AVL_1 和 AVL_2$来作为<code>AVL</code>的两棵子树，再加上一个新的根节点</p>\n<p>8、那么节点数目递推公式就是：<script type=\"math/tex\">n(h)_{min} = n(h-1)_{min} + n(h-2)_{min} + 1</script></p>\n</blockquote>\n<script type=\"math/tex; mode=display\">\n\\begin{cases}\nn(h)_{min} & 高度为 h 的最小节点数目\\\\\nn(h-1)_{min} & 高度为 h-1 左子树的最小节点数目\\\\\nn(h-2)_{min} & 高度为 h-2 右子树的最小节点数目\\\\\n1 & 额外的根节点数目\n\\end{cases}</script></li>\n</ul>\n<pre class=\"mermaid\">graph TB\nA \nB --> C\n显然左边分别是h为1和2的情况</pre>\n\n<hr>\n<h2 id=\"3、红黑树（916目前不考，先留坑）\"><a href=\"#3、红黑树（916目前不考，先留坑）\" class=\"headerlink\" title=\"3、红黑树（916目前不考，先留坑）\"></a>3、红黑树（916目前不考，先留坑）</h2><h2 id=\"4、B树\"><a href=\"#4、B树\" class=\"headerlink\" title=\"4、B树\"></a>4、B树</h2><p>&emsp;首先，B-Tree称为B树或者B-树，也就是说B树和B-树其实是一个东西，本篇用B树这个名字。B树是用来外查找的，也就说在磁盘上面查找，因为可能内容太多，不适合全部加载到内存中来。</p>\n<ul>\n<li><p>高度与关键字数关系先给出：<script type=\"math/tex\">log_m(n+1) \\leq h \\leq log_{\\lceil m/2 \\rceil}(\\frac{n+1}{2})+1</script></p>\n<blockquote>\n<p>1、<code>n</code>是关键字数，<code>m</code>是阶数，<code>h</code>是树高</p>\n<p>2、每个节点关键字最多，那么树高度最低：<script type=\"math/tex\">n \\leq (m-1)(1+m+m^2+m^3+...+m^{h-1})</script></p>\n<p>3、每个节点关键字最少，那么树高度最高</p>\n</blockquote>\n</li>\n<li><p>B树的一些概念</p>\n<blockquote>\n<p>1、终端节点：下图的倒数第二层节点就是<strong>终端节点</strong>（也就是最后一层<strong>非空节点</strong>）</p>\n<p>2、叶子节点：最后一层的<code>null</code>节点，也就是<strong>空节点</strong>叫做<strong>叶子节点</strong>。</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"mermaid\">graph TB\nA[22]-->B[5    11]\nA-->C[36     45]\nB-->D(null)\nB-->E(null)\nB-->F(null)\nC-->g(null)\nC-->h(null)\nC-->i(null)</pre>\n\n\n\n<ul>\n<li><p>B树的特性（这几个特性决定B树的插入删除操作）</p>\n<blockquote>\n<p>1、树中每个节点之多有<code>m</code>棵<strong>子树</strong>，至多有<code>m-1</code>个<strong>关键字</strong></p>\n<p>2、若根节点不是<strong>终端节点</strong>，则至少有<strong>两棵</strong>子树。（对于根节点不要求子树很多）</p>\n<p>3、除了根节点之外的所有非叶子节点，至少有<script type=\"math/tex\">\\lceil m/2\\rceil</script>（向上取整）棵子树，至少含有<script type=\"math/tex\">\\lceil (m-1)/2\\rceil</script>个关键字。</p>\n<p>4、所有的非叶子节点的结构如下：n是总数，P是子树，K是关键字<br>  |   <code>n</code>    |   <code>P0</code>   |   <code>K1</code>   |   <code>P1</code>   |  <code>K2</code>   |  <code>...</code>  | <code>Kn</code>   | <code>Pn</code>   | </p>\n<p><code>Ki</code>关键字小于<code>Pi</code>子树的所有关键字，<code>Ki</code>关键字大于<code>Pi-1</code>子树的所有关键字，且关键字是有序的。</p>\n<p>5、所有的叶节点都出现在<strong>同一层次</strong>，并且不携带信息，也就是为<code>null</code>。说明每棵子树<strong>高相同</strong>的。</p>\n</blockquote>\n</li>\n<li><p>B树的查找</p>\n<blockquote>\n<p>1、先将一个节点的信息读入内存，然后用顺序查找或者折半查找的方法，找到关键字或者找到子树。</p>\n<p>2、如果找到关键字就结束，如果找到子树就将当前节点写入磁盘，重复上述过程</p>\n</blockquote>\n</li>\n<li><p>B树的插入</p>\n<blockquote>\n<p>核心：还是需要满足B树的五条性质。</p>\n<p>步骤：</p>\n<ul>\n<li><p>找到最低层的某个终端节点</p>\n</li>\n<li><p>进行插入，分情况情况讨论</p>\n<blockquote>\n<p>如果插入该关键字时候，该终端节点的关键字个数仍然是<script type=\"math/tex\">[\\lceil m/2 \\rceil-1,m-1]</script>这个区间中，则直接插入</p>\n<p>如果插入关键字时候，关键字数目溢出了，那么，就先将关键字插入对应位置得到一串新的关键字序列，取得这串新关键字序列中间值<code>m</code>，并以<code>m</code>将序列分割成两段。将<code>m</code>插入到本节点的父节点，并将两段序列变成父节点的两个子树孩子。同时判断父节点是否超过了，超过了继续向上迭代。直到根节点仍然超过了，那么就新建根节点，B树高加1。</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>B树的删除</p>\n<blockquote>\n<p>核心：还是满足B树的五条性质</p>\n<p>步骤：</p>\n<ul>\n<li><p>找到需要删除的节点，直接删除</p>\n</li>\n<li><p>看是否仍然是B树</p>\n<blockquote>\n<p>删除节点是<strong>非终端节点</strong>的关键字：</p>\n<ul>\n<li>用其前驱或者后继节点替代就行，这样就相当于删除了其前驱或者后继节点</li>\n<li>然后依次迭代，知道变成删除终端节点</li>\n</ul>\n<p>删除节点是<strong>终端节点</strong>的关键字：</p>\n<ul>\n<li><p>如果删除了关键字之后，关键字个数仍然是<script type=\"math/tex\">[\\lceil m/2 \\rceil-1,m-1]</script>，直接删除，而且终端节点没有子树，所以不用考虑子树如何处理。</p>\n</li>\n<li><p>如果删除了关键字之后，关键字个数不够<script type=\"math/tex\">\\lceil m/2 \\rceil</script></p>\n<blockquote>\n<p>其左（或右）兄弟够借一个节点给他也就是左（或右）兄弟节点关键字借出一个仍然满足<script type=\"math/tex\">[\\lceil m/2 \\rceil-1,m-1]</script>，那么就用其<strong>前驱（或后继）</strong>关键字替换<strong>此</strong>位置，其<strong>前驱的前驱（或后继的后继）</strong>替换<strong>前驱（或后继）</strong>关键字的位置</p>\n<p>如果其左右兄弟都不够借：说明本节点以及兄弟节点的关键字个数肯定<strong>等于</strong><script type=\"math/tex\">\\lceil m/2 \\rceil-1</script>，这样，就可以将<strong>两兄弟</strong>以及<strong>两兄弟在父节点中包围的关键字</strong>合并成一个新节点。至于这样<strong>为什么</strong>不会超过<strong>关键字个数</strong>的要求呢？看下面的解释！！！</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>为什么B树的关键字要求为<strong><script type=\"math/tex\">[\\lceil m/2 \\rceil-1,m-1]</script></strong>呢？</p>\n<blockquote>\n<p>首先，关键字最大值确实为<script type=\"math/tex\">m-1</script>，这个没问题，因为是有m棵子树，关键字可以少一个，仍然能够走正确的路径寻找。可以参看<strong>性质4</strong></p>\n<p>然后，前面说到删除关键字时候，兄弟节点需要合并的情况。那么本节点以及兄弟节点的关键字个数肯定<strong>等于</strong>关键字个数最小值才行的。不妨设最小值为<code>n</code></p>\n<p>要求合并之后关键字相加仍然满足关键字个数要求。有：</p>\n<p><script type=\"math/tex\">(n-1)+1+n \\leq m-1</script>：<code>(n-1)</code>是需要删除一个关键字，<code>1</code>是父节点中的一个关键字，<code>n</code>是兄弟节点的关键字个数</p>\n<p><script type=\"math/tex\">n \\leq \\frac{m-1}{2}</script>，但是需要关键字多，这样查找效率高，所以<script type=\"math/tex\">n = \\frac{m-1}{2}</script>，考虑到奇偶，<script type=\"math/tex\">n=\\lceil m/2 \\rceil-1</script>为通式（带入<script type=\"math/tex\">m=5和m=4</script>很容易验证正确性）</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"5、B-树\"><a href=\"#5、B-树\" class=\"headerlink\" title=\"5、B+树\"></a>5、B+树</h2><p>&emsp;B+树是数据库的出现而出现的B树的一种变形，它的插入以及删除和B树的操作基本类似，现在只讲讲它的性质以及和B树的不同点。</p>\n<blockquote>\n<p>B+树的一些概念</p>\n<ul>\n<li>叶子节点：这个和B树<strong>不同</strong>，这里就是指最低层的非空节点，和普通的树一样</li>\n<li>分支节点：非叶子节点</li>\n</ul>\n<p>B+树的<strong>性质</strong></p>\n<ul>\n<li>1、每个分支节点最多有m棵子树（与B树没什么区别）</li>\n<li>2、非叶根节点至少有两棵子树，其他每个分支节点至少有<script type=\"math/tex\">\\lceil m/2 \\rceil</script>棵子树（有点区别）</li>\n<li>3、节点的子树个数与关键字个数相等（有区别）</li>\n<li>4、所有叶节点关键字才有包含数据的指针，且关键字有序（有区别）</li>\n<li>5、所有分支节点中关键字仅包含子节点的指针，而且此关键字是子节点关键字的<strong>最大值</strong>（大区别）</li>\n</ul>\n<p>B树与B+树区别</p>\n<ul>\n<li>1、关键字个数不一样：B+树含有<code>n</code>个关键字和<code>n</code>棵子树，B树含有<code>n-1</code>个关键字和<code>n</code>棵子树。</li>\n<li>2、关键字个数的范围不同：<script type=\"math/tex\">\\lceil m/2 \\rceil \\leq N_{B+关键字个数} \\leq m</script>（<script type=\"math/tex\">2 \\leq N_{B+根节点} \\leq m</script>），<script type=\"math/tex\">\\lceil m/2 \\rceil -1 \\leq N_{B树关键字个数} \\leq m - 1</script>（<script type=\"math/tex\">1 \\leq N_{B树根节点} \\leq m-1</script>）</li>\n<li>3、<strong>B+树</strong>中，只有<strong>叶子节点</strong>包含<strong>数据索引</strong>，<strong>其他节点</strong>只包含<strong>子节点索引</strong>。<strong>B树</strong>中，<strong>所有非空节点</strong>都包含<strong>数据索引</strong>和<strong>子节点索引</strong>。</li>\n<li>4、<strong>B+树</strong>中，关键字<strong>等于</strong>其<strong>子树</strong>的<strong>最大值</strong>；<strong>B树</strong>中，关键字<strong>大于</strong>其<strong>左</strong>边子树<strong>小于</strong>其<strong>右</strong>边子树。</li>\n<li>5、查找操作有点不一样：<strong>B+树</strong>需要查找到叶子节点中关键字相等的地方，<strong>B树</strong>仅需要查找到关键字相等的地方。</li>\n<li>6、<strong>B+树</strong>每个叶子节点直接以<strong>链表</strong>形式存储，所以，<strong>B+树</strong>还可以用链式查找方式查找</li>\n</ul>\n</blockquote>\n<h2 id=\"6、散列查找\"><a href=\"#6、散列查找\" class=\"headerlink\" title=\"6、散列查找\"></a>6、散列查找</h2><p>&emsp;通过散列函数，直接将关键字映射到地址。散列函数记为<script type=\"math/tex\">Hash(Key) = Addr(下标或者索引)</script>，理想情况下，如果没有发生碰撞，那么散列函数的查找效率时间复杂度为<script type=\"math/tex\">O(1)</script>。是一个典型的空间换时间的数据结构。</p>\n<p>&emsp;这一小节，最重要的数学科目是《数论》。</p>\n<ul>\n<li><p>常见的散列函数</p>\n<blockquote>\n<p>1、直接定址法：<script type=\"math/tex\">Hash(Key) = a\\times Key + b</script>，这个不会发生碰撞，但是空位较多</p>\n<p>2、除留余数法：<script type=\"math/tex\">Hash(Key) = Key \\%p</script>，控制好p是关键，减少碰撞</p>\n<p>3、数字分析法：根据关键字的数据特征，制定对应的哈希函数。</p>\n<p>4、平方取中法：将关键字平方之后，取中间几位作为散列地址。</p>\n</blockquote>\n</li>\n<li><p>处理冲突的方法</p>\n<blockquote>\n<p>1、开放定址法</p>\n<ul>\n<li>线性探测法：发生冲突之后，就依次将地址加<code>k</code>（k=0，1，2，3……）知道找到空闲位置；寻找数据时也是先找到初步地址处，然后依次向下一个元素查找。</li>\n<li>平方探测法：将上述的<code>k</code>换成<script type=\"math/tex\">0^2,1^2,-1^2,2^2,-2^2...</script>，这样是为了不让元素太聚集，提高查找和插入效率。</li>\n<li>双散列法：发生冲突后，用第二个散列函数计算地址增量。</li>\n<li>伪随机序列法：增量为伪随机序列。我的认为是：伪随机序列是构建此数据结构提前生成的一个没有规律的数列。</li>\n</ul>\n<p>2、拉链法：发生冲突后，用链表依次存储冲突元素在同一地址，因此，整个哈希地址块存储的不是元素，而是链表头指针。</p>\n</blockquote>\n</li>\n<li><p>性能分析</p>\n<blockquote>\n<p>散列表查找效率主要取决于三个因素：散列函数，处理冲突的方法和装填因子</p>\n<p>装填因子：记为<script type=\"math/tex\">\\alpha, \\quad \\alpha = \\frac{表中记录数n}{散列表长度m}</script>，可以看出装填因子依赖于两者的比值。</p>\n</blockquote>\n</li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"查找大法\"><a href=\"#查找大法\" class=\"headerlink\" title=\"查找大法\"></a>查找大法</h1><h2 id=\"1、顺序查找与二分法查找\"><a href=\"#1、顺序查找与二分法查找\" class=\"headerlink\" title=\"1、顺序查找与二分法查找\"></a>1、顺序查找与二分法查找</h2><hr>\n<h2 id=\"2、顺序二叉树与平衡二叉树\"><a href=\"#2、顺序二叉树与平衡二叉树\" class=\"headerlink\" title=\"2、顺序二叉树与平衡二叉树\"></a>2、顺序二叉树与平衡二叉树</h2><h3 id=\"顺序二叉树\"><a href=\"#顺序二叉树\" class=\"headerlink\" title=\"顺序二叉树\"></a>顺序二叉树</h3><ul>\n<li><p>题目：下列哪个序列不是顺序二叉树的搜索序列</p>\n<blockquote>\n<p>如：<script type=\"math/tex\">a_1, a_2, a_3, a_4,a_5,a_6</script></p>\n<p>如何判断：对于<script type=\"math/tex\">a_i</script>来说，如果<script type=\"math/tex\">a_{i+1}>a_i</script>，那么，所有<script type=\"math/tex\">n>i都有a_n>a_i</script>。</p>\n</blockquote>\n</li>\n<li><p>计算顺序二叉树的成功查找长度</p>\n<blockquote>\n<script type=\"math/tex; mode=display\">ASL_{成功} = \\frac{\\sum{第i层节点数*i}}{节点总数}</script></blockquote>\n</li>\n<li><p>计算顺序二叉树的失败查找长度</p>\n<blockquote>\n<script type=\"math/tex; mode=display\">ASL_{失败} = \\frac{\\sum{空链的父节点高度}}{空链的个数}</script></blockquote>\n</li>\n</ul>\n<h3 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h3><ul>\n<li>平衡因子：<strong>左</strong>子树的高度<strong>减</strong>去<strong>右</strong>子树的高度，<script type=\"math/tex\">h_左-h_右</script></li>\n<li><p>分支节点：度不为0的节点</p>\n</li>\n<li><p>平衡二叉树的<strong>旋转</strong></p>\n<blockquote>\n<ul>\n<li><p>对节点<code>A</code>左旋：</p>\n<blockquote>\n<p>1、<code>A</code> <strong>右</strong>孩子的<strong>左</strong>孩子变成<code>A</code>的<strong>右</strong>孩子：<code>A-&gt;right = A-&gt;right-&gt;left</code></p>\n<p>2、<code>A</code>的<strong>右</strong>孩子取代<code>A</code>的位置</p>\n<p>3、<code>A</code>变成<strong>右</strong>孩子的<strong>左</strong>孩子：<code>A-&gt;right-&gt;left = A</code></p>\n</blockquote>\n</li>\n<li><p>对节点<code>A</code>右旋：</p>\n<blockquote>\n<p>1、<code>A</code> 左孩子的右孩子变成<code>A</code>的左孩子：<code>A-&gt;left = A-&gt;left-&gt;right</code></p>\n<p>2、<code>A</code>的左孩子取代A的位置</p>\n<p>3、<code>A</code>变成左孩子的右孩子：<code>A-&gt;left-&gt;right = A</code></p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>平衡二叉树的<strong>插入</strong>（王道书  <script type=\"math/tex\">P_{274}</script>）</p>\n<blockquote>\n<ul>\n<li><p>基本假设：找到<strong>插入路径</strong>上离<strong>插入点</strong>最近的<strong>不平衡</strong>节点<code>A</code>，<code>A</code>一般是插入树<code>C</code>的<strong>爷爷</strong>，设<code>B</code>是<code>C</code>的<strong>父亲</strong></p>\n<blockquote>\n<p>第一是找<strong>不平衡节点</strong></p>\n<p>第二是<code>C</code>可能是新节点也可能不是，是在<code>C</code>的<strong>子树</strong>或者<code>C</code>处插入，但是<code>C</code>没有失衡</p>\n<p>第三是<code>B</code>必须是<strong>插入路径</strong>上的节点，插入路径和排序二叉树一样的</p>\n</blockquote>\n</li>\n<li><p>核心思想：将中间大小的节点旋转到<code>A</code>的位置，这里很混乱，没关系，看下面的</p>\n</li>\n<li><p>1、<code>LL</code>平衡旋转：<code>A</code>的<strong>左（L）</strong>孩子是<code>B</code>，<code>B</code>的<strong>左（L）</strong>孩子是<code>C</code></p>\n<blockquote>\n<p>1）<strong>右</strong>单旋转即可</p>\n<p>2）对<code>A</code>点右旋一次即可</p>\n<p>3）核心思想：显然有<code>A&gt;B&gt;C</code>，最后右旋一下，<code>B（中间大小）</code>取代了<code>A</code></p>\n</blockquote>\n</li>\n<li><p>2、<code>RR</code>平衡旋转：<code>A</code>的<strong>右（R）</strong>孩子是<code>B</code>，<code>B</code>的<strong>右（R）</strong>孩子是<code>C</code></p>\n<blockquote>\n<p>1）左单旋转即可</p>\n<p>2）对<code>A</code>点左旋一次即可</p>\n<p>3）核心思想：显然有<code>A&lt;B&lt;C</code>，最后右旋一下，<code>B（中间大小）</code>取代了<code>A</code></p>\n</blockquote>\n</li>\n<li><p>3、<code>LR</code>平衡旋转：<code>A</code>的<strong>左（L）</strong>孩子是<code>B</code>，<code>B</code>的<strong>右（R）</strong>孩子是<code>C</code></p>\n<blockquote>\n<p>1）先左后右旋转</p>\n<p>2）先对<code>B</code><strong>左</strong>旋，后对<code>A</code><strong>右</strong>旋</p>\n<p>3）核心思想：显然是<code>B&lt;C&lt;A</code>，最后是把<code>C</code>旋转到<code>A</code>的位置</p>\n<p>4）解释：</p>\n<ul>\n<li>对<code>B</code>左旋：将<code>C</code>提升到<code>B</code>的位置，提升第一次，<code>C</code>变成儿子，<code>B</code>变成孙子</li>\n<li>对<code>A</code>右旋：将<code>C</code>提升到<code>A</code>的位置，提升第二次，<code>C</code>变成爷爷，<code>A</code>变成儿子</li>\n</ul>\n</blockquote>\n</li>\n<li><p>4、<code>RL</code>平衡旋转：<code>A</code>的<strong>右（R）</strong>孩子是<code>B</code>，<code>B</code>的<strong>左（L）</strong>孩子是<code>C</code></p>\n<blockquote>\n<p>1）先右后左旋转</p>\n<p>2）先对<code>B</code><strong>右</strong>旋，后对<code>A</code><strong>左</strong>旋</p>\n<p>3）核心思想：显然是<code>B&gt;C&gt;A</code>，最后是把<code>C</code>旋转到<code>A</code>的位置</p>\n<p>4）解释：</p>\n<ul>\n<li>对<code>B</code>右旋：将<code>C</code>提升到<code>B</code>的位置，提升第一次，<code>C</code>变成儿子，<code>B</code>变成孙子</li>\n<li>对<code>A</code>左旋：将<code>C</code>提升到<code>A</code>的位置，提升第二次，<code>C</code>变成爷爷，<code>A</code>变成儿子</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>平衡二叉树的<strong>删除</strong></p>\n<blockquote>\n<ul>\n<li><p>基本假设：<code>w</code>是需要<strong>删除</strong>的节点，从<code>w</code>向上面找，离<code>w</code><strong>最近且失衡</strong>的节点为<code>z</code></p>\n<blockquote>\n<p><code>z</code>有左右子树，左右子树高度差大于1，设高度较<strong>高</strong>的<strong>子树根节点</strong>为<code>y</code></p>\n<p><code>y</code>有左右子树，左右子树高度差小于等于1，设高度较<strong>高</strong>的<strong>子树根节点</strong>为<code>x</code></p>\n<p>如果<code>y</code>的左右子树高度相等，那么<code>x</code>任意左还是右</p>\n<p>还是有，<code>z</code>是爷爷，<code>y</code>是父亲，<code>x</code>是孙子</p>\n</blockquote>\n</li>\n<li><p>核心思想：还是把中间大小的节点旋转到<code>z</code>处</p>\n</li>\n<li><p>1、<code>LL</code>平衡旋转：<code>z</code>的<strong>左（L）</strong>孩子是<code>y</code>，<code>y</code>的<strong>左（L）</strong>孩子是<code>x</code></p>\n<blockquote>\n<p>1）<strong>右</strong>单旋转即可</p>\n<p>2）对<code>z</code>点右旋一次即可</p>\n<p>3）核心思想：显然有<code>z&gt;y&gt;x</code>，最后右旋一下，<code>y（中间大小）</code>取代了<code>z</code></p>\n</blockquote>\n</li>\n<li><p>2、<code>RR</code>平衡旋转：<code>z</code>的<strong>右（R）</strong>孩子是<code>y</code>，<code>y</code>的<strong>右（R）</strong>孩子是<code>x</code></p>\n<blockquote>\n<p>1）左单旋转即可</p>\n<p>2）对<code>z</code>点左旋一次即可</p>\n<p>3）核心思想：显然有<code>z&lt;y&lt;x</code>，最后右旋一下，<code>y（中间大小）</code>取代了<code>z</code></p>\n</blockquote>\n</li>\n<li><p>3、<code>LR</code>平衡旋转：<code>z</code>的<strong>左（L）</strong>孩子是<code>y</code>，<code>y</code>的<strong>右（R）</strong>孩子是<code>x</code></p>\n<blockquote>\n<p>1）先左后右旋转</p>\n<p>2）先对<code>y</code><strong>左</strong>旋，后对<code>z</code><strong>右</strong>旋</p>\n<p>3）核心思想：显然是<code>y&lt;x&lt;z</code>，最后是把<code>x</code>旋转到<code>z</code>的位置</p>\n</blockquote>\n</li>\n<li><p>4、<code>RL</code>平衡旋转：<code>z</code>的<strong>右（R）</strong>孩子是<code>y</code>，<code>y</code>的<strong>左（L）</strong>孩子是<code>x</code></p>\n<blockquote>\n<p>1）先右后左旋转</p>\n<p>2）先对<code>y</code><strong>右</strong>旋，后对<code>z</code><strong>左</strong>旋</p>\n<p>3）核心思想：显然是<code>y&gt;x&gt;z</code>，最后是把<code>x</code>旋转到<code>z</code>的位置</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>树高为<code>h</code>时，节点数<code>n</code>的最小值怎么计算</p>\n<blockquote>\n<p>1、先给出答案：<script type=\"math/tex\">n(h)_{min} = n(h-1)_{min} + n(h-2)_{min} + 1</script></p>\n<p>​            且 <script type=\"math/tex\">n(0)_{min} = 0;n(1)_{min} = 1 ; n(2)_{min} = 2;</script> 这个应该很好得知，就像下面图示一样，</p>\n<p>2、证明吧：首先，设定$n(x)_{min}$为树高为$x$时，最少需要的节点数目</p>\n<p>3、假设现在有两棵$AVL$，且$AVL_1$的树高为<code>h-1</code>，$AVL_2$的树高为<code>h-2</code></p>\n<p>4、树高为<code>h</code>的<code>AVL</code>，左右子树也是一颗<code>AVL</code>，且左右子树的树高差不超过<code>1</code></p>\n<p>5、也就是说，左右子树的树高要么都为<code>h-1</code>（方法1）；</p>\n<p>​                        要么一个为<code>h-1</code>，一个为<code>h-2</code>（方法2）。</p>\n<p>6、既然想要追求节点少，那么肯定是树高最小最好，肯定选择方法2。</p>\n<p>​        不妨设左子树为<code>h-1</code>，右子树为<code>h-2</code></p>\n<p>7、那就可以用上述的$AVL_1 和 AVL_2$来作为<code>AVL</code>的两棵子树，再加上一个新的根节点</p>\n<p>8、那么节点数目递推公式就是：<script type=\"math/tex\">n(h)_{min} = n(h-1)_{min} + n(h-2)_{min} + 1</script></p>\n</blockquote>\n<script type=\"math/tex; mode=display\">\n\\begin{cases}\nn(h)_{min} & 高度为 h 的最小节点数目\\\\\nn(h-1)_{min} & 高度为 h-1 左子树的最小节点数目\\\\\nn(h-2)_{min} & 高度为 h-2 右子树的最小节点数目\\\\\n1 & 额外的根节点数目\n\\end{cases}</script></li>\n</ul>\n<pre class=\"mermaid\">graph TB\nA \nB --> C\n显然左边分别是h为1和2的情况</pre>\n\n<hr>\n<h2 id=\"3、红黑树（916目前不考，先留坑）\"><a href=\"#3、红黑树（916目前不考，先留坑）\" class=\"headerlink\" title=\"3、红黑树（916目前不考，先留坑）\"></a>3、红黑树（916目前不考，先留坑）</h2><h2 id=\"4、B树\"><a href=\"#4、B树\" class=\"headerlink\" title=\"4、B树\"></a>4、B树</h2><p>&emsp;首先，B-Tree称为B树或者B-树，也就是说B树和B-树其实是一个东西，本篇用B树这个名字。B树是用来外查找的，也就说在磁盘上面查找，因为可能内容太多，不适合全部加载到内存中来。</p>\n<ul>\n<li><p>高度与关键字数关系先给出：<script type=\"math/tex\">log_m(n+1) \\leq h \\leq log_{\\lceil m/2 \\rceil}(\\frac{n+1}{2})+1</script></p>\n<blockquote>\n<p>1、<code>n</code>是关键字数，<code>m</code>是阶数，<code>h</code>是树高</p>\n<p>2、每个节点关键字最多，那么树高度最低：<script type=\"math/tex\">n \\leq (m-1)(1+m+m^2+m^3+...+m^{h-1})</script></p>\n<p>3、每个节点关键字最少，那么树高度最高</p>\n</blockquote>\n</li>\n<li><p>B树的一些概念</p>\n<blockquote>\n<p>1、终端节点：下图的倒数第二层节点就是<strong>终端节点</strong>（也就是最后一层<strong>非空节点</strong>）</p>\n<p>2、叶子节点：最后一层的<code>null</code>节点，也就是<strong>空节点</strong>叫做<strong>叶子节点</strong>。</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"mermaid\">graph TB\nA[22]-->B[5    11]\nA-->C[36     45]\nB-->D(null)\nB-->E(null)\nB-->F(null)\nC-->g(null)\nC-->h(null)\nC-->i(null)</pre>\n\n\n\n<ul>\n<li><p>B树的特性（这几个特性决定B树的插入删除操作）</p>\n<blockquote>\n<p>1、树中每个节点之多有<code>m</code>棵<strong>子树</strong>，至多有<code>m-1</code>个<strong>关键字</strong></p>\n<p>2、若根节点不是<strong>终端节点</strong>，则至少有<strong>两棵</strong>子树。（对于根节点不要求子树很多）</p>\n<p>3、除了根节点之外的所有非叶子节点，至少有<script type=\"math/tex\">\\lceil m/2\\rceil</script>（向上取整）棵子树，至少含有<script type=\"math/tex\">\\lceil (m-1)/2\\rceil</script>个关键字。</p>\n<p>4、所有的非叶子节点的结构如下：n是总数，P是子树，K是关键字<br>  |   <code>n</code>    |   <code>P0</code>   |   <code>K1</code>   |   <code>P1</code>   |  <code>K2</code>   |  <code>...</code>  | <code>Kn</code>   | <code>Pn</code>   | </p>\n<p><code>Ki</code>关键字小于<code>Pi</code>子树的所有关键字，<code>Ki</code>关键字大于<code>Pi-1</code>子树的所有关键字，且关键字是有序的。</p>\n<p>5、所有的叶节点都出现在<strong>同一层次</strong>，并且不携带信息，也就是为<code>null</code>。说明每棵子树<strong>高相同</strong>的。</p>\n</blockquote>\n</li>\n<li><p>B树的查找</p>\n<blockquote>\n<p>1、先将一个节点的信息读入内存，然后用顺序查找或者折半查找的方法，找到关键字或者找到子树。</p>\n<p>2、如果找到关键字就结束，如果找到子树就将当前节点写入磁盘，重复上述过程</p>\n</blockquote>\n</li>\n<li><p>B树的插入</p>\n<blockquote>\n<p>核心：还是需要满足B树的五条性质。</p>\n<p>步骤：</p>\n<ul>\n<li><p>找到最低层的某个终端节点</p>\n</li>\n<li><p>进行插入，分情况情况讨论</p>\n<blockquote>\n<p>如果插入该关键字时候，该终端节点的关键字个数仍然是<script type=\"math/tex\">[\\lceil m/2 \\rceil-1,m-1]</script>这个区间中，则直接插入</p>\n<p>如果插入关键字时候，关键字数目溢出了，那么，就先将关键字插入对应位置得到一串新的关键字序列，取得这串新关键字序列中间值<code>m</code>，并以<code>m</code>将序列分割成两段。将<code>m</code>插入到本节点的父节点，并将两段序列变成父节点的两个子树孩子。同时判断父节点是否超过了，超过了继续向上迭代。直到根节点仍然超过了，那么就新建根节点，B树高加1。</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>B树的删除</p>\n<blockquote>\n<p>核心：还是满足B树的五条性质</p>\n<p>步骤：</p>\n<ul>\n<li><p>找到需要删除的节点，直接删除</p>\n</li>\n<li><p>看是否仍然是B树</p>\n<blockquote>\n<p>删除节点是<strong>非终端节点</strong>的关键字：</p>\n<ul>\n<li>用其前驱或者后继节点替代就行，这样就相当于删除了其前驱或者后继节点</li>\n<li>然后依次迭代，知道变成删除终端节点</li>\n</ul>\n<p>删除节点是<strong>终端节点</strong>的关键字：</p>\n<ul>\n<li><p>如果删除了关键字之后，关键字个数仍然是<script type=\"math/tex\">[\\lceil m/2 \\rceil-1,m-1]</script>，直接删除，而且终端节点没有子树，所以不用考虑子树如何处理。</p>\n</li>\n<li><p>如果删除了关键字之后，关键字个数不够<script type=\"math/tex\">\\lceil m/2 \\rceil</script></p>\n<blockquote>\n<p>其左（或右）兄弟够借一个节点给他也就是左（或右）兄弟节点关键字借出一个仍然满足<script type=\"math/tex\">[\\lceil m/2 \\rceil-1,m-1]</script>，那么就用其<strong>前驱（或后继）</strong>关键字替换<strong>此</strong>位置，其<strong>前驱的前驱（或后继的后继）</strong>替换<strong>前驱（或后继）</strong>关键字的位置</p>\n<p>如果其左右兄弟都不够借：说明本节点以及兄弟节点的关键字个数肯定<strong>等于</strong><script type=\"math/tex\">\\lceil m/2 \\rceil-1</script>，这样，就可以将<strong>两兄弟</strong>以及<strong>两兄弟在父节点中包围的关键字</strong>合并成一个新节点。至于这样<strong>为什么</strong>不会超过<strong>关键字个数</strong>的要求呢？看下面的解释！！！</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>为什么B树的关键字要求为<strong><script type=\"math/tex\">[\\lceil m/2 \\rceil-1,m-1]</script></strong>呢？</p>\n<blockquote>\n<p>首先，关键字最大值确实为<script type=\"math/tex\">m-1</script>，这个没问题，因为是有m棵子树，关键字可以少一个，仍然能够走正确的路径寻找。可以参看<strong>性质4</strong></p>\n<p>然后，前面说到删除关键字时候，兄弟节点需要合并的情况。那么本节点以及兄弟节点的关键字个数肯定<strong>等于</strong>关键字个数最小值才行的。不妨设最小值为<code>n</code></p>\n<p>要求合并之后关键字相加仍然满足关键字个数要求。有：</p>\n<p><script type=\"math/tex\">(n-1)+1+n \\leq m-1</script>：<code>(n-1)</code>是需要删除一个关键字，<code>1</code>是父节点中的一个关键字，<code>n</code>是兄弟节点的关键字个数</p>\n<p><script type=\"math/tex\">n \\leq \\frac{m-1}{2}</script>，但是需要关键字多，这样查找效率高，所以<script type=\"math/tex\">n = \\frac{m-1}{2}</script>，考虑到奇偶，<script type=\"math/tex\">n=\\lceil m/2 \\rceil-1</script>为通式（带入<script type=\"math/tex\">m=5和m=4</script>很容易验证正确性）</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"5、B-树\"><a href=\"#5、B-树\" class=\"headerlink\" title=\"5、B+树\"></a>5、B+树</h2><p>&emsp;B+树是数据库的出现而出现的B树的一种变形，它的插入以及删除和B树的操作基本类似，现在只讲讲它的性质以及和B树的不同点。</p>\n<blockquote>\n<p>B+树的一些概念</p>\n<ul>\n<li>叶子节点：这个和B树<strong>不同</strong>，这里就是指最低层的非空节点，和普通的树一样</li>\n<li>分支节点：非叶子节点</li>\n</ul>\n<p>B+树的<strong>性质</strong></p>\n<ul>\n<li>1、每个分支节点最多有m棵子树（与B树没什么区别）</li>\n<li>2、非叶根节点至少有两棵子树，其他每个分支节点至少有<script type=\"math/tex\">\\lceil m/2 \\rceil</script>棵子树（有点区别）</li>\n<li>3、节点的子树个数与关键字个数相等（有区别）</li>\n<li>4、所有叶节点关键字才有包含数据的指针，且关键字有序（有区别）</li>\n<li>5、所有分支节点中关键字仅包含子节点的指针，而且此关键字是子节点关键字的<strong>最大值</strong>（大区别）</li>\n</ul>\n<p>B树与B+树区别</p>\n<ul>\n<li>1、关键字个数不一样：B+树含有<code>n</code>个关键字和<code>n</code>棵子树，B树含有<code>n-1</code>个关键字和<code>n</code>棵子树。</li>\n<li>2、关键字个数的范围不同：<script type=\"math/tex\">\\lceil m/2 \\rceil \\leq N_{B+关键字个数} \\leq m</script>（<script type=\"math/tex\">2 \\leq N_{B+根节点} \\leq m</script>），<script type=\"math/tex\">\\lceil m/2 \\rceil -1 \\leq N_{B树关键字个数} \\leq m - 1</script>（<script type=\"math/tex\">1 \\leq N_{B树根节点} \\leq m-1</script>）</li>\n<li>3、<strong>B+树</strong>中，只有<strong>叶子节点</strong>包含<strong>数据索引</strong>，<strong>其他节点</strong>只包含<strong>子节点索引</strong>。<strong>B树</strong>中，<strong>所有非空节点</strong>都包含<strong>数据索引</strong>和<strong>子节点索引</strong>。</li>\n<li>4、<strong>B+树</strong>中，关键字<strong>等于</strong>其<strong>子树</strong>的<strong>最大值</strong>；<strong>B树</strong>中，关键字<strong>大于</strong>其<strong>左</strong>边子树<strong>小于</strong>其<strong>右</strong>边子树。</li>\n<li>5、查找操作有点不一样：<strong>B+树</strong>需要查找到叶子节点中关键字相等的地方，<strong>B树</strong>仅需要查找到关键字相等的地方。</li>\n<li>6、<strong>B+树</strong>每个叶子节点直接以<strong>链表</strong>形式存储，所以，<strong>B+树</strong>还可以用链式查找方式查找</li>\n</ul>\n</blockquote>\n<h2 id=\"6、散列查找\"><a href=\"#6、散列查找\" class=\"headerlink\" title=\"6、散列查找\"></a>6、散列查找</h2><p>&emsp;通过散列函数，直接将关键字映射到地址。散列函数记为<script type=\"math/tex\">Hash(Key) = Addr(下标或者索引)</script>，理想情况下，如果没有发生碰撞，那么散列函数的查找效率时间复杂度为<script type=\"math/tex\">O(1)</script>。是一个典型的空间换时间的数据结构。</p>\n<p>&emsp;这一小节，最重要的数学科目是《数论》。</p>\n<ul>\n<li><p>常见的散列函数</p>\n<blockquote>\n<p>1、直接定址法：<script type=\"math/tex\">Hash(Key) = a\\times Key + b</script>，这个不会发生碰撞，但是空位较多</p>\n<p>2、除留余数法：<script type=\"math/tex\">Hash(Key) = Key \\%p</script>，控制好p是关键，减少碰撞</p>\n<p>3、数字分析法：根据关键字的数据特征，制定对应的哈希函数。</p>\n<p>4、平方取中法：将关键字平方之后，取中间几位作为散列地址。</p>\n</blockquote>\n</li>\n<li><p>处理冲突的方法</p>\n<blockquote>\n<p>1、开放定址法</p>\n<ul>\n<li>线性探测法：发生冲突之后，就依次将地址加<code>k</code>（k=0，1，2，3……）知道找到空闲位置；寻找数据时也是先找到初步地址处，然后依次向下一个元素查找。</li>\n<li>平方探测法：将上述的<code>k</code>换成<script type=\"math/tex\">0^2,1^2,-1^2,2^2,-2^2...</script>，这样是为了不让元素太聚集，提高查找和插入效率。</li>\n<li>双散列法：发生冲突后，用第二个散列函数计算地址增量。</li>\n<li>伪随机序列法：增量为伪随机序列。我的认为是：伪随机序列是构建此数据结构提前生成的一个没有规律的数列。</li>\n</ul>\n<p>2、拉链法：发生冲突后，用链表依次存储冲突元素在同一地址，因此，整个哈希地址块存储的不是元素，而是链表头指针。</p>\n</blockquote>\n</li>\n<li><p>性能分析</p>\n<blockquote>\n<p>散列表查找效率主要取决于三个因素：散列函数，处理冲突的方法和装填因子</p>\n<p>装填因子：记为<script type=\"math/tex\">\\alpha, \\quad \\alpha = \\frac{表中记录数n}{散列表长度m}</script>，可以看出装填因子依赖于两者的比值。</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"计算机网络技术之概述","excerpt":"简要介绍了计算机网络的概念以及分层结构","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206091025989.png","mathjax":true,"date":"2022-06-09T02:23:55.000Z","_content":"\n# 计算机网络概述\n\n## 1、基本概述\n\n- 21世纪一些重要特征：数字化、网络化和信息化，以网络为核心的信息时代\n\n- 互联网两个基本特点：连通性和共享\n\n- 网络有，电信网络、有线电视网络和**计算机网络**，该科目**网络**指的是**计算机网络**\n\n- 计算机网络（简称网络）由若干节点和连接这些节点的链路组成\n\n- **internet**和**Internet**的区别：\n\n  > internet指多个计算机网络互连组成的互连网\n  >\n  > Internet指互联网，因特网，鼻祖是美国的[ARPANET](https://zh.m.wikipedia.org/zh-cn/ARPANET)\n\n- **ISP**：互联网服务提供者（`Internet Service Provider`），为用户提供网络服务，如中国联通，中国移动，中国电信\n\n- **IXP**：互联网交换点（`Internet eXchange Point`），连接两个网络并交换分组，如两个地区的ISP可由此来交换分组。\n\n- **WWW**：万维网（`World Wide Web`）\n\n  > 1、一个透过互联网访问的，由许多互相链接的超文本组成的信息系统。\n  >\n  > 2、具体来说，平常浏览的网页，平常在网上下载的东西（视频，影音，图片等），都是属于万维网的一部分。更重要的是，超文本标记语言（`HTML`）是最常用的万维网部分。可以说，基于浏览器访问的网路，都是万维网一部分。\n  >\n  > 3、主要发明了三项关键技术：统一资源标识符（`URL`），超文本标记语言（`HTML`），超文本传输协议（`HTTP`）\n  >\n  > 4、网站前面加不加`www`的区别呢？加了属于二级域名，不加属于一级域名，差别不是很大，一般的网站，加不加都是默认跳到主网站，和其他的（如`jwxt.njupt....`、`main.qq....`）这些不一样，因为会跳到其他站点。\n\n- 网络的端系统直接通信有两种：客户-服务器方式（C/S方式）和对等方式（P2P方式）。\n\n- 客户-服务器方式\n\n  > 客户是服务请求方，服务器是服务提供方，两者分工明确\n  >\n  > 服务器通过服务程序处理客户通过客户程序发来的请求，并且可以通过并发实现同时处理多个请求\n  >\n  > 目前常见的网站，大多都是C/S方式\n\n- 对等方式（peer to peer）\n\n  > 两台主机都会运行（p2p软件），可以看成两台主机都可以作为服务器和客户端。\n\n- 路由器（router）：是一种专用计算机，分组交换的关键构件\n\n- 交换方式：电路交换，报文交换，分组交换\n\n  > 电路交换：“建立连接 -> 通话 -> 释放连接” 三个步骤称为电路交换，电路交换将整个报文放到信道传输，占据整个端到端的信道，并且此过程中，该信道不会给另一个通话所使用。效率非常低，因为一个通话会独占一个信道。\n  >\n  > 分组交换：把一个报文，分成若干个分段。每个分组加上一定的首部，就构成了一个分组，又称为“包”，首部又称为“包头”。\n  >\n  > 报文交换：与分组交换类似，并且先于分组交换问世，区别在于将整个报文进行存储转发，不进行分组。\n  \n- 分类：\n\n  > - 作用范围分类\n  >\n  >   > 广域网（`WAN`）、城域网（`MAN`）、局域网（`LAN`）、个人区域网（`PAN`）\n  >\n  > - 安装网络的使用者分类\n  >\n  >   > 公用网（public network）、专用网（private network）\n  >\n  > - 用来把用户介入到互联网中的，叫做接入网（`AN, Access Network`）。\n\n## 2、计算机网络性能计算\n\n- 速率：单位（比特每秒，`bit/s，b/s，bit per second`）常用转换：$$  1 kb=10^3b/s,\\quad b,k,M,G,T,P,E,Z,Y$$。\n\n- 带宽：其他地方指信号频带宽度，计算机网络指最高传输速率（b/s）。\n\n- 吞吐量：单位时间内，经过某个网络（或端口、信道）的实际数据量\n\n- 时延：数据从网络的一端传送到另一端的时间，主要由**发送时延**、**传播时延**、**处理时延**和**排队时延**组成。\n\n  > **1、发送时延**：数据从**主机或者路由器**发送到**信道**的时延，也叫做**传输时延**，$$发送时延=\\frac{数据帧长度(bit)}{发送速率(bit/s)}$$，单位是`s`。\n  >\n  > **2、传播时延**：**信号**在**信道**中传播时间，$$传播时延=\\frac{信道长度(m)}{电磁波在信道上的传播速率(m/s)}$$，单位是`s`，传播速率一般是$$3 \\times 10^8m/s$$。\n  >\n  > **3、处理时延**：主机或者路由器收到数据需要进行**简单处理**，如分析头部信息等等。\n  >\n  > **4、排队时延**：分组在路由器中经常遇到排队**等待**路由器**空闲**的情况\n  >\n  > 总时延为上述四个时延相加：总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延\n  >\n  > 然而，在具体网络中减少时延处理的方法是不一样的，如果两个主机相距很短，那么传播时延可以不考虑，如果很长，传播时延就会变成主要考虑的方面。\n\n- 时延带宽积\n\n  > $$时延带宽积 = 传播时延(m) \\times 带宽(b/s)$$，单位：`bit`，可以理解为**第一个比特**的数据刚刚**到达**接收方时，发送方**已经发了**多少数据。不妨想象信道是一根水管，时延带宽积就是水管里面能装的水量。\n\n- 往返时间`RTT`\n\n  > 顾名思义，往返时间就是一个数据单位从发送方到接收方又立马回到发送方需要的时间。\n  >\n  > 假设这么一个场景，A把最后1bit数据发送出去，A此时进入空闲等待确认状态。此时，经过半个RTT，B收到最后1bit数据，立马发送确认数据给A。又经过半个RTT，A收到确认数据，立马发送接下来的数据。这里，A将等待一个RTT。可以算出A发送最开始的数据到能够再发送数据经过的时间为：**发送时延+RTT**，那么，显然整个周期有效数据率应该有：$$有效数据率=\\frac{数据长度}{发送时间+RTT}$$，显然会比带宽小一点。\n\n- 利用率\n\n  > &emsp;利用率有**信道利用率**和**网络利用率**。信道利用率指出信道有百分之几的时间是有有效数据通过的。网络利用率指全网络的信道利用率加权平均值。\n  >\n  > $$D_0表示网络空闲时的时延，D表示网络当前的时延，U表示网络利用率，那么有：D = \\frac{D_0}{1-U}$$。\n  >\n  > &emsp;信道利用率或者网络利用率过高会产生非常大的时延，所以不超过50%是最佳的。\n\n## 3、计算机网络体系\n\n### 基本的体系介绍\n\n&emsp;在计算机网络的基本概念中，分层次的**体系结构**是最基本的。`ARPANET`最初设计网络时提出了分层的概念，将庞大而复杂的问题转为若干个小问题。\n\n&emsp;首先提出的是**系统网络体系结构SNA（System Network Architecture）**，而后国际标准化组织提出著名的**开放系统互连基本参考模型OSI/RM（Open System Interconnection Reference Model）**，简称OSI，完整的OSI是一个七层模型。但，尽管OSI提出时间很早，但是由于基于**TCP/IP**的互联网已经在全球范围内成功地运行了，所以最后的结果是**法律上的国际标准OSI**与**事实上的国际标准TCP/IP**的局面。\n\n&emsp;网络中最重要的便是**协议（protocol）**，所有简称里面带了**P**的，都是协议的缩写。所以，计算机网络讲的就是协议。协议又分为三个部分：（括号中是自己的理解）\n\n- （1）**语法**：数据与控制信息的结构和格式。（可以看成，整个数据报中，分为很多部分，每个部分的长度，类型等等。）\n- （2）**语义**：需要发出何种控制信息，完成何种动作以及做出何种响应。（解释上述语法分成的部分，该部分应该程序做什么，该部分代表着什么意思。）\n- （3）**同步**：即时间实现顺序的详细说明。（同步是为了能够确定数据报的边界，区分不同数据报，以及数据报的归属。）\n\n&emsp;分层的一些好处：\n\n- （1）各层之间是独立的\n- （2）灵活性好\n- （3）结构上可分割开\n- （4）易于实现和维护\n- （5）能促进标准化工作\n\n&emsp;各层需要完成的功能有如下方面：\n\n- （1）差错控制\n- （2）流量控制\n- （3）分段和重装\n- （4）复用和分用\n- （5）连接建立和释放\n\n### OSI七层协议\n\n|   第7层   |   **应用层**   | **应用程序与网络交互，编程接口等**              |\n| :-------: | :------------: | :---------------------------------------------- |\n| **第6层** |   **表示层**   | **各种数据的压缩与解压，表示，格式的转换等等**  |\n| **第5层** |   **会话层**   | **管理会话的建立、连接与释放**                  |\n| **第4层** |   **运输层**   | **传输控制协议层，TCP、UDP等协议**              |\n| **第3层** |   **网络层**   | **IP数据报的组装与拆分，IP地址与MAC地址的转换** |\n| **第2层** | **数据链路层** | **负责帧的组装拆分，MAC地址的应用**             |\n| **第1层** |   **物理层**   | **负责透明比特流的传输**                        |\n\n### TCP/IP四层模型\n\n&emsp;OSI模型应用的远远没有TCP/IP模型应用的广泛，并且，上述5，6，7层模型在TCP/IP中简化成一层模型了。上述1，2层简化成一层模型，但是学习过程中，还是两层模型来学。\n\n| **第4层** |   **应用层**   | &emsp;**应用程序直接的通信交互，两个应用进程之间的通信**     |\n| :-------: | :------------: | :----------------------------------------------------------- |\n| **第3层** |   **传输层**   | &emsp;**传输控制协议层，TCP、UDP等协议，为上层提供传输服务。提供复用与分用，采取端口来区分不同的应用程序。还实现连接与释放功能。端到端通信** |\n| **第2层** |   **网际层**   | &emsp;**IP数据报的组装与拆分，IP地址与MAC地址的转换。为不同的主机提供通信服务，采用的是IP地址区分不同主机。路由器一般也只到这层协议，此层也用来连接不同的异构网络。实现分段和重装功能。点对点通信** |\n| **第1层** | **网络接口层** | &emsp;**网卡接口的网络驱动程序，管理计算机网络适配器；管理物理传输介质，物理传输比特控制。点对点通信** |\n\n\n&emsp;不同主机之间相同层称为对等层，对等层之间通信需要先将协议一层一层往下传递，直到物理层才能直接进行传输。但是，在处理问题中，我们仍然将对等层用虚线连接起来，就好像对等层直接直接通信。\n\n## 4、体系结构中的术语\n\n- **实体**：各层的实体指的是，各层中**任何**可**发送**或**接收**信息的**硬件**或者**软件**进程。对等层的两个实体便是对等实体，协议也是控制两个对等实体进行通信的规则的集合。在协议的控制下，每层的实体，都能够向**上**层**提供服务**，要实现本层的功能，还得**使用下**一层实体提供的服务。\n\n- **SAP**：服务访问点（Service Access Point），这是比较抽象的一个概念，用我自己的话来讲，就是一个接口，上一层如何使用下一层的协议，那必然在计算机中看来，就是上一层调用了下一层的软件接口API。\n\n- **SDU**：服务数据单元（Service Data Unit），看作本层的数据部分。\n\n- **PDU**：协议数据单元（Protocol Data Unit），看作本层的数据加上报头（也就是协议部分）。\n\n- 详解PDU与SDU\n\n  > &emsp;**上一层数据加协议**包装好的数据报给了本层就是**本层的SDU**，本层再将**SDU用本层的协议**包装好成为本层的**PDU**，传递给下一层，作为**下一层的SDU**。依次类推到物理层。\n  >\n  > &emsp;如果把SDU看作一封信的内容，那么PDU就是内容加上署名，加上邮寄的地址等等信息。\n  >\n  > &emsp;那么有：$$PDU(n+1)=SDU(n),\\quad PDU(n) = SDU(n-1)$$。\n\n## 5、低三层设备\n\n&emsp;此处只简单介绍一下\n\n- 物理层：中继器，集线器\n- 数据链路层：网桥，交换机\n- 网络层：路由器\n\n|                | 隔离冲突域 | 隔离广播域 |\n| :------------: | :--------: | :--------: |\n|   **物理层**   |    不能    |    不能    |\n| **数据链路层** |     能     |    不能    |\n|   **网络层**   |     能     |     能     |\n\n","source":"_posts/计算机网络技术之概述.md","raw":"---\ntitle: 计算机网络技术之概述\ntags: \n- 计算机网络技术\n- OSI\n- 考研\n- TCP/IP\nexcerpt: 简要介绍了计算机网络的概念以及分层结构\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202206091025989.png\ncategories:\n- 计算机网络技术\nmathjax: true\ndate: 2022-06-09 10:23:55\n---\n\n# 计算机网络概述\n\n## 1、基本概述\n\n- 21世纪一些重要特征：数字化、网络化和信息化，以网络为核心的信息时代\n\n- 互联网两个基本特点：连通性和共享\n\n- 网络有，电信网络、有线电视网络和**计算机网络**，该科目**网络**指的是**计算机网络**\n\n- 计算机网络（简称网络）由若干节点和连接这些节点的链路组成\n\n- **internet**和**Internet**的区别：\n\n  > internet指多个计算机网络互连组成的互连网\n  >\n  > Internet指互联网，因特网，鼻祖是美国的[ARPANET](https://zh.m.wikipedia.org/zh-cn/ARPANET)\n\n- **ISP**：互联网服务提供者（`Internet Service Provider`），为用户提供网络服务，如中国联通，中国移动，中国电信\n\n- **IXP**：互联网交换点（`Internet eXchange Point`），连接两个网络并交换分组，如两个地区的ISP可由此来交换分组。\n\n- **WWW**：万维网（`World Wide Web`）\n\n  > 1、一个透过互联网访问的，由许多互相链接的超文本组成的信息系统。\n  >\n  > 2、具体来说，平常浏览的网页，平常在网上下载的东西（视频，影音，图片等），都是属于万维网的一部分。更重要的是，超文本标记语言（`HTML`）是最常用的万维网部分。可以说，基于浏览器访问的网路，都是万维网一部分。\n  >\n  > 3、主要发明了三项关键技术：统一资源标识符（`URL`），超文本标记语言（`HTML`），超文本传输协议（`HTTP`）\n  >\n  > 4、网站前面加不加`www`的区别呢？加了属于二级域名，不加属于一级域名，差别不是很大，一般的网站，加不加都是默认跳到主网站，和其他的（如`jwxt.njupt....`、`main.qq....`）这些不一样，因为会跳到其他站点。\n\n- 网络的端系统直接通信有两种：客户-服务器方式（C/S方式）和对等方式（P2P方式）。\n\n- 客户-服务器方式\n\n  > 客户是服务请求方，服务器是服务提供方，两者分工明确\n  >\n  > 服务器通过服务程序处理客户通过客户程序发来的请求，并且可以通过并发实现同时处理多个请求\n  >\n  > 目前常见的网站，大多都是C/S方式\n\n- 对等方式（peer to peer）\n\n  > 两台主机都会运行（p2p软件），可以看成两台主机都可以作为服务器和客户端。\n\n- 路由器（router）：是一种专用计算机，分组交换的关键构件\n\n- 交换方式：电路交换，报文交换，分组交换\n\n  > 电路交换：“建立连接 -> 通话 -> 释放连接” 三个步骤称为电路交换，电路交换将整个报文放到信道传输，占据整个端到端的信道，并且此过程中，该信道不会给另一个通话所使用。效率非常低，因为一个通话会独占一个信道。\n  >\n  > 分组交换：把一个报文，分成若干个分段。每个分组加上一定的首部，就构成了一个分组，又称为“包”，首部又称为“包头”。\n  >\n  > 报文交换：与分组交换类似，并且先于分组交换问世，区别在于将整个报文进行存储转发，不进行分组。\n  \n- 分类：\n\n  > - 作用范围分类\n  >\n  >   > 广域网（`WAN`）、城域网（`MAN`）、局域网（`LAN`）、个人区域网（`PAN`）\n  >\n  > - 安装网络的使用者分类\n  >\n  >   > 公用网（public network）、专用网（private network）\n  >\n  > - 用来把用户介入到互联网中的，叫做接入网（`AN, Access Network`）。\n\n## 2、计算机网络性能计算\n\n- 速率：单位（比特每秒，`bit/s，b/s，bit per second`）常用转换：$$  1 kb=10^3b/s,\\quad b,k,M,G,T,P,E,Z,Y$$。\n\n- 带宽：其他地方指信号频带宽度，计算机网络指最高传输速率（b/s）。\n\n- 吞吐量：单位时间内，经过某个网络（或端口、信道）的实际数据量\n\n- 时延：数据从网络的一端传送到另一端的时间，主要由**发送时延**、**传播时延**、**处理时延**和**排队时延**组成。\n\n  > **1、发送时延**：数据从**主机或者路由器**发送到**信道**的时延，也叫做**传输时延**，$$发送时延=\\frac{数据帧长度(bit)}{发送速率(bit/s)}$$，单位是`s`。\n  >\n  > **2、传播时延**：**信号**在**信道**中传播时间，$$传播时延=\\frac{信道长度(m)}{电磁波在信道上的传播速率(m/s)}$$，单位是`s`，传播速率一般是$$3 \\times 10^8m/s$$。\n  >\n  > **3、处理时延**：主机或者路由器收到数据需要进行**简单处理**，如分析头部信息等等。\n  >\n  > **4、排队时延**：分组在路由器中经常遇到排队**等待**路由器**空闲**的情况\n  >\n  > 总时延为上述四个时延相加：总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延\n  >\n  > 然而，在具体网络中减少时延处理的方法是不一样的，如果两个主机相距很短，那么传播时延可以不考虑，如果很长，传播时延就会变成主要考虑的方面。\n\n- 时延带宽积\n\n  > $$时延带宽积 = 传播时延(m) \\times 带宽(b/s)$$，单位：`bit`，可以理解为**第一个比特**的数据刚刚**到达**接收方时，发送方**已经发了**多少数据。不妨想象信道是一根水管，时延带宽积就是水管里面能装的水量。\n\n- 往返时间`RTT`\n\n  > 顾名思义，往返时间就是一个数据单位从发送方到接收方又立马回到发送方需要的时间。\n  >\n  > 假设这么一个场景，A把最后1bit数据发送出去，A此时进入空闲等待确认状态。此时，经过半个RTT，B收到最后1bit数据，立马发送确认数据给A。又经过半个RTT，A收到确认数据，立马发送接下来的数据。这里，A将等待一个RTT。可以算出A发送最开始的数据到能够再发送数据经过的时间为：**发送时延+RTT**，那么，显然整个周期有效数据率应该有：$$有效数据率=\\frac{数据长度}{发送时间+RTT}$$，显然会比带宽小一点。\n\n- 利用率\n\n  > &emsp;利用率有**信道利用率**和**网络利用率**。信道利用率指出信道有百分之几的时间是有有效数据通过的。网络利用率指全网络的信道利用率加权平均值。\n  >\n  > $$D_0表示网络空闲时的时延，D表示网络当前的时延，U表示网络利用率，那么有：D = \\frac{D_0}{1-U}$$。\n  >\n  > &emsp;信道利用率或者网络利用率过高会产生非常大的时延，所以不超过50%是最佳的。\n\n## 3、计算机网络体系\n\n### 基本的体系介绍\n\n&emsp;在计算机网络的基本概念中，分层次的**体系结构**是最基本的。`ARPANET`最初设计网络时提出了分层的概念，将庞大而复杂的问题转为若干个小问题。\n\n&emsp;首先提出的是**系统网络体系结构SNA（System Network Architecture）**，而后国际标准化组织提出著名的**开放系统互连基本参考模型OSI/RM（Open System Interconnection Reference Model）**，简称OSI，完整的OSI是一个七层模型。但，尽管OSI提出时间很早，但是由于基于**TCP/IP**的互联网已经在全球范围内成功地运行了，所以最后的结果是**法律上的国际标准OSI**与**事实上的国际标准TCP/IP**的局面。\n\n&emsp;网络中最重要的便是**协议（protocol）**，所有简称里面带了**P**的，都是协议的缩写。所以，计算机网络讲的就是协议。协议又分为三个部分：（括号中是自己的理解）\n\n- （1）**语法**：数据与控制信息的结构和格式。（可以看成，整个数据报中，分为很多部分，每个部分的长度，类型等等。）\n- （2）**语义**：需要发出何种控制信息，完成何种动作以及做出何种响应。（解释上述语法分成的部分，该部分应该程序做什么，该部分代表着什么意思。）\n- （3）**同步**：即时间实现顺序的详细说明。（同步是为了能够确定数据报的边界，区分不同数据报，以及数据报的归属。）\n\n&emsp;分层的一些好处：\n\n- （1）各层之间是独立的\n- （2）灵活性好\n- （3）结构上可分割开\n- （4）易于实现和维护\n- （5）能促进标准化工作\n\n&emsp;各层需要完成的功能有如下方面：\n\n- （1）差错控制\n- （2）流量控制\n- （3）分段和重装\n- （4）复用和分用\n- （5）连接建立和释放\n\n### OSI七层协议\n\n|   第7层   |   **应用层**   | **应用程序与网络交互，编程接口等**              |\n| :-------: | :------------: | :---------------------------------------------- |\n| **第6层** |   **表示层**   | **各种数据的压缩与解压，表示，格式的转换等等**  |\n| **第5层** |   **会话层**   | **管理会话的建立、连接与释放**                  |\n| **第4层** |   **运输层**   | **传输控制协议层，TCP、UDP等协议**              |\n| **第3层** |   **网络层**   | **IP数据报的组装与拆分，IP地址与MAC地址的转换** |\n| **第2层** | **数据链路层** | **负责帧的组装拆分，MAC地址的应用**             |\n| **第1层** |   **物理层**   | **负责透明比特流的传输**                        |\n\n### TCP/IP四层模型\n\n&emsp;OSI模型应用的远远没有TCP/IP模型应用的广泛，并且，上述5，6，7层模型在TCP/IP中简化成一层模型了。上述1，2层简化成一层模型，但是学习过程中，还是两层模型来学。\n\n| **第4层** |   **应用层**   | &emsp;**应用程序直接的通信交互，两个应用进程之间的通信**     |\n| :-------: | :------------: | :----------------------------------------------------------- |\n| **第3层** |   **传输层**   | &emsp;**传输控制协议层，TCP、UDP等协议，为上层提供传输服务。提供复用与分用，采取端口来区分不同的应用程序。还实现连接与释放功能。端到端通信** |\n| **第2层** |   **网际层**   | &emsp;**IP数据报的组装与拆分，IP地址与MAC地址的转换。为不同的主机提供通信服务，采用的是IP地址区分不同主机。路由器一般也只到这层协议，此层也用来连接不同的异构网络。实现分段和重装功能。点对点通信** |\n| **第1层** | **网络接口层** | &emsp;**网卡接口的网络驱动程序，管理计算机网络适配器；管理物理传输介质，物理传输比特控制。点对点通信** |\n\n\n&emsp;不同主机之间相同层称为对等层，对等层之间通信需要先将协议一层一层往下传递，直到物理层才能直接进行传输。但是，在处理问题中，我们仍然将对等层用虚线连接起来，就好像对等层直接直接通信。\n\n## 4、体系结构中的术语\n\n- **实体**：各层的实体指的是，各层中**任何**可**发送**或**接收**信息的**硬件**或者**软件**进程。对等层的两个实体便是对等实体，协议也是控制两个对等实体进行通信的规则的集合。在协议的控制下，每层的实体，都能够向**上**层**提供服务**，要实现本层的功能，还得**使用下**一层实体提供的服务。\n\n- **SAP**：服务访问点（Service Access Point），这是比较抽象的一个概念，用我自己的话来讲，就是一个接口，上一层如何使用下一层的协议，那必然在计算机中看来，就是上一层调用了下一层的软件接口API。\n\n- **SDU**：服务数据单元（Service Data Unit），看作本层的数据部分。\n\n- **PDU**：协议数据单元（Protocol Data Unit），看作本层的数据加上报头（也就是协议部分）。\n\n- 详解PDU与SDU\n\n  > &emsp;**上一层数据加协议**包装好的数据报给了本层就是**本层的SDU**，本层再将**SDU用本层的协议**包装好成为本层的**PDU**，传递给下一层，作为**下一层的SDU**。依次类推到物理层。\n  >\n  > &emsp;如果把SDU看作一封信的内容，那么PDU就是内容加上署名，加上邮寄的地址等等信息。\n  >\n  > &emsp;那么有：$$PDU(n+1)=SDU(n),\\quad PDU(n) = SDU(n-1)$$。\n\n## 5、低三层设备\n\n&emsp;此处只简单介绍一下\n\n- 物理层：中继器，集线器\n- 数据链路层：网桥，交换机\n- 网络层：路由器\n\n|                | 隔离冲突域 | 隔离广播域 |\n| :------------: | :--------: | :--------: |\n|   **物理层**   |    不能    |    不能    |\n| **数据链路层** |     能     |    不能    |\n|   **网络层**   |     能     |     能     |\n\n","slug":"计算机网络技术之概述","published":1,"updated":"2022-07-19T03:43:10.683Z","_id":"cl46ktcpx000070u5993u4r0d","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"计算机网络概述\"><a href=\"#计算机网络概述\" class=\"headerlink\" title=\"计算机网络概述\"></a>计算机网络概述</h1><h2 id=\"1、基本概述\"><a href=\"#1、基本概述\" class=\"headerlink\" title=\"1、基本概述\"></a>1、基本概述</h2><ul>\n<li><p>21世纪一些重要特征：数字化、网络化和信息化，以网络为核心的信息时代</p>\n</li>\n<li><p>互联网两个基本特点：连通性和共享</p>\n</li>\n<li><p>网络有，电信网络、有线电视网络和<strong>计算机网络</strong>，该科目<strong>网络</strong>指的是<strong>计算机网络</strong></p>\n</li>\n<li><p>计算机网络（简称网络）由若干节点和连接这些节点的链路组成</p>\n</li>\n<li><p><strong>internet</strong>和<strong>Internet</strong>的区别：</p>\n<blockquote>\n<p>internet指多个计算机网络互连组成的互连网</p>\n<p>Internet指互联网，因特网，鼻祖是美国的<a href=\"https://zh.m.wikipedia.org/zh-cn/ARPANET\">ARPANET</a></p>\n</blockquote>\n</li>\n<li><p><strong>ISP</strong>：互联网服务提供者（<code>Internet Service Provider</code>），为用户提供网络服务，如中国联通，中国移动，中国电信</p>\n</li>\n<li><p><strong>IXP</strong>：互联网交换点（<code>Internet eXchange Point</code>），连接两个网络并交换分组，如两个地区的ISP可由此来交换分组。</p>\n</li>\n<li><p><strong>WWW</strong>：万维网（<code>World Wide Web</code>）</p>\n<blockquote>\n<p>1、一个透过互联网访问的，由许多互相链接的超文本组成的信息系统。</p>\n<p>2、具体来说，平常浏览的网页，平常在网上下载的东西（视频，影音，图片等），都是属于万维网的一部分。更重要的是，超文本标记语言（<code>HTML</code>）是最常用的万维网部分。可以说，基于浏览器访问的网路，都是万维网一部分。</p>\n<p>3、主要发明了三项关键技术：统一资源标识符（<code>URL</code>），超文本标记语言（<code>HTML</code>），超文本传输协议（<code>HTTP</code>）</p>\n<p>4、网站前面加不加<code>www</code>的区别呢？加了属于二级域名，不加属于一级域名，差别不是很大，一般的网站，加不加都是默认跳到主网站，和其他的（如<code>jwxt.njupt....</code>、<code>main.qq....</code>）这些不一样，因为会跳到其他站点。</p>\n</blockquote>\n</li>\n<li><p>网络的端系统直接通信有两种：客户-服务器方式（C/S方式）和对等方式（P2P方式）。</p>\n</li>\n<li><p>客户-服务器方式</p>\n<blockquote>\n<p>客户是服务请求方，服务器是服务提供方，两者分工明确</p>\n<p>服务器通过服务程序处理客户通过客户程序发来的请求，并且可以通过并发实现同时处理多个请求</p>\n<p>目前常见的网站，大多都是C/S方式</p>\n</blockquote>\n</li>\n<li><p>对等方式（peer to peer）</p>\n<blockquote>\n<p>两台主机都会运行（p2p软件），可以看成两台主机都可以作为服务器和客户端。</p>\n</blockquote>\n</li>\n<li><p>路由器（router）：是一种专用计算机，分组交换的关键构件</p>\n</li>\n<li><p>交换方式：电路交换，报文交换，分组交换</p>\n<blockquote>\n<p>电路交换：“建立连接 -&gt; 通话 -&gt; 释放连接” 三个步骤称为电路交换，电路交换将整个报文放到信道传输，占据整个端到端的信道，并且此过程中，该信道不会给另一个通话所使用。效率非常低，因为一个通话会独占一个信道。</p>\n<p>分组交换：把一个报文，分成若干个分段。每个分组加上一定的首部，就构成了一个分组，又称为“包”，首部又称为“包头”。</p>\n<p>报文交换：与分组交换类似，并且先于分组交换问世，区别在于将整个报文进行存储转发，不进行分组。</p>\n</blockquote>\n</li>\n<li><p>分类：</p>\n<blockquote>\n<ul>\n<li><p>作用范围分类</p>\n<blockquote>\n<p>广域网（<code>WAN</code>）、城域网（<code>MAN</code>）、局域网（<code>LAN</code>）、个人区域网（<code>PAN</code>）</p>\n</blockquote>\n</li>\n<li><p>安装网络的使用者分类</p>\n<blockquote>\n<p>公用网（public network）、专用网（private network）</p>\n</blockquote>\n</li>\n<li><p>用来把用户介入到互联网中的，叫做接入网（<code>AN, Access Network</code>）。</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"2、计算机网络性能计算\"><a href=\"#2、计算机网络性能计算\" class=\"headerlink\" title=\"2、计算机网络性能计算\"></a>2、计算机网络性能计算</h2><ul>\n<li><p>速率：单位（比特每秒，<code>bit/s，b/s，bit per second</code>）常用转换：<script type=\"math/tex\">1 kb=10^3b/s,\\quad b,k,M,G,T,P,E,Z,Y</script>。</p>\n</li>\n<li><p>带宽：其他地方指信号频带宽度，计算机网络指最高传输速率（b/s）。</p>\n</li>\n<li><p>吞吐量：单位时间内，经过某个网络（或端口、信道）的实际数据量</p>\n</li>\n<li><p>时延：数据从网络的一端传送到另一端的时间，主要由<strong>发送时延</strong>、<strong>传播时延</strong>、<strong>处理时延</strong>和<strong>排队时延</strong>组成。</p>\n<blockquote>\n<p><strong>1、发送时延</strong>：数据从<strong>主机或者路由器</strong>发送到<strong>信道</strong>的时延，也叫做<strong>传输时延</strong>，<script type=\"math/tex\">发送时延=\\frac{数据帧长度(bit)}{发送速率(bit/s)}</script>，单位是<code>s</code>。</p>\n<p><strong>2、传播时延</strong>：<strong>信号</strong>在<strong>信道</strong>中传播时间，<script type=\"math/tex\">传播时延=\\frac{信道长度(m)}{电磁波在信道上的传播速率(m/s)}</script>，单位是<code>s</code>，传播速率一般是<script type=\"math/tex\">3 \\times 10^8m/s</script>。</p>\n<p><strong>3、处理时延</strong>：主机或者路由器收到数据需要进行<strong>简单处理</strong>，如分析头部信息等等。</p>\n<p><strong>4、排队时延</strong>：分组在路由器中经常遇到排队<strong>等待</strong>路由器<strong>空闲</strong>的情况</p>\n<p>总时延为上述四个时延相加：总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延</p>\n<p>然而，在具体网络中减少时延处理的方法是不一样的，如果两个主机相距很短，那么传播时延可以不考虑，如果很长，传播时延就会变成主要考虑的方面。</p>\n</blockquote>\n</li>\n<li><p>时延带宽积</p>\n<blockquote>\n<p><script type=\"math/tex\">时延带宽积 = 传播时延(m) \\times 带宽(b/s)</script>，单位：<code>bit</code>，可以理解为<strong>第一个比特</strong>的数据刚刚<strong>到达</strong>接收方时，发送方<strong>已经发了</strong>多少数据。不妨想象信道是一根水管，时延带宽积就是水管里面能装的水量。</p>\n</blockquote>\n</li>\n<li><p>往返时间<code>RTT</code></p>\n<blockquote>\n<p>顾名思义，往返时间就是一个数据单位从发送方到接收方又立马回到发送方需要的时间。</p>\n<p>假设这么一个场景，A把最后1bit数据发送出去，A此时进入空闲等待确认状态。此时，经过半个RTT，B收到最后1bit数据，立马发送确认数据给A。又经过半个RTT，A收到确认数据，立马发送接下来的数据。这里，A将等待一个RTT。可以算出A发送最开始的数据到能够再发送数据经过的时间为：<strong>发送时延+RTT</strong>，那么，显然整个周期有效数据率应该有：<script type=\"math/tex\">有效数据率=\\frac{数据长度}{发送时间+RTT}</script>，显然会比带宽小一点。</p>\n</blockquote>\n</li>\n<li><p>利用率</p>\n<blockquote>\n<p>&emsp;利用率有<strong>信道利用率</strong>和<strong>网络利用率</strong>。信道利用率指出信道有百分之几的时间是有有效数据通过的。网络利用率指全网络的信道利用率加权平均值。</p>\n<p><script type=\"math/tex\">D_0表示网络空闲时的时延，D表示网络当前的时延，U表示网络利用率，那么有：D = \\frac{D_0}{1-U}</script>。</p>\n<p>&emsp;信道利用率或者网络利用率过高会产生非常大的时延，所以不超过50%是最佳的。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"3、计算机网络体系\"><a href=\"#3、计算机网络体系\" class=\"headerlink\" title=\"3、计算机网络体系\"></a>3、计算机网络体系</h2><h3 id=\"基本的体系介绍\"><a href=\"#基本的体系介绍\" class=\"headerlink\" title=\"基本的体系介绍\"></a>基本的体系介绍</h3><p>&emsp;在计算机网络的基本概念中，分层次的<strong>体系结构</strong>是最基本的。<code>ARPANET</code>最初设计网络时提出了分层的概念，将庞大而复杂的问题转为若干个小问题。</p>\n<p>&emsp;首先提出的是<strong>系统网络体系结构SNA（System Network Architecture）</strong>，而后国际标准化组织提出著名的<strong>开放系统互连基本参考模型OSI/RM（Open System Interconnection Reference Model）</strong>，简称OSI，完整的OSI是一个七层模型。但，尽管OSI提出时间很早，但是由于基于<strong>TCP/IP</strong>的互联网已经在全球范围内成功地运行了，所以最后的结果是<strong>法律上的国际标准OSI</strong>与<strong>事实上的国际标准TCP/IP</strong>的局面。</p>\n<p>&emsp;网络中最重要的便是<strong>协议（protocol）</strong>，所有简称里面带了<strong>P</strong>的，都是协议的缩写。所以，计算机网络讲的就是协议。协议又分为三个部分：（括号中是自己的理解）</p>\n<ul>\n<li>（1）<strong>语法</strong>：数据与控制信息的结构和格式。（可以看成，整个数据报中，分为很多部分，每个部分的长度，类型等等。）</li>\n<li>（2）<strong>语义</strong>：需要发出何种控制信息，完成何种动作以及做出何种响应。（解释上述语法分成的部分，该部分应该程序做什么，该部分代表着什么意思。）</li>\n<li>（3）<strong>同步</strong>：即时间实现顺序的详细说明。（同步是为了能够确定数据报的边界，区分不同数据报，以及数据报的归属。）</li>\n</ul>\n<p>&emsp;分层的一些好处：</p>\n<ul>\n<li>（1）各层之间是独立的</li>\n<li>（2）灵活性好</li>\n<li>（3）结构上可分割开</li>\n<li>（4）易于实现和维护</li>\n<li>（5）能促进标准化工作</li>\n</ul>\n<p>&emsp;各层需要完成的功能有如下方面：</p>\n<ul>\n<li>（1）差错控制</li>\n<li>（2）流量控制</li>\n<li>（3）分段和重装</li>\n<li>（4）复用和分用</li>\n<li>（5）连接建立和释放</li>\n</ul>\n<h3 id=\"OSI七层协议\"><a href=\"#OSI七层协议\" class=\"headerlink\" title=\"OSI七层协议\"></a>OSI七层协议</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第7层</th>\n<th style=\"text-align:center\"><strong>应用层</strong></th>\n<th style=\"text-align:left\"><strong>应用程序与网络交互，编程接口等</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>第6层</strong></td>\n<td style=\"text-align:center\"><strong>表示层</strong></td>\n<td style=\"text-align:left\"><strong>各种数据的压缩与解压，表示，格式的转换等等</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>第5层</strong></td>\n<td style=\"text-align:center\"><strong>会话层</strong></td>\n<td style=\"text-align:left\"><strong>管理会话的建立、连接与释放</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>第4层</strong></td>\n<td style=\"text-align:center\"><strong>运输层</strong></td>\n<td style=\"text-align:left\"><strong>传输控制协议层，TCP、UDP等协议</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>第3层</strong></td>\n<td style=\"text-align:center\"><strong>网络层</strong></td>\n<td style=\"text-align:left\"><strong>IP数据报的组装与拆分，IP地址与MAC地址的转换</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>第2层</strong></td>\n<td style=\"text-align:center\"><strong>数据链路层</strong></td>\n<td style=\"text-align:left\"><strong>负责帧的组装拆分，MAC地址的应用</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>第1层</strong></td>\n<td style=\"text-align:center\"><strong>物理层</strong></td>\n<td style=\"text-align:left\"><strong>负责透明比特流的传输</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"TCP-IP四层模型\"><a href=\"#TCP-IP四层模型\" class=\"headerlink\" title=\"TCP/IP四层模型\"></a>TCP/IP四层模型</h3><p>&emsp;OSI模型应用的远远没有TCP/IP模型应用的广泛，并且，上述5，6，7层模型在TCP/IP中简化成一层模型了。上述1，2层简化成一层模型，但是学习过程中，还是两层模型来学。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>第4层</strong></th>\n<th style=\"text-align:center\"><strong>应用层</strong></th>\n<th style=\"text-align:left\">&emsp;<strong>应用程序直接的通信交互，两个应用进程之间的通信</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>第3层</strong></td>\n<td style=\"text-align:center\"><strong>传输层</strong></td>\n<td style=\"text-align:left\">&emsp;<strong>传输控制协议层，TCP、UDP等协议，为上层提供传输服务。提供复用与分用，采取端口来区分不同的应用程序。还实现连接与释放功能。端到端通信</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>第2层</strong></td>\n<td style=\"text-align:center\"><strong>网际层</strong></td>\n<td style=\"text-align:left\">&emsp;<strong>IP数据报的组装与拆分，IP地址与MAC地址的转换。为不同的主机提供通信服务，采用的是IP地址区分不同主机。路由器一般也只到这层协议，此层也用来连接不同的异构网络。实现分段和重装功能。点对点通信</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>第1层</strong></td>\n<td style=\"text-align:center\"><strong>网络接口层</strong></td>\n<td style=\"text-align:left\">&emsp;<strong>网卡接口的网络驱动程序，管理计算机网络适配器；管理物理传输介质，物理传输比特控制。点对点通信</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>&emsp;不同主机之间相同层称为对等层，对等层之间通信需要先将协议一层一层往下传递，直到物理层才能直接进行传输。但是，在处理问题中，我们仍然将对等层用虚线连接起来，就好像对等层直接直接通信。</p>\n<h2 id=\"4、体系结构中的术语\"><a href=\"#4、体系结构中的术语\" class=\"headerlink\" title=\"4、体系结构中的术语\"></a>4、体系结构中的术语</h2><ul>\n<li><p><strong>实体</strong>：各层的实体指的是，各层中<strong>任何</strong>可<strong>发送</strong>或<strong>接收</strong>信息的<strong>硬件</strong>或者<strong>软件</strong>进程。对等层的两个实体便是对等实体，协议也是控制两个对等实体进行通信的规则的集合。在协议的控制下，每层的实体，都能够向<strong>上</strong>层<strong>提供服务</strong>，要实现本层的功能，还得<strong>使用下</strong>一层实体提供的服务。</p>\n</li>\n<li><p><strong>SAP</strong>：服务访问点（Service Access Point），这是比较抽象的一个概念，用我自己的话来讲，就是一个接口，上一层如何使用下一层的协议，那必然在计算机中看来，就是上一层调用了下一层的软件接口API。</p>\n</li>\n<li><p><strong>SDU</strong>：服务数据单元（Service Data Unit），看作本层的数据部分。</p>\n</li>\n<li><p><strong>PDU</strong>：协议数据单元（Protocol Data Unit），看作本层的数据加上报头（也就是协议部分）。</p>\n</li>\n<li><p>详解PDU与SDU</p>\n<blockquote>\n<p>&emsp;<strong>上一层数据加协议</strong>包装好的数据报给了本层就是<strong>本层的SDU</strong>，本层再将<strong>SDU用本层的协议</strong>包装好成为本层的<strong>PDU</strong>，传递给下一层，作为<strong>下一层的SDU</strong>。依次类推到物理层。</p>\n<p>&emsp;如果把SDU看作一封信的内容，那么PDU就是内容加上署名，加上邮寄的地址等等信息。</p>\n<p>&emsp;那么有：<script type=\"math/tex\">PDU(n+1)=SDU(n),\\quad PDU(n) = SDU(n-1)</script>。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"5、低三层设备\"><a href=\"#5、低三层设备\" class=\"headerlink\" title=\"5、低三层设备\"></a>5、低三层设备</h2><p>&emsp;此处只简单介绍一下</p>\n<ul>\n<li>物理层：中继器，集线器</li>\n<li>数据链路层：网桥，交换机</li>\n<li>网络层：路由器</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">隔离冲突域</th>\n<th style=\"text-align:center\">隔离广播域</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>物理层</strong></td>\n<td style=\"text-align:center\">不能</td>\n<td style=\"text-align:center\">不能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>数据链路层</strong></td>\n<td style=\"text-align:center\">能</td>\n<td style=\"text-align:center\">不能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>网络层</strong></td>\n<td style=\"text-align:center\">能</td>\n<td style=\"text-align:center\">能</td>\n</tr>\n</tbody>\n</table>\n</div>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"计算机网络概述\"><a href=\"#计算机网络概述\" class=\"headerlink\" title=\"计算机网络概述\"></a>计算机网络概述</h1><h2 id=\"1、基本概述\"><a href=\"#1、基本概述\" class=\"headerlink\" title=\"1、基本概述\"></a>1、基本概述</h2><ul>\n<li><p>21世纪一些重要特征：数字化、网络化和信息化，以网络为核心的信息时代</p>\n</li>\n<li><p>互联网两个基本特点：连通性和共享</p>\n</li>\n<li><p>网络有，电信网络、有线电视网络和<strong>计算机网络</strong>，该科目<strong>网络</strong>指的是<strong>计算机网络</strong></p>\n</li>\n<li><p>计算机网络（简称网络）由若干节点和连接这些节点的链路组成</p>\n</li>\n<li><p><strong>internet</strong>和<strong>Internet</strong>的区别：</p>\n<blockquote>\n<p>internet指多个计算机网络互连组成的互连网</p>\n<p>Internet指互联网，因特网，鼻祖是美国的<a href=\"https://zh.m.wikipedia.org/zh-cn/ARPANET\">ARPANET</a></p>\n</blockquote>\n</li>\n<li><p><strong>ISP</strong>：互联网服务提供者（<code>Internet Service Provider</code>），为用户提供网络服务，如中国联通，中国移动，中国电信</p>\n</li>\n<li><p><strong>IXP</strong>：互联网交换点（<code>Internet eXchange Point</code>），连接两个网络并交换分组，如两个地区的ISP可由此来交换分组。</p>\n</li>\n<li><p><strong>WWW</strong>：万维网（<code>World Wide Web</code>）</p>\n<blockquote>\n<p>1、一个透过互联网访问的，由许多互相链接的超文本组成的信息系统。</p>\n<p>2、具体来说，平常浏览的网页，平常在网上下载的东西（视频，影音，图片等），都是属于万维网的一部分。更重要的是，超文本标记语言（<code>HTML</code>）是最常用的万维网部分。可以说，基于浏览器访问的网路，都是万维网一部分。</p>\n<p>3、主要发明了三项关键技术：统一资源标识符（<code>URL</code>），超文本标记语言（<code>HTML</code>），超文本传输协议（<code>HTTP</code>）</p>\n<p>4、网站前面加不加<code>www</code>的区别呢？加了属于二级域名，不加属于一级域名，差别不是很大，一般的网站，加不加都是默认跳到主网站，和其他的（如<code>jwxt.njupt....</code>、<code>main.qq....</code>）这些不一样，因为会跳到其他站点。</p>\n</blockquote>\n</li>\n<li><p>网络的端系统直接通信有两种：客户-服务器方式（C/S方式）和对等方式（P2P方式）。</p>\n</li>\n<li><p>客户-服务器方式</p>\n<blockquote>\n<p>客户是服务请求方，服务器是服务提供方，两者分工明确</p>\n<p>服务器通过服务程序处理客户通过客户程序发来的请求，并且可以通过并发实现同时处理多个请求</p>\n<p>目前常见的网站，大多都是C/S方式</p>\n</blockquote>\n</li>\n<li><p>对等方式（peer to peer）</p>\n<blockquote>\n<p>两台主机都会运行（p2p软件），可以看成两台主机都可以作为服务器和客户端。</p>\n</blockquote>\n</li>\n<li><p>路由器（router）：是一种专用计算机，分组交换的关键构件</p>\n</li>\n<li><p>交换方式：电路交换，报文交换，分组交换</p>\n<blockquote>\n<p>电路交换：“建立连接 -&gt; 通话 -&gt; 释放连接” 三个步骤称为电路交换，电路交换将整个报文放到信道传输，占据整个端到端的信道，并且此过程中，该信道不会给另一个通话所使用。效率非常低，因为一个通话会独占一个信道。</p>\n<p>分组交换：把一个报文，分成若干个分段。每个分组加上一定的首部，就构成了一个分组，又称为“包”，首部又称为“包头”。</p>\n<p>报文交换：与分组交换类似，并且先于分组交换问世，区别在于将整个报文进行存储转发，不进行分组。</p>\n</blockquote>\n</li>\n<li><p>分类：</p>\n<blockquote>\n<ul>\n<li><p>作用范围分类</p>\n<blockquote>\n<p>广域网（<code>WAN</code>）、城域网（<code>MAN</code>）、局域网（<code>LAN</code>）、个人区域网（<code>PAN</code>）</p>\n</blockquote>\n</li>\n<li><p>安装网络的使用者分类</p>\n<blockquote>\n<p>公用网（public network）、专用网（private network）</p>\n</blockquote>\n</li>\n<li><p>用来把用户介入到互联网中的，叫做接入网（<code>AN, Access Network</code>）。</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"2、计算机网络性能计算\"><a href=\"#2、计算机网络性能计算\" class=\"headerlink\" title=\"2、计算机网络性能计算\"></a>2、计算机网络性能计算</h2><ul>\n<li><p>速率：单位（比特每秒，<code>bit/s，b/s，bit per second</code>）常用转换：<script type=\"math/tex\">1 kb=10^3b/s,\\quad b,k,M,G,T,P,E,Z,Y</script>。</p>\n</li>\n<li><p>带宽：其他地方指信号频带宽度，计算机网络指最高传输速率（b/s）。</p>\n</li>\n<li><p>吞吐量：单位时间内，经过某个网络（或端口、信道）的实际数据量</p>\n</li>\n<li><p>时延：数据从网络的一端传送到另一端的时间，主要由<strong>发送时延</strong>、<strong>传播时延</strong>、<strong>处理时延</strong>和<strong>排队时延</strong>组成。</p>\n<blockquote>\n<p><strong>1、发送时延</strong>：数据从<strong>主机或者路由器</strong>发送到<strong>信道</strong>的时延，也叫做<strong>传输时延</strong>，<script type=\"math/tex\">发送时延=\\frac{数据帧长度(bit)}{发送速率(bit/s)}</script>，单位是<code>s</code>。</p>\n<p><strong>2、传播时延</strong>：<strong>信号</strong>在<strong>信道</strong>中传播时间，<script type=\"math/tex\">传播时延=\\frac{信道长度(m)}{电磁波在信道上的传播速率(m/s)}</script>，单位是<code>s</code>，传播速率一般是<script type=\"math/tex\">3 \\times 10^8m/s</script>。</p>\n<p><strong>3、处理时延</strong>：主机或者路由器收到数据需要进行<strong>简单处理</strong>，如分析头部信息等等。</p>\n<p><strong>4、排队时延</strong>：分组在路由器中经常遇到排队<strong>等待</strong>路由器<strong>空闲</strong>的情况</p>\n<p>总时延为上述四个时延相加：总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延</p>\n<p>然而，在具体网络中减少时延处理的方法是不一样的，如果两个主机相距很短，那么传播时延可以不考虑，如果很长，传播时延就会变成主要考虑的方面。</p>\n</blockquote>\n</li>\n<li><p>时延带宽积</p>\n<blockquote>\n<p><script type=\"math/tex\">时延带宽积 = 传播时延(m) \\times 带宽(b/s)</script>，单位：<code>bit</code>，可以理解为<strong>第一个比特</strong>的数据刚刚<strong>到达</strong>接收方时，发送方<strong>已经发了</strong>多少数据。不妨想象信道是一根水管，时延带宽积就是水管里面能装的水量。</p>\n</blockquote>\n</li>\n<li><p>往返时间<code>RTT</code></p>\n<blockquote>\n<p>顾名思义，往返时间就是一个数据单位从发送方到接收方又立马回到发送方需要的时间。</p>\n<p>假设这么一个场景，A把最后1bit数据发送出去，A此时进入空闲等待确认状态。此时，经过半个RTT，B收到最后1bit数据，立马发送确认数据给A。又经过半个RTT，A收到确认数据，立马发送接下来的数据。这里，A将等待一个RTT。可以算出A发送最开始的数据到能够再发送数据经过的时间为：<strong>发送时延+RTT</strong>，那么，显然整个周期有效数据率应该有：<script type=\"math/tex\">有效数据率=\\frac{数据长度}{发送时间+RTT}</script>，显然会比带宽小一点。</p>\n</blockquote>\n</li>\n<li><p>利用率</p>\n<blockquote>\n<p>&emsp;利用率有<strong>信道利用率</strong>和<strong>网络利用率</strong>。信道利用率指出信道有百分之几的时间是有有效数据通过的。网络利用率指全网络的信道利用率加权平均值。</p>\n<p><script type=\"math/tex\">D_0表示网络空闲时的时延，D表示网络当前的时延，U表示网络利用率，那么有：D = \\frac{D_0}{1-U}</script>。</p>\n<p>&emsp;信道利用率或者网络利用率过高会产生非常大的时延，所以不超过50%是最佳的。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"3、计算机网络体系\"><a href=\"#3、计算机网络体系\" class=\"headerlink\" title=\"3、计算机网络体系\"></a>3、计算机网络体系</h2><h3 id=\"基本的体系介绍\"><a href=\"#基本的体系介绍\" class=\"headerlink\" title=\"基本的体系介绍\"></a>基本的体系介绍</h3><p>&emsp;在计算机网络的基本概念中，分层次的<strong>体系结构</strong>是最基本的。<code>ARPANET</code>最初设计网络时提出了分层的概念，将庞大而复杂的问题转为若干个小问题。</p>\n<p>&emsp;首先提出的是<strong>系统网络体系结构SNA（System Network Architecture）</strong>，而后国际标准化组织提出著名的<strong>开放系统互连基本参考模型OSI/RM（Open System Interconnection Reference Model）</strong>，简称OSI，完整的OSI是一个七层模型。但，尽管OSI提出时间很早，但是由于基于<strong>TCP/IP</strong>的互联网已经在全球范围内成功地运行了，所以最后的结果是<strong>法律上的国际标准OSI</strong>与<strong>事实上的国际标准TCP/IP</strong>的局面。</p>\n<p>&emsp;网络中最重要的便是<strong>协议（protocol）</strong>，所有简称里面带了<strong>P</strong>的，都是协议的缩写。所以，计算机网络讲的就是协议。协议又分为三个部分：（括号中是自己的理解）</p>\n<ul>\n<li>（1）<strong>语法</strong>：数据与控制信息的结构和格式。（可以看成，整个数据报中，分为很多部分，每个部分的长度，类型等等。）</li>\n<li>（2）<strong>语义</strong>：需要发出何种控制信息，完成何种动作以及做出何种响应。（解释上述语法分成的部分，该部分应该程序做什么，该部分代表着什么意思。）</li>\n<li>（3）<strong>同步</strong>：即时间实现顺序的详细说明。（同步是为了能够确定数据报的边界，区分不同数据报，以及数据报的归属。）</li>\n</ul>\n<p>&emsp;分层的一些好处：</p>\n<ul>\n<li>（1）各层之间是独立的</li>\n<li>（2）灵活性好</li>\n<li>（3）结构上可分割开</li>\n<li>（4）易于实现和维护</li>\n<li>（5）能促进标准化工作</li>\n</ul>\n<p>&emsp;各层需要完成的功能有如下方面：</p>\n<ul>\n<li>（1）差错控制</li>\n<li>（2）流量控制</li>\n<li>（3）分段和重装</li>\n<li>（4）复用和分用</li>\n<li>（5）连接建立和释放</li>\n</ul>\n<h3 id=\"OSI七层协议\"><a href=\"#OSI七层协议\" class=\"headerlink\" title=\"OSI七层协议\"></a>OSI七层协议</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第7层</th>\n<th style=\"text-align:center\"><strong>应用层</strong></th>\n<th style=\"text-align:left\"><strong>应用程序与网络交互，编程接口等</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>第6层</strong></td>\n<td style=\"text-align:center\"><strong>表示层</strong></td>\n<td style=\"text-align:left\"><strong>各种数据的压缩与解压，表示，格式的转换等等</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>第5层</strong></td>\n<td style=\"text-align:center\"><strong>会话层</strong></td>\n<td style=\"text-align:left\"><strong>管理会话的建立、连接与释放</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>第4层</strong></td>\n<td style=\"text-align:center\"><strong>运输层</strong></td>\n<td style=\"text-align:left\"><strong>传输控制协议层，TCP、UDP等协议</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>第3层</strong></td>\n<td style=\"text-align:center\"><strong>网络层</strong></td>\n<td style=\"text-align:left\"><strong>IP数据报的组装与拆分，IP地址与MAC地址的转换</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>第2层</strong></td>\n<td style=\"text-align:center\"><strong>数据链路层</strong></td>\n<td style=\"text-align:left\"><strong>负责帧的组装拆分，MAC地址的应用</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>第1层</strong></td>\n<td style=\"text-align:center\"><strong>物理层</strong></td>\n<td style=\"text-align:left\"><strong>负责透明比特流的传输</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"TCP-IP四层模型\"><a href=\"#TCP-IP四层模型\" class=\"headerlink\" title=\"TCP/IP四层模型\"></a>TCP/IP四层模型</h3><p>&emsp;OSI模型应用的远远没有TCP/IP模型应用的广泛，并且，上述5，6，7层模型在TCP/IP中简化成一层模型了。上述1，2层简化成一层模型，但是学习过程中，还是两层模型来学。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>第4层</strong></th>\n<th style=\"text-align:center\"><strong>应用层</strong></th>\n<th style=\"text-align:left\">&emsp;<strong>应用程序直接的通信交互，两个应用进程之间的通信</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>第3层</strong></td>\n<td style=\"text-align:center\"><strong>传输层</strong></td>\n<td style=\"text-align:left\">&emsp;<strong>传输控制协议层，TCP、UDP等协议，为上层提供传输服务。提供复用与分用，采取端口来区分不同的应用程序。还实现连接与释放功能。端到端通信</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>第2层</strong></td>\n<td style=\"text-align:center\"><strong>网际层</strong></td>\n<td style=\"text-align:left\">&emsp;<strong>IP数据报的组装与拆分，IP地址与MAC地址的转换。为不同的主机提供通信服务，采用的是IP地址区分不同主机。路由器一般也只到这层协议，此层也用来连接不同的异构网络。实现分段和重装功能。点对点通信</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>第1层</strong></td>\n<td style=\"text-align:center\"><strong>网络接口层</strong></td>\n<td style=\"text-align:left\">&emsp;<strong>网卡接口的网络驱动程序，管理计算机网络适配器；管理物理传输介质，物理传输比特控制。点对点通信</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>&emsp;不同主机之间相同层称为对等层，对等层之间通信需要先将协议一层一层往下传递，直到物理层才能直接进行传输。但是，在处理问题中，我们仍然将对等层用虚线连接起来，就好像对等层直接直接通信。</p>\n<h2 id=\"4、体系结构中的术语\"><a href=\"#4、体系结构中的术语\" class=\"headerlink\" title=\"4、体系结构中的术语\"></a>4、体系结构中的术语</h2><ul>\n<li><p><strong>实体</strong>：各层的实体指的是，各层中<strong>任何</strong>可<strong>发送</strong>或<strong>接收</strong>信息的<strong>硬件</strong>或者<strong>软件</strong>进程。对等层的两个实体便是对等实体，协议也是控制两个对等实体进行通信的规则的集合。在协议的控制下，每层的实体，都能够向<strong>上</strong>层<strong>提供服务</strong>，要实现本层的功能，还得<strong>使用下</strong>一层实体提供的服务。</p>\n</li>\n<li><p><strong>SAP</strong>：服务访问点（Service Access Point），这是比较抽象的一个概念，用我自己的话来讲，就是一个接口，上一层如何使用下一层的协议，那必然在计算机中看来，就是上一层调用了下一层的软件接口API。</p>\n</li>\n<li><p><strong>SDU</strong>：服务数据单元（Service Data Unit），看作本层的数据部分。</p>\n</li>\n<li><p><strong>PDU</strong>：协议数据单元（Protocol Data Unit），看作本层的数据加上报头（也就是协议部分）。</p>\n</li>\n<li><p>详解PDU与SDU</p>\n<blockquote>\n<p>&emsp;<strong>上一层数据加协议</strong>包装好的数据报给了本层就是<strong>本层的SDU</strong>，本层再将<strong>SDU用本层的协议</strong>包装好成为本层的<strong>PDU</strong>，传递给下一层，作为<strong>下一层的SDU</strong>。依次类推到物理层。</p>\n<p>&emsp;如果把SDU看作一封信的内容，那么PDU就是内容加上署名，加上邮寄的地址等等信息。</p>\n<p>&emsp;那么有：<script type=\"math/tex\">PDU(n+1)=SDU(n),\\quad PDU(n) = SDU(n-1)</script>。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"5、低三层设备\"><a href=\"#5、低三层设备\" class=\"headerlink\" title=\"5、低三层设备\"></a>5、低三层设备</h2><p>&emsp;此处只简单介绍一下</p>\n<ul>\n<li>物理层：中继器，集线器</li>\n<li>数据链路层：网桥，交换机</li>\n<li>网络层：路由器</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">隔离冲突域</th>\n<th style=\"text-align:center\">隔离广播域</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>物理层</strong></td>\n<td style=\"text-align:center\">不能</td>\n<td style=\"text-align:center\">不能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>数据链路层</strong></td>\n<td style=\"text-align:center\">能</td>\n<td style=\"text-align:center\">不能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>网络层</strong></td>\n<td style=\"text-align:center\">能</td>\n<td style=\"text-align:center\">能</td>\n</tr>\n</tbody>\n</table>\n</div>\n"},{"title":"从http开始学习爬虫","excerpt":"从http开始学习爬虫知识，不限于什么语言，推荐用Python","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111740272.png","mathjax":true,"date":"2022-06-11T07:36:20.000Z","_content":"\n# 目录\n\n- 前置知识\n\n  > - 1、URL\n  > - 2、http请求\n  > - 3、http响应\n  > - 4、爬虫步骤\n\n- 浏览器抓包知识\n\n  > - 1、打开调试窗口\n  > - 2、详解请求头参数\n\n- python实现简单抓包\n\n  > - 1、requests模块使用\n  > - 2、正则表达式\n\n-\n\n# 前置知识\n\n## 1、URL\n\n&emsp;URL是统一资源定位表示符号，当然，还有URI，URN的概念，这里就不细究这两个这三者区别，因为我们重点是讨论**URL**是什么，以及如何解析URL就行。\n\n&emsp;完整的URL如下，方括号表示可以省略的，圆括号表示不能省略，尖括号表示浏览器默认会加上去的。空格只是为了讲解，URL是**不能**有空格的。不仅如此，URL只能有**英文字母**，**阿拉伯数字**和某些**英文标点符号**组成。\n\n* < 协议 > :// ( **域名**或**IP** ) : < 端口 > / 【 [ 路径信息 ] / [ 文件名 ] ? [ 参数部分 ] # [ 锚部分 ] 】\n\n  > **< 协议 >**：指明何种协议，如`http`，`https`，`ftp`等等，这里只讨论`http`，写爬虫代码时，最好指定为`http`。\n  >\n  > **(域名或IP)**：域名地址或者IP地址都可以，不了解的可以搜索域名地址和IP地址是什么。大白话就是网址（不完全等同），如`baidu.com`。\n  >\n  > **<端口>**：端口地址，不了解的也搜索一下，http协议是80端口，通常省略。\n  >\n  > **[路径信息]**：请求的路径信息，即需要请求的资源在服务器的什么位置，通常抓包获得。\n  >\n  > **[文件名]**：请求的文件名是什么，通常抓包获得。\n  >\n  > **[参数部分]**：请求参数，通常抓包获得，一般叫做**字符串参数**，为了**区别于**请求数据中的参数。这里需要着重讲一下\n  >\n  > > 1）通常是以 **键=值** 的形式表示单个，用 `&`连接多个参数。\n  > >\n  > > 2）如：`quest=http&id=1234&pass=22`\n  > >\n  > > 3）上述就有三个参数（quest = http，id = 1234，pass = 22），两两直接用`&`连接起来\n  >\n  > **[锚部分]**：不重要，反正也是抓包获得。\n  >\n  > **特殊字符串表示**：前面说到URL只能由**英文字母**，**阿拉伯数字**和某些**英文标点符号**组成。那么不是这些的怎么表示呢？\n  >\n  > > 答：采用 **URL-ASCII** 编码格式进行编码。URL允许出现的字符有：`-`，`.`，`_`，`~`，注意都是英文字符。\n  > >\n  > > 保留的字符有：`! * ' ( ) ; : @ & = + $ , / ? # [ ]`这十八个，都是英文字符，如等号用来连接**键**与**值**。\n\n## 2、http请求\n\n格式如下：\n\n``` shell\n请求方式 URL 版本号【回车换行符】\n\n键: 值 【回车换行符】\n....(重复键：值)\n键: 值 【回车换行符】\n\n【回车换行符】\n\n主体内容\n```\n\n&emsp;上述内容太混乱了，没关系，一行一行来看\n\n1、第一行：\n\n> 请求方式：包括`POST`和`GET`，当然，还有其他，常用这两种。注意，都是大写。\n>\n> URL：上述解释中的URL，一般指包括**路径信息及其后面部分**，而没有前面部分。至于IP地址这些，要么在请求表头中用参数给出，要么直接不给，主要是**IP地址和端口不是应用层**的实体。\n>\n> 版本号：这个也不重要，现在应该是 `HTTP/1.1`。\n\n- 2、第二行及之后几行\n\n> 这一部分叫做**请求标头**的参数部分，（**第一行**也是请求标头的一部分），通常有很多参数组成，每个参数都是 **键: 值**的形式。一行一个参数。\n\n- 3、主体内容，`GET`请求一般没有主体内容，但是`POST`一般有。\n\n- 4、**【回车换行符】**：即 `\\r\\n`。注意，主体内容与请求标头中间额外多一个空行，所以额外多一个回车换行符。\n\n下述是一个`POST`请求示例：（不完整）\n\n```yaml\nPOST /eportal/?c=ACSetting&a=Login HTTP/1.1\nHost: p.t.edu.cn:8032\nReferer: http://p.t.edu.cn/\nUser-Agent: Mozilla\n\nDDDDD=%2C0&upass=1&v6ip=\n```\n\n## 3、http响应\n\n格式如下：\n\n``` shell\n版本 状态码 短语【回车换行符】\n\n键: 值【回车换行符】\n.....(重复上一行)\n键: 值【回车换行符】\n\n【回车换行符】\n\n主体内容\n```\n\n&emsp;解释如下：\n\n- 版本：和请求一样，这里不额外解释\n\n- 状态码：此条响应的状态，一般如下：\n\n  > 1xx：表示通知消息，如还在处理上述请求，有些请求需要进行复杂的运算或处理，仍然需要等待\n  >\n  > 2xx：表示成功了，常见的是 202\n  >\n  > 3xx：表示重定向，需要跳转到另一个网址\n  >\n  > 4xx：表示客户端错误，如请求的报文无法解析，常见的 404\n  >\n  > 5xx：表示服务器的错误，如服务器没法工作了。\n\n- 短语：对上述状态码的解释\n\n  > 如**Accepted**是对**202**状态的解释。\n  >\n  > 如**Not Found**是对**404**状态的解释。\n\n- 主体内容，返回的响应内容在此。\n\n## 4、爬虫步骤\n\n&emsp;首先确定请求方法，然后根据请求方法寻找请求参数，然后使用代码进行请求。寻找请求方法和请求参数的过程叫做**抓包**，用代码进行请求的过程叫做**爬取内容**。请求方法常见的是POST和GET\n\n- GET请求\n\n  > 需要找到请求标头，请求字符串参数。\n  >\n  > 确定是否需要https，是否需要代理，是否需要cookie等\n\n- POST请求\n\n  > 需要找到请求标头，请求字符串参数，请求数据。\n  >\n  > 确定是否需要https，是否需要代理，是否需要cookie等。\n\n---\n\n# 浏览器抓包知识\n\n## 1、打开调试窗口\n\n&emsp;要么空白地方右键，然后点击属性。要么按F12。打开如下页面，点击网络（Network）就算成功。\n\n![image-20220611164445757](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111644891.png)\n\n&emsp;简要介绍了主体界面构成\n\n![image-20220611164720572](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111647668.png)\n\n- 1、主体html部分，一般用来索引到html部分的位置，注意![image-20220611164808155](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111648186.png)左边箭头，可以直接点击页面上的点，确定html元素代码位置。具体做法是，点一下这个箭头，然后点击页面上的元素（如输入框)，即可确定代码位置。\n\n- 2、抓包部分，最常用的部分，分析分析数据的地方。![image-20220611164955285](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111649303.png)这个**红色**的圆圈，表示停止抓包。红色右边**圆圈斜杠**表示请求当前抓到的内容。**全部 | Fetch/XHR JS CSS...**用来过滤抓取的内容，有时候只需要图片的包，就点击图片，有时候只想抓取提交的表单数据，就点击清单。如果内容不多，可以点击全部（ALL)来全部显示，没必要过滤。\n\n- 3、数据解析部分\n\n  > 标头：请求头部分的内容；\n  >\n  > 载荷：字符串参数和主体内容部分，GET请求只有字符串参数，POST请求会有请求表单数据。\n  >\n  > 预览和响应：因为一个请求对应于一个响应，这里都是只响应的内容；其中，预览代表是人性化的展示了相应内容，响应只是把原始数据给你展示。\n  >\n  > 查看源代码：查看原始数据，而不是人性化的给你显示数据。\n\n## 2、详解请求头参数\n\n```yaml\nAccept: text/css,*/*;q=0.1\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9\nConnection: keep-alive\nCookie: program=null\nHost: p.t.edu.cn\nReferer: http://p.t.edu.cn/\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.115 Safari/537.36\n```\n\n&emsp;这里只显示了几个重要的参数。\n\n- `Accept`：指的是，请求内容是什么。如这里是指请求类型为`text`的`css`数据，常见的还有`test/html`，一般直接复制到代码中即可，或者可以省略。（我指的**不是**复制这里的到代码，而是复制**自己抓包**时的内容到代码）\n\n- `Accept-Encoding`：编码格式，一般直接复制到代码，或者省略。\n\n- `Accept-Language`：请求的语言，一般省略或者复制到代码。\n\n- `Connection`：众所周知，`http`是建立在`TCP`之上的，如果发一次`http`请求就需要进行一次`TCP`三次握手连接与四次挥手释放，那么会给网络带来很大的开销，所以使用这个参数告知服务器是否要保持我的`TCP`连接性。\n\n- `Cookie`：\n\n  > &emsp;众所周知，`HTTP`是具有**单次连接性**，即任何两次连接之间**没有联系**，是相互独立的。\n  >\n  > &emsp;但是，我们常常登录某个网站之后可以自由的操作自己的账户，而不是每次操作账户都要进行提交账密操作，正是因为这个`Cookie`的作用，用来记录我们的连接性，使得两次连接之间有了关联。\n  >\n  > &emsp;通常省略，复制也没有，反正有时间限制的，而且每次可能会变。对于一般的代码库，应该有能够保持`Cookie`的工具。\n\n- `Host`：请求的主机，前面说了，URL中没有域名，那么域名就在这了，通常复制。很多网站都没有这一项。\n\n- `Referer`：\n\n  > &emsp;重中之重，注意，我没有打错字，之所以是错的原因，当初创立这个键值的时候，就是打错了的。所以一直沿用至今，就是这么离谱。为什么说这个重要呢？\n  >\n  > &emsp;因为，很多网站不希望你从某些地方跳转过来，所以会检验这个，有些网站需要你从指定网站跳转到他们网站，也是用这个来检验。比如我们学校的校园网登录系统，就是不希望你从其他地方跳转过来。这个是我们伪造的重点\n\n- `User-Agent`：\n\n  > &emsp;重中之重，在是浏览器和系统表示，很多时候，网站不希望我们用爬虫去爬取，所以通过这个检验请求是谁发来的。`Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.115 Safari/537.36`这个是`Windows`的`chrome`的标识，大家应该都是一样的。\n\n- 其他：具体网站具体分析\n\n- 至于这些请求头，谁给我们加到，一般是网站的`js`代码和浏览器的默认加。我们要做的，就是用代码伪造这些数据，把我们伪造成网站希望我们访问的方式来访问，听着有点绕。比如，把我们伪造成浏览器来抓取数据。\n\n---\n\n# Python实现简单抓包\n\n## 1、requests模块使用\n\n### 1）安装requests模块\n\n&emsp;打开你的命令行，键入如下命令\n\n``` shell\npip install requests\n```\n\n### 2）简单介绍\n\n&emsp;讲得非常浅显，用来下载图片或者自动登录还可以。\n\n``` python\nimport requests as rq  # 导入代码包\n\n# 我的理解是创立一个请求工具箱\n# 这个会维持Cookie，就像我上面所说的一样\n# 之后使用这个工具箱进行操作\ntool = rq.session()\n\n# 设置是否进行SSL验证\n# 也就是是否需要验证https\n# 这个得看自己决定，看看https是什么样的，有什么用\n# 当然，一般可以设置为False\nverify=False   \n\n# 请求主机，一般就是Host字段的值\n# 我这里是百度\nurl=\"https://baidu.com\" \nheaders={   # 设置请求头\n\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/\"\n\"537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\",\n\"Referer\": \"https://baidu.com\"\n}\nproxies={    # 设置代理\n\"http\": None,\n\"https\": None\n}\nparams={   # 设置字符串参数\n\n}\n\n# 设置请求表单，一般在post请求中常用到\n# 我请求百度的页面，用的是post请求\ndata={  # 设置请求表单\n\n}\n\n# 发送get请求，得到get响应\nresponseGet = tool.get(url=url, params=params, headers=headers, verify=verify, proxies=proxies)\n# 发送post请求，得到post响应\nresponsePost = tool.post(url=url, data=data, headers=headers, verify=verify, proxies=proxies)\n\n# 响应的主体内容一般都是二进制内容\n# 需要进行对应解析，这个好像需要设计到python知识\n# 我的评价是，不是这里的重点\n\n# 解析响应\n# 1、假如响应是文本数据，如html文本\nresponse = responseGet\nresponse.content # 这个是内容，是二进制编码\nresponse.content.decode(\"gbk\")  # 使用gbk解码，不加参数就是utf-8解码\n# 2、假如响应是图片数据\nwith open(\"1.png\", \"wb\") as f:\n\tf.write(response.content)   # 直接以二进制写入文件\n# 3、假如响应是表单数据\ndat = json.loads(response.content.decode())   # 返回的就是一个字典数据了\n```\n\n## 2、正则表达式\n\n&emsp;正则表达式有什么用呢？\n\n​\t假如，你需要下载一个页面中的所有图片，虽然我们![image-20220611164808155](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111727842.png)这里的箭头可以确定你要的图片，如果一张一张点，是不是有点太慢了，跟手动下载有什么区别。所以，我们需要用到正则表达式，用来匹配一定规则的字符串。因为我们知道，图片是渲染出来的，本质在html中仍然以字符串存在，如：`<img src=\"http://example.com/momo.png\" width=\"300px\">`。\n\n​\t如果我们雇佣一个人来找这些图片，你会告诉他如下知识：“\n\n&emsp;&emsp;按照使用`<img>`标签圈起来的，里面是以`src=`开头的后面那串字符串。而且，图片的连接是以`http://`或者`https://`并且以`.png`、`.jpeg`、`.git`或者`.jpg`结尾的那串字符串。请给我把所有的找出来。\n\n”。\n\n所以，正则表达式可以帮我们干这个事情。详细正则表达式请看[正则表达式教程](https://www.runoob.com/regexp/regexp-tutorial.html)\n\n``` python\nimport re   # 导入正则表达式包\nhtml = response.content # 这个是请求的html内容，也就是网页，本质是字符串\n\n# 我们需要在html中需要所有的图片链接\n# 我们得告诉我们的雇员一个寻找标准\nstandard = \"<img\\\\ssrc=\\\"(.*?)\\\".*?>\"\n# 显然，我们认为<img>标签里的就是图片，我们直接简化了我们的标准\n# 不需要管是不是http开头，是不是.png结尾的字符串\n\n# 简单解释：\\\\s这三个字符代表空格\n# .*?: 代表任意字符串，并且保证匹配的同时，字符串的长度越小越好\n\n# 进行匹配\ndst_list = re.findall( standard, html) # 返回列表\n```\n\n","source":"_posts/从http开始学习爬虫.md","raw":"---\ntitle: 从http开始学习爬虫\ntags: \n- 爬虫\n- http\nexcerpt: 从http开始学习爬虫知识，不限于什么语言，推荐用Python\ncover: 'https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111740272.png'\ncategories: \n  - 爬虫\nmathjax: true\ndate: 2022-06-11 15:36:20\n---\n\n# 目录\n\n- 前置知识\n\n  > - 1、URL\n  > - 2、http请求\n  > - 3、http响应\n  > - 4、爬虫步骤\n\n- 浏览器抓包知识\n\n  > - 1、打开调试窗口\n  > - 2、详解请求头参数\n\n- python实现简单抓包\n\n  > - 1、requests模块使用\n  > - 2、正则表达式\n\n-\n\n# 前置知识\n\n## 1、URL\n\n&emsp;URL是统一资源定位表示符号，当然，还有URI，URN的概念，这里就不细究这两个这三者区别，因为我们重点是讨论**URL**是什么，以及如何解析URL就行。\n\n&emsp;完整的URL如下，方括号表示可以省略的，圆括号表示不能省略，尖括号表示浏览器默认会加上去的。空格只是为了讲解，URL是**不能**有空格的。不仅如此，URL只能有**英文字母**，**阿拉伯数字**和某些**英文标点符号**组成。\n\n* < 协议 > :// ( **域名**或**IP** ) : < 端口 > / 【 [ 路径信息 ] / [ 文件名 ] ? [ 参数部分 ] # [ 锚部分 ] 】\n\n  > **< 协议 >**：指明何种协议，如`http`，`https`，`ftp`等等，这里只讨论`http`，写爬虫代码时，最好指定为`http`。\n  >\n  > **(域名或IP)**：域名地址或者IP地址都可以，不了解的可以搜索域名地址和IP地址是什么。大白话就是网址（不完全等同），如`baidu.com`。\n  >\n  > **<端口>**：端口地址，不了解的也搜索一下，http协议是80端口，通常省略。\n  >\n  > **[路径信息]**：请求的路径信息，即需要请求的资源在服务器的什么位置，通常抓包获得。\n  >\n  > **[文件名]**：请求的文件名是什么，通常抓包获得。\n  >\n  > **[参数部分]**：请求参数，通常抓包获得，一般叫做**字符串参数**，为了**区别于**请求数据中的参数。这里需要着重讲一下\n  >\n  > > 1）通常是以 **键=值** 的形式表示单个，用 `&`连接多个参数。\n  > >\n  > > 2）如：`quest=http&id=1234&pass=22`\n  > >\n  > > 3）上述就有三个参数（quest = http，id = 1234，pass = 22），两两直接用`&`连接起来\n  >\n  > **[锚部分]**：不重要，反正也是抓包获得。\n  >\n  > **特殊字符串表示**：前面说到URL只能由**英文字母**，**阿拉伯数字**和某些**英文标点符号**组成。那么不是这些的怎么表示呢？\n  >\n  > > 答：采用 **URL-ASCII** 编码格式进行编码。URL允许出现的字符有：`-`，`.`，`_`，`~`，注意都是英文字符。\n  > >\n  > > 保留的字符有：`! * ' ( ) ; : @ & = + $ , / ? # [ ]`这十八个，都是英文字符，如等号用来连接**键**与**值**。\n\n## 2、http请求\n\n格式如下：\n\n``` shell\n请求方式 URL 版本号【回车换行符】\n\n键: 值 【回车换行符】\n....(重复键：值)\n键: 值 【回车换行符】\n\n【回车换行符】\n\n主体内容\n```\n\n&emsp;上述内容太混乱了，没关系，一行一行来看\n\n1、第一行：\n\n> 请求方式：包括`POST`和`GET`，当然，还有其他，常用这两种。注意，都是大写。\n>\n> URL：上述解释中的URL，一般指包括**路径信息及其后面部分**，而没有前面部分。至于IP地址这些，要么在请求表头中用参数给出，要么直接不给，主要是**IP地址和端口不是应用层**的实体。\n>\n> 版本号：这个也不重要，现在应该是 `HTTP/1.1`。\n\n- 2、第二行及之后几行\n\n> 这一部分叫做**请求标头**的参数部分，（**第一行**也是请求标头的一部分），通常有很多参数组成，每个参数都是 **键: 值**的形式。一行一个参数。\n\n- 3、主体内容，`GET`请求一般没有主体内容，但是`POST`一般有。\n\n- 4、**【回车换行符】**：即 `\\r\\n`。注意，主体内容与请求标头中间额外多一个空行，所以额外多一个回车换行符。\n\n下述是一个`POST`请求示例：（不完整）\n\n```yaml\nPOST /eportal/?c=ACSetting&a=Login HTTP/1.1\nHost: p.t.edu.cn:8032\nReferer: http://p.t.edu.cn/\nUser-Agent: Mozilla\n\nDDDDD=%2C0&upass=1&v6ip=\n```\n\n## 3、http响应\n\n格式如下：\n\n``` shell\n版本 状态码 短语【回车换行符】\n\n键: 值【回车换行符】\n.....(重复上一行)\n键: 值【回车换行符】\n\n【回车换行符】\n\n主体内容\n```\n\n&emsp;解释如下：\n\n- 版本：和请求一样，这里不额外解释\n\n- 状态码：此条响应的状态，一般如下：\n\n  > 1xx：表示通知消息，如还在处理上述请求，有些请求需要进行复杂的运算或处理，仍然需要等待\n  >\n  > 2xx：表示成功了，常见的是 202\n  >\n  > 3xx：表示重定向，需要跳转到另一个网址\n  >\n  > 4xx：表示客户端错误，如请求的报文无法解析，常见的 404\n  >\n  > 5xx：表示服务器的错误，如服务器没法工作了。\n\n- 短语：对上述状态码的解释\n\n  > 如**Accepted**是对**202**状态的解释。\n  >\n  > 如**Not Found**是对**404**状态的解释。\n\n- 主体内容，返回的响应内容在此。\n\n## 4、爬虫步骤\n\n&emsp;首先确定请求方法，然后根据请求方法寻找请求参数，然后使用代码进行请求。寻找请求方法和请求参数的过程叫做**抓包**，用代码进行请求的过程叫做**爬取内容**。请求方法常见的是POST和GET\n\n- GET请求\n\n  > 需要找到请求标头，请求字符串参数。\n  >\n  > 确定是否需要https，是否需要代理，是否需要cookie等\n\n- POST请求\n\n  > 需要找到请求标头，请求字符串参数，请求数据。\n  >\n  > 确定是否需要https，是否需要代理，是否需要cookie等。\n\n---\n\n# 浏览器抓包知识\n\n## 1、打开调试窗口\n\n&emsp;要么空白地方右键，然后点击属性。要么按F12。打开如下页面，点击网络（Network）就算成功。\n\n![image-20220611164445757](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111644891.png)\n\n&emsp;简要介绍了主体界面构成\n\n![image-20220611164720572](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111647668.png)\n\n- 1、主体html部分，一般用来索引到html部分的位置，注意![image-20220611164808155](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111648186.png)左边箭头，可以直接点击页面上的点，确定html元素代码位置。具体做法是，点一下这个箭头，然后点击页面上的元素（如输入框)，即可确定代码位置。\n\n- 2、抓包部分，最常用的部分，分析分析数据的地方。![image-20220611164955285](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111649303.png)这个**红色**的圆圈，表示停止抓包。红色右边**圆圈斜杠**表示请求当前抓到的内容。**全部 | Fetch/XHR JS CSS...**用来过滤抓取的内容，有时候只需要图片的包，就点击图片，有时候只想抓取提交的表单数据，就点击清单。如果内容不多，可以点击全部（ALL)来全部显示，没必要过滤。\n\n- 3、数据解析部分\n\n  > 标头：请求头部分的内容；\n  >\n  > 载荷：字符串参数和主体内容部分，GET请求只有字符串参数，POST请求会有请求表单数据。\n  >\n  > 预览和响应：因为一个请求对应于一个响应，这里都是只响应的内容；其中，预览代表是人性化的展示了相应内容，响应只是把原始数据给你展示。\n  >\n  > 查看源代码：查看原始数据，而不是人性化的给你显示数据。\n\n## 2、详解请求头参数\n\n```yaml\nAccept: text/css,*/*;q=0.1\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9\nConnection: keep-alive\nCookie: program=null\nHost: p.t.edu.cn\nReferer: http://p.t.edu.cn/\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.115 Safari/537.36\n```\n\n&emsp;这里只显示了几个重要的参数。\n\n- `Accept`：指的是，请求内容是什么。如这里是指请求类型为`text`的`css`数据，常见的还有`test/html`，一般直接复制到代码中即可，或者可以省略。（我指的**不是**复制这里的到代码，而是复制**自己抓包**时的内容到代码）\n\n- `Accept-Encoding`：编码格式，一般直接复制到代码，或者省略。\n\n- `Accept-Language`：请求的语言，一般省略或者复制到代码。\n\n- `Connection`：众所周知，`http`是建立在`TCP`之上的，如果发一次`http`请求就需要进行一次`TCP`三次握手连接与四次挥手释放，那么会给网络带来很大的开销，所以使用这个参数告知服务器是否要保持我的`TCP`连接性。\n\n- `Cookie`：\n\n  > &emsp;众所周知，`HTTP`是具有**单次连接性**，即任何两次连接之间**没有联系**，是相互独立的。\n  >\n  > &emsp;但是，我们常常登录某个网站之后可以自由的操作自己的账户，而不是每次操作账户都要进行提交账密操作，正是因为这个`Cookie`的作用，用来记录我们的连接性，使得两次连接之间有了关联。\n  >\n  > &emsp;通常省略，复制也没有，反正有时间限制的，而且每次可能会变。对于一般的代码库，应该有能够保持`Cookie`的工具。\n\n- `Host`：请求的主机，前面说了，URL中没有域名，那么域名就在这了，通常复制。很多网站都没有这一项。\n\n- `Referer`：\n\n  > &emsp;重中之重，注意，我没有打错字，之所以是错的原因，当初创立这个键值的时候，就是打错了的。所以一直沿用至今，就是这么离谱。为什么说这个重要呢？\n  >\n  > &emsp;因为，很多网站不希望你从某些地方跳转过来，所以会检验这个，有些网站需要你从指定网站跳转到他们网站，也是用这个来检验。比如我们学校的校园网登录系统，就是不希望你从其他地方跳转过来。这个是我们伪造的重点\n\n- `User-Agent`：\n\n  > &emsp;重中之重，在是浏览器和系统表示，很多时候，网站不希望我们用爬虫去爬取，所以通过这个检验请求是谁发来的。`Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.115 Safari/537.36`这个是`Windows`的`chrome`的标识，大家应该都是一样的。\n\n- 其他：具体网站具体分析\n\n- 至于这些请求头，谁给我们加到，一般是网站的`js`代码和浏览器的默认加。我们要做的，就是用代码伪造这些数据，把我们伪造成网站希望我们访问的方式来访问，听着有点绕。比如，把我们伪造成浏览器来抓取数据。\n\n---\n\n# Python实现简单抓包\n\n## 1、requests模块使用\n\n### 1）安装requests模块\n\n&emsp;打开你的命令行，键入如下命令\n\n``` shell\npip install requests\n```\n\n### 2）简单介绍\n\n&emsp;讲得非常浅显，用来下载图片或者自动登录还可以。\n\n``` python\nimport requests as rq  # 导入代码包\n\n# 我的理解是创立一个请求工具箱\n# 这个会维持Cookie，就像我上面所说的一样\n# 之后使用这个工具箱进行操作\ntool = rq.session()\n\n# 设置是否进行SSL验证\n# 也就是是否需要验证https\n# 这个得看自己决定，看看https是什么样的，有什么用\n# 当然，一般可以设置为False\nverify=False   \n\n# 请求主机，一般就是Host字段的值\n# 我这里是百度\nurl=\"https://baidu.com\" \nheaders={   # 设置请求头\n\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/\"\n\"537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\",\n\"Referer\": \"https://baidu.com\"\n}\nproxies={    # 设置代理\n\"http\": None,\n\"https\": None\n}\nparams={   # 设置字符串参数\n\n}\n\n# 设置请求表单，一般在post请求中常用到\n# 我请求百度的页面，用的是post请求\ndata={  # 设置请求表单\n\n}\n\n# 发送get请求，得到get响应\nresponseGet = tool.get(url=url, params=params, headers=headers, verify=verify, proxies=proxies)\n# 发送post请求，得到post响应\nresponsePost = tool.post(url=url, data=data, headers=headers, verify=verify, proxies=proxies)\n\n# 响应的主体内容一般都是二进制内容\n# 需要进行对应解析，这个好像需要设计到python知识\n# 我的评价是，不是这里的重点\n\n# 解析响应\n# 1、假如响应是文本数据，如html文本\nresponse = responseGet\nresponse.content # 这个是内容，是二进制编码\nresponse.content.decode(\"gbk\")  # 使用gbk解码，不加参数就是utf-8解码\n# 2、假如响应是图片数据\nwith open(\"1.png\", \"wb\") as f:\n\tf.write(response.content)   # 直接以二进制写入文件\n# 3、假如响应是表单数据\ndat = json.loads(response.content.decode())   # 返回的就是一个字典数据了\n```\n\n## 2、正则表达式\n\n&emsp;正则表达式有什么用呢？\n\n​\t假如，你需要下载一个页面中的所有图片，虽然我们![image-20220611164808155](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111727842.png)这里的箭头可以确定你要的图片，如果一张一张点，是不是有点太慢了，跟手动下载有什么区别。所以，我们需要用到正则表达式，用来匹配一定规则的字符串。因为我们知道，图片是渲染出来的，本质在html中仍然以字符串存在，如：`<img src=\"http://example.com/momo.png\" width=\"300px\">`。\n\n​\t如果我们雇佣一个人来找这些图片，你会告诉他如下知识：“\n\n&emsp;&emsp;按照使用`<img>`标签圈起来的，里面是以`src=`开头的后面那串字符串。而且，图片的连接是以`http://`或者`https://`并且以`.png`、`.jpeg`、`.git`或者`.jpg`结尾的那串字符串。请给我把所有的找出来。\n\n”。\n\n所以，正则表达式可以帮我们干这个事情。详细正则表达式请看[正则表达式教程](https://www.runoob.com/regexp/regexp-tutorial.html)\n\n``` python\nimport re   # 导入正则表达式包\nhtml = response.content # 这个是请求的html内容，也就是网页，本质是字符串\n\n# 我们需要在html中需要所有的图片链接\n# 我们得告诉我们的雇员一个寻找标准\nstandard = \"<img\\\\ssrc=\\\"(.*?)\\\".*?>\"\n# 显然，我们认为<img>标签里的就是图片，我们直接简化了我们的标准\n# 不需要管是不是http开头，是不是.png结尾的字符串\n\n# 简单解释：\\\\s这三个字符代表空格\n# .*?: 代表任意字符串，并且保证匹配的同时，字符串的长度越小越好\n\n# 进行匹配\ndst_list = re.findall( standard, html) # 返回列表\n```\n\n","slug":"从http开始学习爬虫","published":1,"updated":"2022-10-12T12:08:16.285Z","_id":"cl49orocr0000tku5bxo19hf0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><p>前置知识</p>\n<blockquote>\n<ul>\n<li>1、URL</li>\n<li>2、http请求</li>\n<li>3、http响应</li>\n<li>4、爬虫步骤</li>\n</ul>\n</blockquote>\n</li>\n<li><p>浏览器抓包知识</p>\n<blockquote>\n<ul>\n<li>1、打开调试窗口</li>\n<li>2、详解请求头参数</li>\n</ul>\n</blockquote>\n</li>\n<li><p>python实现简单抓包</p>\n<blockquote>\n<ul>\n<li>1、requests模块使用</li>\n<li>2、正则表达式</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>-</p>\n<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><h2 id=\"1、URL\"><a href=\"#1、URL\" class=\"headerlink\" title=\"1、URL\"></a>1、URL</h2><p>&emsp;URL是统一资源定位表示符号，当然，还有URI，URN的概念，这里就不细究这两个这三者区别，因为我们重点是讨论<strong>URL</strong>是什么，以及如何解析URL就行。</p>\n<p>&emsp;完整的URL如下，方括号表示可以省略的，圆括号表示不能省略，尖括号表示浏览器默认会加上去的。空格只是为了讲解，URL是<strong>不能</strong>有空格的。不仅如此，URL只能有<strong>英文字母</strong>，<strong>阿拉伯数字</strong>和某些<strong>英文标点符号</strong>组成。</p>\n<ul>\n<li><p>&lt; 协议 &gt; :// ( <strong>域名</strong>或<strong>IP</strong> ) : &lt; 端口 &gt; / 【 [ 路径信息 ] / [ 文件名 ] ? [ 参数部分 ] # [ 锚部分 ] 】</p>\n<blockquote>\n<p><strong>&lt; 协议 &gt;</strong>：指明何种协议，如<code>http</code>，<code>https</code>，<code>ftp</code>等等，这里只讨论<code>http</code>，写爬虫代码时，最好指定为<code>http</code>。</p>\n<p><strong>(域名或IP)</strong>：域名地址或者IP地址都可以，不了解的可以搜索域名地址和IP地址是什么。大白话就是网址（不完全等同），如<code>baidu.com</code>。</p>\n<p><strong>&lt;端口&gt;</strong>：端口地址，不了解的也搜索一下，http协议是80端口，通常省略。</p>\n<p><strong>[路径信息]</strong>：请求的路径信息，即需要请求的资源在服务器的什么位置，通常抓包获得。</p>\n<p><strong>[文件名]</strong>：请求的文件名是什么，通常抓包获得。</p>\n<p><strong>[参数部分]</strong>：请求参数，通常抓包获得，一般叫做<strong>字符串参数</strong>，为了<strong>区别于</strong>请求数据中的参数。这里需要着重讲一下</p>\n<blockquote>\n<p>1）通常是以 <strong>键=值</strong> 的形式表示单个，用 <code>&amp;</code>连接多个参数。</p>\n<p>2）如：<code>quest=http&amp;id=1234&amp;pass=22</code></p>\n<p>3）上述就有三个参数（quest = http，id = 1234，pass = 22），两两直接用<code>&amp;</code>连接起来</p>\n</blockquote>\n<p><strong>[锚部分]</strong>：不重要，反正也是抓包获得。</p>\n<p><strong>特殊字符串表示</strong>：前面说到URL只能由<strong>英文字母</strong>，<strong>阿拉伯数字</strong>和某些<strong>英文标点符号</strong>组成。那么不是这些的怎么表示呢？</p>\n<blockquote>\n<p>答：采用 <strong>URL-ASCII</strong> 编码格式进行编码。URL允许出现的字符有：<code>-</code>，<code>.</code>，<code>_</code>，<code>~</code>，注意都是英文字符。</p>\n<p>保留的字符有：<code>! * &#39; ( ) ; : @ &amp; = + $ , / ? # [ ]</code>这十八个，都是英文字符，如等号用来连接<strong>键</strong>与<strong>值</strong>。</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"2、http请求\"><a href=\"#2、http请求\" class=\"headerlink\" title=\"2、http请求\"></a>2、http请求</h2><p>格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求方式 URL 版本号【回车换行符】</span><br><span class=\"line\"></span><br><span class=\"line\">键: 值 【回车换行符】</span><br><span class=\"line\">....(重复键：值)</span><br><span class=\"line\">键: 值 【回车换行符】</span><br><span class=\"line\"></span><br><span class=\"line\">【回车换行符】</span><br><span class=\"line\"></span><br><span class=\"line\">主体内容</span><br></pre></td></tr></table></figure>\n<p>&emsp;上述内容太混乱了，没关系，一行一行来看</p>\n<p>1、第一行：</p>\n<blockquote>\n<p>请求方式：包括<code>POST</code>和<code>GET</code>，当然，还有其他，常用这两种。注意，都是大写。</p>\n<p>URL：上述解释中的URL，一般指包括<strong>路径信息及其后面部分</strong>，而没有前面部分。至于IP地址这些，要么在请求表头中用参数给出，要么直接不给，主要是<strong>IP地址和端口不是应用层</strong>的实体。</p>\n<p>版本号：这个也不重要，现在应该是 <code>HTTP/1.1</code>。</p>\n</blockquote>\n<ul>\n<li>2、第二行及之后几行</li>\n</ul>\n<blockquote>\n<p>这一部分叫做<strong>请求标头</strong>的参数部分，（<strong>第一行</strong>也是请求标头的一部分），通常有很多参数组成，每个参数都是 <strong>键: 值</strong>的形式。一行一个参数。</p>\n</blockquote>\n<ul>\n<li><p>3、主体内容，<code>GET</code>请求一般没有主体内容，但是<code>POST</code>一般有。</p>\n</li>\n<li><p>4、<strong>【回车换行符】</strong>：即 <code>\\r\\n</code>。注意，主体内容与请求标头中间额外多一个空行，所以额外多一个回车换行符。</p>\n</li>\n</ul>\n<p>下述是一个<code>POST</code>请求示例：（不完整）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">POST</span> <span class=\"string\">/eportal/?c=ACSetting&amp;a=Login</span> <span class=\"string\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attr\">Host:</span> <span class=\"string\">p.t.edu.cn:8032</span></span><br><span class=\"line\"><span class=\"attr\">Referer:</span> <span class=\"string\">http://p.t.edu.cn/</span></span><br><span class=\"line\"><span class=\"attr\">User-Agent:</span> <span class=\"string\">Mozilla</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">DDDDD=%2C0&amp;upass=1&amp;v6ip=</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3、http响应\"><a href=\"#3、http响应\" class=\"headerlink\" title=\"3、http响应\"></a>3、http响应</h2><p>格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">版本 状态码 短语【回车换行符】</span><br><span class=\"line\"></span><br><span class=\"line\">键: 值【回车换行符】</span><br><span class=\"line\">.....(重复上一行)</span><br><span class=\"line\">键: 值【回车换行符】</span><br><span class=\"line\"></span><br><span class=\"line\">【回车换行符】</span><br><span class=\"line\"></span><br><span class=\"line\">主体内容</span><br></pre></td></tr></table></figure>\n<p>&emsp;解释如下：</p>\n<ul>\n<li><p>版本：和请求一样，这里不额外解释</p>\n</li>\n<li><p>状态码：此条响应的状态，一般如下：</p>\n<blockquote>\n<p>1xx：表示通知消息，如还在处理上述请求，有些请求需要进行复杂的运算或处理，仍然需要等待</p>\n<p>2xx：表示成功了，常见的是 202</p>\n<p>3xx：表示重定向，需要跳转到另一个网址</p>\n<p>4xx：表示客户端错误，如请求的报文无法解析，常见的 404</p>\n<p>5xx：表示服务器的错误，如服务器没法工作了。</p>\n</blockquote>\n</li>\n<li><p>短语：对上述状态码的解释</p>\n<blockquote>\n<p>如<strong>Accepted</strong>是对<strong>202</strong>状态的解释。</p>\n<p>如<strong>Not Found</strong>是对<strong>404</strong>状态的解释。</p>\n</blockquote>\n</li>\n<li><p>主体内容，返回的响应内容在此。</p>\n</li>\n</ul>\n<h2 id=\"4、爬虫步骤\"><a href=\"#4、爬虫步骤\" class=\"headerlink\" title=\"4、爬虫步骤\"></a>4、爬虫步骤</h2><p>&emsp;首先确定请求方法，然后根据请求方法寻找请求参数，然后使用代码进行请求。寻找请求方法和请求参数的过程叫做<strong>抓包</strong>，用代码进行请求的过程叫做<strong>爬取内容</strong>。请求方法常见的是POST和GET</p>\n<ul>\n<li><p>GET请求</p>\n<blockquote>\n<p>需要找到请求标头，请求字符串参数。</p>\n<p>确定是否需要https，是否需要代理，是否需要cookie等</p>\n</blockquote>\n</li>\n<li><p>POST请求</p>\n<blockquote>\n<p>需要找到请求标头，请求字符串参数，请求数据。</p>\n<p>确定是否需要https，是否需要代理，是否需要cookie等。</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h1 id=\"浏览器抓包知识\"><a href=\"#浏览器抓包知识\" class=\"headerlink\" title=\"浏览器抓包知识\"></a>浏览器抓包知识</h1><h2 id=\"1、打开调试窗口\"><a href=\"#1、打开调试窗口\" class=\"headerlink\" title=\"1、打开调试窗口\"></a>1、打开调试窗口</h2><p>&emsp;要么空白地方右键，然后点击属性。要么按F12。打开如下页面，点击网络（Network）就算成功。</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111644891.png\" alt=\"image-20220611164445757\"></p>\n<p>&emsp;简要介绍了主体界面构成</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111647668.png\" alt=\"image-20220611164720572\"></p>\n<ul>\n<li><p>1、主体html部分，一般用来索引到html部分的位置，注意<img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111648186.png\" alt=\"image-20220611164808155\">左边箭头，可以直接点击页面上的点，确定html元素代码位置。具体做法是，点一下这个箭头，然后点击页面上的元素（如输入框)，即可确定代码位置。</p>\n</li>\n<li><p>2、抓包部分，最常用的部分，分析分析数据的地方。<img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111649303.png\" alt=\"image-20220611164955285\">这个<strong>红色</strong>的圆圈，表示停止抓包。红色右边<strong>圆圈斜杠</strong>表示请求当前抓到的内容。<strong>全部 | Fetch/XHR JS CSS…</strong>用来过滤抓取的内容，有时候只需要图片的包，就点击图片，有时候只想抓取提交的表单数据，就点击清单。如果内容不多，可以点击全部（ALL)来全部显示，没必要过滤。</p>\n</li>\n<li><p>3、数据解析部分</p>\n<blockquote>\n<p>标头：请求头部分的内容；</p>\n<p>载荷：字符串参数和主体内容部分，GET请求只有字符串参数，POST请求会有请求表单数据。</p>\n<p>预览和响应：因为一个请求对应于一个响应，这里都是只响应的内容；其中，预览代表是人性化的展示了相应内容，响应只是把原始数据给你展示。</p>\n<p>查看源代码：查看原始数据，而不是人性化的给你显示数据。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"2、详解请求头参数\"><a href=\"#2、详解请求头参数\" class=\"headerlink\" title=\"2、详解请求头参数\"></a>2、详解请求头参数</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Accept:</span> <span class=\"string\">text/css,*/*;q=0.1</span></span><br><span class=\"line\"><span class=\"attr\">Accept-Encoding:</span> <span class=\"string\">gzip,</span> <span class=\"string\">deflate</span></span><br><span class=\"line\"><span class=\"attr\">Accept-Language:</span> <span class=\"string\">zh-CN,zh;q=0.9</span></span><br><span class=\"line\"><span class=\"attr\">Connection:</span> <span class=\"string\">keep-alive</span></span><br><span class=\"line\"><span class=\"attr\">Cookie:</span> <span class=\"string\">program=null</span></span><br><span class=\"line\"><span class=\"attr\">Host:</span> <span class=\"string\">p.t.edu.cn</span></span><br><span class=\"line\"><span class=\"attr\">Referer:</span> <span class=\"string\">http://p.t.edu.cn/</span></span><br><span class=\"line\"><span class=\"attr\">User-Agent:</span> <span class=\"string\">Mozilla/5.0</span> <span class=\"string\">(Windows</span> <span class=\"string\">NT</span> <span class=\"number\">10.0</span><span class=\"string\">;</span> <span class=\"string\">Win64;</span> <span class=\"string\">x64)</span> <span class=\"string\">AppleWebKit/537.36</span> <span class=\"string\">(KHTML,</span> <span class=\"string\">like</span> <span class=\"string\">Gecko)</span> <span class=\"string\">Chrome/102.0.5005.115</span> <span class=\"string\">Safari/537.36</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;这里只显示了几个重要的参数。</p>\n<ul>\n<li><p><code>Accept</code>：指的是，请求内容是什么。如这里是指请求类型为<code>text</code>的<code>css</code>数据，常见的还有<code>test/html</code>，一般直接复制到代码中即可，或者可以省略。（我指的<strong>不是</strong>复制这里的到代码，而是复制<strong>自己抓包</strong>时的内容到代码）</p>\n</li>\n<li><p><code>Accept-Encoding</code>：编码格式，一般直接复制到代码，或者省略。</p>\n</li>\n<li><p><code>Accept-Language</code>：请求的语言，一般省略或者复制到代码。</p>\n</li>\n<li><p><code>Connection</code>：众所周知，<code>http</code>是建立在<code>TCP</code>之上的，如果发一次<code>http</code>请求就需要进行一次<code>TCP</code>三次握手连接与四次挥手释放，那么会给网络带来很大的开销，所以使用这个参数告知服务器是否要保持我的<code>TCP</code>连接性。</p>\n</li>\n<li><p><code>Cookie</code>：</p>\n<blockquote>\n<p>&emsp;众所周知，<code>HTTP</code>是具有<strong>单次连接性</strong>，即任何两次连接之间<strong>没有联系</strong>，是相互独立的。</p>\n<p>&emsp;但是，我们常常登录某个网站之后可以自由的操作自己的账户，而不是每次操作账户都要进行提交账密操作，正是因为这个<code>Cookie</code>的作用，用来记录我们的连接性，使得两次连接之间有了关联。</p>\n<p>&emsp;通常省略，复制也没有，反正有时间限制的，而且每次可能会变。对于一般的代码库，应该有能够保持<code>Cookie</code>的工具。</p>\n</blockquote>\n</li>\n<li><p><code>Host</code>：请求的主机，前面说了，URL中没有域名，那么域名就在这了，通常复制。很多网站都没有这一项。</p>\n</li>\n<li><p><code>Referer</code>：</p>\n<blockquote>\n<p>&emsp;重中之重，注意，我没有打错字，之所以是错的原因，当初创立这个键值的时候，就是打错了的。所以一直沿用至今，就是这么离谱。为什么说这个重要呢？</p>\n<p>&emsp;因为，很多网站不希望你从某些地方跳转过来，所以会检验这个，有些网站需要你从指定网站跳转到他们网站，也是用这个来检验。比如我们学校的校园网登录系统，就是不希望你从其他地方跳转过来。这个是我们伪造的重点</p>\n</blockquote>\n</li>\n<li><p><code>User-Agent</code>：</p>\n<blockquote>\n<p>&emsp;重中之重，在是浏览器和系统表示，很多时候，网站不希望我们用爬虫去爬取，所以通过这个检验请求是谁发来的。<code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.115 Safari/537.36</code>这个是<code>Windows</code>的<code>chrome</code>的标识，大家应该都是一样的。</p>\n</blockquote>\n</li>\n<li><p>其他：具体网站具体分析</p>\n</li>\n<li><p>至于这些请求头，谁给我们加到，一般是网站的<code>js</code>代码和浏览器的默认加。我们要做的，就是用代码伪造这些数据，把我们伪造成网站希望我们访问的方式来访问，听着有点绕。比如，把我们伪造成浏览器来抓取数据。</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"Python实现简单抓包\"><a href=\"#Python实现简单抓包\" class=\"headerlink\" title=\"Python实现简单抓包\"></a>Python实现简单抓包</h1><h2 id=\"1、requests模块使用\"><a href=\"#1、requests模块使用\" class=\"headerlink\" title=\"1、requests模块使用\"></a>1、requests模块使用</h2><h3 id=\"1）安装requests模块\"><a href=\"#1）安装requests模块\" class=\"headerlink\" title=\"1）安装requests模块\"></a>1）安装requests模块</h3><p>&emsp;打开你的命令行，键入如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n<h3 id=\"2）简单介绍\"><a href=\"#2）简单介绍\" class=\"headerlink\" title=\"2）简单介绍\"></a>2）简单介绍</h3><p>&emsp;讲得非常浅显，用来下载图片或者自动登录还可以。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> rq  <span class=\"comment\"># 导入代码包</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我的理解是创立一个请求工具箱</span></span><br><span class=\"line\"><span class=\"comment\"># 这个会维持Cookie，就像我上面所说的一样</span></span><br><span class=\"line\"><span class=\"comment\"># 之后使用这个工具箱进行操作</span></span><br><span class=\"line\">tool = rq.session()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置是否进行SSL验证</span></span><br><span class=\"line\"><span class=\"comment\"># 也就是是否需要验证https</span></span><br><span class=\"line\"><span class=\"comment\"># 这个得看自己决定，看看https是什么样的，有什么用</span></span><br><span class=\"line\"><span class=\"comment\"># 当然，一般可以设置为False</span></span><br><span class=\"line\">verify=<span class=\"literal\">False</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求主机，一般就是Host字段的值</span></span><br><span class=\"line\"><span class=\"comment\"># 我这里是百度</span></span><br><span class=\"line\">url=<span class=\"string\">&quot;https://baidu.com&quot;</span> </span><br><span class=\"line\">headers=&#123;   <span class=\"comment\"># 设置请求头</span></span><br><span class=\"line\"><span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;Referer&quot;</span>: <span class=\"string\">&quot;https://baidu.com&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">proxies=&#123;    <span class=\"comment\"># 设置代理</span></span><br><span class=\"line\"><span class=\"string\">&quot;http&quot;</span>: <span class=\"literal\">None</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;https&quot;</span>: <span class=\"literal\">None</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">params=&#123;   <span class=\"comment\"># 设置字符串参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置请求表单，一般在post请求中常用到</span></span><br><span class=\"line\"><span class=\"comment\"># 我请求百度的页面，用的是post请求</span></span><br><span class=\"line\">data=&#123;  <span class=\"comment\"># 设置请求表单</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送get请求，得到get响应</span></span><br><span class=\"line\">responseGet = tool.get(url=url, params=params, headers=headers, verify=verify, proxies=proxies)</span><br><span class=\"line\"><span class=\"comment\"># 发送post请求，得到post响应</span></span><br><span class=\"line\">responsePost = tool.post(url=url, data=data, headers=headers, verify=verify, proxies=proxies)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应的主体内容一般都是二进制内容</span></span><br><span class=\"line\"><span class=\"comment\"># 需要进行对应解析，这个好像需要设计到python知识</span></span><br><span class=\"line\"><span class=\"comment\"># 我的评价是，不是这里的重点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解析响应</span></span><br><span class=\"line\"><span class=\"comment\"># 1、假如响应是文本数据，如html文本</span></span><br><span class=\"line\">response = responseGet</span><br><span class=\"line\">response.content <span class=\"comment\"># 这个是内容，是二进制编码</span></span><br><span class=\"line\">response.content.decode(<span class=\"string\">&quot;gbk&quot;</span>)  <span class=\"comment\"># 使用gbk解码，不加参数就是utf-8解码</span></span><br><span class=\"line\"><span class=\"comment\"># 2、假如响应是图片数据</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;1.png&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(response.content)   <span class=\"comment\"># 直接以二进制写入文件</span></span><br><span class=\"line\"><span class=\"comment\"># 3、假如响应是表单数据</span></span><br><span class=\"line\">dat = json.loads(response.content.decode())   <span class=\"comment\"># 返回的就是一个字典数据了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2、正则表达式\"><a href=\"#2、正则表达式\" class=\"headerlink\" title=\"2、正则表达式\"></a>2、正则表达式</h2><p>&emsp;正则表达式有什么用呢？</p>\n<p>​    假如，你需要下载一个页面中的所有图片，虽然我们<img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111727842.png\" alt=\"image-20220611164808155\">这里的箭头可以确定你要的图片，如果一张一张点，是不是有点太慢了，跟手动下载有什么区别。所以，我们需要用到正则表达式，用来匹配一定规则的字符串。因为我们知道，图片是渲染出来的，本质在html中仍然以字符串存在，如：<code>&lt;img src=&quot;http://example.com/momo.png&quot; width=&quot;300px&quot;&gt;</code>。</p>\n<p>​    如果我们雇佣一个人来找这些图片，你会告诉他如下知识：“</p>\n<p>&emsp;&emsp;按照使用<code>&lt;img&gt;</code>标签圈起来的，里面是以<code>src=</code>开头的后面那串字符串。而且，图片的连接是以<code>http://</code>或者<code>https://</code>并且以<code>.png</code>、<code>.jpeg</code>、<code>.git</code>或者<code>.jpg</code>结尾的那串字符串。请给我把所有的找出来。</p>\n<p>”。</p>\n<p>所以，正则表达式可以帮我们干这个事情。详细正则表达式请看<a href=\"https://www.runoob.com/regexp/regexp-tutorial.html\">正则表达式教程</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re   <span class=\"comment\"># 导入正则表达式包</span></span><br><span class=\"line\">html = response.content <span class=\"comment\"># 这个是请求的html内容，也就是网页，本质是字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我们需要在html中需要所有的图片链接</span></span><br><span class=\"line\"><span class=\"comment\"># 我们得告诉我们的雇员一个寻找标准</span></span><br><span class=\"line\">standard = <span class=\"string\">&quot;&lt;img\\\\ssrc=\\&quot;(.*?)\\&quot;.*?&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 显然，我们认为&lt;img&gt;标签里的就是图片，我们直接简化了我们的标准</span></span><br><span class=\"line\"><span class=\"comment\"># 不需要管是不是http开头，是不是.png结尾的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 简单解释：\\\\s这三个字符代表空格</span></span><br><span class=\"line\"><span class=\"comment\"># .*?: 代表任意字符串，并且保证匹配的同时，字符串的长度越小越好</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进行匹配</span></span><br><span class=\"line\">dst_list = re.findall( standard, html) <span class=\"comment\"># 返回列表</span></span><br></pre></td></tr></table></figure>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><p>前置知识</p>\n<blockquote>\n<ul>\n<li>1、URL</li>\n<li>2、http请求</li>\n<li>3、http响应</li>\n<li>4、爬虫步骤</li>\n</ul>\n</blockquote>\n</li>\n<li><p>浏览器抓包知识</p>\n<blockquote>\n<ul>\n<li>1、打开调试窗口</li>\n<li>2、详解请求头参数</li>\n</ul>\n</blockquote>\n</li>\n<li><p>python实现简单抓包</p>\n<blockquote>\n<ul>\n<li>1、requests模块使用</li>\n<li>2、正则表达式</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>-</p>\n<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><h2 id=\"1、URL\"><a href=\"#1、URL\" class=\"headerlink\" title=\"1、URL\"></a>1、URL</h2><p>&emsp;URL是统一资源定位表示符号，当然，还有URI，URN的概念，这里就不细究这两个这三者区别，因为我们重点是讨论<strong>URL</strong>是什么，以及如何解析URL就行。</p>\n<p>&emsp;完整的URL如下，方括号表示可以省略的，圆括号表示不能省略，尖括号表示浏览器默认会加上去的。空格只是为了讲解，URL是<strong>不能</strong>有空格的。不仅如此，URL只能有<strong>英文字母</strong>，<strong>阿拉伯数字</strong>和某些<strong>英文标点符号</strong>组成。</p>\n<ul>\n<li><p>&lt; 协议 &gt; :// ( <strong>域名</strong>或<strong>IP</strong> ) : &lt; 端口 &gt; / 【 [ 路径信息 ] / [ 文件名 ] ? [ 参数部分 ] # [ 锚部分 ] 】</p>\n<blockquote>\n<p><strong>&lt; 协议 &gt;</strong>：指明何种协议，如<code>http</code>，<code>https</code>，<code>ftp</code>等等，这里只讨论<code>http</code>，写爬虫代码时，最好指定为<code>http</code>。</p>\n<p><strong>(域名或IP)</strong>：域名地址或者IP地址都可以，不了解的可以搜索域名地址和IP地址是什么。大白话就是网址（不完全等同），如<code>baidu.com</code>。</p>\n<p><strong>&lt;端口&gt;</strong>：端口地址，不了解的也搜索一下，http协议是80端口，通常省略。</p>\n<p><strong>[路径信息]</strong>：请求的路径信息，即需要请求的资源在服务器的什么位置，通常抓包获得。</p>\n<p><strong>[文件名]</strong>：请求的文件名是什么，通常抓包获得。</p>\n<p><strong>[参数部分]</strong>：请求参数，通常抓包获得，一般叫做<strong>字符串参数</strong>，为了<strong>区别于</strong>请求数据中的参数。这里需要着重讲一下</p>\n<blockquote>\n<p>1）通常是以 <strong>键=值</strong> 的形式表示单个，用 <code>&amp;</code>连接多个参数。</p>\n<p>2）如：<code>quest=http&amp;id=1234&amp;pass=22</code></p>\n<p>3）上述就有三个参数（quest = http，id = 1234，pass = 22），两两直接用<code>&amp;</code>连接起来</p>\n</blockquote>\n<p><strong>[锚部分]</strong>：不重要，反正也是抓包获得。</p>\n<p><strong>特殊字符串表示</strong>：前面说到URL只能由<strong>英文字母</strong>，<strong>阿拉伯数字</strong>和某些<strong>英文标点符号</strong>组成。那么不是这些的怎么表示呢？</p>\n<blockquote>\n<p>答：采用 <strong>URL-ASCII</strong> 编码格式进行编码。URL允许出现的字符有：<code>-</code>，<code>.</code>，<code>_</code>，<code>~</code>，注意都是英文字符。</p>\n<p>保留的字符有：<code>! * &#39; ( ) ; : @ &amp; = + $ , / ? # [ ]</code>这十八个，都是英文字符，如等号用来连接<strong>键</strong>与<strong>值</strong>。</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"2、http请求\"><a href=\"#2、http请求\" class=\"headerlink\" title=\"2、http请求\"></a>2、http请求</h2><p>格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求方式 URL 版本号【回车换行符】</span><br><span class=\"line\"></span><br><span class=\"line\">键: 值 【回车换行符】</span><br><span class=\"line\">....(重复键：值)</span><br><span class=\"line\">键: 值 【回车换行符】</span><br><span class=\"line\"></span><br><span class=\"line\">【回车换行符】</span><br><span class=\"line\"></span><br><span class=\"line\">主体内容</span><br></pre></td></tr></table></figure>\n<p>&emsp;上述内容太混乱了，没关系，一行一行来看</p>\n<p>1、第一行：</p>\n<blockquote>\n<p>请求方式：包括<code>POST</code>和<code>GET</code>，当然，还有其他，常用这两种。注意，都是大写。</p>\n<p>URL：上述解释中的URL，一般指包括<strong>路径信息及其后面部分</strong>，而没有前面部分。至于IP地址这些，要么在请求表头中用参数给出，要么直接不给，主要是<strong>IP地址和端口不是应用层</strong>的实体。</p>\n<p>版本号：这个也不重要，现在应该是 <code>HTTP/1.1</code>。</p>\n</blockquote>\n<ul>\n<li>2、第二行及之后几行</li>\n</ul>\n<blockquote>\n<p>这一部分叫做<strong>请求标头</strong>的参数部分，（<strong>第一行</strong>也是请求标头的一部分），通常有很多参数组成，每个参数都是 <strong>键: 值</strong>的形式。一行一个参数。</p>\n</blockquote>\n<ul>\n<li><p>3、主体内容，<code>GET</code>请求一般没有主体内容，但是<code>POST</code>一般有。</p>\n</li>\n<li><p>4、<strong>【回车换行符】</strong>：即 <code>\\r\\n</code>。注意，主体内容与请求标头中间额外多一个空行，所以额外多一个回车换行符。</p>\n</li>\n</ul>\n<p>下述是一个<code>POST</code>请求示例：（不完整）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">POST</span> <span class=\"string\">/eportal/?c=ACSetting&amp;a=Login</span> <span class=\"string\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attr\">Host:</span> <span class=\"string\">p.t.edu.cn:8032</span></span><br><span class=\"line\"><span class=\"attr\">Referer:</span> <span class=\"string\">http://p.t.edu.cn/</span></span><br><span class=\"line\"><span class=\"attr\">User-Agent:</span> <span class=\"string\">Mozilla</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">DDDDD=%2C0&amp;upass=1&amp;v6ip=</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3、http响应\"><a href=\"#3、http响应\" class=\"headerlink\" title=\"3、http响应\"></a>3、http响应</h2><p>格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">版本 状态码 短语【回车换行符】</span><br><span class=\"line\"></span><br><span class=\"line\">键: 值【回车换行符】</span><br><span class=\"line\">.....(重复上一行)</span><br><span class=\"line\">键: 值【回车换行符】</span><br><span class=\"line\"></span><br><span class=\"line\">【回车换行符】</span><br><span class=\"line\"></span><br><span class=\"line\">主体内容</span><br></pre></td></tr></table></figure>\n<p>&emsp;解释如下：</p>\n<ul>\n<li><p>版本：和请求一样，这里不额外解释</p>\n</li>\n<li><p>状态码：此条响应的状态，一般如下：</p>\n<blockquote>\n<p>1xx：表示通知消息，如还在处理上述请求，有些请求需要进行复杂的运算或处理，仍然需要等待</p>\n<p>2xx：表示成功了，常见的是 202</p>\n<p>3xx：表示重定向，需要跳转到另一个网址</p>\n<p>4xx：表示客户端错误，如请求的报文无法解析，常见的 404</p>\n<p>5xx：表示服务器的错误，如服务器没法工作了。</p>\n</blockquote>\n</li>\n<li><p>短语：对上述状态码的解释</p>\n<blockquote>\n<p>如<strong>Accepted</strong>是对<strong>202</strong>状态的解释。</p>\n<p>如<strong>Not Found</strong>是对<strong>404</strong>状态的解释。</p>\n</blockquote>\n</li>\n<li><p>主体内容，返回的响应内容在此。</p>\n</li>\n</ul>\n<h2 id=\"4、爬虫步骤\"><a href=\"#4、爬虫步骤\" class=\"headerlink\" title=\"4、爬虫步骤\"></a>4、爬虫步骤</h2><p>&emsp;首先确定请求方法，然后根据请求方法寻找请求参数，然后使用代码进行请求。寻找请求方法和请求参数的过程叫做<strong>抓包</strong>，用代码进行请求的过程叫做<strong>爬取内容</strong>。请求方法常见的是POST和GET</p>\n<ul>\n<li><p>GET请求</p>\n<blockquote>\n<p>需要找到请求标头，请求字符串参数。</p>\n<p>确定是否需要https，是否需要代理，是否需要cookie等</p>\n</blockquote>\n</li>\n<li><p>POST请求</p>\n<blockquote>\n<p>需要找到请求标头，请求字符串参数，请求数据。</p>\n<p>确定是否需要https，是否需要代理，是否需要cookie等。</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h1 id=\"浏览器抓包知识\"><a href=\"#浏览器抓包知识\" class=\"headerlink\" title=\"浏览器抓包知识\"></a>浏览器抓包知识</h1><h2 id=\"1、打开调试窗口\"><a href=\"#1、打开调试窗口\" class=\"headerlink\" title=\"1、打开调试窗口\"></a>1、打开调试窗口</h2><p>&emsp;要么空白地方右键，然后点击属性。要么按F12。打开如下页面，点击网络（Network）就算成功。</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111644891.png\" alt=\"image-20220611164445757\"></p>\n<p>&emsp;简要介绍了主体界面构成</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111647668.png\" alt=\"image-20220611164720572\"></p>\n<ul>\n<li><p>1、主体html部分，一般用来索引到html部分的位置，注意<img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111648186.png\" alt=\"image-20220611164808155\">左边箭头，可以直接点击页面上的点，确定html元素代码位置。具体做法是，点一下这个箭头，然后点击页面上的元素（如输入框)，即可确定代码位置。</p>\n</li>\n<li><p>2、抓包部分，最常用的部分，分析分析数据的地方。<img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111649303.png\" alt=\"image-20220611164955285\">这个<strong>红色</strong>的圆圈，表示停止抓包。红色右边<strong>圆圈斜杠</strong>表示请求当前抓到的内容。<strong>全部 | Fetch/XHR JS CSS…</strong>用来过滤抓取的内容，有时候只需要图片的包，就点击图片，有时候只想抓取提交的表单数据，就点击清单。如果内容不多，可以点击全部（ALL)来全部显示，没必要过滤。</p>\n</li>\n<li><p>3、数据解析部分</p>\n<blockquote>\n<p>标头：请求头部分的内容；</p>\n<p>载荷：字符串参数和主体内容部分，GET请求只有字符串参数，POST请求会有请求表单数据。</p>\n<p>预览和响应：因为一个请求对应于一个响应，这里都是只响应的内容；其中，预览代表是人性化的展示了相应内容，响应只是把原始数据给你展示。</p>\n<p>查看源代码：查看原始数据，而不是人性化的给你显示数据。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"2、详解请求头参数\"><a href=\"#2、详解请求头参数\" class=\"headerlink\" title=\"2、详解请求头参数\"></a>2、详解请求头参数</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Accept:</span> <span class=\"string\">text/css,*/*;q=0.1</span></span><br><span class=\"line\"><span class=\"attr\">Accept-Encoding:</span> <span class=\"string\">gzip,</span> <span class=\"string\">deflate</span></span><br><span class=\"line\"><span class=\"attr\">Accept-Language:</span> <span class=\"string\">zh-CN,zh;q=0.9</span></span><br><span class=\"line\"><span class=\"attr\">Connection:</span> <span class=\"string\">keep-alive</span></span><br><span class=\"line\"><span class=\"attr\">Cookie:</span> <span class=\"string\">program=null</span></span><br><span class=\"line\"><span class=\"attr\">Host:</span> <span class=\"string\">p.t.edu.cn</span></span><br><span class=\"line\"><span class=\"attr\">Referer:</span> <span class=\"string\">http://p.t.edu.cn/</span></span><br><span class=\"line\"><span class=\"attr\">User-Agent:</span> <span class=\"string\">Mozilla/5.0</span> <span class=\"string\">(Windows</span> <span class=\"string\">NT</span> <span class=\"number\">10.0</span><span class=\"string\">;</span> <span class=\"string\">Win64;</span> <span class=\"string\">x64)</span> <span class=\"string\">AppleWebKit/537.36</span> <span class=\"string\">(KHTML,</span> <span class=\"string\">like</span> <span class=\"string\">Gecko)</span> <span class=\"string\">Chrome/102.0.5005.115</span> <span class=\"string\">Safari/537.36</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;这里只显示了几个重要的参数。</p>\n<ul>\n<li><p><code>Accept</code>：指的是，请求内容是什么。如这里是指请求类型为<code>text</code>的<code>css</code>数据，常见的还有<code>test/html</code>，一般直接复制到代码中即可，或者可以省略。（我指的<strong>不是</strong>复制这里的到代码，而是复制<strong>自己抓包</strong>时的内容到代码）</p>\n</li>\n<li><p><code>Accept-Encoding</code>：编码格式，一般直接复制到代码，或者省略。</p>\n</li>\n<li><p><code>Accept-Language</code>：请求的语言，一般省略或者复制到代码。</p>\n</li>\n<li><p><code>Connection</code>：众所周知，<code>http</code>是建立在<code>TCP</code>之上的，如果发一次<code>http</code>请求就需要进行一次<code>TCP</code>三次握手连接与四次挥手释放，那么会给网络带来很大的开销，所以使用这个参数告知服务器是否要保持我的<code>TCP</code>连接性。</p>\n</li>\n<li><p><code>Cookie</code>：</p>\n<blockquote>\n<p>&emsp;众所周知，<code>HTTP</code>是具有<strong>单次连接性</strong>，即任何两次连接之间<strong>没有联系</strong>，是相互独立的。</p>\n<p>&emsp;但是，我们常常登录某个网站之后可以自由的操作自己的账户，而不是每次操作账户都要进行提交账密操作，正是因为这个<code>Cookie</code>的作用，用来记录我们的连接性，使得两次连接之间有了关联。</p>\n<p>&emsp;通常省略，复制也没有，反正有时间限制的，而且每次可能会变。对于一般的代码库，应该有能够保持<code>Cookie</code>的工具。</p>\n</blockquote>\n</li>\n<li><p><code>Host</code>：请求的主机，前面说了，URL中没有域名，那么域名就在这了，通常复制。很多网站都没有这一项。</p>\n</li>\n<li><p><code>Referer</code>：</p>\n<blockquote>\n<p>&emsp;重中之重，注意，我没有打错字，之所以是错的原因，当初创立这个键值的时候，就是打错了的。所以一直沿用至今，就是这么离谱。为什么说这个重要呢？</p>\n<p>&emsp;因为，很多网站不希望你从某些地方跳转过来，所以会检验这个，有些网站需要你从指定网站跳转到他们网站，也是用这个来检验。比如我们学校的校园网登录系统，就是不希望你从其他地方跳转过来。这个是我们伪造的重点</p>\n</blockquote>\n</li>\n<li><p><code>User-Agent</code>：</p>\n<blockquote>\n<p>&emsp;重中之重，在是浏览器和系统表示，很多时候，网站不希望我们用爬虫去爬取，所以通过这个检验请求是谁发来的。<code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.115 Safari/537.36</code>这个是<code>Windows</code>的<code>chrome</code>的标识，大家应该都是一样的。</p>\n</blockquote>\n</li>\n<li><p>其他：具体网站具体分析</p>\n</li>\n<li><p>至于这些请求头，谁给我们加到，一般是网站的<code>js</code>代码和浏览器的默认加。我们要做的，就是用代码伪造这些数据，把我们伪造成网站希望我们访问的方式来访问，听着有点绕。比如，把我们伪造成浏览器来抓取数据。</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"Python实现简单抓包\"><a href=\"#Python实现简单抓包\" class=\"headerlink\" title=\"Python实现简单抓包\"></a>Python实现简单抓包</h1><h2 id=\"1、requests模块使用\"><a href=\"#1、requests模块使用\" class=\"headerlink\" title=\"1、requests模块使用\"></a>1、requests模块使用</h2><h3 id=\"1）安装requests模块\"><a href=\"#1）安装requests模块\" class=\"headerlink\" title=\"1）安装requests模块\"></a>1）安装requests模块</h3><p>&emsp;打开你的命令行，键入如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n<h3 id=\"2）简单介绍\"><a href=\"#2）简单介绍\" class=\"headerlink\" title=\"2）简单介绍\"></a>2）简单介绍</h3><p>&emsp;讲得非常浅显，用来下载图片或者自动登录还可以。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> rq  <span class=\"comment\"># 导入代码包</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我的理解是创立一个请求工具箱</span></span><br><span class=\"line\"><span class=\"comment\"># 这个会维持Cookie，就像我上面所说的一样</span></span><br><span class=\"line\"><span class=\"comment\"># 之后使用这个工具箱进行操作</span></span><br><span class=\"line\">tool = rq.session()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置是否进行SSL验证</span></span><br><span class=\"line\"><span class=\"comment\"># 也就是是否需要验证https</span></span><br><span class=\"line\"><span class=\"comment\"># 这个得看自己决定，看看https是什么样的，有什么用</span></span><br><span class=\"line\"><span class=\"comment\"># 当然，一般可以设置为False</span></span><br><span class=\"line\">verify=<span class=\"literal\">False</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求主机，一般就是Host字段的值</span></span><br><span class=\"line\"><span class=\"comment\"># 我这里是百度</span></span><br><span class=\"line\">url=<span class=\"string\">&quot;https://baidu.com&quot;</span> </span><br><span class=\"line\">headers=&#123;   <span class=\"comment\"># 设置请求头</span></span><br><span class=\"line\"><span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;Referer&quot;</span>: <span class=\"string\">&quot;https://baidu.com&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">proxies=&#123;    <span class=\"comment\"># 设置代理</span></span><br><span class=\"line\"><span class=\"string\">&quot;http&quot;</span>: <span class=\"literal\">None</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;https&quot;</span>: <span class=\"literal\">None</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">params=&#123;   <span class=\"comment\"># 设置字符串参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置请求表单，一般在post请求中常用到</span></span><br><span class=\"line\"><span class=\"comment\"># 我请求百度的页面，用的是post请求</span></span><br><span class=\"line\">data=&#123;  <span class=\"comment\"># 设置请求表单</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送get请求，得到get响应</span></span><br><span class=\"line\">responseGet = tool.get(url=url, params=params, headers=headers, verify=verify, proxies=proxies)</span><br><span class=\"line\"><span class=\"comment\"># 发送post请求，得到post响应</span></span><br><span class=\"line\">responsePost = tool.post(url=url, data=data, headers=headers, verify=verify, proxies=proxies)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应的主体内容一般都是二进制内容</span></span><br><span class=\"line\"><span class=\"comment\"># 需要进行对应解析，这个好像需要设计到python知识</span></span><br><span class=\"line\"><span class=\"comment\"># 我的评价是，不是这里的重点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解析响应</span></span><br><span class=\"line\"><span class=\"comment\"># 1、假如响应是文本数据，如html文本</span></span><br><span class=\"line\">response = responseGet</span><br><span class=\"line\">response.content <span class=\"comment\"># 这个是内容，是二进制编码</span></span><br><span class=\"line\">response.content.decode(<span class=\"string\">&quot;gbk&quot;</span>)  <span class=\"comment\"># 使用gbk解码，不加参数就是utf-8解码</span></span><br><span class=\"line\"><span class=\"comment\"># 2、假如响应是图片数据</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;1.png&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(response.content)   <span class=\"comment\"># 直接以二进制写入文件</span></span><br><span class=\"line\"><span class=\"comment\"># 3、假如响应是表单数据</span></span><br><span class=\"line\">dat = json.loads(response.content.decode())   <span class=\"comment\"># 返回的就是一个字典数据了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2、正则表达式\"><a href=\"#2、正则表达式\" class=\"headerlink\" title=\"2、正则表达式\"></a>2、正则表达式</h2><p>&emsp;正则表达式有什么用呢？</p>\n<p>​    假如，你需要下载一个页面中的所有图片，虽然我们<img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206111727842.png\" alt=\"image-20220611164808155\">这里的箭头可以确定你要的图片，如果一张一张点，是不是有点太慢了，跟手动下载有什么区别。所以，我们需要用到正则表达式，用来匹配一定规则的字符串。因为我们知道，图片是渲染出来的，本质在html中仍然以字符串存在，如：<code>&lt;img src=&quot;http://example.com/momo.png&quot; width=&quot;300px&quot;&gt;</code>。</p>\n<p>​    如果我们雇佣一个人来找这些图片，你会告诉他如下知识：“</p>\n<p>&emsp;&emsp;按照使用<code>&lt;img&gt;</code>标签圈起来的，里面是以<code>src=</code>开头的后面那串字符串。而且，图片的连接是以<code>http://</code>或者<code>https://</code>并且以<code>.png</code>、<code>.jpeg</code>、<code>.git</code>或者<code>.jpg</code>结尾的那串字符串。请给我把所有的找出来。</p>\n<p>”。</p>\n<p>所以，正则表达式可以帮我们干这个事情。详细正则表达式请看<a href=\"https://www.runoob.com/regexp/regexp-tutorial.html\">正则表达式教程</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re   <span class=\"comment\"># 导入正则表达式包</span></span><br><span class=\"line\">html = response.content <span class=\"comment\"># 这个是请求的html内容，也就是网页，本质是字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我们需要在html中需要所有的图片链接</span></span><br><span class=\"line\"><span class=\"comment\"># 我们得告诉我们的雇员一个寻找标准</span></span><br><span class=\"line\">standard = <span class=\"string\">&quot;&lt;img\\\\ssrc=\\&quot;(.*?)\\&quot;.*?&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 显然，我们认为&lt;img&gt;标签里的就是图片，我们直接简化了我们的标准</span></span><br><span class=\"line\"><span class=\"comment\"># 不需要管是不是http开头，是不是.png结尾的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 简单解释：\\\\s这三个字符代表空格</span></span><br><span class=\"line\"><span class=\"comment\"># .*?: 代表任意字符串，并且保证匹配的同时，字符串的长度越小越好</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进行匹配</span></span><br><span class=\"line\">dst_list = re.findall( standard, html) <span class=\"comment\"># 返回列表</span></span><br></pre></td></tr></table></figure>\n"},{"title":"计算机网络技术之物理层","excerpt":"计算机网络物理层的学习","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206150956452.png","mathjax":true,"date":"2022-06-15T01:46:55.000Z","_content":"\n## 一、基础知识\n\n### 1、物理层主要任务\n\n&emsp;物理层主要描述下列功能：\n\n- 机械特性：接线器的形状、尺寸、引脚数目和排列、固定、锁定装置等。\n- 电气特性：指明接口电缆的各条线上出现的电压范围\n- 功能特性：指明某条线上出现的各种可能事件的出现顺序\n- 过程特性：指明对于不同功能的各种可能事件的出现顺序\n\n\n### 2、数据通信的基础知识\n\n&emsp;数据通信系统由**源系统**、**传输系统**和**目的系统**组成。\n\n数据通信的流程：输入信息 &rarr; 源点 &rarr; 发送器 &rarr; 传输系统 &rarr; 接收器 &rarr; 终点。\n\n&emsp;通信的目的是传送**消息**，**数据**是运送消息的实体，**信号**则是数据的电气或电磁的表现。\n\n- **模拟信号**（或连续信号）：代表消息的参数取值是连续的。\n\n- **数字信号**（或离散信号）：代表消息的参数取值是离散的。\n\n- **编码**：将**信号**转换为**数字信号**，又称为**基带调制**。\n\n  > 包括采样、量化和编码三个步骤，其中采样的频率应该大于最大频率的两倍，即$$f_{采样} \\geq 2 \\times f_{max}$$\n  >\n  > 如**脉冲编码调制（PCM）**\n\n- **调制**：将**信号**转换为**模拟信号**，又称为**带通调制**。\n\n  > 如**频分复用（FDM）**就是使用了调制。\n\n### 3、编码与调制方式\n\n##### 编码方式：\n\n![image-20220615102754864](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206151027134.png)\n\n- **不归零调制（RZ）**：高电平代表1，低电平代表0；\n- **归零制（NRZ）**：正脉冲代表1，负脉冲代表0；这里与王道考研有点区别，还是以谢书为主。\n- **曼彻斯特编码（Manchester Encoding）**：位中心向上跳变代表0，向下跳变代表1；以太网常采用此编码。\n- **差分曼彻斯特编码**：位中心都有跳变。位开始有跳变代表0，位开始没有跳变代表1；\n- **反向非归零编码（NRZI）**（补充）：信号翻转代表0，信号不变代表1。\n- **4B/5B编码**（补充）：将数据流每4位为一组，加上一位变成5位。5位码对应32种可能，其中16种作为原来的4位码的16种可能，另外16种作为控制码或保留。\n\n&emsp;从**信号波形**来看，曼彻斯特编码产生的信号频率比不归零编码高。从**自同步能力**来看，不归零编码不能提取时钟频率，而曼彻斯特编码具有自同步能力。\n\n##### 带通调制方式：\n\n![image-20220615103526967](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206151035015.png)\n\n- **调幅（AM）**：载波的**振幅**随基带数字信号变化。\n- **调频（FM）**：载波的**频率**随基带数字信号变化。\n- **调相（PM）**：载波的**相位**随基带数字信号变化。\n\n&emsp;为了达到更高的信息传输速率，必须采用技术上更为复杂的多元振幅相位混合调制方法，如**正交振幅调制QAM（Quadrature Amplitude Modulation）**。\n\n### 4、信道的分类\n\n&emsp;从双方信息交互的方式来看，可以有以下三种基本方式：\n\n- **单向通信**：**单工信道**，只能从一个方向发送给另一个方向而不能反着发的交互。如广播电台和有线电视等。\n- **双向交替通信**：**半双工通信**，通信双方都能收发，但是不能同时收发。\n- **双向同时通信**：**全双工通信**，通信双方都能同时收发。\n\n## 二、奈奎斯特定理与香农定理\n\n### 理想信道（无噪声）\n\n&emsp;奈奎斯特提出奈式准则：$$C = 2Wlog_2V$$，其中：\n\n- `C`：代表传输速率，单位`b/s`。\n- `W`：代表带宽，单位`Hz`。带宽这里指的是信道宽度了，其他地方一般指最高传输速率（b/s）。\n- `V`：多少种不同的状态。$$log_2V$$代表了多少比特。\n- 码元与比特关系：比特才是真正的数据信息，码元只是传输时候的数据。最后，一码元需要转化成若干比特才行的。一码元如果只有两种状态，那么只能携带两种信息。一码元如果有16种状态，那么就能携带4比特信息。所以，$$比特=log_2码元$$。\n\n&emsp;因此奈奎斯特传输定理是限制**码元传输速率**，也就是最高能传输2W的码元信息，然后要想提高比特信息。那么就需要提高每一个码元的状态。如使用0~7V电平代表一个码元（一个码元对应8种状态），那么就能传输3bit数据。\n\n### 有高斯白噪声\n\n&emsp;香农定理提出高斯白噪声干扰下传输速率。$$ C = Wlog_2(1+\\frac{S}{N}) $$，其中：\n\n- `C`：传输速率，bit/s\n- `W`：带宽，Hz\n- `S/N`：信噪比，信号的平均功率与噪声的平均功率比值。可以直接用数字表示，无单位。也可以用dB表示。\n- 信噪比：$$1dB = 10log_{10}(\\frac{S}{N})$$，如S/N=10，就是代表信噪比10dB，S/N=1000时，代表信噪比为30dB。\n- 常用数值：$$log_2(1+1000)=9.967 \\approx 10 \\quad log_2(1+10)=3.459 \\approx 3.5$$\n\n&emsp;香农定理限制的直接是**比特传输速率**。\n\n### 总结\n\n- 奈奎斯特定理：无噪声，码元传输速率\n- 香农定理：有高斯白噪声，数据传输速率\n\n&emsp;奈奎斯特定理和香农定理，一个说明了码元的最大传输速率（2W），一个说明了比特最大传输速率，两者结合，说明一码元能够携带的比特数是有最大值的。以及采样定理可知，如果告知采样频率，那么带宽W = f/2，f为采样频率。\n\n&emsp;**题目中**，应该将两个定理的理论最大值都算出来，取较小的。\n\n&emsp;**波特率**指码元传输速率，**比特率**指比特传输速率或数据传输速率。$$比特率(b/s) = 波特率(Baud) \\times log_2V$$\n\n## 三、信道复用技术\n\n#### 复用与分用\n\n&emsp;**复用**是指，多路数据同时使用一个信道来传输。**分用**是指，将一个信道中的数据分开成多路。\n\n#### 频分复用（FDM）\n\n&emsp;将一条信道上带宽（频带宽度）分成多个宽带，每个宽带都能给一路数据进行传输，所以同时就能给多路数据进行传输。如果加入更多的用户，那么只能增加频带宽度，但是每个用户的速度是不变的。\n\n&emsp;采用的**频分多址接入（FDMA）**技术达到频分复用。\n\n#### 时分复用（TDM）\n\n&emsp;时间划分成一个一个的TDM帧，每个TMD帧划分成多个时间段，每个时间段为一路数据进行传输。增加用户，只能将每个用户占用的时间间隙分割更小，所以越多的用户会导致传输速度变慢。\n\n&emsp;采用**时分多址接入（TDMA）**技术达到时分复用。\n\n&emsp;**统计时分复用（STDM）**是一种改进的时分复用技术，明显提高利用率。普通的时分复用中，如果当前用户分配到时间间隙，但是该用户没有信息要发送，那么信道就是空的。而统计时分复用便是，当前用户没有数据需要发送，那么讲会顺延给下一个发送数据的用户，以此类推，大大提高利用率。\n\n&emsp;下图便是造成时间段浪费的示意图：\n\n![image-20220615140444466](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206151404573.png)\n\n&emsp;统计时分复用能够更好地利用信道：\n\n![image-20220615140550744](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206151405780.png)\n\n#### 波分复用（WDM）\n\n&emsp;就是光的频分复用，只在光纤通信中用的复用技术。不用波长的光代表不同用户的数据。\n\n#### 码分复用（CDM）\n\n&emsp;采用**码分多址（CDMA）**技术，用户使用同样的频带进行通信，但是每个用户挑选不同的码型，因此不会互相干扰。通信的频率应该变成了原来的m倍，因为原来1单位的数据，已经被扩充到m单位了。\n\n**过程讲解**：\n\n- 在一个比特时间再划分m个短的间隔，称为**码片**（chip），通常为64或128\n- 每个站被指定不同的`mbit`码片序列，且每个站码片序列必须**正交**（规格化内积为0）\n- 如果需要发送比特**1**，就发送自己的**码片序列**；如果发送比特**0**，就发送**码片序列的反码**。\n- 接收方，只需要用**发送方的码片序列**对接收到的**信息**进行规格化内积即可。\n\n**为什么不会冲突讲解**：（规格化内积：$$S \\cdot T = \\frac{1}{m}\\sum_{i=1}^{m} S_iT_i $$）\n\n&emsp;将0记为-1，1记为+1。我们已知，S与自己的规格化内积为1，与T的规格化内积为0。S的反码记为S'，T的反码记为T'。显然有，S与S'的规格化内积为-1，S'与T的规格化内积为0。对T也一样。\n\n&emsp;假设S发送的数据为$$S_x$$，T发送的数据为$$T_x$$。两者数据之和为：$$D = S_x + T_x$$。用S的码片序列和D进行规格化内积有：$$D\\cdot T = \\frac{1}{m} \\sum_{i=1}^{m} S_i(S_{xi}+T_{xi}) = \\frac{1}{m} \\sum_{i=1}^{m} (S_iS_{xi}+S_iT_{xi}) = \\frac{1}{m} \\sum_{i=1}^{m} S_iS_{xi}$$，因为$$S_x \\cdot T_x = 0$$，所以，最后算出来要么是+1，要么是-1，要么是0。代表着，要么发送了1，要么发送了0，要么$$S_x$$为空，即没有发送数据。对于T也是一样的，也能够从总共的信息中提取出T的信息。\n\n## 四、通信技术\n\n&emsp;这个在第一章也有提到，这里着重讲解下\n\n### 1、电路交换\n\n&emsp;双方通信之前，需要先建立一条专用（双方独占）的物理通信路径，该路径途径许多节点，这些节点都被双方占用（第三方无法使用）。连接建立、数据传输和连接释放。\n\n- 优点：\n\n  > 时延小、有序传输、没有冲突、适用范围广，实时性强、控制简单\n\n- 缺点：\n\n  > 建立连接时间长、使用率低、灵活性差、难以规格化\n\n### 2、报文交换\n\n&emsp;数据交换单位是报文，将整个报文保存，待收取成功后再将整个报文转发。\n\n- 优点\n\n  > 无须连接、动态分配线路、提高线路可靠性、提高线路利用率、提供多目标服务、有序到达、有差错检验和控制\n\n- 缺点\n\n  > 利用率比分组交换低，差错开销比分组交换高，重发数据量大。\n\n### 3、分组交换\n\n&emsp;同报文交换，不过分组交换是将报文拆分成几段，依次保存。\n\n- 优点\n\n  > 无连接时延、线路利用率最高、简化了存储管理、加速传输、减少了出错概率和重发数量\n\n- 缺点\n\n  > 存在传输时延，分组容易失序或丢失，额外信息量大\n\n### 4、数据报\n\n&emsp;分组交换的一种方式。将多个分组转发到通信子网中，每个分组选择的路由不一定相同，达到时间不一定相同。不建立连接。每个分组都需要有源地址和目的地址。\n\n### 5、虚电路\n\n&emsp;分组交换的一种方式。先建立一条逻辑通路，面向连接。同一虚电路的数据，路由都想同。分组有序到达。包括永久性和临时性连接。仅仅在建立连接时需要源地址和目的地址，之后只需要虚电路号。\n\n## 五、物理层物理设备\n\n#### 1、传输介质\n\n&emsp;传输媒体又称为传输介质或传输媒介。\n\n- 1、双绞线：分为屏蔽双绞线（STP）和非屏蔽双绞线（UTP）。价格便宜\n\n- 2、同轴电缆：\n\n- 3、光缆：\n\n  > 1）传输损耗小，中继距离长，远距离传输经济实惠\n  >\n  > 2）抗干扰强，体积小，重量轻\n\n- 4、无线电波：如WLAN等，信道容量大\n\n- 5、微波、红外线和激光：使用卫星，激光器，红外发射接收器等。\n\n如10GBase-T，10Gb/s传输速率的双绞线。\n\n#### 2、设备\n\n##### （1）中继器\n\n&emsp;中继器就是长远距离传送中的，会发生信号损失，需要中继器进行放大再传，相当于透明传输，仅作用电气特性。中继器没有存储转发功能，所以不能连接两个物理层不同协议或不同传输速率的网段，更不会进行差错控制等手段。中继器放大的是数字信号（不是简单的振幅放大，是将快辨别不清楚的数字信号重放），放大器放大的是模拟型号。在10BASE5的以太网规范中，最多只能由4个中继器。\n\n##### （2）集线器\n\n&emsp;是多端口中继器，多根线路接在同一个集线器上面，一个端口发送过来的数据，会转发到除**输入端口外**的其他所有端口。所有，集线器不能隔离冲突域，也不能隔离广播域。因此，如果一个带宽为10Mb/s的集线器连接了8台计算机，那么每台计算机的带框为10Mb/s / 8 = 1.25Mb/s。是星形的拓扑结构。\n","source":"_posts/计算机网络技术之物理层.md","raw":"---\ntitle: 计算机网络技术之物理层\ntags: \n- 计算机网络技术\n- 物理层\n- 考研\nexcerpt: 计算机网络物理层的学习\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202206150956452.png\ncategories:\n- 计算机网络技术\nmathjax: true\ndate: 2022-06-15 09:46:55\n---\n\n## 一、基础知识\n\n### 1、物理层主要任务\n\n&emsp;物理层主要描述下列功能：\n\n- 机械特性：接线器的形状、尺寸、引脚数目和排列、固定、锁定装置等。\n- 电气特性：指明接口电缆的各条线上出现的电压范围\n- 功能特性：指明某条线上出现的各种可能事件的出现顺序\n- 过程特性：指明对于不同功能的各种可能事件的出现顺序\n\n\n### 2、数据通信的基础知识\n\n&emsp;数据通信系统由**源系统**、**传输系统**和**目的系统**组成。\n\n数据通信的流程：输入信息 &rarr; 源点 &rarr; 发送器 &rarr; 传输系统 &rarr; 接收器 &rarr; 终点。\n\n&emsp;通信的目的是传送**消息**，**数据**是运送消息的实体，**信号**则是数据的电气或电磁的表现。\n\n- **模拟信号**（或连续信号）：代表消息的参数取值是连续的。\n\n- **数字信号**（或离散信号）：代表消息的参数取值是离散的。\n\n- **编码**：将**信号**转换为**数字信号**，又称为**基带调制**。\n\n  > 包括采样、量化和编码三个步骤，其中采样的频率应该大于最大频率的两倍，即$$f_{采样} \\geq 2 \\times f_{max}$$\n  >\n  > 如**脉冲编码调制（PCM）**\n\n- **调制**：将**信号**转换为**模拟信号**，又称为**带通调制**。\n\n  > 如**频分复用（FDM）**就是使用了调制。\n\n### 3、编码与调制方式\n\n##### 编码方式：\n\n![image-20220615102754864](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206151027134.png)\n\n- **不归零调制（RZ）**：高电平代表1，低电平代表0；\n- **归零制（NRZ）**：正脉冲代表1，负脉冲代表0；这里与王道考研有点区别，还是以谢书为主。\n- **曼彻斯特编码（Manchester Encoding）**：位中心向上跳变代表0，向下跳变代表1；以太网常采用此编码。\n- **差分曼彻斯特编码**：位中心都有跳变。位开始有跳变代表0，位开始没有跳变代表1；\n- **反向非归零编码（NRZI）**（补充）：信号翻转代表0，信号不变代表1。\n- **4B/5B编码**（补充）：将数据流每4位为一组，加上一位变成5位。5位码对应32种可能，其中16种作为原来的4位码的16种可能，另外16种作为控制码或保留。\n\n&emsp;从**信号波形**来看，曼彻斯特编码产生的信号频率比不归零编码高。从**自同步能力**来看，不归零编码不能提取时钟频率，而曼彻斯特编码具有自同步能力。\n\n##### 带通调制方式：\n\n![image-20220615103526967](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206151035015.png)\n\n- **调幅（AM）**：载波的**振幅**随基带数字信号变化。\n- **调频（FM）**：载波的**频率**随基带数字信号变化。\n- **调相（PM）**：载波的**相位**随基带数字信号变化。\n\n&emsp;为了达到更高的信息传输速率，必须采用技术上更为复杂的多元振幅相位混合调制方法，如**正交振幅调制QAM（Quadrature Amplitude Modulation）**。\n\n### 4、信道的分类\n\n&emsp;从双方信息交互的方式来看，可以有以下三种基本方式：\n\n- **单向通信**：**单工信道**，只能从一个方向发送给另一个方向而不能反着发的交互。如广播电台和有线电视等。\n- **双向交替通信**：**半双工通信**，通信双方都能收发，但是不能同时收发。\n- **双向同时通信**：**全双工通信**，通信双方都能同时收发。\n\n## 二、奈奎斯特定理与香农定理\n\n### 理想信道（无噪声）\n\n&emsp;奈奎斯特提出奈式准则：$$C = 2Wlog_2V$$，其中：\n\n- `C`：代表传输速率，单位`b/s`。\n- `W`：代表带宽，单位`Hz`。带宽这里指的是信道宽度了，其他地方一般指最高传输速率（b/s）。\n- `V`：多少种不同的状态。$$log_2V$$代表了多少比特。\n- 码元与比特关系：比特才是真正的数据信息，码元只是传输时候的数据。最后，一码元需要转化成若干比特才行的。一码元如果只有两种状态，那么只能携带两种信息。一码元如果有16种状态，那么就能携带4比特信息。所以，$$比特=log_2码元$$。\n\n&emsp;因此奈奎斯特传输定理是限制**码元传输速率**，也就是最高能传输2W的码元信息，然后要想提高比特信息。那么就需要提高每一个码元的状态。如使用0~7V电平代表一个码元（一个码元对应8种状态），那么就能传输3bit数据。\n\n### 有高斯白噪声\n\n&emsp;香农定理提出高斯白噪声干扰下传输速率。$$ C = Wlog_2(1+\\frac{S}{N}) $$，其中：\n\n- `C`：传输速率，bit/s\n- `W`：带宽，Hz\n- `S/N`：信噪比，信号的平均功率与噪声的平均功率比值。可以直接用数字表示，无单位。也可以用dB表示。\n- 信噪比：$$1dB = 10log_{10}(\\frac{S}{N})$$，如S/N=10，就是代表信噪比10dB，S/N=1000时，代表信噪比为30dB。\n- 常用数值：$$log_2(1+1000)=9.967 \\approx 10 \\quad log_2(1+10)=3.459 \\approx 3.5$$\n\n&emsp;香农定理限制的直接是**比特传输速率**。\n\n### 总结\n\n- 奈奎斯特定理：无噪声，码元传输速率\n- 香农定理：有高斯白噪声，数据传输速率\n\n&emsp;奈奎斯特定理和香农定理，一个说明了码元的最大传输速率（2W），一个说明了比特最大传输速率，两者结合，说明一码元能够携带的比特数是有最大值的。以及采样定理可知，如果告知采样频率，那么带宽W = f/2，f为采样频率。\n\n&emsp;**题目中**，应该将两个定理的理论最大值都算出来，取较小的。\n\n&emsp;**波特率**指码元传输速率，**比特率**指比特传输速率或数据传输速率。$$比特率(b/s) = 波特率(Baud) \\times log_2V$$\n\n## 三、信道复用技术\n\n#### 复用与分用\n\n&emsp;**复用**是指，多路数据同时使用一个信道来传输。**分用**是指，将一个信道中的数据分开成多路。\n\n#### 频分复用（FDM）\n\n&emsp;将一条信道上带宽（频带宽度）分成多个宽带，每个宽带都能给一路数据进行传输，所以同时就能给多路数据进行传输。如果加入更多的用户，那么只能增加频带宽度，但是每个用户的速度是不变的。\n\n&emsp;采用的**频分多址接入（FDMA）**技术达到频分复用。\n\n#### 时分复用（TDM）\n\n&emsp;时间划分成一个一个的TDM帧，每个TMD帧划分成多个时间段，每个时间段为一路数据进行传输。增加用户，只能将每个用户占用的时间间隙分割更小，所以越多的用户会导致传输速度变慢。\n\n&emsp;采用**时分多址接入（TDMA）**技术达到时分复用。\n\n&emsp;**统计时分复用（STDM）**是一种改进的时分复用技术，明显提高利用率。普通的时分复用中，如果当前用户分配到时间间隙，但是该用户没有信息要发送，那么信道就是空的。而统计时分复用便是，当前用户没有数据需要发送，那么讲会顺延给下一个发送数据的用户，以此类推，大大提高利用率。\n\n&emsp;下图便是造成时间段浪费的示意图：\n\n![image-20220615140444466](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206151404573.png)\n\n&emsp;统计时分复用能够更好地利用信道：\n\n![image-20220615140550744](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206151405780.png)\n\n#### 波分复用（WDM）\n\n&emsp;就是光的频分复用，只在光纤通信中用的复用技术。不用波长的光代表不同用户的数据。\n\n#### 码分复用（CDM）\n\n&emsp;采用**码分多址（CDMA）**技术，用户使用同样的频带进行通信，但是每个用户挑选不同的码型，因此不会互相干扰。通信的频率应该变成了原来的m倍，因为原来1单位的数据，已经被扩充到m单位了。\n\n**过程讲解**：\n\n- 在一个比特时间再划分m个短的间隔，称为**码片**（chip），通常为64或128\n- 每个站被指定不同的`mbit`码片序列，且每个站码片序列必须**正交**（规格化内积为0）\n- 如果需要发送比特**1**，就发送自己的**码片序列**；如果发送比特**0**，就发送**码片序列的反码**。\n- 接收方，只需要用**发送方的码片序列**对接收到的**信息**进行规格化内积即可。\n\n**为什么不会冲突讲解**：（规格化内积：$$S \\cdot T = \\frac{1}{m}\\sum_{i=1}^{m} S_iT_i $$）\n\n&emsp;将0记为-1，1记为+1。我们已知，S与自己的规格化内积为1，与T的规格化内积为0。S的反码记为S'，T的反码记为T'。显然有，S与S'的规格化内积为-1，S'与T的规格化内积为0。对T也一样。\n\n&emsp;假设S发送的数据为$$S_x$$，T发送的数据为$$T_x$$。两者数据之和为：$$D = S_x + T_x$$。用S的码片序列和D进行规格化内积有：$$D\\cdot T = \\frac{1}{m} \\sum_{i=1}^{m} S_i(S_{xi}+T_{xi}) = \\frac{1}{m} \\sum_{i=1}^{m} (S_iS_{xi}+S_iT_{xi}) = \\frac{1}{m} \\sum_{i=1}^{m} S_iS_{xi}$$，因为$$S_x \\cdot T_x = 0$$，所以，最后算出来要么是+1，要么是-1，要么是0。代表着，要么发送了1，要么发送了0，要么$$S_x$$为空，即没有发送数据。对于T也是一样的，也能够从总共的信息中提取出T的信息。\n\n## 四、通信技术\n\n&emsp;这个在第一章也有提到，这里着重讲解下\n\n### 1、电路交换\n\n&emsp;双方通信之前，需要先建立一条专用（双方独占）的物理通信路径，该路径途径许多节点，这些节点都被双方占用（第三方无法使用）。连接建立、数据传输和连接释放。\n\n- 优点：\n\n  > 时延小、有序传输、没有冲突、适用范围广，实时性强、控制简单\n\n- 缺点：\n\n  > 建立连接时间长、使用率低、灵活性差、难以规格化\n\n### 2、报文交换\n\n&emsp;数据交换单位是报文，将整个报文保存，待收取成功后再将整个报文转发。\n\n- 优点\n\n  > 无须连接、动态分配线路、提高线路可靠性、提高线路利用率、提供多目标服务、有序到达、有差错检验和控制\n\n- 缺点\n\n  > 利用率比分组交换低，差错开销比分组交换高，重发数据量大。\n\n### 3、分组交换\n\n&emsp;同报文交换，不过分组交换是将报文拆分成几段，依次保存。\n\n- 优点\n\n  > 无连接时延、线路利用率最高、简化了存储管理、加速传输、减少了出错概率和重发数量\n\n- 缺点\n\n  > 存在传输时延，分组容易失序或丢失，额外信息量大\n\n### 4、数据报\n\n&emsp;分组交换的一种方式。将多个分组转发到通信子网中，每个分组选择的路由不一定相同，达到时间不一定相同。不建立连接。每个分组都需要有源地址和目的地址。\n\n### 5、虚电路\n\n&emsp;分组交换的一种方式。先建立一条逻辑通路，面向连接。同一虚电路的数据，路由都想同。分组有序到达。包括永久性和临时性连接。仅仅在建立连接时需要源地址和目的地址，之后只需要虚电路号。\n\n## 五、物理层物理设备\n\n#### 1、传输介质\n\n&emsp;传输媒体又称为传输介质或传输媒介。\n\n- 1、双绞线：分为屏蔽双绞线（STP）和非屏蔽双绞线（UTP）。价格便宜\n\n- 2、同轴电缆：\n\n- 3、光缆：\n\n  > 1）传输损耗小，中继距离长，远距离传输经济实惠\n  >\n  > 2）抗干扰强，体积小，重量轻\n\n- 4、无线电波：如WLAN等，信道容量大\n\n- 5、微波、红外线和激光：使用卫星，激光器，红外发射接收器等。\n\n如10GBase-T，10Gb/s传输速率的双绞线。\n\n#### 2、设备\n\n##### （1）中继器\n\n&emsp;中继器就是长远距离传送中的，会发生信号损失，需要中继器进行放大再传，相当于透明传输，仅作用电气特性。中继器没有存储转发功能，所以不能连接两个物理层不同协议或不同传输速率的网段，更不会进行差错控制等手段。中继器放大的是数字信号（不是简单的振幅放大，是将快辨别不清楚的数字信号重放），放大器放大的是模拟型号。在10BASE5的以太网规范中，最多只能由4个中继器。\n\n##### （2）集线器\n\n&emsp;是多端口中继器，多根线路接在同一个集线器上面，一个端口发送过来的数据，会转发到除**输入端口外**的其他所有端口。所有，集线器不能隔离冲突域，也不能隔离广播域。因此，如果一个带宽为10Mb/s的集线器连接了8台计算机，那么每台计算机的带框为10Mb/s / 8 = 1.25Mb/s。是星形的拓扑结构。\n","slug":"计算机网络技术之物理层","published":1,"updated":"2022-07-07T03:03:33.830Z","_id":"cl4f7zv5f0000b4u5g4lne5w7","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、基础知识\"><a href=\"#一、基础知识\" class=\"headerlink\" title=\"一、基础知识\"></a>一、基础知识</h2><h3 id=\"1、物理层主要任务\"><a href=\"#1、物理层主要任务\" class=\"headerlink\" title=\"1、物理层主要任务\"></a>1、物理层主要任务</h3><p>&emsp;物理层主要描述下列功能：</p>\n<ul>\n<li>机械特性：接线器的形状、尺寸、引脚数目和排列、固定、锁定装置等。</li>\n<li>电气特性：指明接口电缆的各条线上出现的电压范围</li>\n<li>功能特性：指明某条线上出现的各种可能事件的出现顺序</li>\n<li>过程特性：指明对于不同功能的各种可能事件的出现顺序</li>\n</ul>\n<h3 id=\"2、数据通信的基础知识\"><a href=\"#2、数据通信的基础知识\" class=\"headerlink\" title=\"2、数据通信的基础知识\"></a>2、数据通信的基础知识</h3><p>&emsp;数据通信系统由<strong>源系统</strong>、<strong>传输系统</strong>和<strong>目的系统</strong>组成。</p>\n<p>数据通信的流程：输入信息 &rarr; 源点 &rarr; 发送器 &rarr; 传输系统 &rarr; 接收器 &rarr; 终点。</p>\n<p>&emsp;通信的目的是传送<strong>消息</strong>，<strong>数据</strong>是运送消息的实体，<strong>信号</strong>则是数据的电气或电磁的表现。</p>\n<ul>\n<li><p><strong>模拟信号</strong>（或连续信号）：代表消息的参数取值是连续的。</p>\n</li>\n<li><p><strong>数字信号</strong>（或离散信号）：代表消息的参数取值是离散的。</p>\n</li>\n<li><p><strong>编码</strong>：将<strong>信号</strong>转换为<strong>数字信号</strong>，又称为<strong>基带调制</strong>。</p>\n<blockquote>\n<p>包括采样、量化和编码三个步骤，其中采样的频率应该大于最大频率的两倍，即<script type=\"math/tex\">f_{采样} \\geq 2 \\times f_{max}</script></p>\n<p>如<strong>脉冲编码调制（PCM）</strong></p>\n</blockquote>\n</li>\n<li><p><strong>调制</strong>：将<strong>信号</strong>转换为<strong>模拟信号</strong>，又称为<strong>带通调制</strong>。</p>\n<blockquote>\n<p>如<strong>频分复用（FDM）</strong>就是使用了调制。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3、编码与调制方式\"><a href=\"#3、编码与调制方式\" class=\"headerlink\" title=\"3、编码与调制方式\"></a>3、编码与调制方式</h3><h5 id=\"编码方式：\"><a href=\"#编码方式：\" class=\"headerlink\" title=\"编码方式：\"></a>编码方式：</h5><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206151027134.png\" alt=\"image-20220615102754864\"></p>\n<ul>\n<li><strong>不归零调制（RZ）</strong>：高电平代表1，低电平代表0；</li>\n<li><strong>归零制（NRZ）</strong>：正脉冲代表1，负脉冲代表0；这里与王道考研有点区别，还是以谢书为主。</li>\n<li><strong>曼彻斯特编码（Manchester Encoding）</strong>：位中心向上跳变代表0，向下跳变代表1；以太网常采用此编码。</li>\n<li><strong>差分曼彻斯特编码</strong>：位中心都有跳变。位开始有跳变代表0，位开始没有跳变代表1；</li>\n<li><strong>反向非归零编码（NRZI）</strong>（补充）：信号翻转代表0，信号不变代表1。</li>\n<li><strong>4B/5B编码</strong>（补充）：将数据流每4位为一组，加上一位变成5位。5位码对应32种可能，其中16种作为原来的4位码的16种可能，另外16种作为控制码或保留。</li>\n</ul>\n<p>&emsp;从<strong>信号波形</strong>来看，曼彻斯特编码产生的信号频率比不归零编码高。从<strong>自同步能力</strong>来看，不归零编码不能提取时钟频率，而曼彻斯特编码具有自同步能力。</p>\n<h5 id=\"带通调制方式：\"><a href=\"#带通调制方式：\" class=\"headerlink\" title=\"带通调制方式：\"></a>带通调制方式：</h5><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206151035015.png\" alt=\"image-20220615103526967\"></p>\n<ul>\n<li><strong>调幅（AM）</strong>：载波的<strong>振幅</strong>随基带数字信号变化。</li>\n<li><strong>调频（FM）</strong>：载波的<strong>频率</strong>随基带数字信号变化。</li>\n<li><strong>调相（PM）</strong>：载波的<strong>相位</strong>随基带数字信号变化。</li>\n</ul>\n<p>&emsp;为了达到更高的信息传输速率，必须采用技术上更为复杂的多元振幅相位混合调制方法，如<strong>正交振幅调制QAM（Quadrature Amplitude Modulation）</strong>。</p>\n<h3 id=\"4、信道的分类\"><a href=\"#4、信道的分类\" class=\"headerlink\" title=\"4、信道的分类\"></a>4、信道的分类</h3><p>&emsp;从双方信息交互的方式来看，可以有以下三种基本方式：</p>\n<ul>\n<li><strong>单向通信</strong>：<strong>单工信道</strong>，只能从一个方向发送给另一个方向而不能反着发的交互。如广播电台和有线电视等。</li>\n<li><strong>双向交替通信</strong>：<strong>半双工通信</strong>，通信双方都能收发，但是不能同时收发。</li>\n<li><strong>双向同时通信</strong>：<strong>全双工通信</strong>，通信双方都能同时收发。</li>\n</ul>\n<h2 id=\"二、奈奎斯特定理与香农定理\"><a href=\"#二、奈奎斯特定理与香农定理\" class=\"headerlink\" title=\"二、奈奎斯特定理与香农定理\"></a>二、奈奎斯特定理与香农定理</h2><h3 id=\"理想信道（无噪声）\"><a href=\"#理想信道（无噪声）\" class=\"headerlink\" title=\"理想信道（无噪声）\"></a>理想信道（无噪声）</h3><p>&emsp;奈奎斯特提出奈式准则：<script type=\"math/tex\">C = 2Wlog_2V</script>，其中：</p>\n<ul>\n<li><code>C</code>：代表传输速率，单位<code>b/s</code>。</li>\n<li><code>W</code>：代表带宽，单位<code>Hz</code>。带宽这里指的是信道宽度了，其他地方一般指最高传输速率（b/s）。</li>\n<li><code>V</code>：多少种不同的状态。<script type=\"math/tex\">log_2V</script>代表了多少比特。</li>\n<li>码元与比特关系：比特才是真正的数据信息，码元只是传输时候的数据。最后，一码元需要转化成若干比特才行的。一码元如果只有两种状态，那么只能携带两种信息。一码元如果有16种状态，那么就能携带4比特信息。所以，<script type=\"math/tex\">比特=log_2码元</script>。</li>\n</ul>\n<p>&emsp;因此奈奎斯特传输定理是限制<strong>码元传输速率</strong>，也就是最高能传输2W的码元信息，然后要想提高比特信息。那么就需要提高每一个码元的状态。如使用0~7V电平代表一个码元（一个码元对应8种状态），那么就能传输3bit数据。</p>\n<h3 id=\"有高斯白噪声\"><a href=\"#有高斯白噪声\" class=\"headerlink\" title=\"有高斯白噪声\"></a>有高斯白噪声</h3><p>&emsp;香农定理提出高斯白噪声干扰下传输速率。<script type=\"math/tex\">C = Wlog_2(1+\\frac{S}{N})</script>，其中：</p>\n<ul>\n<li><code>C</code>：传输速率，bit/s</li>\n<li><code>W</code>：带宽，Hz</li>\n<li><code>S/N</code>：信噪比，信号的平均功率与噪声的平均功率比值。可以直接用数字表示，无单位。也可以用dB表示。</li>\n<li>信噪比：<script type=\"math/tex\">1dB = 10log_{10}(\\frac{S}{N})</script>，如S/N=10，就是代表信噪比10dB，S/N=1000时，代表信噪比为30dB。</li>\n<li>常用数值：<script type=\"math/tex\">log_2(1+1000)=9.967 \\approx 10 \\quad log_2(1+10)=3.459 \\approx 3.5</script></li>\n</ul>\n<p>&emsp;香农定理限制的直接是<strong>比特传输速率</strong>。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>奈奎斯特定理：无噪声，码元传输速率</li>\n<li>香农定理：有高斯白噪声，数据传输速率</li>\n</ul>\n<p>&emsp;奈奎斯特定理和香农定理，一个说明了码元的最大传输速率（2W），一个说明了比特最大传输速率，两者结合，说明一码元能够携带的比特数是有最大值的。以及采样定理可知，如果告知采样频率，那么带宽W = f/2，f为采样频率。</p>\n<p>&emsp;<strong>题目中</strong>，应该将两个定理的理论最大值都算出来，取较小的。</p>\n<p>&emsp;<strong>波特率</strong>指码元传输速率，<strong>比特率</strong>指比特传输速率或数据传输速率。<script type=\"math/tex\">比特率(b/s) = 波特率(Baud) \\times log_2V</script></p>\n<h2 id=\"三、信道复用技术\"><a href=\"#三、信道复用技术\" class=\"headerlink\" title=\"三、信道复用技术\"></a>三、信道复用技术</h2><h4 id=\"复用与分用\"><a href=\"#复用与分用\" class=\"headerlink\" title=\"复用与分用\"></a>复用与分用</h4><p>&emsp;<strong>复用</strong>是指，多路数据同时使用一个信道来传输。<strong>分用</strong>是指，将一个信道中的数据分开成多路。</p>\n<h4 id=\"频分复用（FDM）\"><a href=\"#频分复用（FDM）\" class=\"headerlink\" title=\"频分复用（FDM）\"></a>频分复用（FDM）</h4><p>&emsp;将一条信道上带宽（频带宽度）分成多个宽带，每个宽带都能给一路数据进行传输，所以同时就能给多路数据进行传输。如果加入更多的用户，那么只能增加频带宽度，但是每个用户的速度是不变的。</p>\n<p>&emsp;采用的<strong>频分多址接入（FDMA）</strong>技术达到频分复用。</p>\n<h4 id=\"时分复用（TDM）\"><a href=\"#时分复用（TDM）\" class=\"headerlink\" title=\"时分复用（TDM）\"></a>时分复用（TDM）</h4><p>&emsp;时间划分成一个一个的TDM帧，每个TMD帧划分成多个时间段，每个时间段为一路数据进行传输。增加用户，只能将每个用户占用的时间间隙分割更小，所以越多的用户会导致传输速度变慢。</p>\n<p>&emsp;采用<strong>时分多址接入（TDMA）</strong>技术达到时分复用。</p>\n<p>&emsp;<strong>统计时分复用（STDM）</strong>是一种改进的时分复用技术，明显提高利用率。普通的时分复用中，如果当前用户分配到时间间隙，但是该用户没有信息要发送，那么信道就是空的。而统计时分复用便是，当前用户没有数据需要发送，那么讲会顺延给下一个发送数据的用户，以此类推，大大提高利用率。</p>\n<p>&emsp;下图便是造成时间段浪费的示意图：</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206151404573.png\" alt=\"image-20220615140444466\"></p>\n<p>&emsp;统计时分复用能够更好地利用信道：</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206151405780.png\" alt=\"image-20220615140550744\"></p>\n<h4 id=\"波分复用（WDM）\"><a href=\"#波分复用（WDM）\" class=\"headerlink\" title=\"波分复用（WDM）\"></a>波分复用（WDM）</h4><p>&emsp;就是光的频分复用，只在光纤通信中用的复用技术。不用波长的光代表不同用户的数据。</p>\n<h4 id=\"码分复用（CDM）\"><a href=\"#码分复用（CDM）\" class=\"headerlink\" title=\"码分复用（CDM）\"></a>码分复用（CDM）</h4><p>&emsp;采用<strong>码分多址（CDMA）</strong>技术，用户使用同样的频带进行通信，但是每个用户挑选不同的码型，因此不会互相干扰。通信的频率应该变成了原来的m倍，因为原来1单位的数据，已经被扩充到m单位了。</p>\n<p><strong>过程讲解</strong>：</p>\n<ul>\n<li>在一个比特时间再划分m个短的间隔，称为<strong>码片</strong>（chip），通常为64或128</li>\n<li>每个站被指定不同的<code>mbit</code>码片序列，且每个站码片序列必须<strong>正交</strong>（规格化内积为0）</li>\n<li>如果需要发送比特<strong>1</strong>，就发送自己的<strong>码片序列</strong>；如果发送比特<strong>0</strong>，就发送<strong>码片序列的反码</strong>。</li>\n<li>接收方，只需要用<strong>发送方的码片序列</strong>对接收到的<strong>信息</strong>进行规格化内积即可。</li>\n</ul>\n<p><strong>为什么不会冲突讲解</strong>：（规格化内积：<script type=\"math/tex\">S \\cdot T = \\frac{1}{m}\\sum_{i=1}^{m} S_iT_i</script>）</p>\n<p>&emsp;将0记为-1，1记为+1。我们已知，S与自己的规格化内积为1，与T的规格化内积为0。S的反码记为S’，T的反码记为T’。显然有，S与S’的规格化内积为-1，S’与T的规格化内积为0。对T也一样。</p>\n<p>&emsp;假设S发送的数据为<script type=\"math/tex\">S_x</script>，T发送的数据为<script type=\"math/tex\">T_x</script>。两者数据之和为：<script type=\"math/tex\">D = S_x + T_x</script>。用S的码片序列和D进行规格化内积有：<script type=\"math/tex\">D\\cdot T = \\frac{1}{m} \\sum_{i=1}^{m} S_i(S_{xi}+T_{xi}) = \\frac{1}{m} \\sum_{i=1}^{m} (S_iS_{xi}+S_iT_{xi}) = \\frac{1}{m} \\sum_{i=1}^{m} S_iS_{xi}</script>，因为<script type=\"math/tex\">S_x \\cdot T_x = 0</script>，所以，最后算出来要么是+1，要么是-1，要么是0。代表着，要么发送了1，要么发送了0，要么<script type=\"math/tex\">S_x</script>为空，即没有发送数据。对于T也是一样的，也能够从总共的信息中提取出T的信息。</p>\n<h2 id=\"四、通信技术\"><a href=\"#四、通信技术\" class=\"headerlink\" title=\"四、通信技术\"></a>四、通信技术</h2><p>&emsp;这个在第一章也有提到，这里着重讲解下</p>\n<h3 id=\"1、电路交换\"><a href=\"#1、电路交换\" class=\"headerlink\" title=\"1、电路交换\"></a>1、电路交换</h3><p>&emsp;双方通信之前，需要先建立一条专用（双方独占）的物理通信路径，该路径途径许多节点，这些节点都被双方占用（第三方无法使用）。连接建立、数据传输和连接释放。</p>\n<ul>\n<li><p>优点：</p>\n<blockquote>\n<p>时延小、有序传输、没有冲突、适用范围广，实时性强、控制简单</p>\n</blockquote>\n</li>\n<li><p>缺点：</p>\n<blockquote>\n<p>建立连接时间长、使用率低、灵活性差、难以规格化</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2、报文交换\"><a href=\"#2、报文交换\" class=\"headerlink\" title=\"2、报文交换\"></a>2、报文交换</h3><p>&emsp;数据交换单位是报文，将整个报文保存，待收取成功后再将整个报文转发。</p>\n<ul>\n<li><p>优点</p>\n<blockquote>\n<p>无须连接、动态分配线路、提高线路可靠性、提高线路利用率、提供多目标服务、有序到达、有差错检验和控制</p>\n</blockquote>\n</li>\n<li><p>缺点</p>\n<blockquote>\n<p>利用率比分组交换低，差错开销比分组交换高，重发数据量大。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3、分组交换\"><a href=\"#3、分组交换\" class=\"headerlink\" title=\"3、分组交换\"></a>3、分组交换</h3><p>&emsp;同报文交换，不过分组交换是将报文拆分成几段，依次保存。</p>\n<ul>\n<li><p>优点</p>\n<blockquote>\n<p>无连接时延、线路利用率最高、简化了存储管理、加速传输、减少了出错概率和重发数量</p>\n</blockquote>\n</li>\n<li><p>缺点</p>\n<blockquote>\n<p>存在传输时延，分组容易失序或丢失，额外信息量大</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"4、数据报\"><a href=\"#4、数据报\" class=\"headerlink\" title=\"4、数据报\"></a>4、数据报</h3><p>&emsp;分组交换的一种方式。将多个分组转发到通信子网中，每个分组选择的路由不一定相同，达到时间不一定相同。不建立连接。每个分组都需要有源地址和目的地址。</p>\n<h3 id=\"5、虚电路\"><a href=\"#5、虚电路\" class=\"headerlink\" title=\"5、虚电路\"></a>5、虚电路</h3><p>&emsp;分组交换的一种方式。先建立一条逻辑通路，面向连接。同一虚电路的数据，路由都想同。分组有序到达。包括永久性和临时性连接。仅仅在建立连接时需要源地址和目的地址，之后只需要虚电路号。</p>\n<h2 id=\"五、物理层物理设备\"><a href=\"#五、物理层物理设备\" class=\"headerlink\" title=\"五、物理层物理设备\"></a>五、物理层物理设备</h2><h4 id=\"1、传输介质\"><a href=\"#1、传输介质\" class=\"headerlink\" title=\"1、传输介质\"></a>1、传输介质</h4><p>&emsp;传输媒体又称为传输介质或传输媒介。</p>\n<ul>\n<li><p>1、双绞线：分为屏蔽双绞线（STP）和非屏蔽双绞线（UTP）。价格便宜</p>\n</li>\n<li><p>2、同轴电缆：</p>\n</li>\n<li><p>3、光缆：</p>\n<blockquote>\n<p>1）传输损耗小，中继距离长，远距离传输经济实惠</p>\n<p>2）抗干扰强，体积小，重量轻</p>\n</blockquote>\n</li>\n<li><p>4、无线电波：如WLAN等，信道容量大</p>\n</li>\n<li><p>5、微波、红外线和激光：使用卫星，激光器，红外发射接收器等。</p>\n</li>\n</ul>\n<p>如10GBase-T，10Gb/s传输速率的双绞线。</p>\n<h4 id=\"2、设备\"><a href=\"#2、设备\" class=\"headerlink\" title=\"2、设备\"></a>2、设备</h4><h5 id=\"（1）中继器\"><a href=\"#（1）中继器\" class=\"headerlink\" title=\"（1）中继器\"></a>（1）中继器</h5><p>&emsp;中继器就是长远距离传送中的，会发生信号损失，需要中继器进行放大再传，相当于透明传输，仅作用电气特性。中继器没有存储转发功能，所以不能连接两个物理层不同协议或不同传输速率的网段，更不会进行差错控制等手段。中继器放大的是数字信号（不是简单的振幅放大，是将快辨别不清楚的数字信号重放），放大器放大的是模拟型号。在10BASE5的以太网规范中，最多只能由4个中继器。</p>\n<h5 id=\"（2）集线器\"><a href=\"#（2）集线器\" class=\"headerlink\" title=\"（2）集线器\"></a>（2）集线器</h5><p>&emsp;是多端口中继器，多根线路接在同一个集线器上面，一个端口发送过来的数据，会转发到除<strong>输入端口外</strong>的其他所有端口。所有，集线器不能隔离冲突域，也不能隔离广播域。因此，如果一个带宽为10Mb/s的集线器连接了8台计算机，那么每台计算机的带框为10Mb/s / 8 = 1.25Mb/s。是星形的拓扑结构。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h2 id=\"一、基础知识\"><a href=\"#一、基础知识\" class=\"headerlink\" title=\"一、基础知识\"></a>一、基础知识</h2><h3 id=\"1、物理层主要任务\"><a href=\"#1、物理层主要任务\" class=\"headerlink\" title=\"1、物理层主要任务\"></a>1、物理层主要任务</h3><p>&emsp;物理层主要描述下列功能：</p>\n<ul>\n<li>机械特性：接线器的形状、尺寸、引脚数目和排列、固定、锁定装置等。</li>\n<li>电气特性：指明接口电缆的各条线上出现的电压范围</li>\n<li>功能特性：指明某条线上出现的各种可能事件的出现顺序</li>\n<li>过程特性：指明对于不同功能的各种可能事件的出现顺序</li>\n</ul>\n<h3 id=\"2、数据通信的基础知识\"><a href=\"#2、数据通信的基础知识\" class=\"headerlink\" title=\"2、数据通信的基础知识\"></a>2、数据通信的基础知识</h3><p>&emsp;数据通信系统由<strong>源系统</strong>、<strong>传输系统</strong>和<strong>目的系统</strong>组成。</p>\n<p>数据通信的流程：输入信息 &rarr; 源点 &rarr; 发送器 &rarr; 传输系统 &rarr; 接收器 &rarr; 终点。</p>\n<p>&emsp;通信的目的是传送<strong>消息</strong>，<strong>数据</strong>是运送消息的实体，<strong>信号</strong>则是数据的电气或电磁的表现。</p>\n<ul>\n<li><p><strong>模拟信号</strong>（或连续信号）：代表消息的参数取值是连续的。</p>\n</li>\n<li><p><strong>数字信号</strong>（或离散信号）：代表消息的参数取值是离散的。</p>\n</li>\n<li><p><strong>编码</strong>：将<strong>信号</strong>转换为<strong>数字信号</strong>，又称为<strong>基带调制</strong>。</p>\n<blockquote>\n<p>包括采样、量化和编码三个步骤，其中采样的频率应该大于最大频率的两倍，即<script type=\"math/tex\">f_{采样} \\geq 2 \\times f_{max}</script></p>\n<p>如<strong>脉冲编码调制（PCM）</strong></p>\n</blockquote>\n</li>\n<li><p><strong>调制</strong>：将<strong>信号</strong>转换为<strong>模拟信号</strong>，又称为<strong>带通调制</strong>。</p>\n<blockquote>\n<p>如<strong>频分复用（FDM）</strong>就是使用了调制。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3、编码与调制方式\"><a href=\"#3、编码与调制方式\" class=\"headerlink\" title=\"3、编码与调制方式\"></a>3、编码与调制方式</h3><h5 id=\"编码方式：\"><a href=\"#编码方式：\" class=\"headerlink\" title=\"编码方式：\"></a>编码方式：</h5><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206151027134.png\" alt=\"image-20220615102754864\"></p>\n<ul>\n<li><strong>不归零调制（RZ）</strong>：高电平代表1，低电平代表0；</li>\n<li><strong>归零制（NRZ）</strong>：正脉冲代表1，负脉冲代表0；这里与王道考研有点区别，还是以谢书为主。</li>\n<li><strong>曼彻斯特编码（Manchester Encoding）</strong>：位中心向上跳变代表0，向下跳变代表1；以太网常采用此编码。</li>\n<li><strong>差分曼彻斯特编码</strong>：位中心都有跳变。位开始有跳变代表0，位开始没有跳变代表1；</li>\n<li><strong>反向非归零编码（NRZI）</strong>（补充）：信号翻转代表0，信号不变代表1。</li>\n<li><strong>4B/5B编码</strong>（补充）：将数据流每4位为一组，加上一位变成5位。5位码对应32种可能，其中16种作为原来的4位码的16种可能，另外16种作为控制码或保留。</li>\n</ul>\n<p>&emsp;从<strong>信号波形</strong>来看，曼彻斯特编码产生的信号频率比不归零编码高。从<strong>自同步能力</strong>来看，不归零编码不能提取时钟频率，而曼彻斯特编码具有自同步能力。</p>\n<h5 id=\"带通调制方式：\"><a href=\"#带通调制方式：\" class=\"headerlink\" title=\"带通调制方式：\"></a>带通调制方式：</h5><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206151035015.png\" alt=\"image-20220615103526967\"></p>\n<ul>\n<li><strong>调幅（AM）</strong>：载波的<strong>振幅</strong>随基带数字信号变化。</li>\n<li><strong>调频（FM）</strong>：载波的<strong>频率</strong>随基带数字信号变化。</li>\n<li><strong>调相（PM）</strong>：载波的<strong>相位</strong>随基带数字信号变化。</li>\n</ul>\n<p>&emsp;为了达到更高的信息传输速率，必须采用技术上更为复杂的多元振幅相位混合调制方法，如<strong>正交振幅调制QAM（Quadrature Amplitude Modulation）</strong>。</p>\n<h3 id=\"4、信道的分类\"><a href=\"#4、信道的分类\" class=\"headerlink\" title=\"4、信道的分类\"></a>4、信道的分类</h3><p>&emsp;从双方信息交互的方式来看，可以有以下三种基本方式：</p>\n<ul>\n<li><strong>单向通信</strong>：<strong>单工信道</strong>，只能从一个方向发送给另一个方向而不能反着发的交互。如广播电台和有线电视等。</li>\n<li><strong>双向交替通信</strong>：<strong>半双工通信</strong>，通信双方都能收发，但是不能同时收发。</li>\n<li><strong>双向同时通信</strong>：<strong>全双工通信</strong>，通信双方都能同时收发。</li>\n</ul>\n<h2 id=\"二、奈奎斯特定理与香农定理\"><a href=\"#二、奈奎斯特定理与香农定理\" class=\"headerlink\" title=\"二、奈奎斯特定理与香农定理\"></a>二、奈奎斯特定理与香农定理</h2><h3 id=\"理想信道（无噪声）\"><a href=\"#理想信道（无噪声）\" class=\"headerlink\" title=\"理想信道（无噪声）\"></a>理想信道（无噪声）</h3><p>&emsp;奈奎斯特提出奈式准则：<script type=\"math/tex\">C = 2Wlog_2V</script>，其中：</p>\n<ul>\n<li><code>C</code>：代表传输速率，单位<code>b/s</code>。</li>\n<li><code>W</code>：代表带宽，单位<code>Hz</code>。带宽这里指的是信道宽度了，其他地方一般指最高传输速率（b/s）。</li>\n<li><code>V</code>：多少种不同的状态。<script type=\"math/tex\">log_2V</script>代表了多少比特。</li>\n<li>码元与比特关系：比特才是真正的数据信息，码元只是传输时候的数据。最后，一码元需要转化成若干比特才行的。一码元如果只有两种状态，那么只能携带两种信息。一码元如果有16种状态，那么就能携带4比特信息。所以，<script type=\"math/tex\">比特=log_2码元</script>。</li>\n</ul>\n<p>&emsp;因此奈奎斯特传输定理是限制<strong>码元传输速率</strong>，也就是最高能传输2W的码元信息，然后要想提高比特信息。那么就需要提高每一个码元的状态。如使用0~7V电平代表一个码元（一个码元对应8种状态），那么就能传输3bit数据。</p>\n<h3 id=\"有高斯白噪声\"><a href=\"#有高斯白噪声\" class=\"headerlink\" title=\"有高斯白噪声\"></a>有高斯白噪声</h3><p>&emsp;香农定理提出高斯白噪声干扰下传输速率。<script type=\"math/tex\">C = Wlog_2(1+\\frac{S}{N})</script>，其中：</p>\n<ul>\n<li><code>C</code>：传输速率，bit/s</li>\n<li><code>W</code>：带宽，Hz</li>\n<li><code>S/N</code>：信噪比，信号的平均功率与噪声的平均功率比值。可以直接用数字表示，无单位。也可以用dB表示。</li>\n<li>信噪比：<script type=\"math/tex\">1dB = 10log_{10}(\\frac{S}{N})</script>，如S/N=10，就是代表信噪比10dB，S/N=1000时，代表信噪比为30dB。</li>\n<li>常用数值：<script type=\"math/tex\">log_2(1+1000)=9.967 \\approx 10 \\quad log_2(1+10)=3.459 \\approx 3.5</script></li>\n</ul>\n<p>&emsp;香农定理限制的直接是<strong>比特传输速率</strong>。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>奈奎斯特定理：无噪声，码元传输速率</li>\n<li>香农定理：有高斯白噪声，数据传输速率</li>\n</ul>\n<p>&emsp;奈奎斯特定理和香农定理，一个说明了码元的最大传输速率（2W），一个说明了比特最大传输速率，两者结合，说明一码元能够携带的比特数是有最大值的。以及采样定理可知，如果告知采样频率，那么带宽W = f/2，f为采样频率。</p>\n<p>&emsp;<strong>题目中</strong>，应该将两个定理的理论最大值都算出来，取较小的。</p>\n<p>&emsp;<strong>波特率</strong>指码元传输速率，<strong>比特率</strong>指比特传输速率或数据传输速率。<script type=\"math/tex\">比特率(b/s) = 波特率(Baud) \\times log_2V</script></p>\n<h2 id=\"三、信道复用技术\"><a href=\"#三、信道复用技术\" class=\"headerlink\" title=\"三、信道复用技术\"></a>三、信道复用技术</h2><h4 id=\"复用与分用\"><a href=\"#复用与分用\" class=\"headerlink\" title=\"复用与分用\"></a>复用与分用</h4><p>&emsp;<strong>复用</strong>是指，多路数据同时使用一个信道来传输。<strong>分用</strong>是指，将一个信道中的数据分开成多路。</p>\n<h4 id=\"频分复用（FDM）\"><a href=\"#频分复用（FDM）\" class=\"headerlink\" title=\"频分复用（FDM）\"></a>频分复用（FDM）</h4><p>&emsp;将一条信道上带宽（频带宽度）分成多个宽带，每个宽带都能给一路数据进行传输，所以同时就能给多路数据进行传输。如果加入更多的用户，那么只能增加频带宽度，但是每个用户的速度是不变的。</p>\n<p>&emsp;采用的<strong>频分多址接入（FDMA）</strong>技术达到频分复用。</p>\n<h4 id=\"时分复用（TDM）\"><a href=\"#时分复用（TDM）\" class=\"headerlink\" title=\"时分复用（TDM）\"></a>时分复用（TDM）</h4><p>&emsp;时间划分成一个一个的TDM帧，每个TMD帧划分成多个时间段，每个时间段为一路数据进行传输。增加用户，只能将每个用户占用的时间间隙分割更小，所以越多的用户会导致传输速度变慢。</p>\n<p>&emsp;采用<strong>时分多址接入（TDMA）</strong>技术达到时分复用。</p>\n<p>&emsp;<strong>统计时分复用（STDM）</strong>是一种改进的时分复用技术，明显提高利用率。普通的时分复用中，如果当前用户分配到时间间隙，但是该用户没有信息要发送，那么信道就是空的。而统计时分复用便是，当前用户没有数据需要发送，那么讲会顺延给下一个发送数据的用户，以此类推，大大提高利用率。</p>\n<p>&emsp;下图便是造成时间段浪费的示意图：</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206151404573.png\" alt=\"image-20220615140444466\"></p>\n<p>&emsp;统计时分复用能够更好地利用信道：</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206151405780.png\" alt=\"image-20220615140550744\"></p>\n<h4 id=\"波分复用（WDM）\"><a href=\"#波分复用（WDM）\" class=\"headerlink\" title=\"波分复用（WDM）\"></a>波分复用（WDM）</h4><p>&emsp;就是光的频分复用，只在光纤通信中用的复用技术。不用波长的光代表不同用户的数据。</p>\n<h4 id=\"码分复用（CDM）\"><a href=\"#码分复用（CDM）\" class=\"headerlink\" title=\"码分复用（CDM）\"></a>码分复用（CDM）</h4><p>&emsp;采用<strong>码分多址（CDMA）</strong>技术，用户使用同样的频带进行通信，但是每个用户挑选不同的码型，因此不会互相干扰。通信的频率应该变成了原来的m倍，因为原来1单位的数据，已经被扩充到m单位了。</p>\n<p><strong>过程讲解</strong>：</p>\n<ul>\n<li>在一个比特时间再划分m个短的间隔，称为<strong>码片</strong>（chip），通常为64或128</li>\n<li>每个站被指定不同的<code>mbit</code>码片序列，且每个站码片序列必须<strong>正交</strong>（规格化内积为0）</li>\n<li>如果需要发送比特<strong>1</strong>，就发送自己的<strong>码片序列</strong>；如果发送比特<strong>0</strong>，就发送<strong>码片序列的反码</strong>。</li>\n<li>接收方，只需要用<strong>发送方的码片序列</strong>对接收到的<strong>信息</strong>进行规格化内积即可。</li>\n</ul>\n<p><strong>为什么不会冲突讲解</strong>：（规格化内积：<script type=\"math/tex\">S \\cdot T = \\frac{1}{m}\\sum_{i=1}^{m} S_iT_i</script>）</p>\n<p>&emsp;将0记为-1，1记为+1。我们已知，S与自己的规格化内积为1，与T的规格化内积为0。S的反码记为S’，T的反码记为T’。显然有，S与S’的规格化内积为-1，S’与T的规格化内积为0。对T也一样。</p>\n<p>&emsp;假设S发送的数据为<script type=\"math/tex\">S_x</script>，T发送的数据为<script type=\"math/tex\">T_x</script>。两者数据之和为：<script type=\"math/tex\">D = S_x + T_x</script>。用S的码片序列和D进行规格化内积有：<script type=\"math/tex\">D\\cdot T = \\frac{1}{m} \\sum_{i=1}^{m} S_i(S_{xi}+T_{xi}) = \\frac{1}{m} \\sum_{i=1}^{m} (S_iS_{xi}+S_iT_{xi}) = \\frac{1}{m} \\sum_{i=1}^{m} S_iS_{xi}</script>，因为<script type=\"math/tex\">S_x \\cdot T_x = 0</script>，所以，最后算出来要么是+1，要么是-1，要么是0。代表着，要么发送了1，要么发送了0，要么<script type=\"math/tex\">S_x</script>为空，即没有发送数据。对于T也是一样的，也能够从总共的信息中提取出T的信息。</p>\n<h2 id=\"四、通信技术\"><a href=\"#四、通信技术\" class=\"headerlink\" title=\"四、通信技术\"></a>四、通信技术</h2><p>&emsp;这个在第一章也有提到，这里着重讲解下</p>\n<h3 id=\"1、电路交换\"><a href=\"#1、电路交换\" class=\"headerlink\" title=\"1、电路交换\"></a>1、电路交换</h3><p>&emsp;双方通信之前，需要先建立一条专用（双方独占）的物理通信路径，该路径途径许多节点，这些节点都被双方占用（第三方无法使用）。连接建立、数据传输和连接释放。</p>\n<ul>\n<li><p>优点：</p>\n<blockquote>\n<p>时延小、有序传输、没有冲突、适用范围广，实时性强、控制简单</p>\n</blockquote>\n</li>\n<li><p>缺点：</p>\n<blockquote>\n<p>建立连接时间长、使用率低、灵活性差、难以规格化</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2、报文交换\"><a href=\"#2、报文交换\" class=\"headerlink\" title=\"2、报文交换\"></a>2、报文交换</h3><p>&emsp;数据交换单位是报文，将整个报文保存，待收取成功后再将整个报文转发。</p>\n<ul>\n<li><p>优点</p>\n<blockquote>\n<p>无须连接、动态分配线路、提高线路可靠性、提高线路利用率、提供多目标服务、有序到达、有差错检验和控制</p>\n</blockquote>\n</li>\n<li><p>缺点</p>\n<blockquote>\n<p>利用率比分组交换低，差错开销比分组交换高，重发数据量大。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3、分组交换\"><a href=\"#3、分组交换\" class=\"headerlink\" title=\"3、分组交换\"></a>3、分组交换</h3><p>&emsp;同报文交换，不过分组交换是将报文拆分成几段，依次保存。</p>\n<ul>\n<li><p>优点</p>\n<blockquote>\n<p>无连接时延、线路利用率最高、简化了存储管理、加速传输、减少了出错概率和重发数量</p>\n</blockquote>\n</li>\n<li><p>缺点</p>\n<blockquote>\n<p>存在传输时延，分组容易失序或丢失，额外信息量大</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"4、数据报\"><a href=\"#4、数据报\" class=\"headerlink\" title=\"4、数据报\"></a>4、数据报</h3><p>&emsp;分组交换的一种方式。将多个分组转发到通信子网中，每个分组选择的路由不一定相同，达到时间不一定相同。不建立连接。每个分组都需要有源地址和目的地址。</p>\n<h3 id=\"5、虚电路\"><a href=\"#5、虚电路\" class=\"headerlink\" title=\"5、虚电路\"></a>5、虚电路</h3><p>&emsp;分组交换的一种方式。先建立一条逻辑通路，面向连接。同一虚电路的数据，路由都想同。分组有序到达。包括永久性和临时性连接。仅仅在建立连接时需要源地址和目的地址，之后只需要虚电路号。</p>\n<h2 id=\"五、物理层物理设备\"><a href=\"#五、物理层物理设备\" class=\"headerlink\" title=\"五、物理层物理设备\"></a>五、物理层物理设备</h2><h4 id=\"1、传输介质\"><a href=\"#1、传输介质\" class=\"headerlink\" title=\"1、传输介质\"></a>1、传输介质</h4><p>&emsp;传输媒体又称为传输介质或传输媒介。</p>\n<ul>\n<li><p>1、双绞线：分为屏蔽双绞线（STP）和非屏蔽双绞线（UTP）。价格便宜</p>\n</li>\n<li><p>2、同轴电缆：</p>\n</li>\n<li><p>3、光缆：</p>\n<blockquote>\n<p>1）传输损耗小，中继距离长，远距离传输经济实惠</p>\n<p>2）抗干扰强，体积小，重量轻</p>\n</blockquote>\n</li>\n<li><p>4、无线电波：如WLAN等，信道容量大</p>\n</li>\n<li><p>5、微波、红外线和激光：使用卫星，激光器，红外发射接收器等。</p>\n</li>\n</ul>\n<p>如10GBase-T，10Gb/s传输速率的双绞线。</p>\n<h4 id=\"2、设备\"><a href=\"#2、设备\" class=\"headerlink\" title=\"2、设备\"></a>2、设备</h4><h5 id=\"（1）中继器\"><a href=\"#（1）中继器\" class=\"headerlink\" title=\"（1）中继器\"></a>（1）中继器</h5><p>&emsp;中继器就是长远距离传送中的，会发生信号损失，需要中继器进行放大再传，相当于透明传输，仅作用电气特性。中继器没有存储转发功能，所以不能连接两个物理层不同协议或不同传输速率的网段，更不会进行差错控制等手段。中继器放大的是数字信号（不是简单的振幅放大，是将快辨别不清楚的数字信号重放），放大器放大的是模拟型号。在10BASE5的以太网规范中，最多只能由4个中继器。</p>\n<h5 id=\"（2）集线器\"><a href=\"#（2）集线器\" class=\"headerlink\" title=\"（2）集线器\"></a>（2）集线器</h5><p>&emsp;是多端口中继器，多根线路接在同一个集线器上面，一个端口发送过来的数据，会转发到除<strong>输入端口外</strong>的其他所有端口。所有，集线器不能隔离冲突域，也不能隔离广播域。因此，如果一个带宽为10Mb/s的集线器连接了8台计算机，那么每台计算机的带框为10Mb/s / 8 = 1.25Mb/s。是星形的拓扑结构。</p>\n"},{"title":"计算机网络技术之数据链路层","excerpt":"计算机网络技术之数据链路层","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206161012193.png","mathjax":true,"date":"2022-06-16T02:12:19.000Z","_content":"# 一、基础知识\n\n## 1、数据链路层的主要任务\n\n&emsp;主要包括三个任务：**封装成帧**，**透明传输**和**差错检测**。点对点通信。\n\n- 将网络层交下来的IP数据报封装成帧\n- 把封装好的帧发送给其他节点的数据链路层\n- 接收其他节点发过来的帧，检测如果无差错，提取出IP数据报并交付给网络层；有差错就直接丢弃帧。\n\n## 2、名词解释\n\n- 链路：从一个节点到另一个节点的一段物理线路\n- 数据链路：在链路基础上，增加了执行通信协议的软硬件，构成了数据链路。\n- 网络适配器：称为网卡，实现上述协议的软硬件\n- 帧：数据链路层的协议数据单元（PDU），也是最小传输单位。\n\n# 二、任务实现\n\n## 1、封装成帧\n\n&emsp;将上一层的网络层交付下来的数据报，加上帧首部与帧尾部之后，交付给物理层进行透明传输。也**只有数据链路层**会添加尾部。并且还会在帧前面和尾部加上帧界定符，帧开始加入**帧开始符（SOH，0x01）**，帧结束处加上**帧结束符（EOT，0x04）**，帧结束符可以判断帧是否完整，除此之外，**PPP协议**还会加入**前导码（7个字节，0101...01）**，前导码之后才是帧开始符。**注意：**上述0x01和0x04在谢书是这样，很多其他地方查的都不一样。\n\n&emsp;规定帧的格式与使用的协议有关，我们将会在**PPP协议**中具体讲到。\n\n## 2、透明传输\n\n&emsp;我们已经知道了，帧开始符与帧结束符是一个固定的十六进制数，假如我们传输的数据中包含帧结束符的十六进制数据，那么应该如何处理这种情况呢？这就要求我们对数据进行**透明传输**。最常用的方法就是使用转义字符，也就是**字节填充**或**字符填充**，在数据部分中，有帧结束符的字符前面插入**ESC（0x1B）**。\n\n&emsp;实现透明传输与使用的协议有关，所以我们将会在**PPP协议**中具体讲到。\n\n## 3、差错检测\n\n&emsp;现在的通信线路都不是很理想，容易发生比特错误，即1变成0或者0变成1。因此，差错检测是非常有必要的。常用的差错检测方法有，奇偶校验码和循环冗余码。除了进行检错之外，还发明了一种具有纠错功能的方法——海明码。\n\n### 1）检错之奇偶校验码\n\n&emsp;奇偶校验码包括**奇校验码**和**偶校验码**，发送的比特流包含n位，其中前n-1位是数据，最后一位是**校验位**。\n\n- 奇校验：**n-1位数据**加上**校验位**的中**1的个数**是**奇**数，**n位**比特进行**异或**为**1**。\n- 偶校验：**n-1位数据**加上**校验位**的中**1的个数**是**偶**数，**n位**比特进行**异或**为**0**。\n\n&emsp;异或是一个比较重要的运算，在检验中常常用到。这里用异或是杀鸡用牛刀，海明码需要用到异或。这里给出异或的性质：\n\n| 左操作数 |     异或     | 右操作数 | = | 结果 |\n| :------: | :----------: | :------: | :-: | :--: |\n|    0    | $$ \\bigoplus $$ |    0    | = |  0  |\n|    0    | $$\\bigoplus$$ |    1    | = |  1  |\n|    1    | $$\\bigoplus$$ |    0    | = |  1  |\n|    1    | $$\\bigoplus$$ |    1    | = |  0  |\n\n- 与0异或，可以留出原来的状态\n- 与1异或，可以获取相反的状态\n- 2k和1异或是0，2k-1个1异或还是1\n- 满足交换律，  $$  a \\bigoplus b = b\\bigoplus a  $$\n\n### 2）检错之循环冗余码\n\n&emsp;上述编码其实只能够检测到奇数比特出错，如果是偶数个比特出错，检测就会失效了。所以，循环冗余码能够更有效地检测帧的正确与否，但是循环冗余码不能进行纠错，也就是不能确定错误出在哪个位置。循环冗余码检测通过之后，能够以接近1的概率认为此帧没有出错。并且CRC可以由硬件完成，所以速度非常快。\n\n#### 步骤\n\n- 首先，双方协定一个多项式，多项式能够对应于一个二进制比特序列**除数P**，P有h位\n- 用**数据M**后面拼接上**h-1位0**，对上述P进行**模2除**法，小学数学学到的**除过程**中用的**减法**变成了**异或**运算而已。\n- 最后得到的**余数**长度应该是**比P少1位**，少不止1位，就在前面填充0，这个拼接到M的后面就成为了新的数据。\n- 接收方收到数据后，只需要把**接收到的数据**对**P**进行**模2除**法，如果**余数为0**，便**通过**，然后再把最后的检验位去除便可。\n\n其中，**除数P**应该是：\n\n- **除数P**：\n\n  > &emsp;一个包含n位的序列，对应的多项式应该是\n  >\n  > $$a_{n-1}X^{n-1}+a_{n-2}X^{n-2}+...+a_1X^1+a_0X^0$$\n  >\n  > ，至于怎么转成二进制序列呢？\n  >\n  > 如二进制序列**110110**对应的多项式应该是\n  >\n  > $$1\\times2^5 + 1\\times2^4+0\\times2^3+1\\times2^2+1\\times2^1+0\\times2^0$$\n  >\n  > 。\n  >\n- **现在广泛使用的多项式：**\n\n  > ① **CRC-16:** \n  >\n  > $$X^{16}+X^{15}+X^{2}+1$$\n  >\n  >\n  > ② **CRC-CCITT:** \n  >\n  > $$X^{16}+X^{12}+X^{5}+1$$\n  >\n  >\n  > ③ **CRC-32:** \n  >\n  > $$X^{32}+X^{26}+X^{23}+X^{22}+X^{16}+X^{12}+X^{11}+X^{10}+X^{8}+X^{7}+X^{5}+X^{4}+X^{2}+X^{}+1$$\n  >\n  >\n\n### 3）纠错之海明码\n\n&emsp;前面提到的两种方法，都只适用于检错，如果出现差错，那么只能丢弃差错帧。而海明码，不仅可以检测出差错帧，还能检测出在哪出现的差错帧，并对其进行纠正。但是，海明码也只能**发现双比特错误**，**纠正单比特错误**。\n\n- 海明距离：两个比特码对应位不同的个数\n- **纠错**d位，需要**码距**为**2d+1**的解决方案\n- **检错**d位，需要**码距**为**d+1**的解决方案\n\n#### 确定检验位数\n\n&emsp;如果需要对**长度为n**的有效信息进行检验，需要**k位**检验码，n与k之间的关系式应该是怎样的呢？\n\n&emsp;首先，我们知道，海明码只对单个比特进行纠错，就是假设只有单个比特发生错误。那么，接收方收到的数据有多少种情况呢？应该是有**有效信息发生错误（n种）**加上**校验码发生错误（k种）**再加上**全部正确（1种）**的总共$$n+k+1$$种情况。那么，k位校验码能够代表多少种情况呢？应该是$$2^k$$种情况。所以，得到**关系式**为：$$n+k+1\\leq2^k$$。\n\n#### 校验码应该如何放置\n\n&emsp;按照以往来说，校验码都是拼接到数据的最后部分。而海明码则不是拼接到数据最后部分，这样能够快地确定纠错位置。\n\n&emsp;海明码规定，第 `i`位海明码$$P_i$$\n\n应该在**整个数据（有效数据+检验码）**第$$2^{i-1}$$\n\n的位置。如，第1位海明码在数据的第1位，第2位海明码在数据的第2位，第3位海明码在数据的第4位，第5位海明码在数据的第16位。\n\n#### 检验原理与步骤\n\n&emsp;假设海明码用**H**表示，有效数据用**D**表示，总数据位用**C**来表示。我们要明确一个概念，现在不仅仅是对有效数据在检验，而是对整个数据都在检验，与前面的检验方法有所不同。\n\n&emsp;假设我们有效数据为**n=4**位，即可算出校验数据只需要**k=3**位即可，太多了浪费。下面总数据的序号用二进制表示，方便之后理解。\n\n|        序号        |  111  |  110  |  101  |         100         |  011  |         010         |         001         |\n| :----------------: | :----: | :----: | :----: | :-----------------: | :----: | :-----------------: | :-----------------: |\n|  **海明码**  |   -   |   -   |   -   |$$H_3,2^{3-1}=b100$$|   -   |$$H_2,2^{2-1}=b010$$ | $$H_1,2^{1-1}=b001$$|\n| **有效数据** | $$D_4$$ | $$D_3$$ | $$D_2$$ | ——  | $$D_1$$ |        ——        |        ——        |\n\n那么如何计算H呢？只需要用**异或**即可，哪几位异或呢？\n\n&emsp;从上面我们知道，$$H_i$$\n\n对应于总数据的位置是$$2^{i-1}$$\n\n，显然数字$$2^{i-1}$$\n\n对应的二进制序列**只有一位**为1，而且恰好是**第i位**，其他都为0，不信可以写一写。我们只需要把**总数据序号**中，**第i位为1**的数据拿出来异或，异或后的值就是\n$$H_i$$\n\n的值了。\n\n总结下来说，不那么绕的来说就是，\n\n$$H_i$$\n\n对**序号**中**第i位为1**的数据进行检验。$$H_1 = D_1 \\bigoplus D_2 \\bigoplus D_4 \\\\ H_2 = D_1 \\bigoplus D_3 \\bigoplus D_4 \\\\H_3 = D_2 \\bigoplus D_3 \\bigoplus D_4$$\n\n&emsp;现在收到数据之后，如何进行检验呢？检验完之后，如果找错出错位呢？上述提到海明码计算使用的异或来做的，相当于把原始状态异或后保存到了海明码中。异或能够同为0，异为1。我们把原始状态保存到海明码中了，现在接收到的状态便在数据中，所以，只需要检验数据中的状态与原始状态是否相同即可。那么我们可以得出如下式子。\n\n$$S_1 = H_1 \\bigoplus D_1 \\bigoplus D_2 \\bigoplus D_4 \\\\ S_2 = H_2 \\bigoplus D_1 \\bigoplus D_3 \\bigoplus D_4 \\\\S_3 =H_3 \\bigoplus D_2 \\bigoplus D_3 \\bigoplus D_4$$\n\n&emsp;如果$$S_1S_2S_3 = 000$$\n\n，那么说明状态没有改变，接收到的数据是正确的。如果不为0呢？怎么知道哪里发生错误。显然我们在检验过程中有，$$H_1$$\n\n对序号第1位为1的所有数据进行检验，$$H_2$$\n\n对序号第2位为1的所有数据进行检验，$$H_3$$\n\n对序号第3位为1的所有数据进行了检验。\n\n&emsp;因此，$$S_i$$为1的话，代表序号中**第i位**为1的位置的数据有错误，将所有的S都拼接，即可确定发生错误在序号中的位置。如$$S_3S_2S_1=010$$，代表序号中第2位发生了错误，只需要把第2位进行取反即可。\n\n# 三、PPP协议\n\n## 1、PPP协议满足的需求\n\n- （1）简单：就追求着简单，采用CRC检验，如果发生错误了，直接丢弃帧，什么也不做。正确就收下帧。\n- （2）封装成帧：规定了特殊字段作为帧界定符。前面提到过，这里协议具体讲。\n- （3）透明性：保证数据透明性。前面提到过，这里协议具体讲。\n- （4）多种网络层协议：保证同一条物理链路上同时支持多种网络协议，如（IP和IPX等）。\n- （5）多种类型链路：除了要支持多种网络协议外，还需要在多种物理链路运行，如串并，电光等。\n- （6）差错检测：对收到的帧进行差错检测\n- （7）检测连接状态：能够判断链路是否正常工作\n- （8）最大传送单元：限定了点对点**最大传送单元MTU**，数据部分不包括头尾部分，默认值是1500字节。\n- （9）网络层地址协商：使得双方的网络层能够知晓对方IP地址\n- （10）数据压缩协商：提供一种方法来协商数据压缩算法，但不一定要标准化。\n\n## 2、PPP协议的帧格式\n\n| F(0x7E), 1B | A(0xFF), 1B | C(0x01), 1B | 协议, 2B | 数据部分, 1500B以内 | FCS, 2B | F(0x7E), 1B |\n| ----------- | ----------- | ----------- | -------- | ------------------- | ------- | ----------- |\n||||||||\n\n- **F**：帧界定符，二进制为：0111 1110。注意，这里有6个连续的1，之后会用到。\n- **A**：这个字段相当于保留字段，目前没有任何定义\n- **C**：同上\n- **协议**：表示数据部分使用的协议。比如，0x0021代表IP数据报。0xC021代表LCP（链路控制协议）数据。\n- **FCS**：帧检验序列，采用的是CRC检验\n\n## 3、PPP协议的透明传输\n\n&emsp;前面提到为什么需要透明传输，以及什么是透明传输。PPP协议有如下方法：\n\n### （1）字节填充\n\n&emsp;就是使用转义字符，转义字符定义为**0x7D（0111 1101）**\n\n- 1）如果数据中出现（0x7E），那么就变成 （0x7D，0x5E）\n- 2）如果数据中出现（0x7D），那么就变成（0x7D，0x5D）\n- 3）如果出现ASCII码控制字符，数值小于0x20的字符，那么就在此字符前面加上0x7D，并将其加以改变，比如加上0x20。\n\n### （2）零比特填充\n\n&emsp;我们前面提到，0x7E中有连续的6个1，那么我们只要保证数据中没有连续的6个1即可，具体做法是，每发现5个1，就填充1个0。接收数据后，只要每发现5个1，就删除后面的1个0。\n\n### （3）其他方法\n\n&emsp;这些不是PPP协议的内容，但是也是进行透明传输的方法。\n\n- 字符计数法：在帧的头部加上一个表示该帧后面跟随的字节数。这样，就能明确边界在哪了。这种方法的问题就是，出现一个错误，那么后面全部的帧都发生错误。\n- 违规编码法：在物理层常使用这种方法，如曼彻斯特编码中，一个比特位周期的电平要么是 高-低，要么是 低-高，所以，高-高或者低-低就是违规编码，我们用来作为帧的开始和结束。\n\n## 4、PPP协议的工作状态\n\n&emsp;我们知道PPP协议主要是为了传输网络层的数据，但是，数据链路层也有自己的数据需要传送，如有些链路需要建立连接。PPP协议组成应该包含了三个部分，**一是**将IP数据报封装到串行链路中，既支持异步链路，又支持面向比特的同步链路。**二是**用来建立、配置和测试数据链路连接的**链路控制协议LCP（Link Control Protocol）**。**三是**一套**网络控制协议（Network Control Protocol）**，这其中，每一个协议支持不同的网络层协议。\n\n&emsp;用户接入ISP后，会主动发送一系列LCP分组，以便建立LCP。紧接着，NCP就会为新接入的主机分配一个IP地址。用户通信完毕，NCP收回IP地址，并释放连接。步骤如下图所示：![image-20220616141536749](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206161415001.png)\n\n&emsp;PPP链路起始和终止状态都是**链路静止**状态，用户发起连接后（如连接一个WiFi，接上一根网线），进入了链路建立状态。这是LCP开始进行一些协商，发送LCP**配置请求帧**，包括**配置确认帧（接受）、配置否认帧（理解意思但不接受）和配置拒绝帧（无法识别或不接受）**。之后ISP对用户进行鉴别（如WiFi密码正确与否，账号密码登录，网费是否充足）。采用了**口令鉴别协议PAP（Password Authentication Protocol）或口令握手鉴别协议CHAP（Challenge-Handshake Authentication Protocol）**。之后便进入了网络层协议。\n\n# 四、数据链路层\n\n## 1、局域网的数据链路层\n\n&emsp;局域网工作的层次横跨了数据链路层和物理层。局域网内的主机共享连接在局域网上的各种软硬件资源，共享需要考虑的一个问题是，如何使众多用户能够合理而方便地共享通信媒体资源。这在技术上有两种方法：\n\n- （1）**静态划分信道**，如前面提到的时分复用等，这种信道划分的方法代价高\n- （2）**动态媒体接入控制技术**，分为：\n\n  > - **随机接入**：所有用户可以随时发送消息，但是如果恰巧不止一个用户在发送消息，那么就会产生**碰撞**（**即产生冲突**），因此需要有协议来解决这些碰撞。\n  > - **受控接入**：用户不能随时发送消息，而是服从一定控制发送消息，使用**轮询**方式\n  >\n\n## 2、数据链路层的划分\n\n&emsp;因为各个公司的协议不同，所以产生了很多不同种类的数据链路层，而IEEE 802 委员会将**局域网的数据链路层**拆分为**逻辑链路控制LLC（Logical Link Control）**和**媒体接入控制MAC（Medium Access Control）**两层。而委员会仅仅只能是制定标准的人，真正实行的还是各大企业，因此，最后局域网只剩下**以太网（DIX Ethernet V2）**了，**LLC**已经消失，只剩下**MAC**。\n\n## 3、适配器\n\n&emsp;计算机与外界局域网的连接都是通过**适配器（adapter）**，适配器是在主机箱内插入的一块网络接口板，称为**网络接口卡NIC**，简称**网卡**。适配器不仅仅包含**数据链路层**的功能，还需要实现**物理层**的功能。适配器有自己的**处理器（CPU）和存储器（RAM, ROM）**，因此，不需要使用计算机的CPU。**网卡**的ROM有**MAC**地址，而**计算机**的软件地址（**IP**地址），则在计算机的存储器中。\n\n## 4、信道划分介质访问控制\n\n&emsp;介质访问控制有，介质访问控制，随机访问介质访问控制和轮询访问介质访问控制。\n\n&emsp;信道划分介质访问控制便是之前讲的，复用技术：频分复用、时分复用、码分复用、波分复用\n\n## 5、随机访问介质访问控制\n\n### （1）ALOHA协议\n\n#### 纯ALOHA协议\n\n&emsp;各个用户想发送数据就发送数据，如果一段时间内没有收到确认，就认为发生了冲突，随机等待一段时间后再发送。假设网络负载（单位时间内所有站点发送成功和未成功而重传的帧数）为G，则纯ALOHA协议网络的吞吐量（单位时间内发送成功的平均帧数）为$$S=Ge^{-2G}$$\n\n。当G=1.5时，S≈0.184。\n\n#### 时隙ALOHA协议\n\n&emsp;讲各个用户时间同步起来，并且划分了一段段时隙，只有在时隙开始时，各个用户才可发送消息。其他基本与纯ALOHA协议一致。\n\n### （2）CSMA协议协议\n\n&emsp;**载波监听多路访问 ( Carrier Sense Multiple Access ) **协议，相比于ALOHA协议，多了一个载波监听装置。CSMA协议分为三种方式：\n\n- 1-坚持CSMA：结点需要发送数据，首先侦听信道，信道**空闲**就立马**发送**，信道**忙**，就一直**等待并持续监听**。\n- 非坚持CSMA：结点需要发送数据，首先侦听信道，信道**空闲**就立马**发送**，信道**忙**，就**等待**一个**随机**时间再重复上述过程\n- p-坚持CSMA：结点需要发送数据，首先侦听信道，信道**忙**就持续监听，信道**空闲**，以概率p发送数据，以概率1-p推迟到下个时隙，重复。\n\n### （3）CSMA/CD协议\n\n#### CSMA/CD协议介绍\n\n&emsp;**载波侦听多路访问/碰撞检测（Carrier Sense Multiple Access with Collision Detection，CSMA/CD）**过程如下：\n\n- 1）适配器从网络层获得一个分组，封装成以太网帧，放入适配器缓存，准备发送。\n- 2）如果适配器侦听到信道空闲，就发送该帧。侦听到忙，就持续侦听直到信道上没有信号能量，然后发送该帧\n- 3）在发送过程中，仍然持续检测信道，如果没有检测到碰撞，就顺利发送该帧。否则，中止发送，并发送一个拥塞信号。\n- 4）中止发送后，适配器执行指数退避算法，等到一段随机事件后返回步骤2。\n\n&emsp;**以太网**常常采用此方法进行处理冲突，以太网使用**曼彻斯特编码**，曼彻斯特在传输过程中自带了时钟信息，可以很方便的检测出当前信道是否有数据在发送。下面讲解**CSMA/CD**协议的要点：\n\n- **多点接入**：表示了是**总线型**，各台计算机以多点的方式接入到网络中\n- **载波监听**：也就是**边发送边监听**\n- **碰撞检测**：通过检测电压变化，判断网络是否发生了冲突\n\n#### 碰撞检测\n\n&emsp;首先，假设A、B两方在通信，规定了端到端的传播时延为$$\\tau$$。假设A向B发送数据，那么最多经过$$2\\tau$$\n\n的时间，A能够检测到碰撞发生与否（即，信号往返的时间）。显然，采用CSMA/CD协议的以太网只能实现**半双工通信**（我的理解是，总线型，只有一根信道，也就是对于任何一个主机而言，接收端也是发送端）。\n\n![image-20220706135253122](https://imagere.oss-cn-beijing.aliyuncs.com/img/202207061352402.png)\n\n&emsp;设想如下场景：\n\n- $$t=0$$，A检测到信道空闲，向B发送数据\n\n- $$ t=\\tau - \\delta$$，B检测到信道空闲，向A发送数据，$$\\delta$$为B发送数据到A的数据到达B的时间\n\n- $$ t= \\tau - \\frac{\\delta}{2}$$，也就是B发送数据后经过$$\\frac{\\delta}{2}$$后，A,B数据发生了碰撞\n- $$  t=\\tau$$，B检测到了碰撞\n\n- $$  t=2\\tau-\\delta$$，A检测到了碰撞\n\n- 当  $$  {\\lim\\limits_{\\delta \\to 0}}  $$ ，最慢到  $$  t=2\\tau  $$时，A检测到碰撞发生。\n\n&emsp;**最短帧长**：A最多在$$2\\tau$$的时间后能够检测到碰撞，因此把$$2\\tau$$称为**争用期**。发送方是在发送数据以及将要发送数据的时候才检测信道是否发生冲突，为了确保发送数据过程中，发送方能够检测到冲突，要求发送方在争用期中，一直发送数据。那么争用期中发送数据的帧长就是最短帧长，即**最短帧长**=$$2\\tau\\times$$数据传输率。例如，以太网规定争用期为$$51.2\\mu s$$，对于$$10Mb/s$$的以太网，最短帧长为$$512bit = 64B$$。凡是小于$$64B$$的帧都是由于冲突而异常中止的无效帧。\n\n#### 二进制退避算法\n\n- 1）确定基本的退避时间，通常为  $$  2\\tau  $$\n- 2）定义参数  $$  k$$，  $$  k = min[重传次数, 10]$$，重传次数即，此次是该帧第几次重传了，也就是发生了几次碰撞。\n- 3）从离散集合  $$  [0,\\quad1,\\quad,...,2^k-1]  $$  中随机取出一个数  $$ r$$，重传所需要的退避时间就是  $$  2r\\tau$$。\n- 4）当重传16次都未成功，那么丢弃此帧，并向上层（网络层）报告错误。\n\n### （4）CSMA/CA协议\n\n&emsp;**载波监听多路访问/碰撞避免（Carries Sense Multiple Access with Collision Avoidance）**协议，相比于CSMA/CD协议，将碰撞**检测**变成了碰撞**避免**。\n\n&emsp;**CSMA/CD**协议很好地应用于**有线局域网**中了，但在**无线局域网**中，则需要使用**CSMA/CA**协议。原因如下：\n\n- 1）接收信号的强度往往远小于发送信号的强度，因此要是实现碰撞检测，硬件花费大。\n- 2）无线通信中，并非所有的站点都能够听见对方，存在**隐蔽站**问题。\n\n&emsp;无线信道的通信质量远远小于有线信道，所以采用了**链路层确认/重传（ARQ）**方案，发送完一帧，需要收到确认才能发送下一帧。为了尽量避免碰撞，所有站发送完成后，必须等待一段很短的时间才能发送下一帧，这段时间间隔称为**帧间间隔（InterFrame Space, IFS）**，类型如下：\n\n- 1）SIFS（短IFS）：最短的IFS，用于分隔属于一次对话的各帧，如ACK帧，CTS帧，分片后的数据帧，以及所有回答AP探询的帧。\n- 2）PIFS（点协调IFS）：中等长度的IFS，在PCF操作中使用\n- 3）DIFS（分布式协调IFS）：最长的IFS，用于异步帧竞争访问的时延\n\n&emsp;CSMA/CA的退避算法和CSMA/CD的稍有不同，当且仅当信道空闲且当前为发送的第一个帧才不使用退避算法，其他时间都需要使用。CSMA/CA协议归纳如下：\n\n- 1）若站点有数据发送（该帧第一次发送），检测到信道空闲，等待DIFS后，发送整个数据帧\n- 2）否则，站点执行CSMA/CA退避算法，选取一个随机时间回退值。一旦检测到信道忙，退避计时器保持不变，信道空闲，计时器才计时\n- 3）当计时器减到0，发送数据帧\n- 4）发送站收到确认帧，发送第二帧时，从步骤2）开始。\n\n&emsp;隐蔽站问题：RTS和CTS\n\n- **RTS(Request  To Send)**：请求发送帧，每个站点发送数据帧之前广播发送一个RTS进行信道预约，包括源地址、目的地址、和此次通信持续时间。\n- **CTS(Clear To Send)**：允许发送帧，若信道空闲，AP广播发送一个CTS，包括此次发送持续时间（从RTS中获得）。任何站点听到此帧，将会抑制发送。\n\n### （5）CSMA/CD   VS   CSMA/CA\n\n- 1）CD可以检测冲突，无法避免；CA不能同时发送和检测冲突\n- 2）介质不同，CD是以太网，CA是无线局域网\n- 3）检测方式不同，CD是通过电压变化，CA通过能量检测、载波检测、能量载波混合检测三种检测信道的方式。\n\n## 6、轮询访问介质访问控制\n\n&emsp;令牌传递协议，物理上不必是环形，但是逻辑上是环形结构，过程如下：\n\n- 1）网络空闲时，环路中只有令牌帧在循环传递\n- 2）令牌传递到有数据发送的站点时，该站点就修改令牌中的一个标志位，并在令牌中附上自己的数据，令牌就变成一个数据帧\n- 3）数据帧沿着环路传输，接收到的站点一边转发数据，一边查看目的地址，如果目的地址是自己的，就复制下来该数据\n- 4）数据帧沿着环路到达源发送站点，就不再转发，同时，检测返回的帧来查看数据传输是否出错\n- 5）源站点传送完数据后，重新生成一个令牌，并且传送个下一个站点，交出控制权。\n\n# 五、数据链路层的流量控制与可靠传输\n\n## 1、停止-等待流量控制基本原理\n\n&emsp;发送方每发送一帧，接收方都需要发送确认帧。\n\n## 2、滑动窗口流量控制基本原理\n\n- 发送方与接收方都有自己的窗口大小\n- 发送方收到一个确认帧并且可以向前滑动的时候，滑动窗口才向前滑动\n- 接收方能够向前滑动的时候就向前滑动\n- 窗口大小都是固定的\n- 接收窗口先滑动，发送窗口才能滑动，这样就能起到流量控制的作用\n- 从滑动窗口看下面三种传输机制\n  - 停止-等待协议： 发送窗口=1，接收窗口=1\n  - 后退N帧协议：发送窗口>1，接收窗口=1\n  - 选择重传协议：发送窗口>1，接收窗口>1\n\n## 3、三种可靠传输协议\n\n&emsp;首先，需要对帧进行编号，考虑到节省，对帧编号用固定且少量的比特数进行编号。但是，引入的新问题便是，编号循环后，如何确定发送的帧是上一轮的还是此轮的或者是下一轮的呢？\n\n答：要求 $$ 发送窗口+接收窗口 \\leq 2^n,\\quad n为用于编号的比特数$$，至于为什么这样呢？最坏的情况，当接收窗口已经滑动到滑动窗口的尾部了，此时，当前轮发送仍未结束，但是当前发送双方能够扩展的长度应该不大于此轮编号长度才可以。\n\n### 3.1 停止-等待协议\n\n- 发送与接收窗口都是1\n- 一个帧被发送，该帧的确认帧需要被接收才能发送下一帧\n- 发送方有定时重传计时器\n- 编号的比特数便是：$$1+1 \\leq 2^n,\\quad n = 1$$即可满足\n- 如果确认帧没有被收到，那么发送方重新发送后，接收方直接丢弃并重新发送确认帧。\n\n&emsp;信道利用率低\n\n### 3.2 后退N帧协议（GBN）\n\n- 接收窗口为1，发送窗口为$$1\\leq W_T \\leq 2^n-1$$\n- 接收端只能接收滑动窗口内的帧，也就是只能一帧一帧按序接收\n- 接收端接收到错误的帧，或者接收到不在滑动窗口的帧（不管是窗口前或后）都丢弃\n- 接收端可以接收连续多帧，或者有数据发送的时候，才发送一个确认帧\n- 确认帧的意义是：对该帧及以前的确认帧都进行确认，并期望发送方发送下一帧\n- 接收方为每一帧都设置了一个定时重传定时器\n- 接收方没收到一个确认帧，滑动窗口的左端即可移动到该帧后面一个位置。\n\n&emsp;提高了信道利用率，但是如果有一帧出了问题，那么窗口前面的帧都需要重传，因此在误码率大的信道，信道利用率不一定比停等协议优。\n\n### 3.3 选择重传协议（SR）\n\n- 窗口尺寸：$$W_R=W_T = 2^{n-1}$$\n- 一帧接收和一帧确认，发送方只需要重传没有收到确认的帧即可\n- 互联网标准还没明确地对该协议规定，所以这里从略\n\n## 4、三种协议的信道计算\n\n### 4.1 信道利用率\n\n&emsp;信道利用率相对于发送方而言，有效发送数据的时间占整个发送周期的比率。比如，发送方从开始发送到接收确认帧为止，时间为T，此时发送了L比特数据，发送方数据传输速率为C，那么有：$$发送方发送有效数据的时间 = \\frac{L}{C},\\quad 占总时间的比值为：\\frac{L/C}{T}$$，利用率也是这个。\n\n&emsp;定义参数$$\\alpha = \\frac{\\tau}{T_0}$$，假设永远不发生碰撞，以太网利用率最高$$S_{max} = \\frac{T_0}{T_0 + \\tau}=\\frac{1}{1+a}$$\n\n### 4.2 信道吞吐量\n\n$$信道吞吐量 = 信道利用率 \\times 发送方的发送速率，\\quad = \\frac{L}{T}$$\n\n### 4.3 如何计算\n\n- 首先计算第一帧开始发送到第一个确认帧返回的时间\n- 然后计算这段时间内，发送方发送了多少有效数据，并计算发送有效数据的时间\n- 对于上面一点，停等协议就只发送了一帧数据，而后退N帧协议就发送了多帧数据，这段时间都要进行计算\n- 有效数据的时间除以上面总的时间，便是效率\n\n# 六、以太网\n\n## 1、MAC层\n\n&emsp;**硬件地址**又称为**物理地址**或**MAC地址**，是一个**48位**固化在**ROM**中的。MAC地址前24位称为组织唯一标识符OUI，后24位称为扩展唯一标识符EUI。第一个字节的最低二位规定为G/L位，表示Global/Local位，为0表示全球管理，为1表示本地管理。全球管理的地址有46位。\n\n&emsp;适配器会处理一下三种帧\n\n- 单播帧：一对一，目的MAC地址与本适配器的MAC地址相同就收下\n- 广播帧：一对全体，MAC地址为全1\n- 多播帧：一对多，发送给一部分站点，而不是全部站点，相当于群组\n\n&emsp;所有适配器都应该识别前面两种帧，有一种网络工具叫做**嗅探器（Sniffer）**能够识别所有的帧，包括MAC地址不是自己的也可以记录下来。\n\n## 2、MAC帧格式\n\n![image-20220719104733647](https://imagere.oss-cn-beijing.aliyuncs.com/img/202207191047007.png)\n\n- 源地址与目的地址，MAC地址\n- 类型，比如交付给上层的协议是什么，如IP：0x0800\n- FCS：使用CRC校验，只校验目的地址到FCS为止的字段，不包括前导码和帧开始定界符\n- 以太网规定最小帧长为64字节，所以数据段最小长度为64-6-6-2-4=46字节\n- 以太网采用曼彻斯特编码，当电压不再变化了，就代表已经结束传输了，所以帧结束定界符也就不需要\n- 前导码的作用是用来同步时钟频率的，帧开始定界符是用来告诉帧开始发送的标志\n\n对于下列的帧情况，以太网直接进行丢弃，不会重传\n\n- 帧长度不是整数个字节\n- FCS检验出错\n- MAC帧长度不是64-1518个字节的\n\n现在广泛使用的局域网也只剩下以太网了\n\n## 3、扩展以太网\n\n### 3.1 在物理层扩展以太网\n\n&emsp;过去使用粗缆或细缆，现在使用光纤\n\n### 3.2 在数据链路层扩展以太网\n\n&emsp;使用交换机进行扩展\n\n### 3.3 虚拟局域网\n\n&emsp;**虚拟局域网VLAN（Virtual LAN）**是局域网提供给用户的一种服务，而不是一种新型局域网。VLAN使用802.1Q帧，格式如下：\n\n![image-20220719121225767](https://imagere.oss-cn-beijing.aliyuncs.com/img/202207191212887.png)\n\n相比于以太网帧，多了VLAN标签。VLAN标签前两个字节为0x8100，后面为**VLAN标识符VID（VLAN ID）**，出入VID后，FCS需要重新计算。对于主机来说，并不知道自己的VID，所以主机发送给交换机的是普通以太网帧。交换机通过端口或者MAC地址划分VLAN，并且为VLAN分配好了VID。\n\n设想一下场景\n\n![image-20220719121409605](https://imagere.oss-cn-beijing.aliyuncs.com/img/202207191214702.png)\n\n- A向B发送数据，发送普通以太网帧给交换机#1，#1发现是同一VLAN下的主机，不需要增加VLAN标签，直接转发给B\n- A向E发送数据，#1通过汇聚链路将帧转发给#2，并增加VLAN标签，#2发送去掉VLAN标签，并转发给E\n- A向C发送数据，这种情况比较复杂，书上没讲\n\n## 4、扩展到高速以太网\n\n### 4.1 100BASE-T以太网\n\n- 速度：100Mb/s\n- 完全可以使用10Mb/s下的软件\n\n### 4.2 吉比特以太网\n\n- 速度：1Gb/s\n- 半双工使用CSMA/CD，全双工不使用\n- 向后兼容\n\n不改变网段最长长度，但是争用期由原来的64字节，变成512字节，使用如下方法来适用CSMA/CD。\n\n- 载波延伸：最短帧长仍然是64字节，但是为他扩充到512字节；引入的问题便是，发送了许多无用的数据\n- 分组突发：将多个短帧合起来发送\n\n### 4.3 10吉比特以太网\n\n- 速度：10Gb/s\n- 只工作在全双工模式\n\n### 4.4 40/100吉比特以太网\n\n- 速度：40/100Gb/s\n- 只工作在全双工\n\n# 七 、无线局域网\n\n&emsp;又称为802.11局域网\n\n## 1、有固定基础设施无线局域网\n\n&emsp;采用该星形拓扑，中心称为接入点（Access Point，AP）。基本服务集（Basic Service Set， BSS）包括一个接入点和若干移动站。安装AP时必须为其分配一个不超过32字节的服务集标识符（Service Set IDentifier，SSID）和一个信道。接入点AP在出厂就具有唯一的48位二进制数字的MAC地址，正式名称为**基本服务集标识符 BSSID**。\n\n&emsp;一个基本服务集，可以时孤立的，还可以通过其他AP，连接到一个**分配系统DS（Distribution System）**，然后再连接到另一个基本服务集，这样就构成一个**扩展服务集ESS（Extended Service Set）**，扩展服务集也有唯一标识称为**扩展服务集标识符ESSID**。\n\n移动站与接入点AP建立关联的方式由两种，一种是被动扫描，一种是主动扫描。\n\n### 被动扫描\n\n- 接入点AP周期性发送**信标帧（beacon frame）**，其中包含由若干系统参数，如SSID及支持的速率\n- 移动站A扫描了11个信道，选择愿意加入接入点AP所在的基本服务集BSS，于是发送**关联请求帧（Association Request frame）**\n- 接入点同意A发来的关联请求，向A发送**关联响应帧（Association Response frame）**\n\n### 主动扫描\n\n- A广播发送**探测请求帧（Probe Request frame）**，让所有的AP都能够知道有移动站要求建立关联\n- 有两个接入点回答**探测请求响应帧（Probe Response frame）**\n- A向一个站发送**关联请求帧**\n- 接入点向A发送**关联响应帧**\n\n## 2、无固定基础设施移动自组织网络\n\n&emsp;称为自组网络，没有上述服务中的AP，由一些平等状态的移动站相互通信组成的临时网络。各结点地位平等，中间结点都为转发点。\n\n&emsp;在军用，救援等中有很好的应用。\n\n&emsp;移动自组网络的一个子集——**无线传感器网络WSN（Wireless Sensor Network）**。\n\n## 3、MAC帧\n\n&emsp;分为数据帧、控制帧和管理帧。\n\n下面来讲解数据帧：\n\n![image-20220719131230352](https://imagere.oss-cn-beijing.aliyuncs.com/img/202207191312492.png)\n\n\n\n上述地址都是指MAC地址，其中地址4用于自组网络；\n\n| 去往AP | 来自AP |       地址1       |      地址2      |  地址3   | 地址4 |\n| :----: | :----: | :---------------: | :-------------: | :------: | :---: |\n|   0    |   1    | 接收地址=目的地址 | 发送地址=AP地址 |  源地址  |  ——   |\n|   1    |   0    |  接收地址=AP地址  | 发送地址=源地址 | 目的地址 |  ——   |\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/计算机网络技术之数据链路层.md","raw":"---\ntitle: 计算机网络技术之数据链路层\ntags: \n- 计算机网络技术\n- 物理层\n- 考研\nexcerpt: 计算机网络技术之数据链路层\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202206161012193.png\ncategories:\n- 计算机网络技术\nmathjax: true\ndate: 2022-06-16 10:12:19\n---\n# 一、基础知识\n\n## 1、数据链路层的主要任务\n\n&emsp;主要包括三个任务：**封装成帧**，**透明传输**和**差错检测**。点对点通信。\n\n- 将网络层交下来的IP数据报封装成帧\n- 把封装好的帧发送给其他节点的数据链路层\n- 接收其他节点发过来的帧，检测如果无差错，提取出IP数据报并交付给网络层；有差错就直接丢弃帧。\n\n## 2、名词解释\n\n- 链路：从一个节点到另一个节点的一段物理线路\n- 数据链路：在链路基础上，增加了执行通信协议的软硬件，构成了数据链路。\n- 网络适配器：称为网卡，实现上述协议的软硬件\n- 帧：数据链路层的协议数据单元（PDU），也是最小传输单位。\n\n# 二、任务实现\n\n## 1、封装成帧\n\n&emsp;将上一层的网络层交付下来的数据报，加上帧首部与帧尾部之后，交付给物理层进行透明传输。也**只有数据链路层**会添加尾部。并且还会在帧前面和尾部加上帧界定符，帧开始加入**帧开始符（SOH，0x01）**，帧结束处加上**帧结束符（EOT，0x04）**，帧结束符可以判断帧是否完整，除此之外，**PPP协议**还会加入**前导码（7个字节，0101...01）**，前导码之后才是帧开始符。**注意：**上述0x01和0x04在谢书是这样，很多其他地方查的都不一样。\n\n&emsp;规定帧的格式与使用的协议有关，我们将会在**PPP协议**中具体讲到。\n\n## 2、透明传输\n\n&emsp;我们已经知道了，帧开始符与帧结束符是一个固定的十六进制数，假如我们传输的数据中包含帧结束符的十六进制数据，那么应该如何处理这种情况呢？这就要求我们对数据进行**透明传输**。最常用的方法就是使用转义字符，也就是**字节填充**或**字符填充**，在数据部分中，有帧结束符的字符前面插入**ESC（0x1B）**。\n\n&emsp;实现透明传输与使用的协议有关，所以我们将会在**PPP协议**中具体讲到。\n\n## 3、差错检测\n\n&emsp;现在的通信线路都不是很理想，容易发生比特错误，即1变成0或者0变成1。因此，差错检测是非常有必要的。常用的差错检测方法有，奇偶校验码和循环冗余码。除了进行检错之外，还发明了一种具有纠错功能的方法——海明码。\n\n### 1）检错之奇偶校验码\n\n&emsp;奇偶校验码包括**奇校验码**和**偶校验码**，发送的比特流包含n位，其中前n-1位是数据，最后一位是**校验位**。\n\n- 奇校验：**n-1位数据**加上**校验位**的中**1的个数**是**奇**数，**n位**比特进行**异或**为**1**。\n- 偶校验：**n-1位数据**加上**校验位**的中**1的个数**是**偶**数，**n位**比特进行**异或**为**0**。\n\n&emsp;异或是一个比较重要的运算，在检验中常常用到。这里用异或是杀鸡用牛刀，海明码需要用到异或。这里给出异或的性质：\n\n| 左操作数 |     异或     | 右操作数 | = | 结果 |\n| :------: | :----------: | :------: | :-: | :--: |\n|    0    | $$ \\bigoplus $$ |    0    | = |  0  |\n|    0    | $$\\bigoplus$$ |    1    | = |  1  |\n|    1    | $$\\bigoplus$$ |    0    | = |  1  |\n|    1    | $$\\bigoplus$$ |    1    | = |  0  |\n\n- 与0异或，可以留出原来的状态\n- 与1异或，可以获取相反的状态\n- 2k和1异或是0，2k-1个1异或还是1\n- 满足交换律，  $$  a \\bigoplus b = b\\bigoplus a  $$\n\n### 2）检错之循环冗余码\n\n&emsp;上述编码其实只能够检测到奇数比特出错，如果是偶数个比特出错，检测就会失效了。所以，循环冗余码能够更有效地检测帧的正确与否，但是循环冗余码不能进行纠错，也就是不能确定错误出在哪个位置。循环冗余码检测通过之后，能够以接近1的概率认为此帧没有出错。并且CRC可以由硬件完成，所以速度非常快。\n\n#### 步骤\n\n- 首先，双方协定一个多项式，多项式能够对应于一个二进制比特序列**除数P**，P有h位\n- 用**数据M**后面拼接上**h-1位0**，对上述P进行**模2除**法，小学数学学到的**除过程**中用的**减法**变成了**异或**运算而已。\n- 最后得到的**余数**长度应该是**比P少1位**，少不止1位，就在前面填充0，这个拼接到M的后面就成为了新的数据。\n- 接收方收到数据后，只需要把**接收到的数据**对**P**进行**模2除**法，如果**余数为0**，便**通过**，然后再把最后的检验位去除便可。\n\n其中，**除数P**应该是：\n\n- **除数P**：\n\n  > &emsp;一个包含n位的序列，对应的多项式应该是\n  >\n  > $$a_{n-1}X^{n-1}+a_{n-2}X^{n-2}+...+a_1X^1+a_0X^0$$\n  >\n  > ，至于怎么转成二进制序列呢？\n  >\n  > 如二进制序列**110110**对应的多项式应该是\n  >\n  > $$1\\times2^5 + 1\\times2^4+0\\times2^3+1\\times2^2+1\\times2^1+0\\times2^0$$\n  >\n  > 。\n  >\n- **现在广泛使用的多项式：**\n\n  > ① **CRC-16:** \n  >\n  > $$X^{16}+X^{15}+X^{2}+1$$\n  >\n  >\n  > ② **CRC-CCITT:** \n  >\n  > $$X^{16}+X^{12}+X^{5}+1$$\n  >\n  >\n  > ③ **CRC-32:** \n  >\n  > $$X^{32}+X^{26}+X^{23}+X^{22}+X^{16}+X^{12}+X^{11}+X^{10}+X^{8}+X^{7}+X^{5}+X^{4}+X^{2}+X^{}+1$$\n  >\n  >\n\n### 3）纠错之海明码\n\n&emsp;前面提到的两种方法，都只适用于检错，如果出现差错，那么只能丢弃差错帧。而海明码，不仅可以检测出差错帧，还能检测出在哪出现的差错帧，并对其进行纠正。但是，海明码也只能**发现双比特错误**，**纠正单比特错误**。\n\n- 海明距离：两个比特码对应位不同的个数\n- **纠错**d位，需要**码距**为**2d+1**的解决方案\n- **检错**d位，需要**码距**为**d+1**的解决方案\n\n#### 确定检验位数\n\n&emsp;如果需要对**长度为n**的有效信息进行检验，需要**k位**检验码，n与k之间的关系式应该是怎样的呢？\n\n&emsp;首先，我们知道，海明码只对单个比特进行纠错，就是假设只有单个比特发生错误。那么，接收方收到的数据有多少种情况呢？应该是有**有效信息发生错误（n种）**加上**校验码发生错误（k种）**再加上**全部正确（1种）**的总共$$n+k+1$$种情况。那么，k位校验码能够代表多少种情况呢？应该是$$2^k$$种情况。所以，得到**关系式**为：$$n+k+1\\leq2^k$$。\n\n#### 校验码应该如何放置\n\n&emsp;按照以往来说，校验码都是拼接到数据的最后部分。而海明码则不是拼接到数据最后部分，这样能够快地确定纠错位置。\n\n&emsp;海明码规定，第 `i`位海明码$$P_i$$\n\n应该在**整个数据（有效数据+检验码）**第$$2^{i-1}$$\n\n的位置。如，第1位海明码在数据的第1位，第2位海明码在数据的第2位，第3位海明码在数据的第4位，第5位海明码在数据的第16位。\n\n#### 检验原理与步骤\n\n&emsp;假设海明码用**H**表示，有效数据用**D**表示，总数据位用**C**来表示。我们要明确一个概念，现在不仅仅是对有效数据在检验，而是对整个数据都在检验，与前面的检验方法有所不同。\n\n&emsp;假设我们有效数据为**n=4**位，即可算出校验数据只需要**k=3**位即可，太多了浪费。下面总数据的序号用二进制表示，方便之后理解。\n\n|        序号        |  111  |  110  |  101  |         100         |  011  |         010         |         001         |\n| :----------------: | :----: | :----: | :----: | :-----------------: | :----: | :-----------------: | :-----------------: |\n|  **海明码**  |   -   |   -   |   -   |$$H_3,2^{3-1}=b100$$|   -   |$$H_2,2^{2-1}=b010$$ | $$H_1,2^{1-1}=b001$$|\n| **有效数据** | $$D_4$$ | $$D_3$$ | $$D_2$$ | ——  | $$D_1$$ |        ——        |        ——        |\n\n那么如何计算H呢？只需要用**异或**即可，哪几位异或呢？\n\n&emsp;从上面我们知道，$$H_i$$\n\n对应于总数据的位置是$$2^{i-1}$$\n\n，显然数字$$2^{i-1}$$\n\n对应的二进制序列**只有一位**为1，而且恰好是**第i位**，其他都为0，不信可以写一写。我们只需要把**总数据序号**中，**第i位为1**的数据拿出来异或，异或后的值就是\n$$H_i$$\n\n的值了。\n\n总结下来说，不那么绕的来说就是，\n\n$$H_i$$\n\n对**序号**中**第i位为1**的数据进行检验。$$H_1 = D_1 \\bigoplus D_2 \\bigoplus D_4 \\\\ H_2 = D_1 \\bigoplus D_3 \\bigoplus D_4 \\\\H_3 = D_2 \\bigoplus D_3 \\bigoplus D_4$$\n\n&emsp;现在收到数据之后，如何进行检验呢？检验完之后，如果找错出错位呢？上述提到海明码计算使用的异或来做的，相当于把原始状态异或后保存到了海明码中。异或能够同为0，异为1。我们把原始状态保存到海明码中了，现在接收到的状态便在数据中，所以，只需要检验数据中的状态与原始状态是否相同即可。那么我们可以得出如下式子。\n\n$$S_1 = H_1 \\bigoplus D_1 \\bigoplus D_2 \\bigoplus D_4 \\\\ S_2 = H_2 \\bigoplus D_1 \\bigoplus D_3 \\bigoplus D_4 \\\\S_3 =H_3 \\bigoplus D_2 \\bigoplus D_3 \\bigoplus D_4$$\n\n&emsp;如果$$S_1S_2S_3 = 000$$\n\n，那么说明状态没有改变，接收到的数据是正确的。如果不为0呢？怎么知道哪里发生错误。显然我们在检验过程中有，$$H_1$$\n\n对序号第1位为1的所有数据进行检验，$$H_2$$\n\n对序号第2位为1的所有数据进行检验，$$H_3$$\n\n对序号第3位为1的所有数据进行了检验。\n\n&emsp;因此，$$S_i$$为1的话，代表序号中**第i位**为1的位置的数据有错误，将所有的S都拼接，即可确定发生错误在序号中的位置。如$$S_3S_2S_1=010$$，代表序号中第2位发生了错误，只需要把第2位进行取反即可。\n\n# 三、PPP协议\n\n## 1、PPP协议满足的需求\n\n- （1）简单：就追求着简单，采用CRC检验，如果发生错误了，直接丢弃帧，什么也不做。正确就收下帧。\n- （2）封装成帧：规定了特殊字段作为帧界定符。前面提到过，这里协议具体讲。\n- （3）透明性：保证数据透明性。前面提到过，这里协议具体讲。\n- （4）多种网络层协议：保证同一条物理链路上同时支持多种网络协议，如（IP和IPX等）。\n- （5）多种类型链路：除了要支持多种网络协议外，还需要在多种物理链路运行，如串并，电光等。\n- （6）差错检测：对收到的帧进行差错检测\n- （7）检测连接状态：能够判断链路是否正常工作\n- （8）最大传送单元：限定了点对点**最大传送单元MTU**，数据部分不包括头尾部分，默认值是1500字节。\n- （9）网络层地址协商：使得双方的网络层能够知晓对方IP地址\n- （10）数据压缩协商：提供一种方法来协商数据压缩算法，但不一定要标准化。\n\n## 2、PPP协议的帧格式\n\n| F(0x7E), 1B | A(0xFF), 1B | C(0x01), 1B | 协议, 2B | 数据部分, 1500B以内 | FCS, 2B | F(0x7E), 1B |\n| ----------- | ----------- | ----------- | -------- | ------------------- | ------- | ----------- |\n||||||||\n\n- **F**：帧界定符，二进制为：0111 1110。注意，这里有6个连续的1，之后会用到。\n- **A**：这个字段相当于保留字段，目前没有任何定义\n- **C**：同上\n- **协议**：表示数据部分使用的协议。比如，0x0021代表IP数据报。0xC021代表LCP（链路控制协议）数据。\n- **FCS**：帧检验序列，采用的是CRC检验\n\n## 3、PPP协议的透明传输\n\n&emsp;前面提到为什么需要透明传输，以及什么是透明传输。PPP协议有如下方法：\n\n### （1）字节填充\n\n&emsp;就是使用转义字符，转义字符定义为**0x7D（0111 1101）**\n\n- 1）如果数据中出现（0x7E），那么就变成 （0x7D，0x5E）\n- 2）如果数据中出现（0x7D），那么就变成（0x7D，0x5D）\n- 3）如果出现ASCII码控制字符，数值小于0x20的字符，那么就在此字符前面加上0x7D，并将其加以改变，比如加上0x20。\n\n### （2）零比特填充\n\n&emsp;我们前面提到，0x7E中有连续的6个1，那么我们只要保证数据中没有连续的6个1即可，具体做法是，每发现5个1，就填充1个0。接收数据后，只要每发现5个1，就删除后面的1个0。\n\n### （3）其他方法\n\n&emsp;这些不是PPP协议的内容，但是也是进行透明传输的方法。\n\n- 字符计数法：在帧的头部加上一个表示该帧后面跟随的字节数。这样，就能明确边界在哪了。这种方法的问题就是，出现一个错误，那么后面全部的帧都发生错误。\n- 违规编码法：在物理层常使用这种方法，如曼彻斯特编码中，一个比特位周期的电平要么是 高-低，要么是 低-高，所以，高-高或者低-低就是违规编码，我们用来作为帧的开始和结束。\n\n## 4、PPP协议的工作状态\n\n&emsp;我们知道PPP协议主要是为了传输网络层的数据，但是，数据链路层也有自己的数据需要传送，如有些链路需要建立连接。PPP协议组成应该包含了三个部分，**一是**将IP数据报封装到串行链路中，既支持异步链路，又支持面向比特的同步链路。**二是**用来建立、配置和测试数据链路连接的**链路控制协议LCP（Link Control Protocol）**。**三是**一套**网络控制协议（Network Control Protocol）**，这其中，每一个协议支持不同的网络层协议。\n\n&emsp;用户接入ISP后，会主动发送一系列LCP分组，以便建立LCP。紧接着，NCP就会为新接入的主机分配一个IP地址。用户通信完毕，NCP收回IP地址，并释放连接。步骤如下图所示：![image-20220616141536749](https://imagere.oss-cn-beijing.aliyuncs.com/img/202206161415001.png)\n\n&emsp;PPP链路起始和终止状态都是**链路静止**状态，用户发起连接后（如连接一个WiFi，接上一根网线），进入了链路建立状态。这是LCP开始进行一些协商，发送LCP**配置请求帧**，包括**配置确认帧（接受）、配置否认帧（理解意思但不接受）和配置拒绝帧（无法识别或不接受）**。之后ISP对用户进行鉴别（如WiFi密码正确与否，账号密码登录，网费是否充足）。采用了**口令鉴别协议PAP（Password Authentication Protocol）或口令握手鉴别协议CHAP（Challenge-Handshake Authentication Protocol）**。之后便进入了网络层协议。\n\n# 四、数据链路层\n\n## 1、局域网的数据链路层\n\n&emsp;局域网工作的层次横跨了数据链路层和物理层。局域网内的主机共享连接在局域网上的各种软硬件资源，共享需要考虑的一个问题是，如何使众多用户能够合理而方便地共享通信媒体资源。这在技术上有两种方法：\n\n- （1）**静态划分信道**，如前面提到的时分复用等，这种信道划分的方法代价高\n- （2）**动态媒体接入控制技术**，分为：\n\n  > - **随机接入**：所有用户可以随时发送消息，但是如果恰巧不止一个用户在发送消息，那么就会产生**碰撞**（**即产生冲突**），因此需要有协议来解决这些碰撞。\n  > - **受控接入**：用户不能随时发送消息，而是服从一定控制发送消息，使用**轮询**方式\n  >\n\n## 2、数据链路层的划分\n\n&emsp;因为各个公司的协议不同，所以产生了很多不同种类的数据链路层，而IEEE 802 委员会将**局域网的数据链路层**拆分为**逻辑链路控制LLC（Logical Link Control）**和**媒体接入控制MAC（Medium Access Control）**两层。而委员会仅仅只能是制定标准的人，真正实行的还是各大企业，因此，最后局域网只剩下**以太网（DIX Ethernet V2）**了，**LLC**已经消失，只剩下**MAC**。\n\n## 3、适配器\n\n&emsp;计算机与外界局域网的连接都是通过**适配器（adapter）**，适配器是在主机箱内插入的一块网络接口板，称为**网络接口卡NIC**，简称**网卡**。适配器不仅仅包含**数据链路层**的功能，还需要实现**物理层**的功能。适配器有自己的**处理器（CPU）和存储器（RAM, ROM）**，因此，不需要使用计算机的CPU。**网卡**的ROM有**MAC**地址，而**计算机**的软件地址（**IP**地址），则在计算机的存储器中。\n\n## 4、信道划分介质访问控制\n\n&emsp;介质访问控制有，介质访问控制，随机访问介质访问控制和轮询访问介质访问控制。\n\n&emsp;信道划分介质访问控制便是之前讲的，复用技术：频分复用、时分复用、码分复用、波分复用\n\n## 5、随机访问介质访问控制\n\n### （1）ALOHA协议\n\n#### 纯ALOHA协议\n\n&emsp;各个用户想发送数据就发送数据，如果一段时间内没有收到确认，就认为发生了冲突，随机等待一段时间后再发送。假设网络负载（单位时间内所有站点发送成功和未成功而重传的帧数）为G，则纯ALOHA协议网络的吞吐量（单位时间内发送成功的平均帧数）为$$S=Ge^{-2G}$$\n\n。当G=1.5时，S≈0.184。\n\n#### 时隙ALOHA协议\n\n&emsp;讲各个用户时间同步起来，并且划分了一段段时隙，只有在时隙开始时，各个用户才可发送消息。其他基本与纯ALOHA协议一致。\n\n### （2）CSMA协议协议\n\n&emsp;**载波监听多路访问 ( Carrier Sense Multiple Access ) **协议，相比于ALOHA协议，多了一个载波监听装置。CSMA协议分为三种方式：\n\n- 1-坚持CSMA：结点需要发送数据，首先侦听信道，信道**空闲**就立马**发送**，信道**忙**，就一直**等待并持续监听**。\n- 非坚持CSMA：结点需要发送数据，首先侦听信道，信道**空闲**就立马**发送**，信道**忙**，就**等待**一个**随机**时间再重复上述过程\n- p-坚持CSMA：结点需要发送数据，首先侦听信道，信道**忙**就持续监听，信道**空闲**，以概率p发送数据，以概率1-p推迟到下个时隙，重复。\n\n### （3）CSMA/CD协议\n\n#### CSMA/CD协议介绍\n\n&emsp;**载波侦听多路访问/碰撞检测（Carrier Sense Multiple Access with Collision Detection，CSMA/CD）**过程如下：\n\n- 1）适配器从网络层获得一个分组，封装成以太网帧，放入适配器缓存，准备发送。\n- 2）如果适配器侦听到信道空闲，就发送该帧。侦听到忙，就持续侦听直到信道上没有信号能量，然后发送该帧\n- 3）在发送过程中，仍然持续检测信道，如果没有检测到碰撞，就顺利发送该帧。否则，中止发送，并发送一个拥塞信号。\n- 4）中止发送后，适配器执行指数退避算法，等到一段随机事件后返回步骤2。\n\n&emsp;**以太网**常常采用此方法进行处理冲突，以太网使用**曼彻斯特编码**，曼彻斯特在传输过程中自带了时钟信息，可以很方便的检测出当前信道是否有数据在发送。下面讲解**CSMA/CD**协议的要点：\n\n- **多点接入**：表示了是**总线型**，各台计算机以多点的方式接入到网络中\n- **载波监听**：也就是**边发送边监听**\n- **碰撞检测**：通过检测电压变化，判断网络是否发生了冲突\n\n#### 碰撞检测\n\n&emsp;首先，假设A、B两方在通信，规定了端到端的传播时延为$$\\tau$$。假设A向B发送数据，那么最多经过$$2\\tau$$\n\n的时间，A能够检测到碰撞发生与否（即，信号往返的时间）。显然，采用CSMA/CD协议的以太网只能实现**半双工通信**（我的理解是，总线型，只有一根信道，也就是对于任何一个主机而言，接收端也是发送端）。\n\n![image-20220706135253122](https://imagere.oss-cn-beijing.aliyuncs.com/img/202207061352402.png)\n\n&emsp;设想如下场景：\n\n- $$t=0$$，A检测到信道空闲，向B发送数据\n\n- $$ t=\\tau - \\delta$$，B检测到信道空闲，向A发送数据，$$\\delta$$为B发送数据到A的数据到达B的时间\n\n- $$ t= \\tau - \\frac{\\delta}{2}$$，也就是B发送数据后经过$$\\frac{\\delta}{2}$$后，A,B数据发生了碰撞\n- $$  t=\\tau$$，B检测到了碰撞\n\n- $$  t=2\\tau-\\delta$$，A检测到了碰撞\n\n- 当  $$  {\\lim\\limits_{\\delta \\to 0}}  $$ ，最慢到  $$  t=2\\tau  $$时，A检测到碰撞发生。\n\n&emsp;**最短帧长**：A最多在$$2\\tau$$的时间后能够检测到碰撞，因此把$$2\\tau$$称为**争用期**。发送方是在发送数据以及将要发送数据的时候才检测信道是否发生冲突，为了确保发送数据过程中，发送方能够检测到冲突，要求发送方在争用期中，一直发送数据。那么争用期中发送数据的帧长就是最短帧长，即**最短帧长**=$$2\\tau\\times$$数据传输率。例如，以太网规定争用期为$$51.2\\mu s$$，对于$$10Mb/s$$的以太网，最短帧长为$$512bit = 64B$$。凡是小于$$64B$$的帧都是由于冲突而异常中止的无效帧。\n\n#### 二进制退避算法\n\n- 1）确定基本的退避时间，通常为  $$  2\\tau  $$\n- 2）定义参数  $$  k$$，  $$  k = min[重传次数, 10]$$，重传次数即，此次是该帧第几次重传了，也就是发生了几次碰撞。\n- 3）从离散集合  $$  [0,\\quad1,\\quad,...,2^k-1]  $$  中随机取出一个数  $$ r$$，重传所需要的退避时间就是  $$  2r\\tau$$。\n- 4）当重传16次都未成功，那么丢弃此帧，并向上层（网络层）报告错误。\n\n### （4）CSMA/CA协议\n\n&emsp;**载波监听多路访问/碰撞避免（Carries Sense Multiple Access with Collision Avoidance）**协议，相比于CSMA/CD协议，将碰撞**检测**变成了碰撞**避免**。\n\n&emsp;**CSMA/CD**协议很好地应用于**有线局域网**中了，但在**无线局域网**中，则需要使用**CSMA/CA**协议。原因如下：\n\n- 1）接收信号的强度往往远小于发送信号的强度，因此要是实现碰撞检测，硬件花费大。\n- 2）无线通信中，并非所有的站点都能够听见对方，存在**隐蔽站**问题。\n\n&emsp;无线信道的通信质量远远小于有线信道，所以采用了**链路层确认/重传（ARQ）**方案，发送完一帧，需要收到确认才能发送下一帧。为了尽量避免碰撞，所有站发送完成后，必须等待一段很短的时间才能发送下一帧，这段时间间隔称为**帧间间隔（InterFrame Space, IFS）**，类型如下：\n\n- 1）SIFS（短IFS）：最短的IFS，用于分隔属于一次对话的各帧，如ACK帧，CTS帧，分片后的数据帧，以及所有回答AP探询的帧。\n- 2）PIFS（点协调IFS）：中等长度的IFS，在PCF操作中使用\n- 3）DIFS（分布式协调IFS）：最长的IFS，用于异步帧竞争访问的时延\n\n&emsp;CSMA/CA的退避算法和CSMA/CD的稍有不同，当且仅当信道空闲且当前为发送的第一个帧才不使用退避算法，其他时间都需要使用。CSMA/CA协议归纳如下：\n\n- 1）若站点有数据发送（该帧第一次发送），检测到信道空闲，等待DIFS后，发送整个数据帧\n- 2）否则，站点执行CSMA/CA退避算法，选取一个随机时间回退值。一旦检测到信道忙，退避计时器保持不变，信道空闲，计时器才计时\n- 3）当计时器减到0，发送数据帧\n- 4）发送站收到确认帧，发送第二帧时，从步骤2）开始。\n\n&emsp;隐蔽站问题：RTS和CTS\n\n- **RTS(Request  To Send)**：请求发送帧，每个站点发送数据帧之前广播发送一个RTS进行信道预约，包括源地址、目的地址、和此次通信持续时间。\n- **CTS(Clear To Send)**：允许发送帧，若信道空闲，AP广播发送一个CTS，包括此次发送持续时间（从RTS中获得）。任何站点听到此帧，将会抑制发送。\n\n### （5）CSMA/CD   VS   CSMA/CA\n\n- 1）CD可以检测冲突，无法避免；CA不能同时发送和检测冲突\n- 2）介质不同，CD是以太网，CA是无线局域网\n- 3）检测方式不同，CD是通过电压变化，CA通过能量检测、载波检测、能量载波混合检测三种检测信道的方式。\n\n## 6、轮询访问介质访问控制\n\n&emsp;令牌传递协议，物理上不必是环形，但是逻辑上是环形结构，过程如下：\n\n- 1）网络空闲时，环路中只有令牌帧在循环传递\n- 2）令牌传递到有数据发送的站点时，该站点就修改令牌中的一个标志位，并在令牌中附上自己的数据，令牌就变成一个数据帧\n- 3）数据帧沿着环路传输，接收到的站点一边转发数据，一边查看目的地址，如果目的地址是自己的，就复制下来该数据\n- 4）数据帧沿着环路到达源发送站点，就不再转发，同时，检测返回的帧来查看数据传输是否出错\n- 5）源站点传送完数据后，重新生成一个令牌，并且传送个下一个站点，交出控制权。\n\n# 五、数据链路层的流量控制与可靠传输\n\n## 1、停止-等待流量控制基本原理\n\n&emsp;发送方每发送一帧，接收方都需要发送确认帧。\n\n## 2、滑动窗口流量控制基本原理\n\n- 发送方与接收方都有自己的窗口大小\n- 发送方收到一个确认帧并且可以向前滑动的时候，滑动窗口才向前滑动\n- 接收方能够向前滑动的时候就向前滑动\n- 窗口大小都是固定的\n- 接收窗口先滑动，发送窗口才能滑动，这样就能起到流量控制的作用\n- 从滑动窗口看下面三种传输机制\n  - 停止-等待协议： 发送窗口=1，接收窗口=1\n  - 后退N帧协议：发送窗口>1，接收窗口=1\n  - 选择重传协议：发送窗口>1，接收窗口>1\n\n## 3、三种可靠传输协议\n\n&emsp;首先，需要对帧进行编号，考虑到节省，对帧编号用固定且少量的比特数进行编号。但是，引入的新问题便是，编号循环后，如何确定发送的帧是上一轮的还是此轮的或者是下一轮的呢？\n\n答：要求 $$ 发送窗口+接收窗口 \\leq 2^n,\\quad n为用于编号的比特数$$，至于为什么这样呢？最坏的情况，当接收窗口已经滑动到滑动窗口的尾部了，此时，当前轮发送仍未结束，但是当前发送双方能够扩展的长度应该不大于此轮编号长度才可以。\n\n### 3.1 停止-等待协议\n\n- 发送与接收窗口都是1\n- 一个帧被发送，该帧的确认帧需要被接收才能发送下一帧\n- 发送方有定时重传计时器\n- 编号的比特数便是：$$1+1 \\leq 2^n,\\quad n = 1$$即可满足\n- 如果确认帧没有被收到，那么发送方重新发送后，接收方直接丢弃并重新发送确认帧。\n\n&emsp;信道利用率低\n\n### 3.2 后退N帧协议（GBN）\n\n- 接收窗口为1，发送窗口为$$1\\leq W_T \\leq 2^n-1$$\n- 接收端只能接收滑动窗口内的帧，也就是只能一帧一帧按序接收\n- 接收端接收到错误的帧，或者接收到不在滑动窗口的帧（不管是窗口前或后）都丢弃\n- 接收端可以接收连续多帧，或者有数据发送的时候，才发送一个确认帧\n- 确认帧的意义是：对该帧及以前的确认帧都进行确认，并期望发送方发送下一帧\n- 接收方为每一帧都设置了一个定时重传定时器\n- 接收方没收到一个确认帧，滑动窗口的左端即可移动到该帧后面一个位置。\n\n&emsp;提高了信道利用率，但是如果有一帧出了问题，那么窗口前面的帧都需要重传，因此在误码率大的信道，信道利用率不一定比停等协议优。\n\n### 3.3 选择重传协议（SR）\n\n- 窗口尺寸：$$W_R=W_T = 2^{n-1}$$\n- 一帧接收和一帧确认，发送方只需要重传没有收到确认的帧即可\n- 互联网标准还没明确地对该协议规定，所以这里从略\n\n## 4、三种协议的信道计算\n\n### 4.1 信道利用率\n\n&emsp;信道利用率相对于发送方而言，有效发送数据的时间占整个发送周期的比率。比如，发送方从开始发送到接收确认帧为止，时间为T，此时发送了L比特数据，发送方数据传输速率为C，那么有：$$发送方发送有效数据的时间 = \\frac{L}{C},\\quad 占总时间的比值为：\\frac{L/C}{T}$$，利用率也是这个。\n\n&emsp;定义参数$$\\alpha = \\frac{\\tau}{T_0}$$，假设永远不发生碰撞，以太网利用率最高$$S_{max} = \\frac{T_0}{T_0 + \\tau}=\\frac{1}{1+a}$$\n\n### 4.2 信道吞吐量\n\n$$信道吞吐量 = 信道利用率 \\times 发送方的发送速率，\\quad = \\frac{L}{T}$$\n\n### 4.3 如何计算\n\n- 首先计算第一帧开始发送到第一个确认帧返回的时间\n- 然后计算这段时间内，发送方发送了多少有效数据，并计算发送有效数据的时间\n- 对于上面一点，停等协议就只发送了一帧数据，而后退N帧协议就发送了多帧数据，这段时间都要进行计算\n- 有效数据的时间除以上面总的时间，便是效率\n\n# 六、以太网\n\n## 1、MAC层\n\n&emsp;**硬件地址**又称为**物理地址**或**MAC地址**，是一个**48位**固化在**ROM**中的。MAC地址前24位称为组织唯一标识符OUI，后24位称为扩展唯一标识符EUI。第一个字节的最低二位规定为G/L位，表示Global/Local位，为0表示全球管理，为1表示本地管理。全球管理的地址有46位。\n\n&emsp;适配器会处理一下三种帧\n\n- 单播帧：一对一，目的MAC地址与本适配器的MAC地址相同就收下\n- 广播帧：一对全体，MAC地址为全1\n- 多播帧：一对多，发送给一部分站点，而不是全部站点，相当于群组\n\n&emsp;所有适配器都应该识别前面两种帧，有一种网络工具叫做**嗅探器（Sniffer）**能够识别所有的帧，包括MAC地址不是自己的也可以记录下来。\n\n## 2、MAC帧格式\n\n![image-20220719104733647](https://imagere.oss-cn-beijing.aliyuncs.com/img/202207191047007.png)\n\n- 源地址与目的地址，MAC地址\n- 类型，比如交付给上层的协议是什么，如IP：0x0800\n- FCS：使用CRC校验，只校验目的地址到FCS为止的字段，不包括前导码和帧开始定界符\n- 以太网规定最小帧长为64字节，所以数据段最小长度为64-6-6-2-4=46字节\n- 以太网采用曼彻斯特编码，当电压不再变化了，就代表已经结束传输了，所以帧结束定界符也就不需要\n- 前导码的作用是用来同步时钟频率的，帧开始定界符是用来告诉帧开始发送的标志\n\n对于下列的帧情况，以太网直接进行丢弃，不会重传\n\n- 帧长度不是整数个字节\n- FCS检验出错\n- MAC帧长度不是64-1518个字节的\n\n现在广泛使用的局域网也只剩下以太网了\n\n## 3、扩展以太网\n\n### 3.1 在物理层扩展以太网\n\n&emsp;过去使用粗缆或细缆，现在使用光纤\n\n### 3.2 在数据链路层扩展以太网\n\n&emsp;使用交换机进行扩展\n\n### 3.3 虚拟局域网\n\n&emsp;**虚拟局域网VLAN（Virtual LAN）**是局域网提供给用户的一种服务，而不是一种新型局域网。VLAN使用802.1Q帧，格式如下：\n\n![image-20220719121225767](https://imagere.oss-cn-beijing.aliyuncs.com/img/202207191212887.png)\n\n相比于以太网帧，多了VLAN标签。VLAN标签前两个字节为0x8100，后面为**VLAN标识符VID（VLAN ID）**，出入VID后，FCS需要重新计算。对于主机来说，并不知道自己的VID，所以主机发送给交换机的是普通以太网帧。交换机通过端口或者MAC地址划分VLAN，并且为VLAN分配好了VID。\n\n设想一下场景\n\n![image-20220719121409605](https://imagere.oss-cn-beijing.aliyuncs.com/img/202207191214702.png)\n\n- A向B发送数据，发送普通以太网帧给交换机#1，#1发现是同一VLAN下的主机，不需要增加VLAN标签，直接转发给B\n- A向E发送数据，#1通过汇聚链路将帧转发给#2，并增加VLAN标签，#2发送去掉VLAN标签，并转发给E\n- A向C发送数据，这种情况比较复杂，书上没讲\n\n## 4、扩展到高速以太网\n\n### 4.1 100BASE-T以太网\n\n- 速度：100Mb/s\n- 完全可以使用10Mb/s下的软件\n\n### 4.2 吉比特以太网\n\n- 速度：1Gb/s\n- 半双工使用CSMA/CD，全双工不使用\n- 向后兼容\n\n不改变网段最长长度，但是争用期由原来的64字节，变成512字节，使用如下方法来适用CSMA/CD。\n\n- 载波延伸：最短帧长仍然是64字节，但是为他扩充到512字节；引入的问题便是，发送了许多无用的数据\n- 分组突发：将多个短帧合起来发送\n\n### 4.3 10吉比特以太网\n\n- 速度：10Gb/s\n- 只工作在全双工模式\n\n### 4.4 40/100吉比特以太网\n\n- 速度：40/100Gb/s\n- 只工作在全双工\n\n# 七 、无线局域网\n\n&emsp;又称为802.11局域网\n\n## 1、有固定基础设施无线局域网\n\n&emsp;采用该星形拓扑，中心称为接入点（Access Point，AP）。基本服务集（Basic Service Set， BSS）包括一个接入点和若干移动站。安装AP时必须为其分配一个不超过32字节的服务集标识符（Service Set IDentifier，SSID）和一个信道。接入点AP在出厂就具有唯一的48位二进制数字的MAC地址，正式名称为**基本服务集标识符 BSSID**。\n\n&emsp;一个基本服务集，可以时孤立的，还可以通过其他AP，连接到一个**分配系统DS（Distribution System）**，然后再连接到另一个基本服务集，这样就构成一个**扩展服务集ESS（Extended Service Set）**，扩展服务集也有唯一标识称为**扩展服务集标识符ESSID**。\n\n移动站与接入点AP建立关联的方式由两种，一种是被动扫描，一种是主动扫描。\n\n### 被动扫描\n\n- 接入点AP周期性发送**信标帧（beacon frame）**，其中包含由若干系统参数，如SSID及支持的速率\n- 移动站A扫描了11个信道，选择愿意加入接入点AP所在的基本服务集BSS，于是发送**关联请求帧（Association Request frame）**\n- 接入点同意A发来的关联请求，向A发送**关联响应帧（Association Response frame）**\n\n### 主动扫描\n\n- A广播发送**探测请求帧（Probe Request frame）**，让所有的AP都能够知道有移动站要求建立关联\n- 有两个接入点回答**探测请求响应帧（Probe Response frame）**\n- A向一个站发送**关联请求帧**\n- 接入点向A发送**关联响应帧**\n\n## 2、无固定基础设施移动自组织网络\n\n&emsp;称为自组网络，没有上述服务中的AP，由一些平等状态的移动站相互通信组成的临时网络。各结点地位平等，中间结点都为转发点。\n\n&emsp;在军用，救援等中有很好的应用。\n\n&emsp;移动自组网络的一个子集——**无线传感器网络WSN（Wireless Sensor Network）**。\n\n## 3、MAC帧\n\n&emsp;分为数据帧、控制帧和管理帧。\n\n下面来讲解数据帧：\n\n![image-20220719131230352](https://imagere.oss-cn-beijing.aliyuncs.com/img/202207191312492.png)\n\n\n\n上述地址都是指MAC地址，其中地址4用于自组网络；\n\n| 去往AP | 来自AP |       地址1       |      地址2      |  地址3   | 地址4 |\n| :----: | :----: | :---------------: | :-------------: | :------: | :---: |\n|   0    |   1    | 接收地址=目的地址 | 发送地址=AP地址 |  源地址  |  ——   |\n|   1    |   0    |  接收地址=AP地址  | 发送地址=源地址 | 目的地址 |  ——   |\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"计算机网络技术之数据链路层","published":1,"updated":"2022-07-19T07:51:56.089Z","_id":"cl4gnj6cp0000hwu5d9xihz4q","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一、基础知识\"><a href=\"#一、基础知识\" class=\"headerlink\" title=\"一、基础知识\"></a>一、基础知识</h1><h2 id=\"1、数据链路层的主要任务\"><a href=\"#1、数据链路层的主要任务\" class=\"headerlink\" title=\"1、数据链路层的主要任务\"></a>1、数据链路层的主要任务</h2><p>&emsp;主要包括三个任务：<strong>封装成帧</strong>，<strong>透明传输</strong>和<strong>差错检测</strong>。点对点通信。</p>\n<ul>\n<li>将网络层交下来的IP数据报封装成帧</li>\n<li>把封装好的帧发送给其他节点的数据链路层</li>\n<li>接收其他节点发过来的帧，检测如果无差错，提取出IP数据报并交付给网络层；有差错就直接丢弃帧。</li>\n</ul>\n<h2 id=\"2、名词解释\"><a href=\"#2、名词解释\" class=\"headerlink\" title=\"2、名词解释\"></a>2、名词解释</h2><ul>\n<li>链路：从一个节点到另一个节点的一段物理线路</li>\n<li>数据链路：在链路基础上，增加了执行通信协议的软硬件，构成了数据链路。</li>\n<li>网络适配器：称为网卡，实现上述协议的软硬件</li>\n<li>帧：数据链路层的协议数据单元（PDU），也是最小传输单位。</li>\n</ul>\n<h1 id=\"二、任务实现\"><a href=\"#二、任务实现\" class=\"headerlink\" title=\"二、任务实现\"></a>二、任务实现</h1><h2 id=\"1、封装成帧\"><a href=\"#1、封装成帧\" class=\"headerlink\" title=\"1、封装成帧\"></a>1、封装成帧</h2><p>&emsp;将上一层的网络层交付下来的数据报，加上帧首部与帧尾部之后，交付给物理层进行透明传输。也<strong>只有数据链路层</strong>会添加尾部。并且还会在帧前面和尾部加上帧界定符，帧开始加入<strong>帧开始符（SOH，0x01）</strong>，帧结束处加上<strong>帧结束符（EOT，0x04）</strong>，帧结束符可以判断帧是否完整，除此之外，<strong>PPP协议</strong>还会加入<strong>前导码（7个字节，0101…01）</strong>，前导码之后才是帧开始符。<strong>注意：</strong>上述0x01和0x04在谢书是这样，很多其他地方查的都不一样。</p>\n<p>&emsp;规定帧的格式与使用的协议有关，我们将会在<strong>PPP协议</strong>中具体讲到。</p>\n<h2 id=\"2、透明传输\"><a href=\"#2、透明传输\" class=\"headerlink\" title=\"2、透明传输\"></a>2、透明传输</h2><p>&emsp;我们已经知道了，帧开始符与帧结束符是一个固定的十六进制数，假如我们传输的数据中包含帧结束符的十六进制数据，那么应该如何处理这种情况呢？这就要求我们对数据进行<strong>透明传输</strong>。最常用的方法就是使用转义字符，也就是<strong>字节填充</strong>或<strong>字符填充</strong>，在数据部分中，有帧结束符的字符前面插入<strong>ESC（0x1B）</strong>。</p>\n<p>&emsp;实现透明传输与使用的协议有关，所以我们将会在<strong>PPP协议</strong>中具体讲到。</p>\n<h2 id=\"3、差错检测\"><a href=\"#3、差错检测\" class=\"headerlink\" title=\"3、差错检测\"></a>3、差错检测</h2><p>&emsp;现在的通信线路都不是很理想，容易发生比特错误，即1变成0或者0变成1。因此，差错检测是非常有必要的。常用的差错检测方法有，奇偶校验码和循环冗余码。除了进行检错之外，还发明了一种具有纠错功能的方法——海明码。</p>\n<h3 id=\"1）检错之奇偶校验码\"><a href=\"#1）检错之奇偶校验码\" class=\"headerlink\" title=\"1）检错之奇偶校验码\"></a>1）检错之奇偶校验码</h3><p>&emsp;奇偶校验码包括<strong>奇校验码</strong>和<strong>偶校验码</strong>，发送的比特流包含n位，其中前n-1位是数据，最后一位是<strong>校验位</strong>。</p>\n<ul>\n<li>奇校验：<strong>n-1位数据</strong>加上<strong>校验位</strong>的中<strong>1的个数</strong>是<strong>奇</strong>数，<strong>n位</strong>比特进行<strong>异或</strong>为<strong>1</strong>。</li>\n<li>偶校验：<strong>n-1位数据</strong>加上<strong>校验位</strong>的中<strong>1的个数</strong>是<strong>偶</strong>数，<strong>n位</strong>比特进行<strong>异或</strong>为<strong>0</strong>。</li>\n</ul>\n<p>&emsp;异或是一个比较重要的运算，在检验中常常用到。这里用异或是杀鸡用牛刀，海明码需要用到异或。这里给出异或的性质：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">左操作数</th>\n<th style=\"text-align:center\">异或</th>\n<th style=\"text-align:center\">右操作数</th>\n<th style=\"text-align:center\">=</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\"><script type=\"math/tex\">\\bigoplus</script></td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\"><script type=\"math/tex\">\\bigoplus</script></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><script type=\"math/tex\">\\bigoplus</script></td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><script type=\"math/tex\">\\bigoplus</script></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>与0异或，可以留出原来的状态</li>\n<li>与1异或，可以获取相反的状态</li>\n<li>2k和1异或是0，2k-1个1异或还是1</li>\n<li>满足交换律，  <script type=\"math/tex\">a \\bigoplus b = b\\bigoplus a</script></li>\n</ul>\n<h3 id=\"2）检错之循环冗余码\"><a href=\"#2）检错之循环冗余码\" class=\"headerlink\" title=\"2）检错之循环冗余码\"></a>2）检错之循环冗余码</h3><p>&emsp;上述编码其实只能够检测到奇数比特出错，如果是偶数个比特出错，检测就会失效了。所以，循环冗余码能够更有效地检测帧的正确与否，但是循环冗余码不能进行纠错，也就是不能确定错误出在哪个位置。循环冗余码检测通过之后，能够以接近1的概率认为此帧没有出错。并且CRC可以由硬件完成，所以速度非常快。</p>\n<h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><ul>\n<li>首先，双方协定一个多项式，多项式能够对应于一个二进制比特序列<strong>除数P</strong>，P有h位</li>\n<li>用<strong>数据M</strong>后面拼接上<strong>h-1位0</strong>，对上述P进行<strong>模2除</strong>法，小学数学学到的<strong>除过程</strong>中用的<strong>减法</strong>变成了<strong>异或</strong>运算而已。</li>\n<li>最后得到的<strong>余数</strong>长度应该是<strong>比P少1位</strong>，少不止1位，就在前面填充0，这个拼接到M的后面就成为了新的数据。</li>\n<li>接收方收到数据后，只需要把<strong>接收到的数据</strong>对<strong>P</strong>进行<strong>模2除</strong>法，如果<strong>余数为0</strong>，便<strong>通过</strong>，然后再把最后的检验位去除便可。</li>\n</ul>\n<p>其中，<strong>除数P</strong>应该是：</p>\n<ul>\n<li><p><strong>除数P</strong>：</p>\n<blockquote>\n<p>&emsp;一个包含n位的序列，对应的多项式应该是</p>\n<script type=\"math/tex; mode=display\">a_{n-1}X^{n-1}+a_{n-2}X^{n-2}+...+a_1X^1+a_0X^0</script><p>，至于怎么转成二进制序列呢？</p>\n<p>如二进制序列<strong>110110</strong>对应的多项式应该是</p>\n<script type=\"math/tex; mode=display\">1\\times2^5 + 1\\times2^4+0\\times2^3+1\\times2^2+1\\times2^1+0\\times2^0</script><p>。</p>\n</blockquote>\n</li>\n<li><p><strong>现在广泛使用的多项式：</strong></p>\n<blockquote>\n<p>① <strong>CRC-16:</strong> </p>\n<script type=\"math/tex; mode=display\">X^{16}+X^{15}+X^{2}+1</script><p>② <strong>CRC-CCITT:</strong> </p>\n<script type=\"math/tex; mode=display\">X^{16}+X^{12}+X^{5}+1</script><p>③ <strong>CRC-32:</strong> </p>\n<script type=\"math/tex; mode=display\">X^{32}+X^{26}+X^{23}+X^{22}+X^{16}+X^{12}+X^{11}+X^{10}+X^{8}+X^{7}+X^{5}+X^{4}+X^{2}+X^{}+1</script></blockquote>\n</li>\n</ul>\n<h3 id=\"3）纠错之海明码\"><a href=\"#3）纠错之海明码\" class=\"headerlink\" title=\"3）纠错之海明码\"></a>3）纠错之海明码</h3><p>&emsp;前面提到的两种方法，都只适用于检错，如果出现差错，那么只能丢弃差错帧。而海明码，不仅可以检测出差错帧，还能检测出在哪出现的差错帧，并对其进行纠正。但是，海明码也只能<strong>发现双比特错误</strong>，<strong>纠正单比特错误</strong>。</p>\n<ul>\n<li>海明距离：两个比特码对应位不同的个数</li>\n<li><strong>纠错</strong>d位，需要<strong>码距</strong>为<strong>2d+1</strong>的解决方案</li>\n<li><strong>检错</strong>d位，需要<strong>码距</strong>为<strong>d+1</strong>的解决方案</li>\n</ul>\n<h4 id=\"确定检验位数\"><a href=\"#确定检验位数\" class=\"headerlink\" title=\"确定检验位数\"></a>确定检验位数</h4><p>&emsp;如果需要对<strong>长度为n</strong>的有效信息进行检验，需要<strong>k位</strong>检验码，n与k之间的关系式应该是怎样的呢？</p>\n<p>&emsp;首先，我们知道，海明码只对单个比特进行纠错，就是假设只有单个比特发生错误。那么，接收方收到的数据有多少种情况呢？应该是有<strong>有效信息发生错误（n种）</strong>加上<strong>校验码发生错误（k种）</strong>再加上<strong>全部正确（1种）</strong>的总共<script type=\"math/tex\">n+k+1</script>种情况。那么，k位校验码能够代表多少种情况呢？应该是<script type=\"math/tex\">2^k</script>种情况。所以，得到<strong>关系式</strong>为：<script type=\"math/tex\">n+k+1\\leq2^k</script>。</p>\n<h4 id=\"校验码应该如何放置\"><a href=\"#校验码应该如何放置\" class=\"headerlink\" title=\"校验码应该如何放置\"></a>校验码应该如何放置</h4><p>&emsp;按照以往来说，校验码都是拼接到数据的最后部分。而海明码则不是拼接到数据最后部分，这样能够快地确定纠错位置。</p>\n<p>&emsp;海明码规定，第 <code>i</code>位海明码<script type=\"math/tex\">P_i</script></p>\n<p>应该在<strong>整个数据（有效数据+检验码）</strong>第<script type=\"math/tex\">2^{i-1}</script></p>\n<p>的位置。如，第1位海明码在数据的第1位，第2位海明码在数据的第2位，第3位海明码在数据的第4位，第5位海明码在数据的第16位。</p>\n<h4 id=\"检验原理与步骤\"><a href=\"#检验原理与步骤\" class=\"headerlink\" title=\"检验原理与步骤\"></a>检验原理与步骤</h4><p>&emsp;假设海明码用<strong>H</strong>表示，有效数据用<strong>D</strong>表示，总数据位用<strong>C</strong>来表示。我们要明确一个概念，现在不仅仅是对有效数据在检验，而是对整个数据都在检验，与前面的检验方法有所不同。</p>\n<p>&emsp;假设我们有效数据为<strong>n=4</strong>位，即可算出校验数据只需要<strong>k=3</strong>位即可，太多了浪费。下面总数据的序号用二进制表示，方便之后理解。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">111</th>\n<th style=\"text-align:center\">110</th>\n<th style=\"text-align:center\">101</th>\n<th style=\"text-align:center\">100</th>\n<th style=\"text-align:center\">011</th>\n<th style=\"text-align:center\">010</th>\n<th style=\"text-align:center\">001</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>海明码</strong></td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\"><script type=\"math/tex\">H_3,2^{3-1}=b100</script></td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\"><script type=\"math/tex\">H_2,2^{2-1}=b010</script></td>\n<td style=\"text-align:center\"><script type=\"math/tex\">H_1,2^{1-1}=b001</script></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>有效数据</strong></td>\n<td style=\"text-align:center\"><script type=\"math/tex\">D_4</script></td>\n<td style=\"text-align:center\"><script type=\"math/tex\">D_3</script></td>\n<td style=\"text-align:center\"><script type=\"math/tex\">D_2</script></td>\n<td style=\"text-align:center\">——</td>\n<td style=\"text-align:center\"><script type=\"math/tex\">D_1</script></td>\n<td style=\"text-align:center\">——</td>\n<td style=\"text-align:center\">——</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>那么如何计算H呢？只需要用<strong>异或</strong>即可，哪几位异或呢？</p>\n<p>&emsp;从上面我们知道，<script type=\"math/tex\">H_i</script></p>\n<p>对应于总数据的位置是<script type=\"math/tex\">2^{i-1}</script></p>\n<p>，显然数字<script type=\"math/tex\">2^{i-1}</script></p>\n<p>对应的二进制序列<strong>只有一位</strong>为1，而且恰好是<strong>第i位</strong>，其他都为0，不信可以写一写。我们只需要把<strong>总数据序号</strong>中，<strong>第i位为1</strong>的数据拿出来异或，异或后的值就是</p>\n<script type=\"math/tex; mode=display\">H_i</script><p>的值了。</p>\n<p>总结下来说，不那么绕的来说就是，</p>\n<script type=\"math/tex; mode=display\">H_i</script><p>对<strong>序号</strong>中<strong>第i位为1</strong>的数据进行检验。<script type=\"math/tex\">H_1 = D_1 \\bigoplus D_2 \\bigoplus D_4 \\\\ H_2 = D_1 \\bigoplus D_3 \\bigoplus D_4 \\\\H_3 = D_2 \\bigoplus D_3 \\bigoplus D_4</script></p>\n<p>&emsp;现在收到数据之后，如何进行检验呢？检验完之后，如果找错出错位呢？上述提到海明码计算使用的异或来做的，相当于把原始状态异或后保存到了海明码中。异或能够同为0，异为1。我们把原始状态保存到海明码中了，现在接收到的状态便在数据中，所以，只需要检验数据中的状态与原始状态是否相同即可。那么我们可以得出如下式子。</p>\n<script type=\"math/tex; mode=display\">S_1 = H_1 \\bigoplus D_1 \\bigoplus D_2 \\bigoplus D_4 \\\\ S_2 = H_2 \\bigoplus D_1 \\bigoplus D_3 \\bigoplus D_4 \\\\S_3 =H_3 \\bigoplus D_2 \\bigoplus D_3 \\bigoplus D_4</script><p>&emsp;如果<script type=\"math/tex\">S_1S_2S_3 = 000</script></p>\n<p>，那么说明状态没有改变，接收到的数据是正确的。如果不为0呢？怎么知道哪里发生错误。显然我们在检验过程中有，<script type=\"math/tex\">H_1</script></p>\n<p>对序号第1位为1的所有数据进行检验，<script type=\"math/tex\">H_2</script></p>\n<p>对序号第2位为1的所有数据进行检验，<script type=\"math/tex\">H_3</script></p>\n<p>对序号第3位为1的所有数据进行了检验。</p>\n<p>&emsp;因此，<script type=\"math/tex\">S_i</script>为1的话，代表序号中<strong>第i位</strong>为1的位置的数据有错误，将所有的S都拼接，即可确定发生错误在序号中的位置。如<script type=\"math/tex\">S_3S_2S_1=010</script>，代表序号中第2位发生了错误，只需要把第2位进行取反即可。</p>\n<h1 id=\"三、PPP协议\"><a href=\"#三、PPP协议\" class=\"headerlink\" title=\"三、PPP协议\"></a>三、PPP协议</h1><h2 id=\"1、PPP协议满足的需求\"><a href=\"#1、PPP协议满足的需求\" class=\"headerlink\" title=\"1、PPP协议满足的需求\"></a>1、PPP协议满足的需求</h2><ul>\n<li>（1）简单：就追求着简单，采用CRC检验，如果发生错误了，直接丢弃帧，什么也不做。正确就收下帧。</li>\n<li>（2）封装成帧：规定了特殊字段作为帧界定符。前面提到过，这里协议具体讲。</li>\n<li>（3）透明性：保证数据透明性。前面提到过，这里协议具体讲。</li>\n<li>（4）多种网络层协议：保证同一条物理链路上同时支持多种网络协议，如（IP和IPX等）。</li>\n<li>（5）多种类型链路：除了要支持多种网络协议外，还需要在多种物理链路运行，如串并，电光等。</li>\n<li>（6）差错检测：对收到的帧进行差错检测</li>\n<li>（7）检测连接状态：能够判断链路是否正常工作</li>\n<li>（8）最大传送单元：限定了点对点<strong>最大传送单元MTU</strong>，数据部分不包括头尾部分，默认值是1500字节。</li>\n<li>（9）网络层地址协商：使得双方的网络层能够知晓对方IP地址</li>\n<li>（10）数据压缩协商：提供一种方法来协商数据压缩算法，但不一定要标准化。</li>\n</ul>\n<h2 id=\"2、PPP协议的帧格式\"><a href=\"#2、PPP协议的帧格式\" class=\"headerlink\" title=\"2、PPP协议的帧格式\"></a>2、PPP协议的帧格式</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>F(0x7E), 1B</th>\n<th>A(0xFF), 1B</th>\n<th>C(0x01), 1B</th>\n<th>协议, 2B</th>\n<th>数据部分, 1500B以内</th>\n<th>FCS, 2B</th>\n<th>F(0x7E), 1B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><strong>F</strong>：帧界定符，二进制为：0111 1110。注意，这里有6个连续的1，之后会用到。</li>\n<li><strong>A</strong>：这个字段相当于保留字段，目前没有任何定义</li>\n<li><strong>C</strong>：同上</li>\n<li><strong>协议</strong>：表示数据部分使用的协议。比如，0x0021代表IP数据报。0xC021代表LCP（链路控制协议）数据。</li>\n<li><strong>FCS</strong>：帧检验序列，采用的是CRC检验</li>\n</ul>\n<h2 id=\"3、PPP协议的透明传输\"><a href=\"#3、PPP协议的透明传输\" class=\"headerlink\" title=\"3、PPP协议的透明传输\"></a>3、PPP协议的透明传输</h2><p>&emsp;前面提到为什么需要透明传输，以及什么是透明传输。PPP协议有如下方法：</p>\n<h3 id=\"（1）字节填充\"><a href=\"#（1）字节填充\" class=\"headerlink\" title=\"（1）字节填充\"></a>（1）字节填充</h3><p>&emsp;就是使用转义字符，转义字符定义为<strong>0x7D（0111 1101）</strong></p>\n<ul>\n<li>1）如果数据中出现（0x7E），那么就变成 （0x7D，0x5E）</li>\n<li>2）如果数据中出现（0x7D），那么就变成（0x7D，0x5D）</li>\n<li>3）如果出现ASCII码控制字符，数值小于0x20的字符，那么就在此字符前面加上0x7D，并将其加以改变，比如加上0x20。</li>\n</ul>\n<h3 id=\"（2）零比特填充\"><a href=\"#（2）零比特填充\" class=\"headerlink\" title=\"（2）零比特填充\"></a>（2）零比特填充</h3><p>&emsp;我们前面提到，0x7E中有连续的6个1，那么我们只要保证数据中没有连续的6个1即可，具体做法是，每发现5个1，就填充1个0。接收数据后，只要每发现5个1，就删除后面的1个0。</p>\n<h3 id=\"（3）其他方法\"><a href=\"#（3）其他方法\" class=\"headerlink\" title=\"（3）其他方法\"></a>（3）其他方法</h3><p>&emsp;这些不是PPP协议的内容，但是也是进行透明传输的方法。</p>\n<ul>\n<li>字符计数法：在帧的头部加上一个表示该帧后面跟随的字节数。这样，就能明确边界在哪了。这种方法的问题就是，出现一个错误，那么后面全部的帧都发生错误。</li>\n<li>违规编码法：在物理层常使用这种方法，如曼彻斯特编码中，一个比特位周期的电平要么是 高-低，要么是 低-高，所以，高-高或者低-低就是违规编码，我们用来作为帧的开始和结束。</li>\n</ul>\n<h2 id=\"4、PPP协议的工作状态\"><a href=\"#4、PPP协议的工作状态\" class=\"headerlink\" title=\"4、PPP协议的工作状态\"></a>4、PPP协议的工作状态</h2><p>&emsp;我们知道PPP协议主要是为了传输网络层的数据，但是，数据链路层也有自己的数据需要传送，如有些链路需要建立连接。PPP协议组成应该包含了三个部分，<strong>一是</strong>将IP数据报封装到串行链路中，既支持异步链路，又支持面向比特的同步链路。<strong>二是</strong>用来建立、配置和测试数据链路连接的<strong>链路控制协议LCP（Link Control Protocol）</strong>。<strong>三是</strong>一套<strong>网络控制协议（Network Control Protocol）</strong>，这其中，每一个协议支持不同的网络层协议。</p>\n<p>&emsp;用户接入ISP后，会主动发送一系列LCP分组，以便建立LCP。紧接着，NCP就会为新接入的主机分配一个IP地址。用户通信完毕，NCP收回IP地址，并释放连接。步骤如下图所示：<img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206161415001.png\" alt=\"image-20220616141536749\"></p>\n<p>&emsp;PPP链路起始和终止状态都是<strong>链路静止</strong>状态，用户发起连接后（如连接一个WiFi，接上一根网线），进入了链路建立状态。这是LCP开始进行一些协商，发送LCP<strong>配置请求帧</strong>，包括<strong>配置确认帧（接受）、配置否认帧（理解意思但不接受）和配置拒绝帧（无法识别或不接受）</strong>。之后ISP对用户进行鉴别（如WiFi密码正确与否，账号密码登录，网费是否充足）。采用了<strong>口令鉴别协议PAP（Password Authentication Protocol）或口令握手鉴别协议CHAP（Challenge-Handshake Authentication Protocol）</strong>。之后便进入了网络层协议。</p>\n<h1 id=\"四、数据链路层\"><a href=\"#四、数据链路层\" class=\"headerlink\" title=\"四、数据链路层\"></a>四、数据链路层</h1><h2 id=\"1、局域网的数据链路层\"><a href=\"#1、局域网的数据链路层\" class=\"headerlink\" title=\"1、局域网的数据链路层\"></a>1、局域网的数据链路层</h2><p>&emsp;局域网工作的层次横跨了数据链路层和物理层。局域网内的主机共享连接在局域网上的各种软硬件资源，共享需要考虑的一个问题是，如何使众多用户能够合理而方便地共享通信媒体资源。这在技术上有两种方法：</p>\n<ul>\n<li>（1）<strong>静态划分信道</strong>，如前面提到的时分复用等，这种信道划分的方法代价高</li>\n<li><p>（2）<strong>动态媒体接入控制技术</strong>，分为：</p>\n<blockquote>\n<ul>\n<li><strong>随机接入</strong>：所有用户可以随时发送消息，但是如果恰巧不止一个用户在发送消息，那么就会产生<strong>碰撞</strong>（<strong>即产生冲突</strong>），因此需要有协议来解决这些碰撞。</li>\n<li><strong>受控接入</strong>：用户不能随时发送消息，而是服从一定控制发送消息，使用<strong>轮询</strong>方式</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"2、数据链路层的划分\"><a href=\"#2、数据链路层的划分\" class=\"headerlink\" title=\"2、数据链路层的划分\"></a>2、数据链路层的划分</h2><p>&emsp;因为各个公司的协议不同，所以产生了很多不同种类的数据链路层，而IEEE 802 委员会将<strong>局域网的数据链路层</strong>拆分为<strong>逻辑链路控制LLC（Logical Link Control）</strong>和<strong>媒体接入控制MAC（Medium Access Control）</strong>两层。而委员会仅仅只能是制定标准的人，真正实行的还是各大企业，因此，最后局域网只剩下<strong>以太网（DIX Ethernet V2）</strong>了，<strong>LLC</strong>已经消失，只剩下<strong>MAC</strong>。</p>\n<h2 id=\"3、适配器\"><a href=\"#3、适配器\" class=\"headerlink\" title=\"3、适配器\"></a>3、适配器</h2><p>&emsp;计算机与外界局域网的连接都是通过<strong>适配器（adapter）</strong>，适配器是在主机箱内插入的一块网络接口板，称为<strong>网络接口卡NIC</strong>，简称<strong>网卡</strong>。适配器不仅仅包含<strong>数据链路层</strong>的功能，还需要实现<strong>物理层</strong>的功能。适配器有自己的<strong>处理器（CPU）和存储器（RAM, ROM）</strong>，因此，不需要使用计算机的CPU。<strong>网卡</strong>的ROM有<strong>MAC</strong>地址，而<strong>计算机</strong>的软件地址（<strong>IP</strong>地址），则在计算机的存储器中。</p>\n<h2 id=\"4、信道划分介质访问控制\"><a href=\"#4、信道划分介质访问控制\" class=\"headerlink\" title=\"4、信道划分介质访问控制\"></a>4、信道划分介质访问控制</h2><p>&emsp;介质访问控制有，介质访问控制，随机访问介质访问控制和轮询访问介质访问控制。</p>\n<p>&emsp;信道划分介质访问控制便是之前讲的，复用技术：频分复用、时分复用、码分复用、波分复用</p>\n<h2 id=\"5、随机访问介质访问控制\"><a href=\"#5、随机访问介质访问控制\" class=\"headerlink\" title=\"5、随机访问介质访问控制\"></a>5、随机访问介质访问控制</h2><h3 id=\"（1）ALOHA协议\"><a href=\"#（1）ALOHA协议\" class=\"headerlink\" title=\"（1）ALOHA协议\"></a>（1）ALOHA协议</h3><h4 id=\"纯ALOHA协议\"><a href=\"#纯ALOHA协议\" class=\"headerlink\" title=\"纯ALOHA协议\"></a>纯ALOHA协议</h4><p>&emsp;各个用户想发送数据就发送数据，如果一段时间内没有收到确认，就认为发生了冲突，随机等待一段时间后再发送。假设网络负载（单位时间内所有站点发送成功和未成功而重传的帧数）为G，则纯ALOHA协议网络的吞吐量（单位时间内发送成功的平均帧数）为<script type=\"math/tex\">S=Ge^{-2G}</script></p>\n<p>。当G=1.5时，S≈0.184。</p>\n<h4 id=\"时隙ALOHA协议\"><a href=\"#时隙ALOHA协议\" class=\"headerlink\" title=\"时隙ALOHA协议\"></a>时隙ALOHA协议</h4><p>&emsp;讲各个用户时间同步起来，并且划分了一段段时隙，只有在时隙开始时，各个用户才可发送消息。其他基本与纯ALOHA协议一致。</p>\n<h3 id=\"（2）CSMA协议协议\"><a href=\"#（2）CSMA协议协议\" class=\"headerlink\" title=\"（2）CSMA协议协议\"></a>（2）CSMA协议协议</h3><p>&emsp;<strong>载波监听多路访问 ( Carrier Sense Multiple Access ) </strong>协议，相比于ALOHA协议，多了一个载波监听装置。CSMA协议分为三种方式：</p>\n<ul>\n<li>1-坚持CSMA：结点需要发送数据，首先侦听信道，信道<strong>空闲</strong>就立马<strong>发送</strong>，信道<strong>忙</strong>，就一直<strong>等待并持续监听</strong>。</li>\n<li>非坚持CSMA：结点需要发送数据，首先侦听信道，信道<strong>空闲</strong>就立马<strong>发送</strong>，信道<strong>忙</strong>，就<strong>等待</strong>一个<strong>随机</strong>时间再重复上述过程</li>\n<li>p-坚持CSMA：结点需要发送数据，首先侦听信道，信道<strong>忙</strong>就持续监听，信道<strong>空闲</strong>，以概率p发送数据，以概率1-p推迟到下个时隙，重复。</li>\n</ul>\n<h3 id=\"（3）CSMA-CD协议\"><a href=\"#（3）CSMA-CD协议\" class=\"headerlink\" title=\"（3）CSMA/CD协议\"></a>（3）CSMA/CD协议</h3><h4 id=\"CSMA-CD协议介绍\"><a href=\"#CSMA-CD协议介绍\" class=\"headerlink\" title=\"CSMA/CD协议介绍\"></a>CSMA/CD协议介绍</h4><p>&emsp;<strong>载波侦听多路访问/碰撞检测（Carrier Sense Multiple Access with Collision Detection，CSMA/CD）</strong>过程如下：</p>\n<ul>\n<li>1）适配器从网络层获得一个分组，封装成以太网帧，放入适配器缓存，准备发送。</li>\n<li>2）如果适配器侦听到信道空闲，就发送该帧。侦听到忙，就持续侦听直到信道上没有信号能量，然后发送该帧</li>\n<li>3）在发送过程中，仍然持续检测信道，如果没有检测到碰撞，就顺利发送该帧。否则，中止发送，并发送一个拥塞信号。</li>\n<li>4）中止发送后，适配器执行指数退避算法，等到一段随机事件后返回步骤2。</li>\n</ul>\n<p>&emsp;<strong>以太网</strong>常常采用此方法进行处理冲突，以太网使用<strong>曼彻斯特编码</strong>，曼彻斯特在传输过程中自带了时钟信息，可以很方便的检测出当前信道是否有数据在发送。下面讲解<strong>CSMA/CD</strong>协议的要点：</p>\n<ul>\n<li><strong>多点接入</strong>：表示了是<strong>总线型</strong>，各台计算机以多点的方式接入到网络中</li>\n<li><strong>载波监听</strong>：也就是<strong>边发送边监听</strong></li>\n<li><strong>碰撞检测</strong>：通过检测电压变化，判断网络是否发生了冲突</li>\n</ul>\n<h4 id=\"碰撞检测\"><a href=\"#碰撞检测\" class=\"headerlink\" title=\"碰撞检测\"></a>碰撞检测</h4><p>&emsp;首先，假设A、B两方在通信，规定了端到端的传播时延为<script type=\"math/tex\">\\tau</script>。假设A向B发送数据，那么最多经过<script type=\"math/tex\">2\\tau</script></p>\n<p>的时间，A能够检测到碰撞发生与否（即，信号往返的时间）。显然，采用CSMA/CD协议的以太网只能实现<strong>半双工通信</strong>（我的理解是，总线型，只有一根信道，也就是对于任何一个主机而言，接收端也是发送端）。</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202207061352402.png\" alt=\"image-20220706135253122\"></p>\n<p>&emsp;设想如下场景：</p>\n<ul>\n<li><p><script type=\"math/tex\">t=0</script>，A检测到信道空闲，向B发送数据</p>\n</li>\n<li><p><script type=\"math/tex\">t=\\tau - \\delta</script>，B检测到信道空闲，向A发送数据，<script type=\"math/tex\">\\delta</script>为B发送数据到A的数据到达B的时间</p>\n</li>\n<li><p><script type=\"math/tex\">t= \\tau - \\frac{\\delta}{2}</script>，也就是B发送数据后经过<script type=\"math/tex\">\\frac{\\delta}{2}</script>后，A,B数据发生了碰撞</p>\n</li>\n<li><p><script type=\"math/tex\">t=\\tau</script>，B检测到了碰撞</p>\n</li>\n<li><p><script type=\"math/tex\">t=2\\tau-\\delta</script>，A检测到了碰撞</p>\n</li>\n<li><p>当  <script type=\"math/tex\">{\\lim\\limits_{\\delta \\to 0}}</script> ，最慢到  <script type=\"math/tex\">t=2\\tau</script>时，A检测到碰撞发生。</p>\n</li>\n</ul>\n<p>&emsp;<strong>最短帧长</strong>：A最多在<script type=\"math/tex\">2\\tau</script>的时间后能够检测到碰撞，因此把<script type=\"math/tex\">2\\tau</script>称为<strong>争用期</strong>。发送方是在发送数据以及将要发送数据的时候才检测信道是否发生冲突，为了确保发送数据过程中，发送方能够检测到冲突，要求发送方在争用期中，一直发送数据。那么争用期中发送数据的帧长就是最短帧长，即<strong>最短帧长</strong>=<script type=\"math/tex\">2\\tau\\times</script>数据传输率。例如，以太网规定争用期为<script type=\"math/tex\">51.2\\mu s</script>，对于<script type=\"math/tex\">10Mb/s</script>的以太网，最短帧长为<script type=\"math/tex\">512bit = 64B</script>。凡是小于<script type=\"math/tex\">64B</script>的帧都是由于冲突而异常中止的无效帧。</p>\n<h4 id=\"二进制退避算法\"><a href=\"#二进制退避算法\" class=\"headerlink\" title=\"二进制退避算法\"></a>二进制退避算法</h4><ul>\n<li>1）确定基本的退避时间，通常为  <script type=\"math/tex\">2\\tau</script></li>\n<li>2）定义参数  <script type=\"math/tex\">k</script>，  <script type=\"math/tex\">k = min[重传次数, 10]</script>，重传次数即，此次是该帧第几次重传了，也就是发生了几次碰撞。</li>\n<li>3）从离散集合  <script type=\"math/tex\">[0,\\quad1,\\quad,...,2^k-1]</script>  中随机取出一个数  <script type=\"math/tex\">r</script>，重传所需要的退避时间就是  <script type=\"math/tex\">2r\\tau</script>。</li>\n<li>4）当重传16次都未成功，那么丢弃此帧，并向上层（网络层）报告错误。</li>\n</ul>\n<h3 id=\"（4）CSMA-CA协议\"><a href=\"#（4）CSMA-CA协议\" class=\"headerlink\" title=\"（4）CSMA/CA协议\"></a>（4）CSMA/CA协议</h3><p>&emsp;<strong>载波监听多路访问/碰撞避免（Carries Sense Multiple Access with Collision Avoidance）</strong>协议，相比于CSMA/CD协议，将碰撞<strong>检测</strong>变成了碰撞<strong>避免</strong>。</p>\n<p>&emsp;<strong>CSMA/CD</strong>协议很好地应用于<strong>有线局域网</strong>中了，但在<strong>无线局域网</strong>中，则需要使用<strong>CSMA/CA</strong>协议。原因如下：</p>\n<ul>\n<li>1）接收信号的强度往往远小于发送信号的强度，因此要是实现碰撞检测，硬件花费大。</li>\n<li>2）无线通信中，并非所有的站点都能够听见对方，存在<strong>隐蔽站</strong>问题。</li>\n</ul>\n<p>&emsp;无线信道的通信质量远远小于有线信道，所以采用了<strong>链路层确认/重传（ARQ）</strong>方案，发送完一帧，需要收到确认才能发送下一帧。为了尽量避免碰撞，所有站发送完成后，必须等待一段很短的时间才能发送下一帧，这段时间间隔称为<strong>帧间间隔（InterFrame Space, IFS）</strong>，类型如下：</p>\n<ul>\n<li>1）SIFS（短IFS）：最短的IFS，用于分隔属于一次对话的各帧，如ACK帧，CTS帧，分片后的数据帧，以及所有回答AP探询的帧。</li>\n<li>2）PIFS（点协调IFS）：中等长度的IFS，在PCF操作中使用</li>\n<li>3）DIFS（分布式协调IFS）：最长的IFS，用于异步帧竞争访问的时延</li>\n</ul>\n<p>&emsp;CSMA/CA的退避算法和CSMA/CD的稍有不同，当且仅当信道空闲且当前为发送的第一个帧才不使用退避算法，其他时间都需要使用。CSMA/CA协议归纳如下：</p>\n<ul>\n<li>1）若站点有数据发送（该帧第一次发送），检测到信道空闲，等待DIFS后，发送整个数据帧</li>\n<li>2）否则，站点执行CSMA/CA退避算法，选取一个随机时间回退值。一旦检测到信道忙，退避计时器保持不变，信道空闲，计时器才计时</li>\n<li>3）当计时器减到0，发送数据帧</li>\n<li>4）发送站收到确认帧，发送第二帧时，从步骤2）开始。</li>\n</ul>\n<p>&emsp;隐蔽站问题：RTS和CTS</p>\n<ul>\n<li><strong>RTS(Request  To Send)</strong>：请求发送帧，每个站点发送数据帧之前广播发送一个RTS进行信道预约，包括源地址、目的地址、和此次通信持续时间。</li>\n<li><strong>CTS(Clear To Send)</strong>：允许发送帧，若信道空闲，AP广播发送一个CTS，包括此次发送持续时间（从RTS中获得）。任何站点听到此帧，将会抑制发送。</li>\n</ul>\n<h3 id=\"（5）CSMA-CD-VS-CSMA-CA\"><a href=\"#（5）CSMA-CD-VS-CSMA-CA\" class=\"headerlink\" title=\"（5）CSMA/CD   VS   CSMA/CA\"></a>（5）CSMA/CD   VS   CSMA/CA</h3><ul>\n<li>1）CD可以检测冲突，无法避免；CA不能同时发送和检测冲突</li>\n<li>2）介质不同，CD是以太网，CA是无线局域网</li>\n<li>3）检测方式不同，CD是通过电压变化，CA通过能量检测、载波检测、能量载波混合检测三种检测信道的方式。</li>\n</ul>\n<h2 id=\"6、轮询访问介质访问控制\"><a href=\"#6、轮询访问介质访问控制\" class=\"headerlink\" title=\"6、轮询访问介质访问控制\"></a>6、轮询访问介质访问控制</h2><p>&emsp;令牌传递协议，物理上不必是环形，但是逻辑上是环形结构，过程如下：</p>\n<ul>\n<li>1）网络空闲时，环路中只有令牌帧在循环传递</li>\n<li>2）令牌传递到有数据发送的站点时，该站点就修改令牌中的一个标志位，并在令牌中附上自己的数据，令牌就变成一个数据帧</li>\n<li>3）数据帧沿着环路传输，接收到的站点一边转发数据，一边查看目的地址，如果目的地址是自己的，就复制下来该数据</li>\n<li>4）数据帧沿着环路到达源发送站点，就不再转发，同时，检测返回的帧来查看数据传输是否出错</li>\n<li>5）源站点传送完数据后，重新生成一个令牌，并且传送个下一个站点，交出控制权。</li>\n</ul>\n<h1 id=\"五、数据链路层的流量控制与可靠传输\"><a href=\"#五、数据链路层的流量控制与可靠传输\" class=\"headerlink\" title=\"五、数据链路层的流量控制与可靠传输\"></a>五、数据链路层的流量控制与可靠传输</h1><h2 id=\"1、停止-等待流量控制基本原理\"><a href=\"#1、停止-等待流量控制基本原理\" class=\"headerlink\" title=\"1、停止-等待流量控制基本原理\"></a>1、停止-等待流量控制基本原理</h2><p>&emsp;发送方每发送一帧，接收方都需要发送确认帧。</p>\n<h2 id=\"2、滑动窗口流量控制基本原理\"><a href=\"#2、滑动窗口流量控制基本原理\" class=\"headerlink\" title=\"2、滑动窗口流量控制基本原理\"></a>2、滑动窗口流量控制基本原理</h2><ul>\n<li>发送方与接收方都有自己的窗口大小</li>\n<li>发送方收到一个确认帧并且可以向前滑动的时候，滑动窗口才向前滑动</li>\n<li>接收方能够向前滑动的时候就向前滑动</li>\n<li>窗口大小都是固定的</li>\n<li>接收窗口先滑动，发送窗口才能滑动，这样就能起到流量控制的作用</li>\n<li>从滑动窗口看下面三种传输机制<ul>\n<li>停止-等待协议： 发送窗口=1，接收窗口=1</li>\n<li>后退N帧协议：发送窗口&gt;1，接收窗口=1</li>\n<li>选择重传协议：发送窗口&gt;1，接收窗口&gt;1</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3、三种可靠传输协议\"><a href=\"#3、三种可靠传输协议\" class=\"headerlink\" title=\"3、三种可靠传输协议\"></a>3、三种可靠传输协议</h2><p>&emsp;首先，需要对帧进行编号，考虑到节省，对帧编号用固定且少量的比特数进行编号。但是，引入的新问题便是，编号循环后，如何确定发送的帧是上一轮的还是此轮的或者是下一轮的呢？</p>\n<p>答：要求 <script type=\"math/tex\">发送窗口+接收窗口 \\leq 2^n,\\quad n为用于编号的比特数</script>，至于为什么这样呢？最坏的情况，当接收窗口已经滑动到滑动窗口的尾部了，此时，当前轮发送仍未结束，但是当前发送双方能够扩展的长度应该不大于此轮编号长度才可以。</p>\n<h3 id=\"3-1-停止-等待协议\"><a href=\"#3-1-停止-等待协议\" class=\"headerlink\" title=\"3.1 停止-等待协议\"></a>3.1 停止-等待协议</h3><ul>\n<li>发送与接收窗口都是1</li>\n<li>一个帧被发送，该帧的确认帧需要被接收才能发送下一帧</li>\n<li>发送方有定时重传计时器</li>\n<li>编号的比特数便是：<script type=\"math/tex\">1+1 \\leq 2^n,\\quad n = 1</script>即可满足</li>\n<li>如果确认帧没有被收到，那么发送方重新发送后，接收方直接丢弃并重新发送确认帧。</li>\n</ul>\n<p>&emsp;信道利用率低</p>\n<h3 id=\"3-2-后退N帧协议（GBN）\"><a href=\"#3-2-后退N帧协议（GBN）\" class=\"headerlink\" title=\"3.2 后退N帧协议（GBN）\"></a>3.2 后退N帧协议（GBN）</h3><ul>\n<li>接收窗口为1，发送窗口为<script type=\"math/tex\">1\\leq W_T \\leq 2^n-1</script></li>\n<li>接收端只能接收滑动窗口内的帧，也就是只能一帧一帧按序接收</li>\n<li>接收端接收到错误的帧，或者接收到不在滑动窗口的帧（不管是窗口前或后）都丢弃</li>\n<li>接收端可以接收连续多帧，或者有数据发送的时候，才发送一个确认帧</li>\n<li>确认帧的意义是：对该帧及以前的确认帧都进行确认，并期望发送方发送下一帧</li>\n<li>接收方为每一帧都设置了一个定时重传定时器</li>\n<li>接收方没收到一个确认帧，滑动窗口的左端即可移动到该帧后面一个位置。</li>\n</ul>\n<p>&emsp;提高了信道利用率，但是如果有一帧出了问题，那么窗口前面的帧都需要重传，因此在误码率大的信道，信道利用率不一定比停等协议优。</p>\n<h3 id=\"3-3-选择重传协议（SR）\"><a href=\"#3-3-选择重传协议（SR）\" class=\"headerlink\" title=\"3.3 选择重传协议（SR）\"></a>3.3 选择重传协议（SR）</h3><ul>\n<li>窗口尺寸：<script type=\"math/tex\">W_R=W_T = 2^{n-1}</script></li>\n<li>一帧接收和一帧确认，发送方只需要重传没有收到确认的帧即可</li>\n<li>互联网标准还没明确地对该协议规定，所以这里从略</li>\n</ul>\n<h2 id=\"4、三种协议的信道计算\"><a href=\"#4、三种协议的信道计算\" class=\"headerlink\" title=\"4、三种协议的信道计算\"></a>4、三种协议的信道计算</h2><h3 id=\"4-1-信道利用率\"><a href=\"#4-1-信道利用率\" class=\"headerlink\" title=\"4.1 信道利用率\"></a>4.1 信道利用率</h3><p>&emsp;信道利用率相对于发送方而言，有效发送数据的时间占整个发送周期的比率。比如，发送方从开始发送到接收确认帧为止，时间为T，此时发送了L比特数据，发送方数据传输速率为C，那么有：<script type=\"math/tex\">发送方发送有效数据的时间 = \\frac{L}{C},\\quad 占总时间的比值为：\\frac{L/C}{T}</script>，利用率也是这个。</p>\n<p>&emsp;定义参数<script type=\"math/tex\">\\alpha = \\frac{\\tau}{T_0}</script>，假设永远不发生碰撞，以太网利用率最高<script type=\"math/tex\">S_{max} = \\frac{T_0}{T_0 + \\tau}=\\frac{1}{1+a}</script></p>\n<h3 id=\"4-2-信道吞吐量\"><a href=\"#4-2-信道吞吐量\" class=\"headerlink\" title=\"4.2 信道吞吐量\"></a>4.2 信道吞吐量</h3><script type=\"math/tex; mode=display\">信道吞吐量 = 信道利用率 \\times 发送方的发送速率，\\quad = \\frac{L}{T}</script><h3 id=\"4-3-如何计算\"><a href=\"#4-3-如何计算\" class=\"headerlink\" title=\"4.3 如何计算\"></a>4.3 如何计算</h3><ul>\n<li>首先计算第一帧开始发送到第一个确认帧返回的时间</li>\n<li>然后计算这段时间内，发送方发送了多少有效数据，并计算发送有效数据的时间</li>\n<li>对于上面一点，停等协议就只发送了一帧数据，而后退N帧协议就发送了多帧数据，这段时间都要进行计算</li>\n<li>有效数据的时间除以上面总的时间，便是效率</li>\n</ul>\n<h1 id=\"六、以太网\"><a href=\"#六、以太网\" class=\"headerlink\" title=\"六、以太网\"></a>六、以太网</h1><h2 id=\"1、MAC层\"><a href=\"#1、MAC层\" class=\"headerlink\" title=\"1、MAC层\"></a>1、MAC层</h2><p>&emsp;<strong>硬件地址</strong>又称为<strong>物理地址</strong>或<strong>MAC地址</strong>，是一个<strong>48位</strong>固化在<strong>ROM</strong>中的。MAC地址前24位称为组织唯一标识符OUI，后24位称为扩展唯一标识符EUI。第一个字节的最低二位规定为G/L位，表示Global/Local位，为0表示全球管理，为1表示本地管理。全球管理的地址有46位。</p>\n<p>&emsp;适配器会处理一下三种帧</p>\n<ul>\n<li>单播帧：一对一，目的MAC地址与本适配器的MAC地址相同就收下</li>\n<li>广播帧：一对全体，MAC地址为全1</li>\n<li>多播帧：一对多，发送给一部分站点，而不是全部站点，相当于群组</li>\n</ul>\n<p>&emsp;所有适配器都应该识别前面两种帧，有一种网络工具叫做<strong>嗅探器（Sniffer）</strong>能够识别所有的帧，包括MAC地址不是自己的也可以记录下来。</p>\n<h2 id=\"2、MAC帧格式\"><a href=\"#2、MAC帧格式\" class=\"headerlink\" title=\"2、MAC帧格式\"></a>2、MAC帧格式</h2><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202207191047007.png\" alt=\"image-20220719104733647\"></p>\n<ul>\n<li>源地址与目的地址，MAC地址</li>\n<li>类型，比如交付给上层的协议是什么，如IP：0x0800</li>\n<li>FCS：使用CRC校验，只校验目的地址到FCS为止的字段，不包括前导码和帧开始定界符</li>\n<li>以太网规定最小帧长为64字节，所以数据段最小长度为64-6-6-2-4=46字节</li>\n<li>以太网采用曼彻斯特编码，当电压不再变化了，就代表已经结束传输了，所以帧结束定界符也就不需要</li>\n<li>前导码的作用是用来同步时钟频率的，帧开始定界符是用来告诉帧开始发送的标志</li>\n</ul>\n<p>对于下列的帧情况，以太网直接进行丢弃，不会重传</p>\n<ul>\n<li>帧长度不是整数个字节</li>\n<li>FCS检验出错</li>\n<li>MAC帧长度不是64-1518个字节的</li>\n</ul>\n<p>现在广泛使用的局域网也只剩下以太网了</p>\n<h2 id=\"3、扩展以太网\"><a href=\"#3、扩展以太网\" class=\"headerlink\" title=\"3、扩展以太网\"></a>3、扩展以太网</h2><h3 id=\"3-1-在物理层扩展以太网\"><a href=\"#3-1-在物理层扩展以太网\" class=\"headerlink\" title=\"3.1 在物理层扩展以太网\"></a>3.1 在物理层扩展以太网</h3><p>&emsp;过去使用粗缆或细缆，现在使用光纤</p>\n<h3 id=\"3-2-在数据链路层扩展以太网\"><a href=\"#3-2-在数据链路层扩展以太网\" class=\"headerlink\" title=\"3.2 在数据链路层扩展以太网\"></a>3.2 在数据链路层扩展以太网</h3><p>&emsp;使用交换机进行扩展</p>\n<h3 id=\"3-3-虚拟局域网\"><a href=\"#3-3-虚拟局域网\" class=\"headerlink\" title=\"3.3 虚拟局域网\"></a>3.3 虚拟局域网</h3><p>&emsp;<strong>虚拟局域网VLAN（Virtual LAN）</strong>是局域网提供给用户的一种服务，而不是一种新型局域网。VLAN使用802.1Q帧，格式如下：</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202207191212887.png\" alt=\"image-20220719121225767\"></p>\n<p>相比于以太网帧，多了VLAN标签。VLAN标签前两个字节为0x8100，后面为<strong>VLAN标识符VID（VLAN ID）</strong>，出入VID后，FCS需要重新计算。对于主机来说，并不知道自己的VID，所以主机发送给交换机的是普通以太网帧。交换机通过端口或者MAC地址划分VLAN，并且为VLAN分配好了VID。</p>\n<p>设想一下场景</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202207191214702.png\" alt=\"image-20220719121409605\"></p>\n<ul>\n<li>A向B发送数据，发送普通以太网帧给交换机#1，#1发现是同一VLAN下的主机，不需要增加VLAN标签，直接转发给B</li>\n<li>A向E发送数据，#1通过汇聚链路将帧转发给#2，并增加VLAN标签，#2发送去掉VLAN标签，并转发给E</li>\n<li>A向C发送数据，这种情况比较复杂，书上没讲</li>\n</ul>\n<h2 id=\"4、扩展到高速以太网\"><a href=\"#4、扩展到高速以太网\" class=\"headerlink\" title=\"4、扩展到高速以太网\"></a>4、扩展到高速以太网</h2><h3 id=\"4-1-100BASE-T以太网\"><a href=\"#4-1-100BASE-T以太网\" class=\"headerlink\" title=\"4.1 100BASE-T以太网\"></a>4.1 100BASE-T以太网</h3><ul>\n<li>速度：100Mb/s</li>\n<li>完全可以使用10Mb/s下的软件</li>\n</ul>\n<h3 id=\"4-2-吉比特以太网\"><a href=\"#4-2-吉比特以太网\" class=\"headerlink\" title=\"4.2 吉比特以太网\"></a>4.2 吉比特以太网</h3><ul>\n<li>速度：1Gb/s</li>\n<li>半双工使用CSMA/CD，全双工不使用</li>\n<li>向后兼容</li>\n</ul>\n<p>不改变网段最长长度，但是争用期由原来的64字节，变成512字节，使用如下方法来适用CSMA/CD。</p>\n<ul>\n<li>载波延伸：最短帧长仍然是64字节，但是为他扩充到512字节；引入的问题便是，发送了许多无用的数据</li>\n<li>分组突发：将多个短帧合起来发送</li>\n</ul>\n<h3 id=\"4-3-10吉比特以太网\"><a href=\"#4-3-10吉比特以太网\" class=\"headerlink\" title=\"4.3 10吉比特以太网\"></a>4.3 10吉比特以太网</h3><ul>\n<li>速度：10Gb/s</li>\n<li>只工作在全双工模式</li>\n</ul>\n<h3 id=\"4-4-40-100吉比特以太网\"><a href=\"#4-4-40-100吉比特以太网\" class=\"headerlink\" title=\"4.4 40/100吉比特以太网\"></a>4.4 40/100吉比特以太网</h3><ul>\n<li>速度：40/100Gb/s</li>\n<li>只工作在全双工</li>\n</ul>\n<h1 id=\"七-、无线局域网\"><a href=\"#七-、无线局域网\" class=\"headerlink\" title=\"七 、无线局域网\"></a>七 、无线局域网</h1><p>&emsp;又称为802.11局域网</p>\n<h2 id=\"1、有固定基础设施无线局域网\"><a href=\"#1、有固定基础设施无线局域网\" class=\"headerlink\" title=\"1、有固定基础设施无线局域网\"></a>1、有固定基础设施无线局域网</h2><p>&emsp;采用该星形拓扑，中心称为接入点（Access Point，AP）。基本服务集（Basic Service Set， BSS）包括一个接入点和若干移动站。安装AP时必须为其分配一个不超过32字节的服务集标识符（Service Set IDentifier，SSID）和一个信道。接入点AP在出厂就具有唯一的48位二进制数字的MAC地址，正式名称为<strong>基本服务集标识符 BSSID</strong>。</p>\n<p>&emsp;一个基本服务集，可以时孤立的，还可以通过其他AP，连接到一个<strong>分配系统DS（Distribution System）</strong>，然后再连接到另一个基本服务集，这样就构成一个<strong>扩展服务集ESS（Extended Service Set）</strong>，扩展服务集也有唯一标识称为<strong>扩展服务集标识符ESSID</strong>。</p>\n<p>移动站与接入点AP建立关联的方式由两种，一种是被动扫描，一种是主动扫描。</p>\n<h3 id=\"被动扫描\"><a href=\"#被动扫描\" class=\"headerlink\" title=\"被动扫描\"></a>被动扫描</h3><ul>\n<li>接入点AP周期性发送<strong>信标帧（beacon frame）</strong>，其中包含由若干系统参数，如SSID及支持的速率</li>\n<li>移动站A扫描了11个信道，选择愿意加入接入点AP所在的基本服务集BSS，于是发送<strong>关联请求帧（Association Request frame）</strong></li>\n<li>接入点同意A发来的关联请求，向A发送<strong>关联响应帧（Association Response frame）</strong></li>\n</ul>\n<h3 id=\"主动扫描\"><a href=\"#主动扫描\" class=\"headerlink\" title=\"主动扫描\"></a>主动扫描</h3><ul>\n<li>A广播发送<strong>探测请求帧（Probe Request frame）</strong>，让所有的AP都能够知道有移动站要求建立关联</li>\n<li>有两个接入点回答<strong>探测请求响应帧（Probe Response frame）</strong></li>\n<li>A向一个站发送<strong>关联请求帧</strong></li>\n<li>接入点向A发送<strong>关联响应帧</strong></li>\n</ul>\n<h2 id=\"2、无固定基础设施移动自组织网络\"><a href=\"#2、无固定基础设施移动自组织网络\" class=\"headerlink\" title=\"2、无固定基础设施移动自组织网络\"></a>2、无固定基础设施移动自组织网络</h2><p>&emsp;称为自组网络，没有上述服务中的AP，由一些平等状态的移动站相互通信组成的临时网络。各结点地位平等，中间结点都为转发点。</p>\n<p>&emsp;在军用，救援等中有很好的应用。</p>\n<p>&emsp;移动自组网络的一个子集——<strong>无线传感器网络WSN（Wireless Sensor Network）</strong>。</p>\n<h2 id=\"3、MAC帧\"><a href=\"#3、MAC帧\" class=\"headerlink\" title=\"3、MAC帧\"></a>3、MAC帧</h2><p>&emsp;分为数据帧、控制帧和管理帧。</p>\n<p>下面来讲解数据帧：</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202207191312492.png\" alt=\"image-20220719131230352\"></p>\n<p>上述地址都是指MAC地址，其中地址4用于自组网络；</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">去往AP</th>\n<th style=\"text-align:center\">来自AP</th>\n<th style=\"text-align:center\">地址1</th>\n<th style=\"text-align:center\">地址2</th>\n<th style=\"text-align:center\">地址3</th>\n<th style=\"text-align:center\">地址4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">接收地址=目的地址</td>\n<td style=\"text-align:center\">发送地址=AP地址</td>\n<td style=\"text-align:center\">源地址</td>\n<td style=\"text-align:center\">——</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">接收地址=AP地址</td>\n<td style=\"text-align:center\">发送地址=源地址</td>\n<td style=\"text-align:center\">目的地址</td>\n<td style=\"text-align:center\">——</td>\n</tr>\n</tbody>\n</table>\n</div>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"一、基础知识\"><a href=\"#一、基础知识\" class=\"headerlink\" title=\"一、基础知识\"></a>一、基础知识</h1><h2 id=\"1、数据链路层的主要任务\"><a href=\"#1、数据链路层的主要任务\" class=\"headerlink\" title=\"1、数据链路层的主要任务\"></a>1、数据链路层的主要任务</h2><p>&emsp;主要包括三个任务：<strong>封装成帧</strong>，<strong>透明传输</strong>和<strong>差错检测</strong>。点对点通信。</p>\n<ul>\n<li>将网络层交下来的IP数据报封装成帧</li>\n<li>把封装好的帧发送给其他节点的数据链路层</li>\n<li>接收其他节点发过来的帧，检测如果无差错，提取出IP数据报并交付给网络层；有差错就直接丢弃帧。</li>\n</ul>\n<h2 id=\"2、名词解释\"><a href=\"#2、名词解释\" class=\"headerlink\" title=\"2、名词解释\"></a>2、名词解释</h2><ul>\n<li>链路：从一个节点到另一个节点的一段物理线路</li>\n<li>数据链路：在链路基础上，增加了执行通信协议的软硬件，构成了数据链路。</li>\n<li>网络适配器：称为网卡，实现上述协议的软硬件</li>\n<li>帧：数据链路层的协议数据单元（PDU），也是最小传输单位。</li>\n</ul>\n<h1 id=\"二、任务实现\"><a href=\"#二、任务实现\" class=\"headerlink\" title=\"二、任务实现\"></a>二、任务实现</h1><h2 id=\"1、封装成帧\"><a href=\"#1、封装成帧\" class=\"headerlink\" title=\"1、封装成帧\"></a>1、封装成帧</h2><p>&emsp;将上一层的网络层交付下来的数据报，加上帧首部与帧尾部之后，交付给物理层进行透明传输。也<strong>只有数据链路层</strong>会添加尾部。并且还会在帧前面和尾部加上帧界定符，帧开始加入<strong>帧开始符（SOH，0x01）</strong>，帧结束处加上<strong>帧结束符（EOT，0x04）</strong>，帧结束符可以判断帧是否完整，除此之外，<strong>PPP协议</strong>还会加入<strong>前导码（7个字节，0101…01）</strong>，前导码之后才是帧开始符。<strong>注意：</strong>上述0x01和0x04在谢书是这样，很多其他地方查的都不一样。</p>\n<p>&emsp;规定帧的格式与使用的协议有关，我们将会在<strong>PPP协议</strong>中具体讲到。</p>\n<h2 id=\"2、透明传输\"><a href=\"#2、透明传输\" class=\"headerlink\" title=\"2、透明传输\"></a>2、透明传输</h2><p>&emsp;我们已经知道了，帧开始符与帧结束符是一个固定的十六进制数，假如我们传输的数据中包含帧结束符的十六进制数据，那么应该如何处理这种情况呢？这就要求我们对数据进行<strong>透明传输</strong>。最常用的方法就是使用转义字符，也就是<strong>字节填充</strong>或<strong>字符填充</strong>，在数据部分中，有帧结束符的字符前面插入<strong>ESC（0x1B）</strong>。</p>\n<p>&emsp;实现透明传输与使用的协议有关，所以我们将会在<strong>PPP协议</strong>中具体讲到。</p>\n<h2 id=\"3、差错检测\"><a href=\"#3、差错检测\" class=\"headerlink\" title=\"3、差错检测\"></a>3、差错检测</h2><p>&emsp;现在的通信线路都不是很理想，容易发生比特错误，即1变成0或者0变成1。因此，差错检测是非常有必要的。常用的差错检测方法有，奇偶校验码和循环冗余码。除了进行检错之外，还发明了一种具有纠错功能的方法——海明码。</p>\n<h3 id=\"1）检错之奇偶校验码\"><a href=\"#1）检错之奇偶校验码\" class=\"headerlink\" title=\"1）检错之奇偶校验码\"></a>1）检错之奇偶校验码</h3><p>&emsp;奇偶校验码包括<strong>奇校验码</strong>和<strong>偶校验码</strong>，发送的比特流包含n位，其中前n-1位是数据，最后一位是<strong>校验位</strong>。</p>\n<ul>\n<li>奇校验：<strong>n-1位数据</strong>加上<strong>校验位</strong>的中<strong>1的个数</strong>是<strong>奇</strong>数，<strong>n位</strong>比特进行<strong>异或</strong>为<strong>1</strong>。</li>\n<li>偶校验：<strong>n-1位数据</strong>加上<strong>校验位</strong>的中<strong>1的个数</strong>是<strong>偶</strong>数，<strong>n位</strong>比特进行<strong>异或</strong>为<strong>0</strong>。</li>\n</ul>\n<p>&emsp;异或是一个比较重要的运算，在检验中常常用到。这里用异或是杀鸡用牛刀，海明码需要用到异或。这里给出异或的性质：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">左操作数</th>\n<th style=\"text-align:center\">异或</th>\n<th style=\"text-align:center\">右操作数</th>\n<th style=\"text-align:center\">=</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\"><script type=\"math/tex\">\\bigoplus</script></td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\"><script type=\"math/tex\">\\bigoplus</script></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><script type=\"math/tex\">\\bigoplus</script></td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><script type=\"math/tex\">\\bigoplus</script></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>与0异或，可以留出原来的状态</li>\n<li>与1异或，可以获取相反的状态</li>\n<li>2k和1异或是0，2k-1个1异或还是1</li>\n<li>满足交换律，  <script type=\"math/tex\">a \\bigoplus b = b\\bigoplus a</script></li>\n</ul>\n<h3 id=\"2）检错之循环冗余码\"><a href=\"#2）检错之循环冗余码\" class=\"headerlink\" title=\"2）检错之循环冗余码\"></a>2）检错之循环冗余码</h3><p>&emsp;上述编码其实只能够检测到奇数比特出错，如果是偶数个比特出错，检测就会失效了。所以，循环冗余码能够更有效地检测帧的正确与否，但是循环冗余码不能进行纠错，也就是不能确定错误出在哪个位置。循环冗余码检测通过之后，能够以接近1的概率认为此帧没有出错。并且CRC可以由硬件完成，所以速度非常快。</p>\n<h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><ul>\n<li>首先，双方协定一个多项式，多项式能够对应于一个二进制比特序列<strong>除数P</strong>，P有h位</li>\n<li>用<strong>数据M</strong>后面拼接上<strong>h-1位0</strong>，对上述P进行<strong>模2除</strong>法，小学数学学到的<strong>除过程</strong>中用的<strong>减法</strong>变成了<strong>异或</strong>运算而已。</li>\n<li>最后得到的<strong>余数</strong>长度应该是<strong>比P少1位</strong>，少不止1位，就在前面填充0，这个拼接到M的后面就成为了新的数据。</li>\n<li>接收方收到数据后，只需要把<strong>接收到的数据</strong>对<strong>P</strong>进行<strong>模2除</strong>法，如果<strong>余数为0</strong>，便<strong>通过</strong>，然后再把最后的检验位去除便可。</li>\n</ul>\n<p>其中，<strong>除数P</strong>应该是：</p>\n<ul>\n<li><p><strong>除数P</strong>：</p>\n<blockquote>\n<p>&emsp;一个包含n位的序列，对应的多项式应该是</p>\n<script type=\"math/tex; mode=display\">a_{n-1}X^{n-1}+a_{n-2}X^{n-2}+...+a_1X^1+a_0X^0</script><p>，至于怎么转成二进制序列呢？</p>\n<p>如二进制序列<strong>110110</strong>对应的多项式应该是</p>\n<script type=\"math/tex; mode=display\">1\\times2^5 + 1\\times2^4+0\\times2^3+1\\times2^2+1\\times2^1+0\\times2^0</script><p>。</p>\n</blockquote>\n</li>\n<li><p><strong>现在广泛使用的多项式：</strong></p>\n<blockquote>\n<p>① <strong>CRC-16:</strong> </p>\n<script type=\"math/tex; mode=display\">X^{16}+X^{15}+X^{2}+1</script><p>② <strong>CRC-CCITT:</strong> </p>\n<script type=\"math/tex; mode=display\">X^{16}+X^{12}+X^{5}+1</script><p>③ <strong>CRC-32:</strong> </p>\n<script type=\"math/tex; mode=display\">X^{32}+X^{26}+X^{23}+X^{22}+X^{16}+X^{12}+X^{11}+X^{10}+X^{8}+X^{7}+X^{5}+X^{4}+X^{2}+X^{}+1</script></blockquote>\n</li>\n</ul>\n<h3 id=\"3）纠错之海明码\"><a href=\"#3）纠错之海明码\" class=\"headerlink\" title=\"3）纠错之海明码\"></a>3）纠错之海明码</h3><p>&emsp;前面提到的两种方法，都只适用于检错，如果出现差错，那么只能丢弃差错帧。而海明码，不仅可以检测出差错帧，还能检测出在哪出现的差错帧，并对其进行纠正。但是，海明码也只能<strong>发现双比特错误</strong>，<strong>纠正单比特错误</strong>。</p>\n<ul>\n<li>海明距离：两个比特码对应位不同的个数</li>\n<li><strong>纠错</strong>d位，需要<strong>码距</strong>为<strong>2d+1</strong>的解决方案</li>\n<li><strong>检错</strong>d位，需要<strong>码距</strong>为<strong>d+1</strong>的解决方案</li>\n</ul>\n<h4 id=\"确定检验位数\"><a href=\"#确定检验位数\" class=\"headerlink\" title=\"确定检验位数\"></a>确定检验位数</h4><p>&emsp;如果需要对<strong>长度为n</strong>的有效信息进行检验，需要<strong>k位</strong>检验码，n与k之间的关系式应该是怎样的呢？</p>\n<p>&emsp;首先，我们知道，海明码只对单个比特进行纠错，就是假设只有单个比特发生错误。那么，接收方收到的数据有多少种情况呢？应该是有<strong>有效信息发生错误（n种）</strong>加上<strong>校验码发生错误（k种）</strong>再加上<strong>全部正确（1种）</strong>的总共<script type=\"math/tex\">n+k+1</script>种情况。那么，k位校验码能够代表多少种情况呢？应该是<script type=\"math/tex\">2^k</script>种情况。所以，得到<strong>关系式</strong>为：<script type=\"math/tex\">n+k+1\\leq2^k</script>。</p>\n<h4 id=\"校验码应该如何放置\"><a href=\"#校验码应该如何放置\" class=\"headerlink\" title=\"校验码应该如何放置\"></a>校验码应该如何放置</h4><p>&emsp;按照以往来说，校验码都是拼接到数据的最后部分。而海明码则不是拼接到数据最后部分，这样能够快地确定纠错位置。</p>\n<p>&emsp;海明码规定，第 <code>i</code>位海明码<script type=\"math/tex\">P_i</script></p>\n<p>应该在<strong>整个数据（有效数据+检验码）</strong>第<script type=\"math/tex\">2^{i-1}</script></p>\n<p>的位置。如，第1位海明码在数据的第1位，第2位海明码在数据的第2位，第3位海明码在数据的第4位，第5位海明码在数据的第16位。</p>\n<h4 id=\"检验原理与步骤\"><a href=\"#检验原理与步骤\" class=\"headerlink\" title=\"检验原理与步骤\"></a>检验原理与步骤</h4><p>&emsp;假设海明码用<strong>H</strong>表示，有效数据用<strong>D</strong>表示，总数据位用<strong>C</strong>来表示。我们要明确一个概念，现在不仅仅是对有效数据在检验，而是对整个数据都在检验，与前面的检验方法有所不同。</p>\n<p>&emsp;假设我们有效数据为<strong>n=4</strong>位，即可算出校验数据只需要<strong>k=3</strong>位即可，太多了浪费。下面总数据的序号用二进制表示，方便之后理解。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">111</th>\n<th style=\"text-align:center\">110</th>\n<th style=\"text-align:center\">101</th>\n<th style=\"text-align:center\">100</th>\n<th style=\"text-align:center\">011</th>\n<th style=\"text-align:center\">010</th>\n<th style=\"text-align:center\">001</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>海明码</strong></td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\"><script type=\"math/tex\">H_3,2^{3-1}=b100</script></td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\"><script type=\"math/tex\">H_2,2^{2-1}=b010</script></td>\n<td style=\"text-align:center\"><script type=\"math/tex\">H_1,2^{1-1}=b001</script></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>有效数据</strong></td>\n<td style=\"text-align:center\"><script type=\"math/tex\">D_4</script></td>\n<td style=\"text-align:center\"><script type=\"math/tex\">D_3</script></td>\n<td style=\"text-align:center\"><script type=\"math/tex\">D_2</script></td>\n<td style=\"text-align:center\">——</td>\n<td style=\"text-align:center\"><script type=\"math/tex\">D_1</script></td>\n<td style=\"text-align:center\">——</td>\n<td style=\"text-align:center\">——</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>那么如何计算H呢？只需要用<strong>异或</strong>即可，哪几位异或呢？</p>\n<p>&emsp;从上面我们知道，<script type=\"math/tex\">H_i</script></p>\n<p>对应于总数据的位置是<script type=\"math/tex\">2^{i-1}</script></p>\n<p>，显然数字<script type=\"math/tex\">2^{i-1}</script></p>\n<p>对应的二进制序列<strong>只有一位</strong>为1，而且恰好是<strong>第i位</strong>，其他都为0，不信可以写一写。我们只需要把<strong>总数据序号</strong>中，<strong>第i位为1</strong>的数据拿出来异或，异或后的值就是</p>\n<script type=\"math/tex; mode=display\">H_i</script><p>的值了。</p>\n<p>总结下来说，不那么绕的来说就是，</p>\n<script type=\"math/tex; mode=display\">H_i</script><p>对<strong>序号</strong>中<strong>第i位为1</strong>的数据进行检验。<script type=\"math/tex\">H_1 = D_1 \\bigoplus D_2 \\bigoplus D_4 \\\\ H_2 = D_1 \\bigoplus D_3 \\bigoplus D_4 \\\\H_3 = D_2 \\bigoplus D_3 \\bigoplus D_4</script></p>\n<p>&emsp;现在收到数据之后，如何进行检验呢？检验完之后，如果找错出错位呢？上述提到海明码计算使用的异或来做的，相当于把原始状态异或后保存到了海明码中。异或能够同为0，异为1。我们把原始状态保存到海明码中了，现在接收到的状态便在数据中，所以，只需要检验数据中的状态与原始状态是否相同即可。那么我们可以得出如下式子。</p>\n<script type=\"math/tex; mode=display\">S_1 = H_1 \\bigoplus D_1 \\bigoplus D_2 \\bigoplus D_4 \\\\ S_2 = H_2 \\bigoplus D_1 \\bigoplus D_3 \\bigoplus D_4 \\\\S_3 =H_3 \\bigoplus D_2 \\bigoplus D_3 \\bigoplus D_4</script><p>&emsp;如果<script type=\"math/tex\">S_1S_2S_3 = 000</script></p>\n<p>，那么说明状态没有改变，接收到的数据是正确的。如果不为0呢？怎么知道哪里发生错误。显然我们在检验过程中有，<script type=\"math/tex\">H_1</script></p>\n<p>对序号第1位为1的所有数据进行检验，<script type=\"math/tex\">H_2</script></p>\n<p>对序号第2位为1的所有数据进行检验，<script type=\"math/tex\">H_3</script></p>\n<p>对序号第3位为1的所有数据进行了检验。</p>\n<p>&emsp;因此，<script type=\"math/tex\">S_i</script>为1的话，代表序号中<strong>第i位</strong>为1的位置的数据有错误，将所有的S都拼接，即可确定发生错误在序号中的位置。如<script type=\"math/tex\">S_3S_2S_1=010</script>，代表序号中第2位发生了错误，只需要把第2位进行取反即可。</p>\n<h1 id=\"三、PPP协议\"><a href=\"#三、PPP协议\" class=\"headerlink\" title=\"三、PPP协议\"></a>三、PPP协议</h1><h2 id=\"1、PPP协议满足的需求\"><a href=\"#1、PPP协议满足的需求\" class=\"headerlink\" title=\"1、PPP协议满足的需求\"></a>1、PPP协议满足的需求</h2><ul>\n<li>（1）简单：就追求着简单，采用CRC检验，如果发生错误了，直接丢弃帧，什么也不做。正确就收下帧。</li>\n<li>（2）封装成帧：规定了特殊字段作为帧界定符。前面提到过，这里协议具体讲。</li>\n<li>（3）透明性：保证数据透明性。前面提到过，这里协议具体讲。</li>\n<li>（4）多种网络层协议：保证同一条物理链路上同时支持多种网络协议，如（IP和IPX等）。</li>\n<li>（5）多种类型链路：除了要支持多种网络协议外，还需要在多种物理链路运行，如串并，电光等。</li>\n<li>（6）差错检测：对收到的帧进行差错检测</li>\n<li>（7）检测连接状态：能够判断链路是否正常工作</li>\n<li>（8）最大传送单元：限定了点对点<strong>最大传送单元MTU</strong>，数据部分不包括头尾部分，默认值是1500字节。</li>\n<li>（9）网络层地址协商：使得双方的网络层能够知晓对方IP地址</li>\n<li>（10）数据压缩协商：提供一种方法来协商数据压缩算法，但不一定要标准化。</li>\n</ul>\n<h2 id=\"2、PPP协议的帧格式\"><a href=\"#2、PPP协议的帧格式\" class=\"headerlink\" title=\"2、PPP协议的帧格式\"></a>2、PPP协议的帧格式</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>F(0x7E), 1B</th>\n<th>A(0xFF), 1B</th>\n<th>C(0x01), 1B</th>\n<th>协议, 2B</th>\n<th>数据部分, 1500B以内</th>\n<th>FCS, 2B</th>\n<th>F(0x7E), 1B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><strong>F</strong>：帧界定符，二进制为：0111 1110。注意，这里有6个连续的1，之后会用到。</li>\n<li><strong>A</strong>：这个字段相当于保留字段，目前没有任何定义</li>\n<li><strong>C</strong>：同上</li>\n<li><strong>协议</strong>：表示数据部分使用的协议。比如，0x0021代表IP数据报。0xC021代表LCP（链路控制协议）数据。</li>\n<li><strong>FCS</strong>：帧检验序列，采用的是CRC检验</li>\n</ul>\n<h2 id=\"3、PPP协议的透明传输\"><a href=\"#3、PPP协议的透明传输\" class=\"headerlink\" title=\"3、PPP协议的透明传输\"></a>3、PPP协议的透明传输</h2><p>&emsp;前面提到为什么需要透明传输，以及什么是透明传输。PPP协议有如下方法：</p>\n<h3 id=\"（1）字节填充\"><a href=\"#（1）字节填充\" class=\"headerlink\" title=\"（1）字节填充\"></a>（1）字节填充</h3><p>&emsp;就是使用转义字符，转义字符定义为<strong>0x7D（0111 1101）</strong></p>\n<ul>\n<li>1）如果数据中出现（0x7E），那么就变成 （0x7D，0x5E）</li>\n<li>2）如果数据中出现（0x7D），那么就变成（0x7D，0x5D）</li>\n<li>3）如果出现ASCII码控制字符，数值小于0x20的字符，那么就在此字符前面加上0x7D，并将其加以改变，比如加上0x20。</li>\n</ul>\n<h3 id=\"（2）零比特填充\"><a href=\"#（2）零比特填充\" class=\"headerlink\" title=\"（2）零比特填充\"></a>（2）零比特填充</h3><p>&emsp;我们前面提到，0x7E中有连续的6个1，那么我们只要保证数据中没有连续的6个1即可，具体做法是，每发现5个1，就填充1个0。接收数据后，只要每发现5个1，就删除后面的1个0。</p>\n<h3 id=\"（3）其他方法\"><a href=\"#（3）其他方法\" class=\"headerlink\" title=\"（3）其他方法\"></a>（3）其他方法</h3><p>&emsp;这些不是PPP协议的内容，但是也是进行透明传输的方法。</p>\n<ul>\n<li>字符计数法：在帧的头部加上一个表示该帧后面跟随的字节数。这样，就能明确边界在哪了。这种方法的问题就是，出现一个错误，那么后面全部的帧都发生错误。</li>\n<li>违规编码法：在物理层常使用这种方法，如曼彻斯特编码中，一个比特位周期的电平要么是 高-低，要么是 低-高，所以，高-高或者低-低就是违规编码，我们用来作为帧的开始和结束。</li>\n</ul>\n<h2 id=\"4、PPP协议的工作状态\"><a href=\"#4、PPP协议的工作状态\" class=\"headerlink\" title=\"4、PPP协议的工作状态\"></a>4、PPP协议的工作状态</h2><p>&emsp;我们知道PPP协议主要是为了传输网络层的数据，但是，数据链路层也有自己的数据需要传送，如有些链路需要建立连接。PPP协议组成应该包含了三个部分，<strong>一是</strong>将IP数据报封装到串行链路中，既支持异步链路，又支持面向比特的同步链路。<strong>二是</strong>用来建立、配置和测试数据链路连接的<strong>链路控制协议LCP（Link Control Protocol）</strong>。<strong>三是</strong>一套<strong>网络控制协议（Network Control Protocol）</strong>，这其中，每一个协议支持不同的网络层协议。</p>\n<p>&emsp;用户接入ISP后，会主动发送一系列LCP分组，以便建立LCP。紧接着，NCP就会为新接入的主机分配一个IP地址。用户通信完毕，NCP收回IP地址，并释放连接。步骤如下图所示：<img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206161415001.png\" alt=\"image-20220616141536749\"></p>\n<p>&emsp;PPP链路起始和终止状态都是<strong>链路静止</strong>状态，用户发起连接后（如连接一个WiFi，接上一根网线），进入了链路建立状态。这是LCP开始进行一些协商，发送LCP<strong>配置请求帧</strong>，包括<strong>配置确认帧（接受）、配置否认帧（理解意思但不接受）和配置拒绝帧（无法识别或不接受）</strong>。之后ISP对用户进行鉴别（如WiFi密码正确与否，账号密码登录，网费是否充足）。采用了<strong>口令鉴别协议PAP（Password Authentication Protocol）或口令握手鉴别协议CHAP（Challenge-Handshake Authentication Protocol）</strong>。之后便进入了网络层协议。</p>\n<h1 id=\"四、数据链路层\"><a href=\"#四、数据链路层\" class=\"headerlink\" title=\"四、数据链路层\"></a>四、数据链路层</h1><h2 id=\"1、局域网的数据链路层\"><a href=\"#1、局域网的数据链路层\" class=\"headerlink\" title=\"1、局域网的数据链路层\"></a>1、局域网的数据链路层</h2><p>&emsp;局域网工作的层次横跨了数据链路层和物理层。局域网内的主机共享连接在局域网上的各种软硬件资源，共享需要考虑的一个问题是，如何使众多用户能够合理而方便地共享通信媒体资源。这在技术上有两种方法：</p>\n<ul>\n<li>（1）<strong>静态划分信道</strong>，如前面提到的时分复用等，这种信道划分的方法代价高</li>\n<li><p>（2）<strong>动态媒体接入控制技术</strong>，分为：</p>\n<blockquote>\n<ul>\n<li><strong>随机接入</strong>：所有用户可以随时发送消息，但是如果恰巧不止一个用户在发送消息，那么就会产生<strong>碰撞</strong>（<strong>即产生冲突</strong>），因此需要有协议来解决这些碰撞。</li>\n<li><strong>受控接入</strong>：用户不能随时发送消息，而是服从一定控制发送消息，使用<strong>轮询</strong>方式</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"2、数据链路层的划分\"><a href=\"#2、数据链路层的划分\" class=\"headerlink\" title=\"2、数据链路层的划分\"></a>2、数据链路层的划分</h2><p>&emsp;因为各个公司的协议不同，所以产生了很多不同种类的数据链路层，而IEEE 802 委员会将<strong>局域网的数据链路层</strong>拆分为<strong>逻辑链路控制LLC（Logical Link Control）</strong>和<strong>媒体接入控制MAC（Medium Access Control）</strong>两层。而委员会仅仅只能是制定标准的人，真正实行的还是各大企业，因此，最后局域网只剩下<strong>以太网（DIX Ethernet V2）</strong>了，<strong>LLC</strong>已经消失，只剩下<strong>MAC</strong>。</p>\n<h2 id=\"3、适配器\"><a href=\"#3、适配器\" class=\"headerlink\" title=\"3、适配器\"></a>3、适配器</h2><p>&emsp;计算机与外界局域网的连接都是通过<strong>适配器（adapter）</strong>，适配器是在主机箱内插入的一块网络接口板，称为<strong>网络接口卡NIC</strong>，简称<strong>网卡</strong>。适配器不仅仅包含<strong>数据链路层</strong>的功能，还需要实现<strong>物理层</strong>的功能。适配器有自己的<strong>处理器（CPU）和存储器（RAM, ROM）</strong>，因此，不需要使用计算机的CPU。<strong>网卡</strong>的ROM有<strong>MAC</strong>地址，而<strong>计算机</strong>的软件地址（<strong>IP</strong>地址），则在计算机的存储器中。</p>\n<h2 id=\"4、信道划分介质访问控制\"><a href=\"#4、信道划分介质访问控制\" class=\"headerlink\" title=\"4、信道划分介质访问控制\"></a>4、信道划分介质访问控制</h2><p>&emsp;介质访问控制有，介质访问控制，随机访问介质访问控制和轮询访问介质访问控制。</p>\n<p>&emsp;信道划分介质访问控制便是之前讲的，复用技术：频分复用、时分复用、码分复用、波分复用</p>\n<h2 id=\"5、随机访问介质访问控制\"><a href=\"#5、随机访问介质访问控制\" class=\"headerlink\" title=\"5、随机访问介质访问控制\"></a>5、随机访问介质访问控制</h2><h3 id=\"（1）ALOHA协议\"><a href=\"#（1）ALOHA协议\" class=\"headerlink\" title=\"（1）ALOHA协议\"></a>（1）ALOHA协议</h3><h4 id=\"纯ALOHA协议\"><a href=\"#纯ALOHA协议\" class=\"headerlink\" title=\"纯ALOHA协议\"></a>纯ALOHA协议</h4><p>&emsp;各个用户想发送数据就发送数据，如果一段时间内没有收到确认，就认为发生了冲突，随机等待一段时间后再发送。假设网络负载（单位时间内所有站点发送成功和未成功而重传的帧数）为G，则纯ALOHA协议网络的吞吐量（单位时间内发送成功的平均帧数）为<script type=\"math/tex\">S=Ge^{-2G}</script></p>\n<p>。当G=1.5时，S≈0.184。</p>\n<h4 id=\"时隙ALOHA协议\"><a href=\"#时隙ALOHA协议\" class=\"headerlink\" title=\"时隙ALOHA协议\"></a>时隙ALOHA协议</h4><p>&emsp;讲各个用户时间同步起来，并且划分了一段段时隙，只有在时隙开始时，各个用户才可发送消息。其他基本与纯ALOHA协议一致。</p>\n<h3 id=\"（2）CSMA协议协议\"><a href=\"#（2）CSMA协议协议\" class=\"headerlink\" title=\"（2）CSMA协议协议\"></a>（2）CSMA协议协议</h3><p>&emsp;<strong>载波监听多路访问 ( Carrier Sense Multiple Access ) </strong>协议，相比于ALOHA协议，多了一个载波监听装置。CSMA协议分为三种方式：</p>\n<ul>\n<li>1-坚持CSMA：结点需要发送数据，首先侦听信道，信道<strong>空闲</strong>就立马<strong>发送</strong>，信道<strong>忙</strong>，就一直<strong>等待并持续监听</strong>。</li>\n<li>非坚持CSMA：结点需要发送数据，首先侦听信道，信道<strong>空闲</strong>就立马<strong>发送</strong>，信道<strong>忙</strong>，就<strong>等待</strong>一个<strong>随机</strong>时间再重复上述过程</li>\n<li>p-坚持CSMA：结点需要发送数据，首先侦听信道，信道<strong>忙</strong>就持续监听，信道<strong>空闲</strong>，以概率p发送数据，以概率1-p推迟到下个时隙，重复。</li>\n</ul>\n<h3 id=\"（3）CSMA-CD协议\"><a href=\"#（3）CSMA-CD协议\" class=\"headerlink\" title=\"（3）CSMA/CD协议\"></a>（3）CSMA/CD协议</h3><h4 id=\"CSMA-CD协议介绍\"><a href=\"#CSMA-CD协议介绍\" class=\"headerlink\" title=\"CSMA/CD协议介绍\"></a>CSMA/CD协议介绍</h4><p>&emsp;<strong>载波侦听多路访问/碰撞检测（Carrier Sense Multiple Access with Collision Detection，CSMA/CD）</strong>过程如下：</p>\n<ul>\n<li>1）适配器从网络层获得一个分组，封装成以太网帧，放入适配器缓存，准备发送。</li>\n<li>2）如果适配器侦听到信道空闲，就发送该帧。侦听到忙，就持续侦听直到信道上没有信号能量，然后发送该帧</li>\n<li>3）在发送过程中，仍然持续检测信道，如果没有检测到碰撞，就顺利发送该帧。否则，中止发送，并发送一个拥塞信号。</li>\n<li>4）中止发送后，适配器执行指数退避算法，等到一段随机事件后返回步骤2。</li>\n</ul>\n<p>&emsp;<strong>以太网</strong>常常采用此方法进行处理冲突，以太网使用<strong>曼彻斯特编码</strong>，曼彻斯特在传输过程中自带了时钟信息，可以很方便的检测出当前信道是否有数据在发送。下面讲解<strong>CSMA/CD</strong>协议的要点：</p>\n<ul>\n<li><strong>多点接入</strong>：表示了是<strong>总线型</strong>，各台计算机以多点的方式接入到网络中</li>\n<li><strong>载波监听</strong>：也就是<strong>边发送边监听</strong></li>\n<li><strong>碰撞检测</strong>：通过检测电压变化，判断网络是否发生了冲突</li>\n</ul>\n<h4 id=\"碰撞检测\"><a href=\"#碰撞检测\" class=\"headerlink\" title=\"碰撞检测\"></a>碰撞检测</h4><p>&emsp;首先，假设A、B两方在通信，规定了端到端的传播时延为<script type=\"math/tex\">\\tau</script>。假设A向B发送数据，那么最多经过<script type=\"math/tex\">2\\tau</script></p>\n<p>的时间，A能够检测到碰撞发生与否（即，信号往返的时间）。显然，采用CSMA/CD协议的以太网只能实现<strong>半双工通信</strong>（我的理解是，总线型，只有一根信道，也就是对于任何一个主机而言，接收端也是发送端）。</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202207061352402.png\" alt=\"image-20220706135253122\"></p>\n<p>&emsp;设想如下场景：</p>\n<ul>\n<li><p><script type=\"math/tex\">t=0</script>，A检测到信道空闲，向B发送数据</p>\n</li>\n<li><p><script type=\"math/tex\">t=\\tau - \\delta</script>，B检测到信道空闲，向A发送数据，<script type=\"math/tex\">\\delta</script>为B发送数据到A的数据到达B的时间</p>\n</li>\n<li><p><script type=\"math/tex\">t= \\tau - \\frac{\\delta}{2}</script>，也就是B发送数据后经过<script type=\"math/tex\">\\frac{\\delta}{2}</script>后，A,B数据发生了碰撞</p>\n</li>\n<li><p><script type=\"math/tex\">t=\\tau</script>，B检测到了碰撞</p>\n</li>\n<li><p><script type=\"math/tex\">t=2\\tau-\\delta</script>，A检测到了碰撞</p>\n</li>\n<li><p>当  <script type=\"math/tex\">{\\lim\\limits_{\\delta \\to 0}}</script> ，最慢到  <script type=\"math/tex\">t=2\\tau</script>时，A检测到碰撞发生。</p>\n</li>\n</ul>\n<p>&emsp;<strong>最短帧长</strong>：A最多在<script type=\"math/tex\">2\\tau</script>的时间后能够检测到碰撞，因此把<script type=\"math/tex\">2\\tau</script>称为<strong>争用期</strong>。发送方是在发送数据以及将要发送数据的时候才检测信道是否发生冲突，为了确保发送数据过程中，发送方能够检测到冲突，要求发送方在争用期中，一直发送数据。那么争用期中发送数据的帧长就是最短帧长，即<strong>最短帧长</strong>=<script type=\"math/tex\">2\\tau\\times</script>数据传输率。例如，以太网规定争用期为<script type=\"math/tex\">51.2\\mu s</script>，对于<script type=\"math/tex\">10Mb/s</script>的以太网，最短帧长为<script type=\"math/tex\">512bit = 64B</script>。凡是小于<script type=\"math/tex\">64B</script>的帧都是由于冲突而异常中止的无效帧。</p>\n<h4 id=\"二进制退避算法\"><a href=\"#二进制退避算法\" class=\"headerlink\" title=\"二进制退避算法\"></a>二进制退避算法</h4><ul>\n<li>1）确定基本的退避时间，通常为  <script type=\"math/tex\">2\\tau</script></li>\n<li>2）定义参数  <script type=\"math/tex\">k</script>，  <script type=\"math/tex\">k = min[重传次数, 10]</script>，重传次数即，此次是该帧第几次重传了，也就是发生了几次碰撞。</li>\n<li>3）从离散集合  <script type=\"math/tex\">[0,\\quad1,\\quad,...,2^k-1]</script>  中随机取出一个数  <script type=\"math/tex\">r</script>，重传所需要的退避时间就是  <script type=\"math/tex\">2r\\tau</script>。</li>\n<li>4）当重传16次都未成功，那么丢弃此帧，并向上层（网络层）报告错误。</li>\n</ul>\n<h3 id=\"（4）CSMA-CA协议\"><a href=\"#（4）CSMA-CA协议\" class=\"headerlink\" title=\"（4）CSMA/CA协议\"></a>（4）CSMA/CA协议</h3><p>&emsp;<strong>载波监听多路访问/碰撞避免（Carries Sense Multiple Access with Collision Avoidance）</strong>协议，相比于CSMA/CD协议，将碰撞<strong>检测</strong>变成了碰撞<strong>避免</strong>。</p>\n<p>&emsp;<strong>CSMA/CD</strong>协议很好地应用于<strong>有线局域网</strong>中了，但在<strong>无线局域网</strong>中，则需要使用<strong>CSMA/CA</strong>协议。原因如下：</p>\n<ul>\n<li>1）接收信号的强度往往远小于发送信号的强度，因此要是实现碰撞检测，硬件花费大。</li>\n<li>2）无线通信中，并非所有的站点都能够听见对方，存在<strong>隐蔽站</strong>问题。</li>\n</ul>\n<p>&emsp;无线信道的通信质量远远小于有线信道，所以采用了<strong>链路层确认/重传（ARQ）</strong>方案，发送完一帧，需要收到确认才能发送下一帧。为了尽量避免碰撞，所有站发送完成后，必须等待一段很短的时间才能发送下一帧，这段时间间隔称为<strong>帧间间隔（InterFrame Space, IFS）</strong>，类型如下：</p>\n<ul>\n<li>1）SIFS（短IFS）：最短的IFS，用于分隔属于一次对话的各帧，如ACK帧，CTS帧，分片后的数据帧，以及所有回答AP探询的帧。</li>\n<li>2）PIFS（点协调IFS）：中等长度的IFS，在PCF操作中使用</li>\n<li>3）DIFS（分布式协调IFS）：最长的IFS，用于异步帧竞争访问的时延</li>\n</ul>\n<p>&emsp;CSMA/CA的退避算法和CSMA/CD的稍有不同，当且仅当信道空闲且当前为发送的第一个帧才不使用退避算法，其他时间都需要使用。CSMA/CA协议归纳如下：</p>\n<ul>\n<li>1）若站点有数据发送（该帧第一次发送），检测到信道空闲，等待DIFS后，发送整个数据帧</li>\n<li>2）否则，站点执行CSMA/CA退避算法，选取一个随机时间回退值。一旦检测到信道忙，退避计时器保持不变，信道空闲，计时器才计时</li>\n<li>3）当计时器减到0，发送数据帧</li>\n<li>4）发送站收到确认帧，发送第二帧时，从步骤2）开始。</li>\n</ul>\n<p>&emsp;隐蔽站问题：RTS和CTS</p>\n<ul>\n<li><strong>RTS(Request  To Send)</strong>：请求发送帧，每个站点发送数据帧之前广播发送一个RTS进行信道预约，包括源地址、目的地址、和此次通信持续时间。</li>\n<li><strong>CTS(Clear To Send)</strong>：允许发送帧，若信道空闲，AP广播发送一个CTS，包括此次发送持续时间（从RTS中获得）。任何站点听到此帧，将会抑制发送。</li>\n</ul>\n<h3 id=\"（5）CSMA-CD-VS-CSMA-CA\"><a href=\"#（5）CSMA-CD-VS-CSMA-CA\" class=\"headerlink\" title=\"（5）CSMA/CD   VS   CSMA/CA\"></a>（5）CSMA/CD   VS   CSMA/CA</h3><ul>\n<li>1）CD可以检测冲突，无法避免；CA不能同时发送和检测冲突</li>\n<li>2）介质不同，CD是以太网，CA是无线局域网</li>\n<li>3）检测方式不同，CD是通过电压变化，CA通过能量检测、载波检测、能量载波混合检测三种检测信道的方式。</li>\n</ul>\n<h2 id=\"6、轮询访问介质访问控制\"><a href=\"#6、轮询访问介质访问控制\" class=\"headerlink\" title=\"6、轮询访问介质访问控制\"></a>6、轮询访问介质访问控制</h2><p>&emsp;令牌传递协议，物理上不必是环形，但是逻辑上是环形结构，过程如下：</p>\n<ul>\n<li>1）网络空闲时，环路中只有令牌帧在循环传递</li>\n<li>2）令牌传递到有数据发送的站点时，该站点就修改令牌中的一个标志位，并在令牌中附上自己的数据，令牌就变成一个数据帧</li>\n<li>3）数据帧沿着环路传输，接收到的站点一边转发数据，一边查看目的地址，如果目的地址是自己的，就复制下来该数据</li>\n<li>4）数据帧沿着环路到达源发送站点，就不再转发，同时，检测返回的帧来查看数据传输是否出错</li>\n<li>5）源站点传送完数据后，重新生成一个令牌，并且传送个下一个站点，交出控制权。</li>\n</ul>\n<h1 id=\"五、数据链路层的流量控制与可靠传输\"><a href=\"#五、数据链路层的流量控制与可靠传输\" class=\"headerlink\" title=\"五、数据链路层的流量控制与可靠传输\"></a>五、数据链路层的流量控制与可靠传输</h1><h2 id=\"1、停止-等待流量控制基本原理\"><a href=\"#1、停止-等待流量控制基本原理\" class=\"headerlink\" title=\"1、停止-等待流量控制基本原理\"></a>1、停止-等待流量控制基本原理</h2><p>&emsp;发送方每发送一帧，接收方都需要发送确认帧。</p>\n<h2 id=\"2、滑动窗口流量控制基本原理\"><a href=\"#2、滑动窗口流量控制基本原理\" class=\"headerlink\" title=\"2、滑动窗口流量控制基本原理\"></a>2、滑动窗口流量控制基本原理</h2><ul>\n<li>发送方与接收方都有自己的窗口大小</li>\n<li>发送方收到一个确认帧并且可以向前滑动的时候，滑动窗口才向前滑动</li>\n<li>接收方能够向前滑动的时候就向前滑动</li>\n<li>窗口大小都是固定的</li>\n<li>接收窗口先滑动，发送窗口才能滑动，这样就能起到流量控制的作用</li>\n<li>从滑动窗口看下面三种传输机制<ul>\n<li>停止-等待协议： 发送窗口=1，接收窗口=1</li>\n<li>后退N帧协议：发送窗口&gt;1，接收窗口=1</li>\n<li>选择重传协议：发送窗口&gt;1，接收窗口&gt;1</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3、三种可靠传输协议\"><a href=\"#3、三种可靠传输协议\" class=\"headerlink\" title=\"3、三种可靠传输协议\"></a>3、三种可靠传输协议</h2><p>&emsp;首先，需要对帧进行编号，考虑到节省，对帧编号用固定且少量的比特数进行编号。但是，引入的新问题便是，编号循环后，如何确定发送的帧是上一轮的还是此轮的或者是下一轮的呢？</p>\n<p>答：要求 <script type=\"math/tex\">发送窗口+接收窗口 \\leq 2^n,\\quad n为用于编号的比特数</script>，至于为什么这样呢？最坏的情况，当接收窗口已经滑动到滑动窗口的尾部了，此时，当前轮发送仍未结束，但是当前发送双方能够扩展的长度应该不大于此轮编号长度才可以。</p>\n<h3 id=\"3-1-停止-等待协议\"><a href=\"#3-1-停止-等待协议\" class=\"headerlink\" title=\"3.1 停止-等待协议\"></a>3.1 停止-等待协议</h3><ul>\n<li>发送与接收窗口都是1</li>\n<li>一个帧被发送，该帧的确认帧需要被接收才能发送下一帧</li>\n<li>发送方有定时重传计时器</li>\n<li>编号的比特数便是：<script type=\"math/tex\">1+1 \\leq 2^n,\\quad n = 1</script>即可满足</li>\n<li>如果确认帧没有被收到，那么发送方重新发送后，接收方直接丢弃并重新发送确认帧。</li>\n</ul>\n<p>&emsp;信道利用率低</p>\n<h3 id=\"3-2-后退N帧协议（GBN）\"><a href=\"#3-2-后退N帧协议（GBN）\" class=\"headerlink\" title=\"3.2 后退N帧协议（GBN）\"></a>3.2 后退N帧协议（GBN）</h3><ul>\n<li>接收窗口为1，发送窗口为<script type=\"math/tex\">1\\leq W_T \\leq 2^n-1</script></li>\n<li>接收端只能接收滑动窗口内的帧，也就是只能一帧一帧按序接收</li>\n<li>接收端接收到错误的帧，或者接收到不在滑动窗口的帧（不管是窗口前或后）都丢弃</li>\n<li>接收端可以接收连续多帧，或者有数据发送的时候，才发送一个确认帧</li>\n<li>确认帧的意义是：对该帧及以前的确认帧都进行确认，并期望发送方发送下一帧</li>\n<li>接收方为每一帧都设置了一个定时重传定时器</li>\n<li>接收方没收到一个确认帧，滑动窗口的左端即可移动到该帧后面一个位置。</li>\n</ul>\n<p>&emsp;提高了信道利用率，但是如果有一帧出了问题，那么窗口前面的帧都需要重传，因此在误码率大的信道，信道利用率不一定比停等协议优。</p>\n<h3 id=\"3-3-选择重传协议（SR）\"><a href=\"#3-3-选择重传协议（SR）\" class=\"headerlink\" title=\"3.3 选择重传协议（SR）\"></a>3.3 选择重传协议（SR）</h3><ul>\n<li>窗口尺寸：<script type=\"math/tex\">W_R=W_T = 2^{n-1}</script></li>\n<li>一帧接收和一帧确认，发送方只需要重传没有收到确认的帧即可</li>\n<li>互联网标准还没明确地对该协议规定，所以这里从略</li>\n</ul>\n<h2 id=\"4、三种协议的信道计算\"><a href=\"#4、三种协议的信道计算\" class=\"headerlink\" title=\"4、三种协议的信道计算\"></a>4、三种协议的信道计算</h2><h3 id=\"4-1-信道利用率\"><a href=\"#4-1-信道利用率\" class=\"headerlink\" title=\"4.1 信道利用率\"></a>4.1 信道利用率</h3><p>&emsp;信道利用率相对于发送方而言，有效发送数据的时间占整个发送周期的比率。比如，发送方从开始发送到接收确认帧为止，时间为T，此时发送了L比特数据，发送方数据传输速率为C，那么有：<script type=\"math/tex\">发送方发送有效数据的时间 = \\frac{L}{C},\\quad 占总时间的比值为：\\frac{L/C}{T}</script>，利用率也是这个。</p>\n<p>&emsp;定义参数<script type=\"math/tex\">\\alpha = \\frac{\\tau}{T_0}</script>，假设永远不发生碰撞，以太网利用率最高<script type=\"math/tex\">S_{max} = \\frac{T_0}{T_0 + \\tau}=\\frac{1}{1+a}</script></p>\n<h3 id=\"4-2-信道吞吐量\"><a href=\"#4-2-信道吞吐量\" class=\"headerlink\" title=\"4.2 信道吞吐量\"></a>4.2 信道吞吐量</h3><script type=\"math/tex; mode=display\">信道吞吐量 = 信道利用率 \\times 发送方的发送速率，\\quad = \\frac{L}{T}</script><h3 id=\"4-3-如何计算\"><a href=\"#4-3-如何计算\" class=\"headerlink\" title=\"4.3 如何计算\"></a>4.3 如何计算</h3><ul>\n<li>首先计算第一帧开始发送到第一个确认帧返回的时间</li>\n<li>然后计算这段时间内，发送方发送了多少有效数据，并计算发送有效数据的时间</li>\n<li>对于上面一点，停等协议就只发送了一帧数据，而后退N帧协议就发送了多帧数据，这段时间都要进行计算</li>\n<li>有效数据的时间除以上面总的时间，便是效率</li>\n</ul>\n<h1 id=\"六、以太网\"><a href=\"#六、以太网\" class=\"headerlink\" title=\"六、以太网\"></a>六、以太网</h1><h2 id=\"1、MAC层\"><a href=\"#1、MAC层\" class=\"headerlink\" title=\"1、MAC层\"></a>1、MAC层</h2><p>&emsp;<strong>硬件地址</strong>又称为<strong>物理地址</strong>或<strong>MAC地址</strong>，是一个<strong>48位</strong>固化在<strong>ROM</strong>中的。MAC地址前24位称为组织唯一标识符OUI，后24位称为扩展唯一标识符EUI。第一个字节的最低二位规定为G/L位，表示Global/Local位，为0表示全球管理，为1表示本地管理。全球管理的地址有46位。</p>\n<p>&emsp;适配器会处理一下三种帧</p>\n<ul>\n<li>单播帧：一对一，目的MAC地址与本适配器的MAC地址相同就收下</li>\n<li>广播帧：一对全体，MAC地址为全1</li>\n<li>多播帧：一对多，发送给一部分站点，而不是全部站点，相当于群组</li>\n</ul>\n<p>&emsp;所有适配器都应该识别前面两种帧，有一种网络工具叫做<strong>嗅探器（Sniffer）</strong>能够识别所有的帧，包括MAC地址不是自己的也可以记录下来。</p>\n<h2 id=\"2、MAC帧格式\"><a href=\"#2、MAC帧格式\" class=\"headerlink\" title=\"2、MAC帧格式\"></a>2、MAC帧格式</h2><p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202207191047007.png\" alt=\"image-20220719104733647\"></p>\n<ul>\n<li>源地址与目的地址，MAC地址</li>\n<li>类型，比如交付给上层的协议是什么，如IP：0x0800</li>\n<li>FCS：使用CRC校验，只校验目的地址到FCS为止的字段，不包括前导码和帧开始定界符</li>\n<li>以太网规定最小帧长为64字节，所以数据段最小长度为64-6-6-2-4=46字节</li>\n<li>以太网采用曼彻斯特编码，当电压不再变化了，就代表已经结束传输了，所以帧结束定界符也就不需要</li>\n<li>前导码的作用是用来同步时钟频率的，帧开始定界符是用来告诉帧开始发送的标志</li>\n</ul>\n<p>对于下列的帧情况，以太网直接进行丢弃，不会重传</p>\n<ul>\n<li>帧长度不是整数个字节</li>\n<li>FCS检验出错</li>\n<li>MAC帧长度不是64-1518个字节的</li>\n</ul>\n<p>现在广泛使用的局域网也只剩下以太网了</p>\n<h2 id=\"3、扩展以太网\"><a href=\"#3、扩展以太网\" class=\"headerlink\" title=\"3、扩展以太网\"></a>3、扩展以太网</h2><h3 id=\"3-1-在物理层扩展以太网\"><a href=\"#3-1-在物理层扩展以太网\" class=\"headerlink\" title=\"3.1 在物理层扩展以太网\"></a>3.1 在物理层扩展以太网</h3><p>&emsp;过去使用粗缆或细缆，现在使用光纤</p>\n<h3 id=\"3-2-在数据链路层扩展以太网\"><a href=\"#3-2-在数据链路层扩展以太网\" class=\"headerlink\" title=\"3.2 在数据链路层扩展以太网\"></a>3.2 在数据链路层扩展以太网</h3><p>&emsp;使用交换机进行扩展</p>\n<h3 id=\"3-3-虚拟局域网\"><a href=\"#3-3-虚拟局域网\" class=\"headerlink\" title=\"3.3 虚拟局域网\"></a>3.3 虚拟局域网</h3><p>&emsp;<strong>虚拟局域网VLAN（Virtual LAN）</strong>是局域网提供给用户的一种服务，而不是一种新型局域网。VLAN使用802.1Q帧，格式如下：</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202207191212887.png\" alt=\"image-20220719121225767\"></p>\n<p>相比于以太网帧，多了VLAN标签。VLAN标签前两个字节为0x8100，后面为<strong>VLAN标识符VID（VLAN ID）</strong>，出入VID后，FCS需要重新计算。对于主机来说，并不知道自己的VID，所以主机发送给交换机的是普通以太网帧。交换机通过端口或者MAC地址划分VLAN，并且为VLAN分配好了VID。</p>\n<p>设想一下场景</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202207191214702.png\" alt=\"image-20220719121409605\"></p>\n<ul>\n<li>A向B发送数据，发送普通以太网帧给交换机#1，#1发现是同一VLAN下的主机，不需要增加VLAN标签，直接转发给B</li>\n<li>A向E发送数据，#1通过汇聚链路将帧转发给#2，并增加VLAN标签，#2发送去掉VLAN标签，并转发给E</li>\n<li>A向C发送数据，这种情况比较复杂，书上没讲</li>\n</ul>\n<h2 id=\"4、扩展到高速以太网\"><a href=\"#4、扩展到高速以太网\" class=\"headerlink\" title=\"4、扩展到高速以太网\"></a>4、扩展到高速以太网</h2><h3 id=\"4-1-100BASE-T以太网\"><a href=\"#4-1-100BASE-T以太网\" class=\"headerlink\" title=\"4.1 100BASE-T以太网\"></a>4.1 100BASE-T以太网</h3><ul>\n<li>速度：100Mb/s</li>\n<li>完全可以使用10Mb/s下的软件</li>\n</ul>\n<h3 id=\"4-2-吉比特以太网\"><a href=\"#4-2-吉比特以太网\" class=\"headerlink\" title=\"4.2 吉比特以太网\"></a>4.2 吉比特以太网</h3><ul>\n<li>速度：1Gb/s</li>\n<li>半双工使用CSMA/CD，全双工不使用</li>\n<li>向后兼容</li>\n</ul>\n<p>不改变网段最长长度，但是争用期由原来的64字节，变成512字节，使用如下方法来适用CSMA/CD。</p>\n<ul>\n<li>载波延伸：最短帧长仍然是64字节，但是为他扩充到512字节；引入的问题便是，发送了许多无用的数据</li>\n<li>分组突发：将多个短帧合起来发送</li>\n</ul>\n<h3 id=\"4-3-10吉比特以太网\"><a href=\"#4-3-10吉比特以太网\" class=\"headerlink\" title=\"4.3 10吉比特以太网\"></a>4.3 10吉比特以太网</h3><ul>\n<li>速度：10Gb/s</li>\n<li>只工作在全双工模式</li>\n</ul>\n<h3 id=\"4-4-40-100吉比特以太网\"><a href=\"#4-4-40-100吉比特以太网\" class=\"headerlink\" title=\"4.4 40/100吉比特以太网\"></a>4.4 40/100吉比特以太网</h3><ul>\n<li>速度：40/100Gb/s</li>\n<li>只工作在全双工</li>\n</ul>\n<h1 id=\"七-、无线局域网\"><a href=\"#七-、无线局域网\" class=\"headerlink\" title=\"七 、无线局域网\"></a>七 、无线局域网</h1><p>&emsp;又称为802.11局域网</p>\n<h2 id=\"1、有固定基础设施无线局域网\"><a href=\"#1、有固定基础设施无线局域网\" class=\"headerlink\" title=\"1、有固定基础设施无线局域网\"></a>1、有固定基础设施无线局域网</h2><p>&emsp;采用该星形拓扑，中心称为接入点（Access Point，AP）。基本服务集（Basic Service Set， BSS）包括一个接入点和若干移动站。安装AP时必须为其分配一个不超过32字节的服务集标识符（Service Set IDentifier，SSID）和一个信道。接入点AP在出厂就具有唯一的48位二进制数字的MAC地址，正式名称为<strong>基本服务集标识符 BSSID</strong>。</p>\n<p>&emsp;一个基本服务集，可以时孤立的，还可以通过其他AP，连接到一个<strong>分配系统DS（Distribution System）</strong>，然后再连接到另一个基本服务集，这样就构成一个<strong>扩展服务集ESS（Extended Service Set）</strong>，扩展服务集也有唯一标识称为<strong>扩展服务集标识符ESSID</strong>。</p>\n<p>移动站与接入点AP建立关联的方式由两种，一种是被动扫描，一种是主动扫描。</p>\n<h3 id=\"被动扫描\"><a href=\"#被动扫描\" class=\"headerlink\" title=\"被动扫描\"></a>被动扫描</h3><ul>\n<li>接入点AP周期性发送<strong>信标帧（beacon frame）</strong>，其中包含由若干系统参数，如SSID及支持的速率</li>\n<li>移动站A扫描了11个信道，选择愿意加入接入点AP所在的基本服务集BSS，于是发送<strong>关联请求帧（Association Request frame）</strong></li>\n<li>接入点同意A发来的关联请求，向A发送<strong>关联响应帧（Association Response frame）</strong></li>\n</ul>\n<h3 id=\"主动扫描\"><a href=\"#主动扫描\" class=\"headerlink\" title=\"主动扫描\"></a>主动扫描</h3><ul>\n<li>A广播发送<strong>探测请求帧（Probe Request frame）</strong>，让所有的AP都能够知道有移动站要求建立关联</li>\n<li>有两个接入点回答<strong>探测请求响应帧（Probe Response frame）</strong></li>\n<li>A向一个站发送<strong>关联请求帧</strong></li>\n<li>接入点向A发送<strong>关联响应帧</strong></li>\n</ul>\n<h2 id=\"2、无固定基础设施移动自组织网络\"><a href=\"#2、无固定基础设施移动自组织网络\" class=\"headerlink\" title=\"2、无固定基础设施移动自组织网络\"></a>2、无固定基础设施移动自组织网络</h2><p>&emsp;称为自组网络，没有上述服务中的AP，由一些平等状态的移动站相互通信组成的临时网络。各结点地位平等，中间结点都为转发点。</p>\n<p>&emsp;在军用，救援等中有很好的应用。</p>\n<p>&emsp;移动自组网络的一个子集——<strong>无线传感器网络WSN（Wireless Sensor Network）</strong>。</p>\n<h2 id=\"3、MAC帧\"><a href=\"#3、MAC帧\" class=\"headerlink\" title=\"3、MAC帧\"></a>3、MAC帧</h2><p>&emsp;分为数据帧、控制帧和管理帧。</p>\n<p>下面来讲解数据帧：</p>\n<p><img src=\"https://imagere.oss-cn-beijing.aliyuncs.com/img/202207191312492.png\" alt=\"image-20220719131230352\"></p>\n<p>上述地址都是指MAC地址，其中地址4用于自组网络；</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">去往AP</th>\n<th style=\"text-align:center\">来自AP</th>\n<th style=\"text-align:center\">地址1</th>\n<th style=\"text-align:center\">地址2</th>\n<th style=\"text-align:center\">地址3</th>\n<th style=\"text-align:center\">地址4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">接收地址=目的地址</td>\n<td style=\"text-align:center\">发送地址=AP地址</td>\n<td style=\"text-align:center\">源地址</td>\n<td style=\"text-align:center\">——</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">接收地址=AP地址</td>\n<td style=\"text-align:center\">发送地址=源地址</td>\n<td style=\"text-align:center\">目的地址</td>\n<td style=\"text-align:center\">——</td>\n</tr>\n</tbody>\n</table>\n</div>\n"},{"title":"数据结构之插入排序","excerpt":"数据结构之插入排序","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202206181909348.png","mathjax":true,"date":"2022-06-18T10:55:51.000Z","_content":"\n# 直接插入排序\n\n&emsp;将每个关键词，按照顺序，依次插入到前面有序的序列中去。检索到第i个关键字，那么前面所有的关键字都是有序的，所以，把第i个关键字也在前面中按序插入即可。C++代码如下：\n\n``` cpp\nvoid simpleInsertSort(vector<int> &nums){\n\tfor(int i = 1 ; i < length ; i++){\n\t\tint temp = nums[i];\n\t\tfor(int j = i - 1; j >= 0 && nums[j] > temp; j--){\n\t\t\tnums[j+1] = nums[j];\n\t\t}\n        nums[j+1] = temp;\n\t}\n}\n```\n\n# 折半插入排序\n\n&emsp;思想跟前面一样，都是将第i个关键字插入到前面有序的序列中，但是插入位置，前面是用的顺序查找，这里可以用二分搜索。\n\nC++代码如下：\n\n``` cpp\nvoid binInsertSort(vector<int> &nums)\n{\n\tfor (int i = 1; i < nums.size(); i++)\n\t{\n\t\tint temp = nums[i];\n\t\tint left = 0 , right = i-1;\n\t\twhile(left <= right){\n\t\t\tint mid = (left + right) / 2;\n\t\t\tif(nums[i] >= nums[mid]) left = mid + 1;\n\t\t\telse right = mid - 1; \n\t\t}\n\t\tfor(int j = i-1; j >= left ;j--){\n\t\t\tnums[j+1] = nums[j];\n\t\t}\n\t\tnums[left] = temp;\n\t}\n}\n```\n\n# 希尔排序\n\n&emsp;根据前面的直接插入来看，如果数据基本有序的话，那么效率是非常快的。所以，希尔排序的思想是，慢慢让序列变得有序。直到完全有序。如何慢慢让数组变得有序呢？答：我们用到一个变量d，作用是，将每隔d个元素单独当作一个数列进行简单插入排序。成倍的慢慢缩小d，值到d=0。C++代码如下：\n\n``` cpp\nvoid shellSort(vector<int> nums){\n\tfor(int d = nums.size() / 2; d >= 1; d/=2){\n\t\tfor(int m = 0 ;m < d; m++){\n\t\t\tfor(int i = m; i < nums.size() ;i+=d){\n\t\t\t\tint temp = nums[i];\n\t\t\t\tint j = i-d;\n\t\t\t\tfor(; j >= 0 && temp < nums[j]; j-=d){\n\t\t\t\t\tnums[j+d] = nums[j];\n\t\t\t\t}\n\t\t\t\tnums[j+d] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n","source":"_posts/数据结构之插入排序.md","raw":"---\ntitle: 数据结构之插入排序\nexcerpt: 数据结构之插入排序\ntags: \n- 数据结构\n- 排序\n- 考研\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202206181909348.png\ncategories:\n- 数据结构与算法\nmathjax: true\ndate: 2022-06-18 18:55:51\n---\n\n# 直接插入排序\n\n&emsp;将每个关键词，按照顺序，依次插入到前面有序的序列中去。检索到第i个关键字，那么前面所有的关键字都是有序的，所以，把第i个关键字也在前面中按序插入即可。C++代码如下：\n\n``` cpp\nvoid simpleInsertSort(vector<int> &nums){\n\tfor(int i = 1 ; i < length ; i++){\n\t\tint temp = nums[i];\n\t\tfor(int j = i - 1; j >= 0 && nums[j] > temp; j--){\n\t\t\tnums[j+1] = nums[j];\n\t\t}\n        nums[j+1] = temp;\n\t}\n}\n```\n\n# 折半插入排序\n\n&emsp;思想跟前面一样，都是将第i个关键字插入到前面有序的序列中，但是插入位置，前面是用的顺序查找，这里可以用二分搜索。\n\nC++代码如下：\n\n``` cpp\nvoid binInsertSort(vector<int> &nums)\n{\n\tfor (int i = 1; i < nums.size(); i++)\n\t{\n\t\tint temp = nums[i];\n\t\tint left = 0 , right = i-1;\n\t\twhile(left <= right){\n\t\t\tint mid = (left + right) / 2;\n\t\t\tif(nums[i] >= nums[mid]) left = mid + 1;\n\t\t\telse right = mid - 1; \n\t\t}\n\t\tfor(int j = i-1; j >= left ;j--){\n\t\t\tnums[j+1] = nums[j];\n\t\t}\n\t\tnums[left] = temp;\n\t}\n}\n```\n\n# 希尔排序\n\n&emsp;根据前面的直接插入来看，如果数据基本有序的话，那么效率是非常快的。所以，希尔排序的思想是，慢慢让序列变得有序。直到完全有序。如何慢慢让数组变得有序呢？答：我们用到一个变量d，作用是，将每隔d个元素单独当作一个数列进行简单插入排序。成倍的慢慢缩小d，值到d=0。C++代码如下：\n\n``` cpp\nvoid shellSort(vector<int> nums){\n\tfor(int d = nums.size() / 2; d >= 1; d/=2){\n\t\tfor(int m = 0 ;m < d; m++){\n\t\t\tfor(int i = m; i < nums.size() ;i+=d){\n\t\t\t\tint temp = nums[i];\n\t\t\t\tint j = i-d;\n\t\t\t\tfor(; j >= 0 && temp < nums[j]; j-=d){\n\t\t\t\t\tnums[j+d] = nums[j];\n\t\t\t\t}\n\t\t\t\tnums[j+d] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n","slug":"数据结构之插入排序","published":1,"updated":"2022-10-12T12:14:54.470Z","_id":"cl4jrufju0000jsu53s5o7fvn","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h1><p>&emsp;将每个关键词，按照顺序，依次插入到前面有序的序列中去。检索到第i个关键字，那么前面所有的关键字都是有序的，所以，把第i个关键字也在前面中按序插入即可。C++代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">simpleInsertSort</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;nums)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt; length ; i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> temp = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; nums[j] &gt; temp; j--)&#123;</span><br><span class=\"line\">            nums[j+<span class=\"number\">1</span>] = nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nums[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"折半插入排序\"><a href=\"#折半插入排序\" class=\"headerlink\" title=\"折半插入排序\"></a>折半插入排序</h1><p>&emsp;思想跟前面一样，都是将第i个关键字插入到前面有序的序列中，但是插入位置，前面是用的顺序查找，这里可以用二分搜索。</p>\n<p>C++代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">binInsertSort</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;nums)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> temp = nums[i];</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">0</span> , right = i<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt;= right)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i] &gt;= nums[mid]) left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> right = mid - <span class=\"number\">1</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i<span class=\"number\">-1</span>; j &gt;= left ;j--)&#123;</span><br><span class=\"line\">            nums[j+<span class=\"number\">1</span>] = nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nums[left] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h1><p>&emsp;根据前面的直接插入来看，如果数据基本有序的话，那么效率是非常快的。所以，希尔排序的思想是，慢慢让序列变得有序。直到完全有序。如何慢慢让数组变得有序呢？答：我们用到一个变量d，作用是，将每隔d个元素单独当作一个数列进行简单插入排序。成倍的慢慢缩小d，值到d=0。C++代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; nums)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> d = nums.<span class=\"built_in\">size</span>() / <span class=\"number\">2</span>; d &gt;= <span class=\"number\">1</span>; d/=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> m = <span class=\"number\">0</span> ;m &lt; d; m++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = m; i &lt; nums.<span class=\"built_in\">size</span>() ;i+=d)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> temp = nums[i];</span><br><span class=\"line\">                <span class=\"type\">int</span> j = i-d;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(; j &gt;= <span class=\"number\">0</span> &amp;&amp; temp &lt; nums[j]; j-=d)&#123;</span><br><span class=\"line\">                    nums[j+d] = nums[j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                nums[j+d] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h1><p>&emsp;将每个关键词，按照顺序，依次插入到前面有序的序列中去。检索到第i个关键字，那么前面所有的关键字都是有序的，所以，把第i个关键字也在前面中按序插入即可。C++代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">simpleInsertSort</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;nums)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt; length ; i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> temp = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; nums[j] &gt; temp; j--)&#123;</span><br><span class=\"line\">            nums[j+<span class=\"number\">1</span>] = nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nums[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"折半插入排序\"><a href=\"#折半插入排序\" class=\"headerlink\" title=\"折半插入排序\"></a>折半插入排序</h1><p>&emsp;思想跟前面一样，都是将第i个关键字插入到前面有序的序列中，但是插入位置，前面是用的顺序查找，这里可以用二分搜索。</p>\n<p>C++代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">binInsertSort</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;nums)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> temp = nums[i];</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">0</span> , right = i<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt;= right)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i] &gt;= nums[mid]) left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> right = mid - <span class=\"number\">1</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i<span class=\"number\">-1</span>; j &gt;= left ;j--)&#123;</span><br><span class=\"line\">            nums[j+<span class=\"number\">1</span>] = nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nums[left] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h1><p>&emsp;根据前面的直接插入来看，如果数据基本有序的话，那么效率是非常快的。所以，希尔排序的思想是，慢慢让序列变得有序。直到完全有序。如何慢慢让数组变得有序呢？答：我们用到一个变量d，作用是，将每隔d个元素单独当作一个数列进行简单插入排序。成倍的慢慢缩小d，值到d=0。C++代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; nums)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> d = nums.<span class=\"built_in\">size</span>() / <span class=\"number\">2</span>; d &gt;= <span class=\"number\">1</span>; d/=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> m = <span class=\"number\">0</span> ;m &lt; d; m++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = m; i &lt; nums.<span class=\"built_in\">size</span>() ;i+=d)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> temp = nums[i];</span><br><span class=\"line\">                <span class=\"type\">int</span> j = i-d;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(; j &gt;= <span class=\"number\">0</span> &amp;&amp; temp &lt; nums[j]; j-=d)&#123;</span><br><span class=\"line\">                    nums[j+d] = nums[j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                nums[j+d] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"考研数学之微分方程","excerpt":"考研数学中的微分方程基础知识","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img/202207161508121.png","mathjax":true,"date":"2022-07-16T07:03:22.000Z","_content":"\n# 第一节、一阶微分方程\n\n## 1、可分离变量的一阶微分方程\n\n&emsp;形如$$\\frac{dy}{dx}=g(x)h(y)$$的方程，称为可分离变量的微分方程。解法如下：$$\\frac{dy}{h(y)} = g(x)dx$$，对两边进行积分即可。$$\\int{\\frac{dy}{h(y)}} = \\int{ g(x) dx } + C$$\n\n## 2、齐次一阶微分方程\n\n&emsp;形如$$\\frac{dy}{dx} = \\varphi(\\frac{y}{x})$$的形式，可令$$u=\\frac{y}{x}, \\quad \\frac{dy}{dx} = u + x\\frac{du}{dx}$$，进而计算\n\n## 3、一阶线性微分方程\n\n&emsp;形如$$y' + p(x)y = q(x)$$的方程，可以得出通解为：$$y = e^{ -\\int{p(x)}dx }[\\int{q(x) e^{\\int{p(x)}dx}}dx + C]$$，并且，如果出现绝对值的情况，可以不用考虑，直接去掉即可。\n\n## 4、伯努利方程\n\n&emsp;形如$$y' + p(x)y = q(x)y^n$$，将原式化为：$$y^{-n}y' + p(x)y^{1-n} = q(x) \\\\ y^{-n}\\frac{dy}{dx} + p(x)y^{1-n} = q(x)$$，然后令$$z = y^{1-n}$$，可以带入得出：$$\\frac{1}{1-n} \\cdot \\frac{dz}{dx} + p(x) z = q(x)$$，这样，就化为一阶线性微分方程了。得出通解如下：$$z = e^{ -\\int{(1-n)p(x)}dx }[\\int{(1-n)q(x) e^{\\int{(1-n)p(x)}dx}}dx + C] \\\\ y = \\sqrt[1-n]{z} =  \\sqrt[1-n]{e^{ -\\int{(1-n)p(x)}dx }[\\int{(1-n)q(x) e^{\\int{(1-n)p(x)}dx}}dx + C]}$$，后面这一步完全可以自己化了。\n\n## 5、全微分方程\n\n&emsp;如果存在$$dF(x,y)  = p(x,y)dx + q(x,y)dy$$的方程，那么称$$p(x,y)dx + q(x,y)dy = 0$$为全微分方程，通解为：$$ F(x,y) = C $$。判断是否为全微分的依据是：$$\\frac{\\partial p}{\\partial y} = \\frac{\\partial q}{\\partial x}$$\n\n# 第二节、二阶微分方程\n\n## 1、二阶微分方程的两种形式\n\n- **齐次**：$$y'' + p(x)y' + q(x)y = 0$$\n- **非齐次**：$$y'' + p(x)y' + q(x)y = f(x)$$\n\n## 2、解的叠加定理\n\n&emsp;此处以二阶微分方程举例，可以应用于多阶微分方程。\n\n- 如果$$y_1(x)、y_2(x)$$是**齐次**的解，那么$$Y(x) = c_1y_1(x) + c_2y_2(x)$$也是**齐次**的解，即线性组合仍是**齐次**的解。并且如果$$y_1(x)、y_2(x)$$线性无关的话，$$Y(x)$$是**齐次**的通解。对于n阶，只要解的个数是n个线性无关的，那也成立。\n- 如果$$y^*$$是**非齐次特解**，$$Y(x)$$是**齐次通解**，那么$$y(x) = Y(x) + y^*$$是**非齐次通解**\n- 如果$$y_1^*(x)、y_2^*(x)$$分别是$$y'' + p(x)y' + q(x)y = f_1(x)\\\\y'' + p(x)y' + q(x)y = f_2(x)$$**非齐次特解**，那么$$y_1^*(x)-y_2^*(x)$$是**齐次特解**，$$y_1^*(x)-y_2^*(x)$$是$$y'' + p(x)y' + q(x)y = f_1(x)+f_2(x)$$的**特解**。\n\n## 3、二阶微分方程的计算\n\n### （1）可降阶\n\n&emsp;形如$$y^{(n)} = f(x)$$的，一步一步降阶即可。\n\n### （2）不含y的\n\n&emsp;形如$$y'' = f(x,y')$$的，令$$\\frac{dy}{dx}= p, \\frac{d^2y}{dx^2} = \\frac{dp}{dx} \\Rightarrow p'= f(x,p)$$，即可化成一阶方程，进而计算。\n\n### （3）不含x的\n\n&emsp;形如$$y'' = f(y,y')$$的，令$$p' = y,y'' = \\frac{dp}{dx} = \\frac{dp}{dy}\\cdot\\frac{dy}{dx} = p'\\cdot p \\Rightarrow pp' = f(y,p)$$，化成一阶的，进而计算。\n\n### （4）二阶常系数齐次微分方程\n\n&emsp;注意**常系数**，**齐次**两个关键词。\n\n&emsp;形如$$y'' + py' + qy = 0$$，对应的特征方程为$$r^2 + pr + q = 0$$，现在对特征根进行讨论。\n\n#### 1）两个不相同的实根\n\n即：$$r_1 \\neq r_2 $$，那么通解：\n$$\ny = c_1 e^{r_1x} + c_2e^{r_2x}\n$$\n\n#### 2）两个相同的实根\n\n即：$$r = r_1 = r_2 $$，那么通解：\n$$\ny = e^{rx}(c_1+c_2x)\n$$\n\n#### 3）无实根\n\n即：$$r_{1,2} = \\alpha + i\\beta$$，那么通解为：\n$$\ny = e^{\\alpha x}(c_1cos\\beta x + c_2sin\\beta x)\n$$\n\n### （5）二阶常系数非齐次微分方程\n\n&emsp;注意，**常系数**和**非齐次**，并且对应的齐次方程的通解用(4)的方法求出。\n\n形如$$y'' + py' + qy = f(x)$$\n\n#### 1）右边为多项式\n\n若$$f(x) = e^{\\lambda x}P_m(x)$$，其中，m为多项式的最高次数。令**特解**$$y^*(x) = x^kQ_m(x)e^{\\lambda x}$$，其中\n\n$$k = \\begin{cases} 0, & 当\\lambda不是特征根 \\\\1，&当\\lambda是1重特征根 \\\\ 2，&当\\lambda是2重特征根 \\end{cases}$$\n\n#### 2）右边为三角函数\n\n若$$f(x) = e^{\\lambda x}[P_l(x)cos\\beta x + Q_n(x)sin \\beta x]$$ 令**特解**为：$$y^* = x^k e^{\\lambda x} [R_m(x)cos\\beta x + G_m(x)sin\\beta x]$$，其中\n\n$$l,m,n是多项式次数，且m = max\\{l,n\\}\\\\k = \\begin{cases} 0,&\\lambda + \\beta i不是特征根时 \\\\ 1, &\\lambda + \\beta i 时单重特征根时 \\end{cases}$$\n\n之后有用**解叠加**定理**第二条**求出**非齐次常系数线性微分方程通解**。\n\n# 第三节、欧拉方程\n\n形如\n$$\nx^ny^{(n)} + a_1x^{n-1}y^{(n-1)} + ... + a_{n-1}xy^{(1)} + a_ny = f(x)\n$$\n的高阶微分方程，称为欧拉方程（通式：$$\\sum\\limits_{i=0}^{n} a_i x^{n-i}y^{(n-i)} = f(x),\\quad a_0 = 1$$），解法如下：\n\n引入运算符$$D = \\frac{d}{dt}，D^2 = \\frac{d^2}{dt^2}$$\n\n令$$x = e^t$$\n\n那么有$$x^ky^{(k)} = D(D-1)...(D-K+1)y$$，将$$D$$当成一个变量，乘进去再合并同类项。怎么证明不会\n\n然后带入到原方程中，即可变成二阶微分方程\n\n---\n\n**例题如下（2004年1）：**\n\n&emsp;欧拉方程$$x^2\\frac{d^2y}{dx^2} + 4x\\frac{dy}{dx} + 2y = 0（x > 0）$$的通解为?\n\n**答**：令$$x=e^t$$，原式化为：$$D(D-1)y + 4Dy + 2y = 0$$，进一步化解：$$D^2y + 3Dy + 2y = 0$$，其中$$D^2y = \\frac{d^2y}{dx^2},\\quad Dy = \\frac{dy}{dx}$$。因此，变成了一个二阶常系数齐次方程，答案是：$$y=\\frac{C_1}{x} + \\frac{C_2}{x}$$。","source":"_posts/考研数学之微分方程.md","raw":"---\ntitle: 考研数学之微分方程\ntags: \n- 数学\n- 微分方程\n- 考研\nexcerpt: 考研数学中的微分方程基础知识\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img/202207161508121.png\ncategories:\n- 考研数学\nmathjax: true\ndate: 2022-07-16 15:03:22\n---\n\n# 第一节、一阶微分方程\n\n## 1、可分离变量的一阶微分方程\n\n&emsp;形如$$\\frac{dy}{dx}=g(x)h(y)$$的方程，称为可分离变量的微分方程。解法如下：$$\\frac{dy}{h(y)} = g(x)dx$$，对两边进行积分即可。$$\\int{\\frac{dy}{h(y)}} = \\int{ g(x) dx } + C$$\n\n## 2、齐次一阶微分方程\n\n&emsp;形如$$\\frac{dy}{dx} = \\varphi(\\frac{y}{x})$$的形式，可令$$u=\\frac{y}{x}, \\quad \\frac{dy}{dx} = u + x\\frac{du}{dx}$$，进而计算\n\n## 3、一阶线性微分方程\n\n&emsp;形如$$y' + p(x)y = q(x)$$的方程，可以得出通解为：$$y = e^{ -\\int{p(x)}dx }[\\int{q(x) e^{\\int{p(x)}dx}}dx + C]$$，并且，如果出现绝对值的情况，可以不用考虑，直接去掉即可。\n\n## 4、伯努利方程\n\n&emsp;形如$$y' + p(x)y = q(x)y^n$$，将原式化为：$$y^{-n}y' + p(x)y^{1-n} = q(x) \\\\ y^{-n}\\frac{dy}{dx} + p(x)y^{1-n} = q(x)$$，然后令$$z = y^{1-n}$$，可以带入得出：$$\\frac{1}{1-n} \\cdot \\frac{dz}{dx} + p(x) z = q(x)$$，这样，就化为一阶线性微分方程了。得出通解如下：$$z = e^{ -\\int{(1-n)p(x)}dx }[\\int{(1-n)q(x) e^{\\int{(1-n)p(x)}dx}}dx + C] \\\\ y = \\sqrt[1-n]{z} =  \\sqrt[1-n]{e^{ -\\int{(1-n)p(x)}dx }[\\int{(1-n)q(x) e^{\\int{(1-n)p(x)}dx}}dx + C]}$$，后面这一步完全可以自己化了。\n\n## 5、全微分方程\n\n&emsp;如果存在$$dF(x,y)  = p(x,y)dx + q(x,y)dy$$的方程，那么称$$p(x,y)dx + q(x,y)dy = 0$$为全微分方程，通解为：$$ F(x,y) = C $$。判断是否为全微分的依据是：$$\\frac{\\partial p}{\\partial y} = \\frac{\\partial q}{\\partial x}$$\n\n# 第二节、二阶微分方程\n\n## 1、二阶微分方程的两种形式\n\n- **齐次**：$$y'' + p(x)y' + q(x)y = 0$$\n- **非齐次**：$$y'' + p(x)y' + q(x)y = f(x)$$\n\n## 2、解的叠加定理\n\n&emsp;此处以二阶微分方程举例，可以应用于多阶微分方程。\n\n- 如果$$y_1(x)、y_2(x)$$是**齐次**的解，那么$$Y(x) = c_1y_1(x) + c_2y_2(x)$$也是**齐次**的解，即线性组合仍是**齐次**的解。并且如果$$y_1(x)、y_2(x)$$线性无关的话，$$Y(x)$$是**齐次**的通解。对于n阶，只要解的个数是n个线性无关的，那也成立。\n- 如果$$y^*$$是**非齐次特解**，$$Y(x)$$是**齐次通解**，那么$$y(x) = Y(x) + y^*$$是**非齐次通解**\n- 如果$$y_1^*(x)、y_2^*(x)$$分别是$$y'' + p(x)y' + q(x)y = f_1(x)\\\\y'' + p(x)y' + q(x)y = f_2(x)$$**非齐次特解**，那么$$y_1^*(x)-y_2^*(x)$$是**齐次特解**，$$y_1^*(x)-y_2^*(x)$$是$$y'' + p(x)y' + q(x)y = f_1(x)+f_2(x)$$的**特解**。\n\n## 3、二阶微分方程的计算\n\n### （1）可降阶\n\n&emsp;形如$$y^{(n)} = f(x)$$的，一步一步降阶即可。\n\n### （2）不含y的\n\n&emsp;形如$$y'' = f(x,y')$$的，令$$\\frac{dy}{dx}= p, \\frac{d^2y}{dx^2} = \\frac{dp}{dx} \\Rightarrow p'= f(x,p)$$，即可化成一阶方程，进而计算。\n\n### （3）不含x的\n\n&emsp;形如$$y'' = f(y,y')$$的，令$$p' = y,y'' = \\frac{dp}{dx} = \\frac{dp}{dy}\\cdot\\frac{dy}{dx} = p'\\cdot p \\Rightarrow pp' = f(y,p)$$，化成一阶的，进而计算。\n\n### （4）二阶常系数齐次微分方程\n\n&emsp;注意**常系数**，**齐次**两个关键词。\n\n&emsp;形如$$y'' + py' + qy = 0$$，对应的特征方程为$$r^2 + pr + q = 0$$，现在对特征根进行讨论。\n\n#### 1）两个不相同的实根\n\n即：$$r_1 \\neq r_2 $$，那么通解：\n$$\ny = c_1 e^{r_1x} + c_2e^{r_2x}\n$$\n\n#### 2）两个相同的实根\n\n即：$$r = r_1 = r_2 $$，那么通解：\n$$\ny = e^{rx}(c_1+c_2x)\n$$\n\n#### 3）无实根\n\n即：$$r_{1,2} = \\alpha + i\\beta$$，那么通解为：\n$$\ny = e^{\\alpha x}(c_1cos\\beta x + c_2sin\\beta x)\n$$\n\n### （5）二阶常系数非齐次微分方程\n\n&emsp;注意，**常系数**和**非齐次**，并且对应的齐次方程的通解用(4)的方法求出。\n\n形如$$y'' + py' + qy = f(x)$$\n\n#### 1）右边为多项式\n\n若$$f(x) = e^{\\lambda x}P_m(x)$$，其中，m为多项式的最高次数。令**特解**$$y^*(x) = x^kQ_m(x)e^{\\lambda x}$$，其中\n\n$$k = \\begin{cases} 0, & 当\\lambda不是特征根 \\\\1，&当\\lambda是1重特征根 \\\\ 2，&当\\lambda是2重特征根 \\end{cases}$$\n\n#### 2）右边为三角函数\n\n若$$f(x) = e^{\\lambda x}[P_l(x)cos\\beta x + Q_n(x)sin \\beta x]$$ 令**特解**为：$$y^* = x^k e^{\\lambda x} [R_m(x)cos\\beta x + G_m(x)sin\\beta x]$$，其中\n\n$$l,m,n是多项式次数，且m = max\\{l,n\\}\\\\k = \\begin{cases} 0,&\\lambda + \\beta i不是特征根时 \\\\ 1, &\\lambda + \\beta i 时单重特征根时 \\end{cases}$$\n\n之后有用**解叠加**定理**第二条**求出**非齐次常系数线性微分方程通解**。\n\n# 第三节、欧拉方程\n\n形如\n$$\nx^ny^{(n)} + a_1x^{n-1}y^{(n-1)} + ... + a_{n-1}xy^{(1)} + a_ny = f(x)\n$$\n的高阶微分方程，称为欧拉方程（通式：$$\\sum\\limits_{i=0}^{n} a_i x^{n-i}y^{(n-i)} = f(x),\\quad a_0 = 1$$），解法如下：\n\n引入运算符$$D = \\frac{d}{dt}，D^2 = \\frac{d^2}{dt^2}$$\n\n令$$x = e^t$$\n\n那么有$$x^ky^{(k)} = D(D-1)...(D-K+1)y$$，将$$D$$当成一个变量，乘进去再合并同类项。怎么证明不会\n\n然后带入到原方程中，即可变成二阶微分方程\n\n---\n\n**例题如下（2004年1）：**\n\n&emsp;欧拉方程$$x^2\\frac{d^2y}{dx^2} + 4x\\frac{dy}{dx} + 2y = 0（x > 0）$$的通解为?\n\n**答**：令$$x=e^t$$，原式化为：$$D(D-1)y + 4Dy + 2y = 0$$，进一步化解：$$D^2y + 3Dy + 2y = 0$$，其中$$D^2y = \\frac{d^2y}{dx^2},\\quad Dy = \\frac{dy}{dx}$$。因此，变成了一个二阶常系数齐次方程，答案是：$$y=\\frac{C_1}{x} + \\frac{C_2}{x}$$。","slug":"考研数学之微分方程","published":1,"updated":"2022-07-16T09:03:59.966Z","_id":"cl5nnhsll0000pgu52n0ddfjr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"第一节、一阶微分方程\"><a href=\"#第一节、一阶微分方程\" class=\"headerlink\" title=\"第一节、一阶微分方程\"></a>第一节、一阶微分方程</h1><h2 id=\"1、可分离变量的一阶微分方程\"><a href=\"#1、可分离变量的一阶微分方程\" class=\"headerlink\" title=\"1、可分离变量的一阶微分方程\"></a>1、可分离变量的一阶微分方程</h2><p>&emsp;形如<script type=\"math/tex\">\\frac{dy}{dx}=g(x)h(y)</script>的方程，称为可分离变量的微分方程。解法如下：<script type=\"math/tex\">\\frac{dy}{h(y)} = g(x)dx</script>，对两边进行积分即可。<script type=\"math/tex\">\\int{\\frac{dy}{h(y)}} = \\int{ g(x) dx } + C</script></p>\n<h2 id=\"2、齐次一阶微分方程\"><a href=\"#2、齐次一阶微分方程\" class=\"headerlink\" title=\"2、齐次一阶微分方程\"></a>2、齐次一阶微分方程</h2><p>&emsp;形如<script type=\"math/tex\">\\frac{dy}{dx} = \\varphi(\\frac{y}{x})</script>的形式，可令<script type=\"math/tex\">u=\\frac{y}{x}, \\quad \\frac{dy}{dx} = u + x\\frac{du}{dx}</script>，进而计算</p>\n<h2 id=\"3、一阶线性微分方程\"><a href=\"#3、一阶线性微分方程\" class=\"headerlink\" title=\"3、一阶线性微分方程\"></a>3、一阶线性微分方程</h2><p>&emsp;形如<script type=\"math/tex\">y' + p(x)y = q(x)</script>的方程，可以得出通解为：<script type=\"math/tex\">y = e^{ -\\int{p(x)}dx }[\\int{q(x) e^{\\int{p(x)}dx}}dx + C]</script>，并且，如果出现绝对值的情况，可以不用考虑，直接去掉即可。</p>\n<h2 id=\"4、伯努利方程\"><a href=\"#4、伯努利方程\" class=\"headerlink\" title=\"4、伯努利方程\"></a>4、伯努利方程</h2><p>&emsp;形如<script type=\"math/tex\">y' + p(x)y = q(x)y^n</script>，将原式化为：<script type=\"math/tex\">y^{-n}y' + p(x)y^{1-n} = q(x) \\\\ y^{-n}\\frac{dy}{dx} + p(x)y^{1-n} = q(x)</script>，然后令<script type=\"math/tex\">z = y^{1-n}</script>，可以带入得出：<script type=\"math/tex\">\\frac{1}{1-n} \\cdot \\frac{dz}{dx} + p(x) z = q(x)</script>，这样，就化为一阶线性微分方程了。得出通解如下：<script type=\"math/tex\">z = e^{ -\\int{(1-n)p(x)}dx }[\\int{(1-n)q(x) e^{\\int{(1-n)p(x)}dx}}dx + C] \\\\ y = \\sqrt[1-n]{z} =  \\sqrt[1-n]{e^{ -\\int{(1-n)p(x)}dx }[\\int{(1-n)q(x) e^{\\int{(1-n)p(x)}dx}}dx + C]}</script>，后面这一步完全可以自己化了。</p>\n<h2 id=\"5、全微分方程\"><a href=\"#5、全微分方程\" class=\"headerlink\" title=\"5、全微分方程\"></a>5、全微分方程</h2><p>&emsp;如果存在<script type=\"math/tex\">dF(x,y)  = p(x,y)dx + q(x,y)dy</script>的方程，那么称<script type=\"math/tex\">p(x,y)dx + q(x,y)dy = 0</script>为全微分方程，通解为：<script type=\"math/tex\">F(x,y) = C</script>。判断是否为全微分的依据是：<script type=\"math/tex\">\\frac{\\partial p}{\\partial y} = \\frac{\\partial q}{\\partial x}</script></p>\n<h1 id=\"第二节、二阶微分方程\"><a href=\"#第二节、二阶微分方程\" class=\"headerlink\" title=\"第二节、二阶微分方程\"></a>第二节、二阶微分方程</h1><h2 id=\"1、二阶微分方程的两种形式\"><a href=\"#1、二阶微分方程的两种形式\" class=\"headerlink\" title=\"1、二阶微分方程的两种形式\"></a>1、二阶微分方程的两种形式</h2><ul>\n<li><strong>齐次</strong>：<script type=\"math/tex\">y'' + p(x)y' + q(x)y = 0</script></li>\n<li><strong>非齐次</strong>：<script type=\"math/tex\">y'' + p(x)y' + q(x)y = f(x)</script></li>\n</ul>\n<h2 id=\"2、解的叠加定理\"><a href=\"#2、解的叠加定理\" class=\"headerlink\" title=\"2、解的叠加定理\"></a>2、解的叠加定理</h2><p>&emsp;此处以二阶微分方程举例，可以应用于多阶微分方程。</p>\n<ul>\n<li>如果<script type=\"math/tex\">y_1(x)、y_2(x)</script>是<strong>齐次</strong>的解，那么<script type=\"math/tex\">Y(x) = c_1y_1(x) + c_2y_2(x)</script>也是<strong>齐次</strong>的解，即线性组合仍是<strong>齐次</strong>的解。并且如果<script type=\"math/tex\">y_1(x)、y_2(x)</script>线性无关的话，<script type=\"math/tex\">Y(x)</script>是<strong>齐次</strong>的通解。对于n阶，只要解的个数是n个线性无关的，那也成立。</li>\n<li>如果<script type=\"math/tex\">y^*</script>是<strong>非齐次特解</strong>，<script type=\"math/tex\">Y(x)</script>是<strong>齐次通解</strong>，那么<script type=\"math/tex\">y(x) = Y(x) + y^*</script>是<strong>非齐次通解</strong></li>\n<li>如果<script type=\"math/tex\">y_1^*(x)、y_2^*(x)</script>分别是<script type=\"math/tex\">y'' + p(x)y' + q(x)y = f_1(x)\\\\y'' + p(x)y' + q(x)y = f_2(x)</script><strong>非齐次特解</strong>，那么<script type=\"math/tex\">y_1^*(x)-y_2^*(x)</script>是<strong>齐次特解</strong>，<script type=\"math/tex\">y_1^*(x)-y_2^*(x)</script>是<script type=\"math/tex\">y'' + p(x)y' + q(x)y = f_1(x)+f_2(x)</script>的<strong>特解</strong>。</li>\n</ul>\n<h2 id=\"3、二阶微分方程的计算\"><a href=\"#3、二阶微分方程的计算\" class=\"headerlink\" title=\"3、二阶微分方程的计算\"></a>3、二阶微分方程的计算</h2><h3 id=\"（1）可降阶\"><a href=\"#（1）可降阶\" class=\"headerlink\" title=\"（1）可降阶\"></a>（1）可降阶</h3><p>&emsp;形如<script type=\"math/tex\">y^{(n)} = f(x)</script>的，一步一步降阶即可。</p>\n<h3 id=\"（2）不含y的\"><a href=\"#（2）不含y的\" class=\"headerlink\" title=\"（2）不含y的\"></a>（2）不含y的</h3><p>&emsp;形如<script type=\"math/tex\">y'' = f(x,y')</script>的，令<script type=\"math/tex\">\\frac{dy}{dx}= p, \\frac{d^2y}{dx^2} = \\frac{dp}{dx} \\Rightarrow p'= f(x,p)</script>，即可化成一阶方程，进而计算。</p>\n<h3 id=\"（3）不含x的\"><a href=\"#（3）不含x的\" class=\"headerlink\" title=\"（3）不含x的\"></a>（3）不含x的</h3><p>&emsp;形如<script type=\"math/tex\">y'' = f(y,y')</script>的，令<script type=\"math/tex\">p' = y,y'' = \\frac{dp}{dx} = \\frac{dp}{dy}\\cdot\\frac{dy}{dx} = p'\\cdot p \\Rightarrow pp' = f(y,p)</script>，化成一阶的，进而计算。</p>\n<h3 id=\"（4）二阶常系数齐次微分方程\"><a href=\"#（4）二阶常系数齐次微分方程\" class=\"headerlink\" title=\"（4）二阶常系数齐次微分方程\"></a>（4）二阶常系数齐次微分方程</h3><p>&emsp;注意<strong>常系数</strong>，<strong>齐次</strong>两个关键词。</p>\n<p>&emsp;形如<script type=\"math/tex\">y'' + py' + qy = 0</script>，对应的特征方程为<script type=\"math/tex\">r^2 + pr + q = 0</script>，现在对特征根进行讨论。</p>\n<h4 id=\"1）两个不相同的实根\"><a href=\"#1）两个不相同的实根\" class=\"headerlink\" title=\"1）两个不相同的实根\"></a>1）两个不相同的实根</h4><p>即：<script type=\"math/tex\">r_1 \\neq r_2</script>，那么通解：</p>\n<script type=\"math/tex; mode=display\">\ny = c_1 e^{r_1x} + c_2e^{r_2x}</script><h4 id=\"2）两个相同的实根\"><a href=\"#2）两个相同的实根\" class=\"headerlink\" title=\"2）两个相同的实根\"></a>2）两个相同的实根</h4><p>即：<script type=\"math/tex\">r = r_1 = r_2</script>，那么通解：</p>\n<script type=\"math/tex; mode=display\">\ny = e^{rx}(c_1+c_2x)</script><h4 id=\"3）无实根\"><a href=\"#3）无实根\" class=\"headerlink\" title=\"3）无实根\"></a>3）无实根</h4><p>即：<script type=\"math/tex\">r_{1,2} = \\alpha + i\\beta</script>，那么通解为：</p>\n<script type=\"math/tex; mode=display\">\ny = e^{\\alpha x}(c_1cos\\beta x + c_2sin\\beta x)</script><h3 id=\"（5）二阶常系数非齐次微分方程\"><a href=\"#（5）二阶常系数非齐次微分方程\" class=\"headerlink\" title=\"（5）二阶常系数非齐次微分方程\"></a>（5）二阶常系数非齐次微分方程</h3><p>&emsp;注意，<strong>常系数</strong>和<strong>非齐次</strong>，并且对应的齐次方程的通解用(4)的方法求出。</p>\n<p>形如<script type=\"math/tex\">y'' + py' + qy = f(x)</script></p>\n<h4 id=\"1）右边为多项式\"><a href=\"#1）右边为多项式\" class=\"headerlink\" title=\"1）右边为多项式\"></a>1）右边为多项式</h4><p>若<script type=\"math/tex\">f(x) = e^{\\lambda x}P_m(x)</script>，其中，m为多项式的最高次数。令<strong>特解</strong><script type=\"math/tex\">y^*(x) = x^kQ_m(x)e^{\\lambda x}</script>，其中</p>\n<script type=\"math/tex; mode=display\">k = \\begin{cases} 0, & 当\\lambda不是特征根 \\\\1，&当\\lambda是1重特征根 \\\\ 2，&当\\lambda是2重特征根 \\end{cases}</script><h4 id=\"2）右边为三角函数\"><a href=\"#2）右边为三角函数\" class=\"headerlink\" title=\"2）右边为三角函数\"></a>2）右边为三角函数</h4><p>若<script type=\"math/tex\">f(x) = e^{\\lambda x}[P_l(x)cos\\beta x + Q_n(x)sin \\beta x]</script> 令<strong>特解</strong>为：<script type=\"math/tex\">y^* = x^k e^{\\lambda x} [R_m(x)cos\\beta x + G_m(x)sin\\beta x]</script>，其中</p>\n<script type=\"math/tex; mode=display\">l,m,n是多项式次数，且m = max\\{l,n\\}\\\\k = \\begin{cases} 0,&\\lambda + \\beta i不是特征根时 \\\\ 1, &\\lambda + \\beta i 时单重特征根时 \\end{cases}</script><p>之后有用<strong>解叠加</strong>定理<strong>第二条</strong>求出<strong>非齐次常系数线性微分方程通解</strong>。</p>\n<h1 id=\"第三节、欧拉方程\"><a href=\"#第三节、欧拉方程\" class=\"headerlink\" title=\"第三节、欧拉方程\"></a>第三节、欧拉方程</h1><p>形如</p>\n<script type=\"math/tex; mode=display\">\nx^ny^{(n)} + a_1x^{n-1}y^{(n-1)} + ... + a_{n-1}xy^{(1)} + a_ny = f(x)</script><p>的高阶微分方程，称为欧拉方程（通式：<script type=\"math/tex\">\\sum\\limits_{i=0}^{n} a_i x^{n-i}y^{(n-i)} = f(x),\\quad a_0 = 1</script>），解法如下：</p>\n<p>引入运算符<script type=\"math/tex\">D = \\frac{d}{dt}，D^2 = \\frac{d^2}{dt^2}</script></p>\n<p>令<script type=\"math/tex\">x = e^t</script></p>\n<p>那么有<script type=\"math/tex\">x^ky^{(k)} = D(D-1)...(D-K+1)y</script>，将<script type=\"math/tex\">D</script>当成一个变量，乘进去再合并同类项。怎么证明不会</p>\n<p>然后带入到原方程中，即可变成二阶微分方程</p>\n<hr>\n<p><strong>例题如下（2004年1）：</strong></p>\n<p>&emsp;欧拉方程<script type=\"math/tex\">x^2\\frac{d^2y}{dx^2} + 4x\\frac{dy}{dx} + 2y = 0（x > 0）</script>的通解为?</p>\n<p><strong>答</strong>：令<script type=\"math/tex\">x=e^t</script>，原式化为：<script type=\"math/tex\">D(D-1)y + 4Dy + 2y = 0</script>，进一步化解：<script type=\"math/tex\">D^2y + 3Dy + 2y = 0</script>，其中<script type=\"math/tex\">D^2y = \\frac{d^2y}{dx^2},\\quad Dy = \\frac{dy}{dx}</script>。因此，变成了一个二阶常系数齐次方程，答案是：<script type=\"math/tex\">y=\\frac{C_1}{x} + \\frac{C_2}{x}</script>。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"第一节、一阶微分方程\"><a href=\"#第一节、一阶微分方程\" class=\"headerlink\" title=\"第一节、一阶微分方程\"></a>第一节、一阶微分方程</h1><h2 id=\"1、可分离变量的一阶微分方程\"><a href=\"#1、可分离变量的一阶微分方程\" class=\"headerlink\" title=\"1、可分离变量的一阶微分方程\"></a>1、可分离变量的一阶微分方程</h2><p>&emsp;形如<script type=\"math/tex\">\\frac{dy}{dx}=g(x)h(y)</script>的方程，称为可分离变量的微分方程。解法如下：<script type=\"math/tex\">\\frac{dy}{h(y)} = g(x)dx</script>，对两边进行积分即可。<script type=\"math/tex\">\\int{\\frac{dy}{h(y)}} = \\int{ g(x) dx } + C</script></p>\n<h2 id=\"2、齐次一阶微分方程\"><a href=\"#2、齐次一阶微分方程\" class=\"headerlink\" title=\"2、齐次一阶微分方程\"></a>2、齐次一阶微分方程</h2><p>&emsp;形如<script type=\"math/tex\">\\frac{dy}{dx} = \\varphi(\\frac{y}{x})</script>的形式，可令<script type=\"math/tex\">u=\\frac{y}{x}, \\quad \\frac{dy}{dx} = u + x\\frac{du}{dx}</script>，进而计算</p>\n<h2 id=\"3、一阶线性微分方程\"><a href=\"#3、一阶线性微分方程\" class=\"headerlink\" title=\"3、一阶线性微分方程\"></a>3、一阶线性微分方程</h2><p>&emsp;形如<script type=\"math/tex\">y' + p(x)y = q(x)</script>的方程，可以得出通解为：<script type=\"math/tex\">y = e^{ -\\int{p(x)}dx }[\\int{q(x) e^{\\int{p(x)}dx}}dx + C]</script>，并且，如果出现绝对值的情况，可以不用考虑，直接去掉即可。</p>\n<h2 id=\"4、伯努利方程\"><a href=\"#4、伯努利方程\" class=\"headerlink\" title=\"4、伯努利方程\"></a>4、伯努利方程</h2><p>&emsp;形如<script type=\"math/tex\">y' + p(x)y = q(x)y^n</script>，将原式化为：<script type=\"math/tex\">y^{-n}y' + p(x)y^{1-n} = q(x) \\\\ y^{-n}\\frac{dy}{dx} + p(x)y^{1-n} = q(x)</script>，然后令<script type=\"math/tex\">z = y^{1-n}</script>，可以带入得出：<script type=\"math/tex\">\\frac{1}{1-n} \\cdot \\frac{dz}{dx} + p(x) z = q(x)</script>，这样，就化为一阶线性微分方程了。得出通解如下：<script type=\"math/tex\">z = e^{ -\\int{(1-n)p(x)}dx }[\\int{(1-n)q(x) e^{\\int{(1-n)p(x)}dx}}dx + C] \\\\ y = \\sqrt[1-n]{z} =  \\sqrt[1-n]{e^{ -\\int{(1-n)p(x)}dx }[\\int{(1-n)q(x) e^{\\int{(1-n)p(x)}dx}}dx + C]}</script>，后面这一步完全可以自己化了。</p>\n<h2 id=\"5、全微分方程\"><a href=\"#5、全微分方程\" class=\"headerlink\" title=\"5、全微分方程\"></a>5、全微分方程</h2><p>&emsp;如果存在<script type=\"math/tex\">dF(x,y)  = p(x,y)dx + q(x,y)dy</script>的方程，那么称<script type=\"math/tex\">p(x,y)dx + q(x,y)dy = 0</script>为全微分方程，通解为：<script type=\"math/tex\">F(x,y) = C</script>。判断是否为全微分的依据是：<script type=\"math/tex\">\\frac{\\partial p}{\\partial y} = \\frac{\\partial q}{\\partial x}</script></p>\n<h1 id=\"第二节、二阶微分方程\"><a href=\"#第二节、二阶微分方程\" class=\"headerlink\" title=\"第二节、二阶微分方程\"></a>第二节、二阶微分方程</h1><h2 id=\"1、二阶微分方程的两种形式\"><a href=\"#1、二阶微分方程的两种形式\" class=\"headerlink\" title=\"1、二阶微分方程的两种形式\"></a>1、二阶微分方程的两种形式</h2><ul>\n<li><strong>齐次</strong>：<script type=\"math/tex\">y'' + p(x)y' + q(x)y = 0</script></li>\n<li><strong>非齐次</strong>：<script type=\"math/tex\">y'' + p(x)y' + q(x)y = f(x)</script></li>\n</ul>\n<h2 id=\"2、解的叠加定理\"><a href=\"#2、解的叠加定理\" class=\"headerlink\" title=\"2、解的叠加定理\"></a>2、解的叠加定理</h2><p>&emsp;此处以二阶微分方程举例，可以应用于多阶微分方程。</p>\n<ul>\n<li>如果<script type=\"math/tex\">y_1(x)、y_2(x)</script>是<strong>齐次</strong>的解，那么<script type=\"math/tex\">Y(x) = c_1y_1(x) + c_2y_2(x)</script>也是<strong>齐次</strong>的解，即线性组合仍是<strong>齐次</strong>的解。并且如果<script type=\"math/tex\">y_1(x)、y_2(x)</script>线性无关的话，<script type=\"math/tex\">Y(x)</script>是<strong>齐次</strong>的通解。对于n阶，只要解的个数是n个线性无关的，那也成立。</li>\n<li>如果<script type=\"math/tex\">y^*</script>是<strong>非齐次特解</strong>，<script type=\"math/tex\">Y(x)</script>是<strong>齐次通解</strong>，那么<script type=\"math/tex\">y(x) = Y(x) + y^*</script>是<strong>非齐次通解</strong></li>\n<li>如果<script type=\"math/tex\">y_1^*(x)、y_2^*(x)</script>分别是<script type=\"math/tex\">y'' + p(x)y' + q(x)y = f_1(x)\\\\y'' + p(x)y' + q(x)y = f_2(x)</script><strong>非齐次特解</strong>，那么<script type=\"math/tex\">y_1^*(x)-y_2^*(x)</script>是<strong>齐次特解</strong>，<script type=\"math/tex\">y_1^*(x)-y_2^*(x)</script>是<script type=\"math/tex\">y'' + p(x)y' + q(x)y = f_1(x)+f_2(x)</script>的<strong>特解</strong>。</li>\n</ul>\n<h2 id=\"3、二阶微分方程的计算\"><a href=\"#3、二阶微分方程的计算\" class=\"headerlink\" title=\"3、二阶微分方程的计算\"></a>3、二阶微分方程的计算</h2><h3 id=\"（1）可降阶\"><a href=\"#（1）可降阶\" class=\"headerlink\" title=\"（1）可降阶\"></a>（1）可降阶</h3><p>&emsp;形如<script type=\"math/tex\">y^{(n)} = f(x)</script>的，一步一步降阶即可。</p>\n<h3 id=\"（2）不含y的\"><a href=\"#（2）不含y的\" class=\"headerlink\" title=\"（2）不含y的\"></a>（2）不含y的</h3><p>&emsp;形如<script type=\"math/tex\">y'' = f(x,y')</script>的，令<script type=\"math/tex\">\\frac{dy}{dx}= p, \\frac{d^2y}{dx^2} = \\frac{dp}{dx} \\Rightarrow p'= f(x,p)</script>，即可化成一阶方程，进而计算。</p>\n<h3 id=\"（3）不含x的\"><a href=\"#（3）不含x的\" class=\"headerlink\" title=\"（3）不含x的\"></a>（3）不含x的</h3><p>&emsp;形如<script type=\"math/tex\">y'' = f(y,y')</script>的，令<script type=\"math/tex\">p' = y,y'' = \\frac{dp}{dx} = \\frac{dp}{dy}\\cdot\\frac{dy}{dx} = p'\\cdot p \\Rightarrow pp' = f(y,p)</script>，化成一阶的，进而计算。</p>\n<h3 id=\"（4）二阶常系数齐次微分方程\"><a href=\"#（4）二阶常系数齐次微分方程\" class=\"headerlink\" title=\"（4）二阶常系数齐次微分方程\"></a>（4）二阶常系数齐次微分方程</h3><p>&emsp;注意<strong>常系数</strong>，<strong>齐次</strong>两个关键词。</p>\n<p>&emsp;形如<script type=\"math/tex\">y'' + py' + qy = 0</script>，对应的特征方程为<script type=\"math/tex\">r^2 + pr + q = 0</script>，现在对特征根进行讨论。</p>\n<h4 id=\"1）两个不相同的实根\"><a href=\"#1）两个不相同的实根\" class=\"headerlink\" title=\"1）两个不相同的实根\"></a>1）两个不相同的实根</h4><p>即：<script type=\"math/tex\">r_1 \\neq r_2</script>，那么通解：</p>\n<script type=\"math/tex; mode=display\">\ny = c_1 e^{r_1x} + c_2e^{r_2x}</script><h4 id=\"2）两个相同的实根\"><a href=\"#2）两个相同的实根\" class=\"headerlink\" title=\"2）两个相同的实根\"></a>2）两个相同的实根</h4><p>即：<script type=\"math/tex\">r = r_1 = r_2</script>，那么通解：</p>\n<script type=\"math/tex; mode=display\">\ny = e^{rx}(c_1+c_2x)</script><h4 id=\"3）无实根\"><a href=\"#3）无实根\" class=\"headerlink\" title=\"3）无实根\"></a>3）无实根</h4><p>即：<script type=\"math/tex\">r_{1,2} = \\alpha + i\\beta</script>，那么通解为：</p>\n<script type=\"math/tex; mode=display\">\ny = e^{\\alpha x}(c_1cos\\beta x + c_2sin\\beta x)</script><h3 id=\"（5）二阶常系数非齐次微分方程\"><a href=\"#（5）二阶常系数非齐次微分方程\" class=\"headerlink\" title=\"（5）二阶常系数非齐次微分方程\"></a>（5）二阶常系数非齐次微分方程</h3><p>&emsp;注意，<strong>常系数</strong>和<strong>非齐次</strong>，并且对应的齐次方程的通解用(4)的方法求出。</p>\n<p>形如<script type=\"math/tex\">y'' + py' + qy = f(x)</script></p>\n<h4 id=\"1）右边为多项式\"><a href=\"#1）右边为多项式\" class=\"headerlink\" title=\"1）右边为多项式\"></a>1）右边为多项式</h4><p>若<script type=\"math/tex\">f(x) = e^{\\lambda x}P_m(x)</script>，其中，m为多项式的最高次数。令<strong>特解</strong><script type=\"math/tex\">y^*(x) = x^kQ_m(x)e^{\\lambda x}</script>，其中</p>\n<script type=\"math/tex; mode=display\">k = \\begin{cases} 0, & 当\\lambda不是特征根 \\\\1，&当\\lambda是1重特征根 \\\\ 2，&当\\lambda是2重特征根 \\end{cases}</script><h4 id=\"2）右边为三角函数\"><a href=\"#2）右边为三角函数\" class=\"headerlink\" title=\"2）右边为三角函数\"></a>2）右边为三角函数</h4><p>若<script type=\"math/tex\">f(x) = e^{\\lambda x}[P_l(x)cos\\beta x + Q_n(x)sin \\beta x]</script> 令<strong>特解</strong>为：<script type=\"math/tex\">y^* = x^k e^{\\lambda x} [R_m(x)cos\\beta x + G_m(x)sin\\beta x]</script>，其中</p>\n<script type=\"math/tex; mode=display\">l,m,n是多项式次数，且m = max\\{l,n\\}\\\\k = \\begin{cases} 0,&\\lambda + \\beta i不是特征根时 \\\\ 1, &\\lambda + \\beta i 时单重特征根时 \\end{cases}</script><p>之后有用<strong>解叠加</strong>定理<strong>第二条</strong>求出<strong>非齐次常系数线性微分方程通解</strong>。</p>\n<h1 id=\"第三节、欧拉方程\"><a href=\"#第三节、欧拉方程\" class=\"headerlink\" title=\"第三节、欧拉方程\"></a>第三节、欧拉方程</h1><p>形如</p>\n<script type=\"math/tex; mode=display\">\nx^ny^{(n)} + a_1x^{n-1}y^{(n-1)} + ... + a_{n-1}xy^{(1)} + a_ny = f(x)</script><p>的高阶微分方程，称为欧拉方程（通式：<script type=\"math/tex\">\\sum\\limits_{i=0}^{n} a_i x^{n-i}y^{(n-i)} = f(x),\\quad a_0 = 1</script>），解法如下：</p>\n<p>引入运算符<script type=\"math/tex\">D = \\frac{d}{dt}，D^2 = \\frac{d^2}{dt^2}</script></p>\n<p>令<script type=\"math/tex\">x = e^t</script></p>\n<p>那么有<script type=\"math/tex\">x^ky^{(k)} = D(D-1)...(D-K+1)y</script>，将<script type=\"math/tex\">D</script>当成一个变量，乘进去再合并同类项。怎么证明不会</p>\n<p>然后带入到原方程中，即可变成二阶微分方程</p>\n<hr>\n<p><strong>例题如下（2004年1）：</strong></p>\n<p>&emsp;欧拉方程<script type=\"math/tex\">x^2\\frac{d^2y}{dx^2} + 4x\\frac{dy}{dx} + 2y = 0（x > 0）</script>的通解为?</p>\n<p><strong>答</strong>：令<script type=\"math/tex\">x=e^t</script>，原式化为：<script type=\"math/tex\">D(D-1)y + 4Dy + 2y = 0</script>，进一步化解：<script type=\"math/tex\">D^2y + 3Dy + 2y = 0</script>，其中<script type=\"math/tex\">D^2y = \\frac{d^2y}{dx^2},\\quad Dy = \\frac{dy}{dx}</script>。因此，变成了一个二阶常系数齐次方程，答案是：<script type=\"math/tex\">y=\\frac{C_1}{x} + \\frac{C_2}{x}</script>。</p>\n"},{"title":"计算机网络技术之子网分配","excerpt":"定长子网分配与非定长子网分配","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img20220904/20220904172404.png","mathjax":true,"date":"2022-09-04T08:42:16.000Z","_content":"\n## 前言\n\n&emsp;后文不再对子网掩码，子网，IP地址，CIDR做解释。\n\n&emsp;对于是否能够使用全0或者全1作为子网号呢？RFC950是对此有这样的建议，但是在RFC1878中，又把这个建议去除了。依我之见，网段充足情况下，尽量不要用，不充足的话，那就用吧。问最大，最小，非定长网段，往往是用全0或者全1的网段的，所以不做太多探讨。我们下面都认为**全0或者全1可以用**。\n\n&emsp;至于全0或者全1的主机号能不能用呢？那肯定是不行的，这个目前的规定仍然是网络号与广播地址的定义。\n\n## 定长子网的划分\n\n&emsp;定长子网，这里的长度指的是子网网段IP地址的范围。通俗来说，就是划分子网的时候，每个子网的子网掩码都是一样的。\n\n&emsp;下面来举个例子，为了方便起见，我们以`192.168.1.0/24`这个网段来举例子。\n\n- 给定一个网段，要求你把该网段分成n个子网。\n\n  > - 题目暗示或者给了子网中主机数量`m`\n  >\n  >   > 确定每个子网中，主机号的位数`b`，$$2^b-2 \\geq m$$，然后又能得出子网号来\n  >\n  > - 题目要求划分成n个子网\n  >\n  >   > 确定需要多少位作为子网号，才能分配n个子网\n  >\n  > 上面结论得出子网号的位数之后，就可以划分子网。加入依据上面算出来，需要3个子网。那么就是2位子网号，6位主机号\n  >\n  > 那么我们开始计算每个网段的IP地址范围，这里**包括**了网络地址与广播地址。做题需要看清楚，题目要不要你把这两个地址写上。\n\n| 网段       | 网络号           | 起始IP地址    | 结束IP地址    | 子网掩码        | IP地址数目 |\n| ---------- | ---------------- | ------------- | ------------- | --------------- | ---------- |\n| LAN1       | 192.168.1.0/26   | 192.168.1.0   | 192.168.1.63  | 255.255.255.192 | 64         |\n| LAN2       | 192.168.1.64/26  | 192.168.1.64  | 192.168.1.127 | 255.255.255.192 | 64         |\n| LAN3       | 192.168.1.128/26 | 192.168.1.128 | 192.168.1.191 | 255.255.255.192 | 64         |\n| 未使用网段 | 192.168.1.192/26 | 192.168.1.192 | 192.168.1.255 | 255.255.255.192 | 64         |\n\n- 做出一些结论\n\n  > 1、路由聚合后的地址，发现是`192.168.1.0/24`，为什么是这样呢？因为路由聚合后，其实就是把几个小网段分成了一个大网段。而我们是把这个大网段分成了几个小网段，所以聚合后还是这个大网段\n  >\n  > 2、每个子网掩码都是一样的，因为网络位是一样的。\n  >\n  > 3、我写**起始IP地址**与**结束IP地址**的原因，更多地是想说，分子网的时候，IP地址不应该有重合。所以，分子网，以及确定子网的时候，我们要牢牢抓住IP地址范围来看，哪些子网的IP范围有重合。\n  >\n  > 4、注意我把没有使用的网段也写出来，说明这个网段，用这个分法，是可以分出四个子网的，并且如果这么分，是一定会分出四个子网的，只是我们不用而已。所以，全部IP地址数目应该是4*64 = 256个。\n\n然后对于题目一些点的注意，看好题目要求什么，是依据子网划分还是依据子网中主机数目划分。有些选择题会给定一些条件，要你判断子网直接是否冲突，这个就根据IP地址范围来看是否冲突。\n\n## 非定长子网的划分\n\n&emsp;这个才是子网划分的难点，上面的应该是挺简单的。非定长子网，便是每个网段的IP地址数目不是等长的。这种一般是根据主机数目来划分的，不会要根据划分几个子网来划分。\n\n- 假如，我们需要对`192.168.1.0/24`进行子网的划分，然后每个子网的主机数目为`A：30、B：115、C：60、D：4`。\n\n  > $$2^b-2\\geq n$$的原则，每个子网的主机位数依次是`A：5、B：7、C：6、D：3`\n  >\n  > 所以，每个子网的子网位依次是`A：3、B：1、C：2、D：5`\n  >\n  > 为了方便起见，我们常常把子网位少的先分。\n\n| 网段 | 网络地址         | 起始IP地址    | 结束IP地址    | 子网掩码        | IP地址数目 |\n| ---- | ---------------- | ------------- | ------------- | --------------- | ---------- |\n| A    | 192.168.1.192/27 | 192.168.1.192 | 192.168.1.223 | 255.255.255.224 | 32         |\n| B    | 192.168.1.0/25   | 192.168.1.0   | 192.168.1.127 | 255.255.255.128 | 128        |\n| C    | 192.168.1.128/26 | 192.168.1.128 | 192.168.1.191 | 255.255.255.192 | 64         |\n| D    | 192.168.1.240/29 | 192.168.1.240 | 192.168.1.247 | 255.255.255.248 | 8          |\n\n- 结论\n\n  > 1、首先，每个IP地址依然没有冲突\n  >\n  > 2、每个网段的IP地址数目都比其主机数目多1\n  >\n  > 3、这里我没有给出未分配网段，原因是很多网段太零碎了，所以没有给出\n  >\n  > 4、注意网络地址给的很讲究，我们拿IP地址第25位与28位来看。用 空格分割了子网与主机\n  >\n  > > 对于A是`110   0`，B是`0    000`，C是`10   00`。其中，\n  > >\n  > > A为什么不能是`000   0`或者`011    0`呢？假如是这样的话，那么可以看看A的IP地址范围与B的IP地址范围，明显会冲突的。A的IP地址范围是`192.168.1.0 ~ 31`或者`192.168.1.96 ~ 127`，与B的`192.168.1.0 ~ 127`冲突了。\n  > >\n  > > 当然，你此时可以把B改成`1    000`，这样，B的范围就是`192.168.1.128 ~ 255`，冲突也避免了\n  >\n  > 5、根据第4点，得出结论，短子网掩码（如B）不能是长子网掩码（如A）的前缀，不然会冲突。\n  >\n  > 6、我们仍然是牢牢抓住IP地址范围来看的，因此IP地址范围是否冲突，是我们划分子网着重需要考虑的因素。如果划分的子网都冲突了，那还叫作什么划分子网啊。\n  >\n  > 7、同样的，路由聚合后，仍然是`192.168.1.0/24`。所以，得出结论，一个大的网段中的子网，路由聚合后应该是这个大的网段，或者大的网段内的子网。","source":"_posts/计算机网络技术之子网分配.md","raw":"---\ntitle: 计算机网络技术之子网分配\nexcerpt: 定长子网分配与非定长子网分配\ntags: \n- 计算机网络技术\n- 物理层\n- 考研\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img20220904/20220904172404.png\ncategories:\n- 计算机网络技术\nmathjax: true\ndate: 2022-09-04 16:42:16\n---\n\n## 前言\n\n&emsp;后文不再对子网掩码，子网，IP地址，CIDR做解释。\n\n&emsp;对于是否能够使用全0或者全1作为子网号呢？RFC950是对此有这样的建议，但是在RFC1878中，又把这个建议去除了。依我之见，网段充足情况下，尽量不要用，不充足的话，那就用吧。问最大，最小，非定长网段，往往是用全0或者全1的网段的，所以不做太多探讨。我们下面都认为**全0或者全1可以用**。\n\n&emsp;至于全0或者全1的主机号能不能用呢？那肯定是不行的，这个目前的规定仍然是网络号与广播地址的定义。\n\n## 定长子网的划分\n\n&emsp;定长子网，这里的长度指的是子网网段IP地址的范围。通俗来说，就是划分子网的时候，每个子网的子网掩码都是一样的。\n\n&emsp;下面来举个例子，为了方便起见，我们以`192.168.1.0/24`这个网段来举例子。\n\n- 给定一个网段，要求你把该网段分成n个子网。\n\n  > - 题目暗示或者给了子网中主机数量`m`\n  >\n  >   > 确定每个子网中，主机号的位数`b`，$$2^b-2 \\geq m$$，然后又能得出子网号来\n  >\n  > - 题目要求划分成n个子网\n  >\n  >   > 确定需要多少位作为子网号，才能分配n个子网\n  >\n  > 上面结论得出子网号的位数之后，就可以划分子网。加入依据上面算出来，需要3个子网。那么就是2位子网号，6位主机号\n  >\n  > 那么我们开始计算每个网段的IP地址范围，这里**包括**了网络地址与广播地址。做题需要看清楚，题目要不要你把这两个地址写上。\n\n| 网段       | 网络号           | 起始IP地址    | 结束IP地址    | 子网掩码        | IP地址数目 |\n| ---------- | ---------------- | ------------- | ------------- | --------------- | ---------- |\n| LAN1       | 192.168.1.0/26   | 192.168.1.0   | 192.168.1.63  | 255.255.255.192 | 64         |\n| LAN2       | 192.168.1.64/26  | 192.168.1.64  | 192.168.1.127 | 255.255.255.192 | 64         |\n| LAN3       | 192.168.1.128/26 | 192.168.1.128 | 192.168.1.191 | 255.255.255.192 | 64         |\n| 未使用网段 | 192.168.1.192/26 | 192.168.1.192 | 192.168.1.255 | 255.255.255.192 | 64         |\n\n- 做出一些结论\n\n  > 1、路由聚合后的地址，发现是`192.168.1.0/24`，为什么是这样呢？因为路由聚合后，其实就是把几个小网段分成了一个大网段。而我们是把这个大网段分成了几个小网段，所以聚合后还是这个大网段\n  >\n  > 2、每个子网掩码都是一样的，因为网络位是一样的。\n  >\n  > 3、我写**起始IP地址**与**结束IP地址**的原因，更多地是想说，分子网的时候，IP地址不应该有重合。所以，分子网，以及确定子网的时候，我们要牢牢抓住IP地址范围来看，哪些子网的IP范围有重合。\n  >\n  > 4、注意我把没有使用的网段也写出来，说明这个网段，用这个分法，是可以分出四个子网的，并且如果这么分，是一定会分出四个子网的，只是我们不用而已。所以，全部IP地址数目应该是4*64 = 256个。\n\n然后对于题目一些点的注意，看好题目要求什么，是依据子网划分还是依据子网中主机数目划分。有些选择题会给定一些条件，要你判断子网直接是否冲突，这个就根据IP地址范围来看是否冲突。\n\n## 非定长子网的划分\n\n&emsp;这个才是子网划分的难点，上面的应该是挺简单的。非定长子网，便是每个网段的IP地址数目不是等长的。这种一般是根据主机数目来划分的，不会要根据划分几个子网来划分。\n\n- 假如，我们需要对`192.168.1.0/24`进行子网的划分，然后每个子网的主机数目为`A：30、B：115、C：60、D：4`。\n\n  > $$2^b-2\\geq n$$的原则，每个子网的主机位数依次是`A：5、B：7、C：6、D：3`\n  >\n  > 所以，每个子网的子网位依次是`A：3、B：1、C：2、D：5`\n  >\n  > 为了方便起见，我们常常把子网位少的先分。\n\n| 网段 | 网络地址         | 起始IP地址    | 结束IP地址    | 子网掩码        | IP地址数目 |\n| ---- | ---------------- | ------------- | ------------- | --------------- | ---------- |\n| A    | 192.168.1.192/27 | 192.168.1.192 | 192.168.1.223 | 255.255.255.224 | 32         |\n| B    | 192.168.1.0/25   | 192.168.1.0   | 192.168.1.127 | 255.255.255.128 | 128        |\n| C    | 192.168.1.128/26 | 192.168.1.128 | 192.168.1.191 | 255.255.255.192 | 64         |\n| D    | 192.168.1.240/29 | 192.168.1.240 | 192.168.1.247 | 255.255.255.248 | 8          |\n\n- 结论\n\n  > 1、首先，每个IP地址依然没有冲突\n  >\n  > 2、每个网段的IP地址数目都比其主机数目多1\n  >\n  > 3、这里我没有给出未分配网段，原因是很多网段太零碎了，所以没有给出\n  >\n  > 4、注意网络地址给的很讲究，我们拿IP地址第25位与28位来看。用 空格分割了子网与主机\n  >\n  > > 对于A是`110   0`，B是`0    000`，C是`10   00`。其中，\n  > >\n  > > A为什么不能是`000   0`或者`011    0`呢？假如是这样的话，那么可以看看A的IP地址范围与B的IP地址范围，明显会冲突的。A的IP地址范围是`192.168.1.0 ~ 31`或者`192.168.1.96 ~ 127`，与B的`192.168.1.0 ~ 127`冲突了。\n  > >\n  > > 当然，你此时可以把B改成`1    000`，这样，B的范围就是`192.168.1.128 ~ 255`，冲突也避免了\n  >\n  > 5、根据第4点，得出结论，短子网掩码（如B）不能是长子网掩码（如A）的前缀，不然会冲突。\n  >\n  > 6、我们仍然是牢牢抓住IP地址范围来看的，因此IP地址范围是否冲突，是我们划分子网着重需要考虑的因素。如果划分的子网都冲突了，那还叫作什么划分子网啊。\n  >\n  > 7、同样的，路由聚合后，仍然是`192.168.1.0/24`。所以，得出结论，一个大的网段中的子网，路由聚合后应该是这个大的网段，或者大的网段内的子网。","slug":"计算机网络技术之子网分配","published":1,"updated":"2022-09-04T12:36:26.658Z","_id":"cl7n4pbpr0000mku52tuwg7d5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;后文不再对子网掩码，子网，IP地址，CIDR做解释。</p>\n<p>&emsp;对于是否能够使用全0或者全1作为子网号呢？RFC950是对此有这样的建议，但是在RFC1878中，又把这个建议去除了。依我之见，网段充足情况下，尽量不要用，不充足的话，那就用吧。问最大，最小，非定长网段，往往是用全0或者全1的网段的，所以不做太多探讨。我们下面都认为<strong>全0或者全1可以用</strong>。</p>\n<p>&emsp;至于全0或者全1的主机号能不能用呢？那肯定是不行的，这个目前的规定仍然是网络号与广播地址的定义。</p>\n<h2 id=\"定长子网的划分\"><a href=\"#定长子网的划分\" class=\"headerlink\" title=\"定长子网的划分\"></a>定长子网的划分</h2><p>&emsp;定长子网，这里的长度指的是子网网段IP地址的范围。通俗来说，就是划分子网的时候，每个子网的子网掩码都是一样的。</p>\n<p>&emsp;下面来举个例子，为了方便起见，我们以<code>192.168.1.0/24</code>这个网段来举例子。</p>\n<ul>\n<li><p>给定一个网段，要求你把该网段分成n个子网。</p>\n<blockquote>\n<ul>\n<li><p>题目暗示或者给了子网中主机数量<code>m</code></p>\n<blockquote>\n<p>确定每个子网中，主机号的位数<code>b</code>，<script type=\"math/tex\">2^b-2 \\geq m</script>，然后又能得出子网号来</p>\n</blockquote>\n</li>\n<li><p>题目要求划分成n个子网</p>\n<blockquote>\n<p>确定需要多少位作为子网号，才能分配n个子网</p>\n</blockquote>\n</li>\n</ul>\n<p>上面结论得出子网号的位数之后，就可以划分子网。加入依据上面算出来，需要3个子网。那么就是2位子网号，6位主机号</p>\n<p>那么我们开始计算每个网段的IP地址范围，这里<strong>包括</strong>了网络地址与广播地址。做题需要看清楚，题目要不要你把这两个地址写上。</p>\n</blockquote>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>网段</th>\n<th>网络号</th>\n<th>起始IP地址</th>\n<th>结束IP地址</th>\n<th>子网掩码</th>\n<th>IP地址数目</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LAN1</td>\n<td>192.168.1.0/26</td>\n<td>192.168.1.0</td>\n<td>192.168.1.63</td>\n<td>255.255.255.192</td>\n<td>64</td>\n</tr>\n<tr>\n<td>LAN2</td>\n<td>192.168.1.64/26</td>\n<td>192.168.1.64</td>\n<td>192.168.1.127</td>\n<td>255.255.255.192</td>\n<td>64</td>\n</tr>\n<tr>\n<td>LAN3</td>\n<td>192.168.1.128/26</td>\n<td>192.168.1.128</td>\n<td>192.168.1.191</td>\n<td>255.255.255.192</td>\n<td>64</td>\n</tr>\n<tr>\n<td>未使用网段</td>\n<td>192.168.1.192/26</td>\n<td>192.168.1.192</td>\n<td>192.168.1.255</td>\n<td>255.255.255.192</td>\n<td>64</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><p>做出一些结论</p>\n<blockquote>\n<p>1、路由聚合后的地址，发现是<code>192.168.1.0/24</code>，为什么是这样呢？因为路由聚合后，其实就是把几个小网段分成了一个大网段。而我们是把这个大网段分成了几个小网段，所以聚合后还是这个大网段</p>\n<p>2、每个子网掩码都是一样的，因为网络位是一样的。</p>\n<p>3、我写<strong>起始IP地址</strong>与<strong>结束IP地址</strong>的原因，更多地是想说，分子网的时候，IP地址不应该有重合。所以，分子网，以及确定子网的时候，我们要牢牢抓住IP地址范围来看，哪些子网的IP范围有重合。</p>\n<p>4、注意我把没有使用的网段也写出来，说明这个网段，用这个分法，是可以分出四个子网的，并且如果这么分，是一定会分出四个子网的，只是我们不用而已。所以，全部IP地址数目应该是4*64 = 256个。</p>\n</blockquote>\n</li>\n</ul>\n<p>然后对于题目一些点的注意，看好题目要求什么，是依据子网划分还是依据子网中主机数目划分。有些选择题会给定一些条件，要你判断子网直接是否冲突，这个就根据IP地址范围来看是否冲突。</p>\n<h2 id=\"非定长子网的划分\"><a href=\"#非定长子网的划分\" class=\"headerlink\" title=\"非定长子网的划分\"></a>非定长子网的划分</h2><p>&emsp;这个才是子网划分的难点，上面的应该是挺简单的。非定长子网，便是每个网段的IP地址数目不是等长的。这种一般是根据主机数目来划分的，不会要根据划分几个子网来划分。</p>\n<ul>\n<li><p>假如，我们需要对<code>192.168.1.0/24</code>进行子网的划分，然后每个子网的主机数目为<code>A：30、B：115、C：60、D：4</code>。</p>\n<blockquote>\n<p><script type=\"math/tex\">2^b-2\\geq n</script>的原则，每个子网的主机位数依次是<code>A：5、B：7、C：6、D：3</code></p>\n<p>所以，每个子网的子网位依次是<code>A：3、B：1、C：2、D：5</code></p>\n<p>为了方便起见，我们常常把子网位少的先分。</p>\n</blockquote>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>网段</th>\n<th>网络地址</th>\n<th>起始IP地址</th>\n<th>结束IP地址</th>\n<th>子网掩码</th>\n<th>IP地址数目</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>192.168.1.192/27</td>\n<td>192.168.1.192</td>\n<td>192.168.1.223</td>\n<td>255.255.255.224</td>\n<td>32</td>\n</tr>\n<tr>\n<td>B</td>\n<td>192.168.1.0/25</td>\n<td>192.168.1.0</td>\n<td>192.168.1.127</td>\n<td>255.255.255.128</td>\n<td>128</td>\n</tr>\n<tr>\n<td>C</td>\n<td>192.168.1.128/26</td>\n<td>192.168.1.128</td>\n<td>192.168.1.191</td>\n<td>255.255.255.192</td>\n<td>64</td>\n</tr>\n<tr>\n<td>D</td>\n<td>192.168.1.240/29</td>\n<td>192.168.1.240</td>\n<td>192.168.1.247</td>\n<td>255.255.255.248</td>\n<td>8</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><p>结论</p>\n<blockquote>\n<p>1、首先，每个IP地址依然没有冲突</p>\n<p>2、每个网段的IP地址数目都比其主机数目多1</p>\n<p>3、这里我没有给出未分配网段，原因是很多网段太零碎了，所以没有给出</p>\n<p>4、注意网络地址给的很讲究，我们拿IP地址第25位与28位来看。用 空格分割了子网与主机</p>\n<blockquote>\n<p>对于A是<code>110   0</code>，B是<code>0    000</code>，C是<code>10   00</code>。其中，</p>\n<p>A为什么不能是<code>000   0</code>或者<code>011    0</code>呢？假如是这样的话，那么可以看看A的IP地址范围与B的IP地址范围，明显会冲突的。A的IP地址范围是<code>192.168.1.0 ~ 31</code>或者<code>192.168.1.96 ~ 127</code>，与B的<code>192.168.1.0 ~ 127</code>冲突了。</p>\n<p>当然，你此时可以把B改成<code>1    000</code>，这样，B的范围就是<code>192.168.1.128 ~ 255</code>，冲突也避免了</p>\n</blockquote>\n<p>5、根据第4点，得出结论，短子网掩码（如B）不能是长子网掩码（如A）的前缀，不然会冲突。</p>\n<p>6、我们仍然是牢牢抓住IP地址范围来看的，因此IP地址范围是否冲突，是我们划分子网着重需要考虑的因素。如果划分的子网都冲突了，那还叫作什么划分子网啊。</p>\n<p>7、同样的，路由聚合后，仍然是<code>192.168.1.0/24</code>。所以，得出结论，一个大的网段中的子网，路由聚合后应该是这个大的网段，或者大的网段内的子网。</p>\n</blockquote>\n</li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;后文不再对子网掩码，子网，IP地址，CIDR做解释。</p>\n<p>&emsp;对于是否能够使用全0或者全1作为子网号呢？RFC950是对此有这样的建议，但是在RFC1878中，又把这个建议去除了。依我之见，网段充足情况下，尽量不要用，不充足的话，那就用吧。问最大，最小，非定长网段，往往是用全0或者全1的网段的，所以不做太多探讨。我们下面都认为<strong>全0或者全1可以用</strong>。</p>\n<p>&emsp;至于全0或者全1的主机号能不能用呢？那肯定是不行的，这个目前的规定仍然是网络号与广播地址的定义。</p>\n<h2 id=\"定长子网的划分\"><a href=\"#定长子网的划分\" class=\"headerlink\" title=\"定长子网的划分\"></a>定长子网的划分</h2><p>&emsp;定长子网，这里的长度指的是子网网段IP地址的范围。通俗来说，就是划分子网的时候，每个子网的子网掩码都是一样的。</p>\n<p>&emsp;下面来举个例子，为了方便起见，我们以<code>192.168.1.0/24</code>这个网段来举例子。</p>\n<ul>\n<li><p>给定一个网段，要求你把该网段分成n个子网。</p>\n<blockquote>\n<ul>\n<li><p>题目暗示或者给了子网中主机数量<code>m</code></p>\n<blockquote>\n<p>确定每个子网中，主机号的位数<code>b</code>，<script type=\"math/tex\">2^b-2 \\geq m</script>，然后又能得出子网号来</p>\n</blockquote>\n</li>\n<li><p>题目要求划分成n个子网</p>\n<blockquote>\n<p>确定需要多少位作为子网号，才能分配n个子网</p>\n</blockquote>\n</li>\n</ul>\n<p>上面结论得出子网号的位数之后，就可以划分子网。加入依据上面算出来，需要3个子网。那么就是2位子网号，6位主机号</p>\n<p>那么我们开始计算每个网段的IP地址范围，这里<strong>包括</strong>了网络地址与广播地址。做题需要看清楚，题目要不要你把这两个地址写上。</p>\n</blockquote>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>网段</th>\n<th>网络号</th>\n<th>起始IP地址</th>\n<th>结束IP地址</th>\n<th>子网掩码</th>\n<th>IP地址数目</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LAN1</td>\n<td>192.168.1.0/26</td>\n<td>192.168.1.0</td>\n<td>192.168.1.63</td>\n<td>255.255.255.192</td>\n<td>64</td>\n</tr>\n<tr>\n<td>LAN2</td>\n<td>192.168.1.64/26</td>\n<td>192.168.1.64</td>\n<td>192.168.1.127</td>\n<td>255.255.255.192</td>\n<td>64</td>\n</tr>\n<tr>\n<td>LAN3</td>\n<td>192.168.1.128/26</td>\n<td>192.168.1.128</td>\n<td>192.168.1.191</td>\n<td>255.255.255.192</td>\n<td>64</td>\n</tr>\n<tr>\n<td>未使用网段</td>\n<td>192.168.1.192/26</td>\n<td>192.168.1.192</td>\n<td>192.168.1.255</td>\n<td>255.255.255.192</td>\n<td>64</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><p>做出一些结论</p>\n<blockquote>\n<p>1、路由聚合后的地址，发现是<code>192.168.1.0/24</code>，为什么是这样呢？因为路由聚合后，其实就是把几个小网段分成了一个大网段。而我们是把这个大网段分成了几个小网段，所以聚合后还是这个大网段</p>\n<p>2、每个子网掩码都是一样的，因为网络位是一样的。</p>\n<p>3、我写<strong>起始IP地址</strong>与<strong>结束IP地址</strong>的原因，更多地是想说，分子网的时候，IP地址不应该有重合。所以，分子网，以及确定子网的时候，我们要牢牢抓住IP地址范围来看，哪些子网的IP范围有重合。</p>\n<p>4、注意我把没有使用的网段也写出来，说明这个网段，用这个分法，是可以分出四个子网的，并且如果这么分，是一定会分出四个子网的，只是我们不用而已。所以，全部IP地址数目应该是4*64 = 256个。</p>\n</blockquote>\n</li>\n</ul>\n<p>然后对于题目一些点的注意，看好题目要求什么，是依据子网划分还是依据子网中主机数目划分。有些选择题会给定一些条件，要你判断子网直接是否冲突，这个就根据IP地址范围来看是否冲突。</p>\n<h2 id=\"非定长子网的划分\"><a href=\"#非定长子网的划分\" class=\"headerlink\" title=\"非定长子网的划分\"></a>非定长子网的划分</h2><p>&emsp;这个才是子网划分的难点，上面的应该是挺简单的。非定长子网，便是每个网段的IP地址数目不是等长的。这种一般是根据主机数目来划分的，不会要根据划分几个子网来划分。</p>\n<ul>\n<li><p>假如，我们需要对<code>192.168.1.0/24</code>进行子网的划分，然后每个子网的主机数目为<code>A：30、B：115、C：60、D：4</code>。</p>\n<blockquote>\n<p><script type=\"math/tex\">2^b-2\\geq n</script>的原则，每个子网的主机位数依次是<code>A：5、B：7、C：6、D：3</code></p>\n<p>所以，每个子网的子网位依次是<code>A：3、B：1、C：2、D：5</code></p>\n<p>为了方便起见，我们常常把子网位少的先分。</p>\n</blockquote>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>网段</th>\n<th>网络地址</th>\n<th>起始IP地址</th>\n<th>结束IP地址</th>\n<th>子网掩码</th>\n<th>IP地址数目</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>192.168.1.192/27</td>\n<td>192.168.1.192</td>\n<td>192.168.1.223</td>\n<td>255.255.255.224</td>\n<td>32</td>\n</tr>\n<tr>\n<td>B</td>\n<td>192.168.1.0/25</td>\n<td>192.168.1.0</td>\n<td>192.168.1.127</td>\n<td>255.255.255.128</td>\n<td>128</td>\n</tr>\n<tr>\n<td>C</td>\n<td>192.168.1.128/26</td>\n<td>192.168.1.128</td>\n<td>192.168.1.191</td>\n<td>255.255.255.192</td>\n<td>64</td>\n</tr>\n<tr>\n<td>D</td>\n<td>192.168.1.240/29</td>\n<td>192.168.1.240</td>\n<td>192.168.1.247</td>\n<td>255.255.255.248</td>\n<td>8</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><p>结论</p>\n<blockquote>\n<p>1、首先，每个IP地址依然没有冲突</p>\n<p>2、每个网段的IP地址数目都比其主机数目多1</p>\n<p>3、这里我没有给出未分配网段，原因是很多网段太零碎了，所以没有给出</p>\n<p>4、注意网络地址给的很讲究，我们拿IP地址第25位与28位来看。用 空格分割了子网与主机</p>\n<blockquote>\n<p>对于A是<code>110   0</code>，B是<code>0    000</code>，C是<code>10   00</code>。其中，</p>\n<p>A为什么不能是<code>000   0</code>或者<code>011    0</code>呢？假如是这样的话，那么可以看看A的IP地址范围与B的IP地址范围，明显会冲突的。A的IP地址范围是<code>192.168.1.0 ~ 31</code>或者<code>192.168.1.96 ~ 127</code>，与B的<code>192.168.1.0 ~ 127</code>冲突了。</p>\n<p>当然，你此时可以把B改成<code>1    000</code>，这样，B的范围就是<code>192.168.1.128 ~ 255</code>，冲突也避免了</p>\n</blockquote>\n<p>5、根据第4点，得出结论，短子网掩码（如B）不能是长子网掩码（如A）的前缀，不然会冲突。</p>\n<p>6、我们仍然是牢牢抓住IP地址范围来看的，因此IP地址范围是否冲突，是我们划分子网着重需要考虑的因素。如果划分的子网都冲突了，那还叫作什么划分子网啊。</p>\n<p>7、同样的，路由聚合后，仍然是<code>192.168.1.0/24</code>。所以，得出结论，一个大的网段中的子网，路由聚合后应该是这个大的网段，或者大的网段内的子网。</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"多元函数积分学","excerpt":"考研数学中的多元函数积分学知识汇总","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img20220904/20221006183012.png","mathjax":true,"date":"2022-10-06T10:29:16.000Z","_content":"\n# 二重积分\n\n## 1、意义：\n\n- 表示曲顶柱体的体积\n- 表示面密度为$$f(x,y)$$的平面的面质量\n\n## 2、计算\n\n### 和式极限\n\n$$\\iint \\limits_{D} f(x,y) d\\sigma = \\lim \\limits_{n \\to \\infty} \\sum \\limits_{i=1}^{n} \\sum \\limits_{j=1}^n f(a + \\frac{b-a}{n} i, c + \\frac{d-c}{n}j) \\cdot \\frac{b-a}{n} \\cdot \\frac{d-c}{n}$$\n\n### 对称性计算\n\n积分区域关于x对称，就看积分函数是否关于y对称\n\n### 轮换对称性\n\n积分区域关于 $$y = x$$ 对称，就具有轮换对称性 $$I = \\iint \\limits_D f(x,y)dxdy = \\iint \\limits_D f(x,y) dx dy$$\n\n### 二重积分比大小\n\n- 对称性\n- 保号性\n- 画图\n\n## 3、两大坐标系计算\n\n### （1）直角坐标系\n\n### （2） 极坐标系\n\n# 第一型曲线积分\n\n## 1、二重直接计算\n\n$$(1) \\int_L f(x,y) ds = \\int_a^b f[x, y(x)] \\sqrt{1+(y'_x)^2}dx\\\\ (2)\\int_L f(x,y) ds = \\int_{\\alpha}^{\\beta} f[x(t), y(t)] \\sqrt{(x_t')^2+(y_t')^2}dt \\\\ (3)\\int_L f(x,y) ds = \\int_{\\alpha}^{\\beta} f[r(\\theta)cos\\theta, r(\\theta)sin\\theta]\\sqrt{[r(\\theta)]^2 + [r'(\\theta)]^2}$$\n\n# 第一型曲面积分\n\n## 1、直接计算\n\n$$\\iint \\limits_{\\Sigma} f(x,y,z) dS = \\iint \\limits_{D_{xy}}f[x,y,z(x,y)]\\sqrt{1+(z'_x)^2+(z_y')^2}dxdy$$\n\n# 第二型曲线积分\n\n## 1、直接计算\n\n不要小看这个方法，建议最先用这个方法\n\n$$\\int_L P(x,y)dx + Q(x,y)dy = \\int_\\alpha^\\beta \\{P[x(t),y(t)]x'(t) + Q[x(t),y(t)]y'(t)\\}$$\n\n$$\\int_\\Gamma Pdx + Qdy + Rdz = \\int_\\alpha^\\beta \\{ P[x(t),y(t),z(t)]x'(t) + Q[x(t),y(t),z(t)]y'(t) + R[x(t), y(t),z(t)]z'(t) \\} dt$$\n\n## 2、格林公式\n\n$$\\oint_L P(x,y)dx+Q(x,y)dy = \\iint\\limits_D(\\frac{\\partial Q}{\\partial x}-\\frac{\\partial P}{\\partial y})d \\sigma$$\n\n- 曲线封闭\n\n  > - 内部有奇点\n  >\n  >   > 在内部使用一个小圆圈消除它\n  >\n  > - 内部无奇点\n  >\n  >   > 直接使用格林公式\n\n- 曲线不封闭\n\n  > - 如果积分与路径无关\n  >\n  >   > 换条路经，见第3点\n  >\n  > - 如果积分与路径有关\n  >\n  >   > 补线，用格林公式（**注意：**补线所经之处，躲避**奇点**）\n\n## 3、积分与路径无关\n\n下面四个问题等价\n\n- $$\\int_{L_{AB}} P(x,y)dx + Q(x,y)dy$$与路径无关\n- $$Pdx + Qdy $$为某二元函数$$u(x,y)$$的全微分\n- $$Pdx+Qdy=0$$为全微分方程\n- $$P\\boldsymbol{i} + Q\\boldsymbol{j} $$为某二元函数$$u(x,y)$$的梯度\n- 沿D内任意分段光滑闭曲线L都有$$\\oint_L Pdx + Qdy = 0$$\n- $$\\frac{\\partial P}{\\partial y} \\equiv \\frac{\\partial Q}{\\partial x}$$处处成立\n\n三重积分上路径无关\n\n- $$\\boldsymbol{rot F} = 0$$ 积分与路径无关\n\n## 4、两类曲线积分联系\n\n$$\\int_L P dx + Qdy = \\int_L(Pcos\\alpha + Qsin\\alpha)ds\\\\ (cos\\alpha , sin \\alpha) 为L在点(x,y)与L同向的切向量$$\n\n## 5、斯托克公式\n\n将空间第二型曲线积分化成第二型曲面积分或者第一型曲面积分\n\n$$\n\\oint\\limits_\\Gamma Pdx+Qdy+Rdz = \\\\ \\iint\\limits_\\Sigma \\left |\\begin{array}{ccc}\ndydz &dzdx   &dxdy \\\\\n\\frac{\\partial}{\\partial x} &\\frac{\\partial}{\\partial y} &\\frac{\\partial}{\\partial z}  \\\\\nP &Q &R \\\\ \\end{array}\\right| (第二型曲面积分)\\\\   \\iint \\limits_\\Sigma \\left |\\begin{array}{ccc}\ncos\\alpha &cos\\beta   &cos\\gamma \\\\\n\\frac{\\partial}{\\partial x} &\\frac{\\partial}{\\partial y} &\\frac{\\partial}{\\partial z}  \\\\\nP &Q &R \\\\ \\end{array}\\right| dS (第一型曲面积分)\n$$\n\n\n$$\\oint_L \\vec{F} = \\iint_\\Sigma rot\\vec{F} dS$$\n\n# 第二型曲面积分\n\n## 1、直接计算\n\n不要小看第1、2方法，建议最先用这两个方法看看\n\n$$\\iint_\\Sigma R(x,y,z)dxdy = \\pm \\iint_{D_{xy}}R[x,y,z(x,y)]dxdy$$\n\n其余同理，当$$\\Sigma$$与$$z$$轴成锐角取+，成钝角取-\n\n## 2、转换投影法\n\n如果$$\\Sigma$$上任意两点到$$xOy$$平面不重合\n\n$$\\iint_\\Sigma P(x,yz)dydz + Q(x,y,z)dzdx + R(x,y,z)dxdy = \\pm \\iint\\limits_{D{xy}}\\{p[x,y,z(x,y)](-\\frac{\\partial z}{\\partial x}) + Q[x,y,z(x,y)](-\\frac{\\partial z}{\\partial y}) + R[x,y,z(x,y)] \\}dxdy$$\n\n## 3、高斯公式\n\n$$\n\\oiint \\limits_\\Sigma Pdydz + Qdzdx + Rdxdy = \\iiint \\limits_\\Omega (\\frac{\\partial P}{\\partial x} + \\frac{\\partial Q}{\\partial y} + \\frac{\\partial R}{\\partial z})dv\n$$\n\n\n\n- 曲面封闭\n\n  > - 内部无奇点：直接高斯公式\n  > - 内部有奇点：用一个封闭曲面将奇点圈出来\n\n- 曲面不封闭\n\n  > - $$div \\boldsymbol{F} = 0$$：换个面积分\n  > - $$div \\boldsymbol{F} \\neq 0$$：补面使其封闭","source":"_posts/多元函数积分学.md","raw":"---\ntitle: 多元函数积分学\ntags: \n- 数学\n- 曲线积分\n- 曲面积分\n- 二重积分\n- 三重积分\n- 考研\nexcerpt: 考研数学中的多元函数积分学知识汇总\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img20220904/20221006183012.png\ncategories:\n- 考研数学\nmathjax: true\ndate: 2022-10-06 18:29:16\n---\n\n# 二重积分\n\n## 1、意义：\n\n- 表示曲顶柱体的体积\n- 表示面密度为$$f(x,y)$$的平面的面质量\n\n## 2、计算\n\n### 和式极限\n\n$$\\iint \\limits_{D} f(x,y) d\\sigma = \\lim \\limits_{n \\to \\infty} \\sum \\limits_{i=1}^{n} \\sum \\limits_{j=1}^n f(a + \\frac{b-a}{n} i, c + \\frac{d-c}{n}j) \\cdot \\frac{b-a}{n} \\cdot \\frac{d-c}{n}$$\n\n### 对称性计算\n\n积分区域关于x对称，就看积分函数是否关于y对称\n\n### 轮换对称性\n\n积分区域关于 $$y = x$$ 对称，就具有轮换对称性 $$I = \\iint \\limits_D f(x,y)dxdy = \\iint \\limits_D f(x,y) dx dy$$\n\n### 二重积分比大小\n\n- 对称性\n- 保号性\n- 画图\n\n## 3、两大坐标系计算\n\n### （1）直角坐标系\n\n### （2） 极坐标系\n\n# 第一型曲线积分\n\n## 1、二重直接计算\n\n$$(1) \\int_L f(x,y) ds = \\int_a^b f[x, y(x)] \\sqrt{1+(y'_x)^2}dx\\\\ (2)\\int_L f(x,y) ds = \\int_{\\alpha}^{\\beta} f[x(t), y(t)] \\sqrt{(x_t')^2+(y_t')^2}dt \\\\ (3)\\int_L f(x,y) ds = \\int_{\\alpha}^{\\beta} f[r(\\theta)cos\\theta, r(\\theta)sin\\theta]\\sqrt{[r(\\theta)]^2 + [r'(\\theta)]^2}$$\n\n# 第一型曲面积分\n\n## 1、直接计算\n\n$$\\iint \\limits_{\\Sigma} f(x,y,z) dS = \\iint \\limits_{D_{xy}}f[x,y,z(x,y)]\\sqrt{1+(z'_x)^2+(z_y')^2}dxdy$$\n\n# 第二型曲线积分\n\n## 1、直接计算\n\n不要小看这个方法，建议最先用这个方法\n\n$$\\int_L P(x,y)dx + Q(x,y)dy = \\int_\\alpha^\\beta \\{P[x(t),y(t)]x'(t) + Q[x(t),y(t)]y'(t)\\}$$\n\n$$\\int_\\Gamma Pdx + Qdy + Rdz = \\int_\\alpha^\\beta \\{ P[x(t),y(t),z(t)]x'(t) + Q[x(t),y(t),z(t)]y'(t) + R[x(t), y(t),z(t)]z'(t) \\} dt$$\n\n## 2、格林公式\n\n$$\\oint_L P(x,y)dx+Q(x,y)dy = \\iint\\limits_D(\\frac{\\partial Q}{\\partial x}-\\frac{\\partial P}{\\partial y})d \\sigma$$\n\n- 曲线封闭\n\n  > - 内部有奇点\n  >\n  >   > 在内部使用一个小圆圈消除它\n  >\n  > - 内部无奇点\n  >\n  >   > 直接使用格林公式\n\n- 曲线不封闭\n\n  > - 如果积分与路径无关\n  >\n  >   > 换条路经，见第3点\n  >\n  > - 如果积分与路径有关\n  >\n  >   > 补线，用格林公式（**注意：**补线所经之处，躲避**奇点**）\n\n## 3、积分与路径无关\n\n下面四个问题等价\n\n- $$\\int_{L_{AB}} P(x,y)dx + Q(x,y)dy$$与路径无关\n- $$Pdx + Qdy $$为某二元函数$$u(x,y)$$的全微分\n- $$Pdx+Qdy=0$$为全微分方程\n- $$P\\boldsymbol{i} + Q\\boldsymbol{j} $$为某二元函数$$u(x,y)$$的梯度\n- 沿D内任意分段光滑闭曲线L都有$$\\oint_L Pdx + Qdy = 0$$\n- $$\\frac{\\partial P}{\\partial y} \\equiv \\frac{\\partial Q}{\\partial x}$$处处成立\n\n三重积分上路径无关\n\n- $$\\boldsymbol{rot F} = 0$$ 积分与路径无关\n\n## 4、两类曲线积分联系\n\n$$\\int_L P dx + Qdy = \\int_L(Pcos\\alpha + Qsin\\alpha)ds\\\\ (cos\\alpha , sin \\alpha) 为L在点(x,y)与L同向的切向量$$\n\n## 5、斯托克公式\n\n将空间第二型曲线积分化成第二型曲面积分或者第一型曲面积分\n\n$$\n\\oint\\limits_\\Gamma Pdx+Qdy+Rdz = \\\\ \\iint\\limits_\\Sigma \\left |\\begin{array}{ccc}\ndydz &dzdx   &dxdy \\\\\n\\frac{\\partial}{\\partial x} &\\frac{\\partial}{\\partial y} &\\frac{\\partial}{\\partial z}  \\\\\nP &Q &R \\\\ \\end{array}\\right| (第二型曲面积分)\\\\   \\iint \\limits_\\Sigma \\left |\\begin{array}{ccc}\ncos\\alpha &cos\\beta   &cos\\gamma \\\\\n\\frac{\\partial}{\\partial x} &\\frac{\\partial}{\\partial y} &\\frac{\\partial}{\\partial z}  \\\\\nP &Q &R \\\\ \\end{array}\\right| dS (第一型曲面积分)\n$$\n\n\n$$\\oint_L \\vec{F} = \\iint_\\Sigma rot\\vec{F} dS$$\n\n# 第二型曲面积分\n\n## 1、直接计算\n\n不要小看第1、2方法，建议最先用这两个方法看看\n\n$$\\iint_\\Sigma R(x,y,z)dxdy = \\pm \\iint_{D_{xy}}R[x,y,z(x,y)]dxdy$$\n\n其余同理，当$$\\Sigma$$与$$z$$轴成锐角取+，成钝角取-\n\n## 2、转换投影法\n\n如果$$\\Sigma$$上任意两点到$$xOy$$平面不重合\n\n$$\\iint_\\Sigma P(x,yz)dydz + Q(x,y,z)dzdx + R(x,y,z)dxdy = \\pm \\iint\\limits_{D{xy}}\\{p[x,y,z(x,y)](-\\frac{\\partial z}{\\partial x}) + Q[x,y,z(x,y)](-\\frac{\\partial z}{\\partial y}) + R[x,y,z(x,y)] \\}dxdy$$\n\n## 3、高斯公式\n\n$$\n\\oiint \\limits_\\Sigma Pdydz + Qdzdx + Rdxdy = \\iiint \\limits_\\Omega (\\frac{\\partial P}{\\partial x} + \\frac{\\partial Q}{\\partial y} + \\frac{\\partial R}{\\partial z})dv\n$$\n\n\n\n- 曲面封闭\n\n  > - 内部无奇点：直接高斯公式\n  > - 内部有奇点：用一个封闭曲面将奇点圈出来\n\n- 曲面不封闭\n\n  > - $$div \\boldsymbol{F} = 0$$：换个面积分\n  > - $$div \\boldsymbol{F} \\neq 0$$：补面使其封闭","slug":"多元函数积分学","published":1,"updated":"2022-10-12T08:34:38.050Z","_id":"cl8y8x2r200004wu5brerhets","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"二重积分\"><a href=\"#二重积分\" class=\"headerlink\" title=\"二重积分\"></a>二重积分</h1><h2 id=\"1、意义：\"><a href=\"#1、意义：\" class=\"headerlink\" title=\"1、意义：\"></a>1、意义：</h2><ul>\n<li>表示曲顶柱体的体积</li>\n<li>表示面密度为<script type=\"math/tex\">f(x,y)</script>的平面的面质量</li>\n</ul>\n<h2 id=\"2、计算\"><a href=\"#2、计算\" class=\"headerlink\" title=\"2、计算\"></a>2、计算</h2><h3 id=\"和式极限\"><a href=\"#和式极限\" class=\"headerlink\" title=\"和式极限\"></a>和式极限</h3><script type=\"math/tex; mode=display\">\\iint \\limits_{D} f(x,y) d\\sigma = \\lim \\limits_{n \\to \\infty} \\sum \\limits_{i=1}^{n} \\sum \\limits_{j=1}^n f(a + \\frac{b-a}{n} i, c + \\frac{d-c}{n}j) \\cdot \\frac{b-a}{n} \\cdot \\frac{d-c}{n}</script><h3 id=\"对称性计算\"><a href=\"#对称性计算\" class=\"headerlink\" title=\"对称性计算\"></a>对称性计算</h3><p>积分区域关于x对称，就看积分函数是否关于y对称</p>\n<h3 id=\"轮换对称性\"><a href=\"#轮换对称性\" class=\"headerlink\" title=\"轮换对称性\"></a>轮换对称性</h3><p>积分区域关于 <script type=\"math/tex\">y = x</script> 对称，就具有轮换对称性 <script type=\"math/tex\">I = \\iint \\limits_D f(x,y)dxdy = \\iint \\limits_D f(x,y) dx dy</script></p>\n<h3 id=\"二重积分比大小\"><a href=\"#二重积分比大小\" class=\"headerlink\" title=\"二重积分比大小\"></a>二重积分比大小</h3><ul>\n<li>对称性</li>\n<li>保号性</li>\n<li>画图</li>\n</ul>\n<h2 id=\"3、两大坐标系计算\"><a href=\"#3、两大坐标系计算\" class=\"headerlink\" title=\"3、两大坐标系计算\"></a>3、两大坐标系计算</h2><h3 id=\"（1）直角坐标系\"><a href=\"#（1）直角坐标系\" class=\"headerlink\" title=\"（1）直角坐标系\"></a>（1）直角坐标系</h3><h3 id=\"（2）-极坐标系\"><a href=\"#（2）-极坐标系\" class=\"headerlink\" title=\"（2） 极坐标系\"></a>（2） 极坐标系</h3><h1 id=\"第一型曲线积分\"><a href=\"#第一型曲线积分\" class=\"headerlink\" title=\"第一型曲线积分\"></a>第一型曲线积分</h1><h2 id=\"1、二重直接计算\"><a href=\"#1、二重直接计算\" class=\"headerlink\" title=\"1、二重直接计算\"></a>1、二重直接计算</h2><script type=\"math/tex; mode=display\">(1) \\int_L f(x,y) ds = \\int_a^b f[x, y(x)] \\sqrt{1+(y'_x)^2}dx\\\\ (2)\\int_L f(x,y) ds = \\int_{\\alpha}^{\\beta} f[x(t), y(t)] \\sqrt{(x_t')^2+(y_t')^2}dt \\\\ (3)\\int_L f(x,y) ds = \\int_{\\alpha}^{\\beta} f[r(\\theta)cos\\theta, r(\\theta)sin\\theta]\\sqrt{[r(\\theta)]^2 + [r'(\\theta)]^2}</script><h1 id=\"第一型曲面积分\"><a href=\"#第一型曲面积分\" class=\"headerlink\" title=\"第一型曲面积分\"></a>第一型曲面积分</h1><h2 id=\"1、直接计算\"><a href=\"#1、直接计算\" class=\"headerlink\" title=\"1、直接计算\"></a>1、直接计算</h2><script type=\"math/tex; mode=display\">\\iint \\limits_{\\Sigma} f(x,y,z) dS = \\iint \\limits_{D_{xy}}f[x,y,z(x,y)]\\sqrt{1+(z'_x)^2+(z_y')^2}dxdy</script><h1 id=\"第二型曲线积分\"><a href=\"#第二型曲线积分\" class=\"headerlink\" title=\"第二型曲线积分\"></a>第二型曲线积分</h1><h2 id=\"1、直接计算-1\"><a href=\"#1、直接计算-1\" class=\"headerlink\" title=\"1、直接计算\"></a>1、直接计算</h2><p>不要小看这个方法，建议最先用这个方法</p>\n<script type=\"math/tex; mode=display\">\\int_L P(x,y)dx + Q(x,y)dy = \\int_\\alpha^\\beta \\{P[x(t),y(t)]x'(t) + Q[x(t),y(t)]y'(t)\\}</script><script type=\"math/tex; mode=display\">\\int_\\Gamma Pdx + Qdy + Rdz = \\int_\\alpha^\\beta \\{ P[x(t),y(t),z(t)]x'(t) + Q[x(t),y(t),z(t)]y'(t) + R[x(t), y(t),z(t)]z'(t) \\} dt</script><h2 id=\"2、格林公式\"><a href=\"#2、格林公式\" class=\"headerlink\" title=\"2、格林公式\"></a>2、格林公式</h2><script type=\"math/tex; mode=display\">\\oint_L P(x,y)dx+Q(x,y)dy = \\iint\\limits_D(\\frac{\\partial Q}{\\partial x}-\\frac{\\partial P}{\\partial y})d \\sigma</script><ul>\n<li><p>曲线封闭</p>\n<blockquote>\n<ul>\n<li><p>内部有奇点</p>\n<blockquote>\n<p>在内部使用一个小圆圈消除它</p>\n</blockquote>\n</li>\n<li><p>内部无奇点</p>\n<blockquote>\n<p>直接使用格林公式</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>曲线不封闭</p>\n<blockquote>\n<ul>\n<li><p>如果积分与路径无关</p>\n<blockquote>\n<p>换条路经，见第3点</p>\n</blockquote>\n</li>\n<li><p>如果积分与路径有关</p>\n<blockquote>\n<p>补线，用格林公式（<strong>注意：</strong>补线所经之处，躲避<strong>奇点</strong>）</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"3、积分与路径无关\"><a href=\"#3、积分与路径无关\" class=\"headerlink\" title=\"3、积分与路径无关\"></a>3、积分与路径无关</h2><p>下面四个问题等价</p>\n<ul>\n<li><script type=\"math/tex\">\\int_{L_{AB}} P(x,y)dx + Q(x,y)dy</script>与路径无关</li>\n<li><script type=\"math/tex\">Pdx + Qdy</script>为某二元函数<script type=\"math/tex\">u(x,y)</script>的全微分</li>\n<li><script type=\"math/tex\">Pdx+Qdy=0</script>为全微分方程</li>\n<li><script type=\"math/tex\">P\\boldsymbol{i} + Q\\boldsymbol{j}</script>为某二元函数<script type=\"math/tex\">u(x,y)</script>的梯度</li>\n<li>沿D内任意分段光滑闭曲线L都有<script type=\"math/tex\">\\oint_L Pdx + Qdy = 0</script></li>\n<li><script type=\"math/tex\">\\frac{\\partial P}{\\partial y} \\equiv \\frac{\\partial Q}{\\partial x}</script>处处成立</li>\n</ul>\n<p>三重积分上路径无关</p>\n<ul>\n<li><script type=\"math/tex\">\\boldsymbol{rot F} = 0</script> 积分与路径无关</li>\n</ul>\n<h2 id=\"4、两类曲线积分联系\"><a href=\"#4、两类曲线积分联系\" class=\"headerlink\" title=\"4、两类曲线积分联系\"></a>4、两类曲线积分联系</h2><script type=\"math/tex; mode=display\">\\int_L P dx + Qdy = \\int_L(Pcos\\alpha + Qsin\\alpha)ds\\\\ (cos\\alpha , sin \\alpha) 为L在点(x,y)与L同向的切向量</script><h2 id=\"5、斯托克公式\"><a href=\"#5、斯托克公式\" class=\"headerlink\" title=\"5、斯托克公式\"></a>5、斯托克公式</h2><p>将空间第二型曲线积分化成第二型曲面积分或者第一型曲面积分</p>\n<script type=\"math/tex; mode=display\">\n\\oint\\limits_\\Gamma Pdx+Qdy+Rdz = \\\\ \\iint\\limits_\\Sigma \\left |\\begin{array}{ccc}\ndydz &dzdx   &dxdy \\\\\n\\frac{\\partial}{\\partial x} &\\frac{\\partial}{\\partial y} &\\frac{\\partial}{\\partial z}  \\\\\nP &Q &R \\\\ \\end{array}\\right| (第二型曲面积分)\\\\   \\iint \\limits_\\Sigma \\left |\\begin{array}{ccc}\ncos\\alpha &cos\\beta   &cos\\gamma \\\\\n\\frac{\\partial}{\\partial x} &\\frac{\\partial}{\\partial y} &\\frac{\\partial}{\\partial z}  \\\\\nP &Q &R \\\\ \\end{array}\\right| dS (第一型曲面积分)</script><script type=\"math/tex; mode=display\">\\oint_L \\vec{F} = \\iint_\\Sigma rot\\vec{F} dS</script><h1 id=\"第二型曲面积分\"><a href=\"#第二型曲面积分\" class=\"headerlink\" title=\"第二型曲面积分\"></a>第二型曲面积分</h1><h2 id=\"1、直接计算-2\"><a href=\"#1、直接计算-2\" class=\"headerlink\" title=\"1、直接计算\"></a>1、直接计算</h2><p>不要小看第1、2方法，建议最先用这两个方法看看</p>\n<script type=\"math/tex; mode=display\">\\iint_\\Sigma R(x,y,z)dxdy = \\pm \\iint_{D_{xy}}R[x,y,z(x,y)]dxdy</script><p>其余同理，当<script type=\"math/tex\">\\Sigma</script>与<script type=\"math/tex\">z</script>轴成锐角取+，成钝角取-</p>\n<h2 id=\"2、转换投影法\"><a href=\"#2、转换投影法\" class=\"headerlink\" title=\"2、转换投影法\"></a>2、转换投影法</h2><p>如果<script type=\"math/tex\">\\Sigma</script>上任意两点到<script type=\"math/tex\">xOy</script>平面不重合</p>\n<script type=\"math/tex; mode=display\">\\iint_\\Sigma P(x,yz)dydz + Q(x,y,z)dzdx + R(x,y,z)dxdy = \\pm \\iint\\limits_{D{xy}}\\{p[x,y,z(x,y)](-\\frac{\\partial z}{\\partial x}) + Q[x,y,z(x,y)](-\\frac{\\partial z}{\\partial y}) + R[x,y,z(x,y)] \\}dxdy</script><h2 id=\"3、高斯公式\"><a href=\"#3、高斯公式\" class=\"headerlink\" title=\"3、高斯公式\"></a>3、高斯公式</h2><script type=\"math/tex; mode=display\">\n\\oiint \\limits_\\Sigma Pdydz + Qdzdx + Rdxdy = \\iiint \\limits_\\Omega (\\frac{\\partial P}{\\partial x} + \\frac{\\partial Q}{\\partial y} + \\frac{\\partial R}{\\partial z})dv</script><ul>\n<li><p>曲面封闭</p>\n<blockquote>\n<ul>\n<li>内部无奇点：直接高斯公式</li>\n<li>内部有奇点：用一个封闭曲面将奇点圈出来</li>\n</ul>\n</blockquote>\n</li>\n<li><p>曲面不封闭</p>\n<blockquote>\n<ul>\n<li><script type=\"math/tex\">div \\boldsymbol{F} = 0</script>：换个面积分</li>\n<li><script type=\"math/tex\">div \\boldsymbol{F} \\neq 0</script>：补面使其封闭</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"二重积分\"><a href=\"#二重积分\" class=\"headerlink\" title=\"二重积分\"></a>二重积分</h1><h2 id=\"1、意义：\"><a href=\"#1、意义：\" class=\"headerlink\" title=\"1、意义：\"></a>1、意义：</h2><ul>\n<li>表示曲顶柱体的体积</li>\n<li>表示面密度为<script type=\"math/tex\">f(x,y)</script>的平面的面质量</li>\n</ul>\n<h2 id=\"2、计算\"><a href=\"#2、计算\" class=\"headerlink\" title=\"2、计算\"></a>2、计算</h2><h3 id=\"和式极限\"><a href=\"#和式极限\" class=\"headerlink\" title=\"和式极限\"></a>和式极限</h3><script type=\"math/tex; mode=display\">\\iint \\limits_{D} f(x,y) d\\sigma = \\lim \\limits_{n \\to \\infty} \\sum \\limits_{i=1}^{n} \\sum \\limits_{j=1}^n f(a + \\frac{b-a}{n} i, c + \\frac{d-c}{n}j) \\cdot \\frac{b-a}{n} \\cdot \\frac{d-c}{n}</script><h3 id=\"对称性计算\"><a href=\"#对称性计算\" class=\"headerlink\" title=\"对称性计算\"></a>对称性计算</h3><p>积分区域关于x对称，就看积分函数是否关于y对称</p>\n<h3 id=\"轮换对称性\"><a href=\"#轮换对称性\" class=\"headerlink\" title=\"轮换对称性\"></a>轮换对称性</h3><p>积分区域关于 <script type=\"math/tex\">y = x</script> 对称，就具有轮换对称性 <script type=\"math/tex\">I = \\iint \\limits_D f(x,y)dxdy = \\iint \\limits_D f(x,y) dx dy</script></p>\n<h3 id=\"二重积分比大小\"><a href=\"#二重积分比大小\" class=\"headerlink\" title=\"二重积分比大小\"></a>二重积分比大小</h3><ul>\n<li>对称性</li>\n<li>保号性</li>\n<li>画图</li>\n</ul>\n<h2 id=\"3、两大坐标系计算\"><a href=\"#3、两大坐标系计算\" class=\"headerlink\" title=\"3、两大坐标系计算\"></a>3、两大坐标系计算</h2><h3 id=\"（1）直角坐标系\"><a href=\"#（1）直角坐标系\" class=\"headerlink\" title=\"（1）直角坐标系\"></a>（1）直角坐标系</h3><h3 id=\"（2）-极坐标系\"><a href=\"#（2）-极坐标系\" class=\"headerlink\" title=\"（2） 极坐标系\"></a>（2） 极坐标系</h3><h1 id=\"第一型曲线积分\"><a href=\"#第一型曲线积分\" class=\"headerlink\" title=\"第一型曲线积分\"></a>第一型曲线积分</h1><h2 id=\"1、二重直接计算\"><a href=\"#1、二重直接计算\" class=\"headerlink\" title=\"1、二重直接计算\"></a>1、二重直接计算</h2><script type=\"math/tex; mode=display\">(1) \\int_L f(x,y) ds = \\int_a^b f[x, y(x)] \\sqrt{1+(y'_x)^2}dx\\\\ (2)\\int_L f(x,y) ds = \\int_{\\alpha}^{\\beta} f[x(t), y(t)] \\sqrt{(x_t')^2+(y_t')^2}dt \\\\ (3)\\int_L f(x,y) ds = \\int_{\\alpha}^{\\beta} f[r(\\theta)cos\\theta, r(\\theta)sin\\theta]\\sqrt{[r(\\theta)]^2 + [r'(\\theta)]^2}</script><h1 id=\"第一型曲面积分\"><a href=\"#第一型曲面积分\" class=\"headerlink\" title=\"第一型曲面积分\"></a>第一型曲面积分</h1><h2 id=\"1、直接计算\"><a href=\"#1、直接计算\" class=\"headerlink\" title=\"1、直接计算\"></a>1、直接计算</h2><script type=\"math/tex; mode=display\">\\iint \\limits_{\\Sigma} f(x,y,z) dS = \\iint \\limits_{D_{xy}}f[x,y,z(x,y)]\\sqrt{1+(z'_x)^2+(z_y')^2}dxdy</script><h1 id=\"第二型曲线积分\"><a href=\"#第二型曲线积分\" class=\"headerlink\" title=\"第二型曲线积分\"></a>第二型曲线积分</h1><h2 id=\"1、直接计算-1\"><a href=\"#1、直接计算-1\" class=\"headerlink\" title=\"1、直接计算\"></a>1、直接计算</h2><p>不要小看这个方法，建议最先用这个方法</p>\n<script type=\"math/tex; mode=display\">\\int_L P(x,y)dx + Q(x,y)dy = \\int_\\alpha^\\beta \\{P[x(t),y(t)]x'(t) + Q[x(t),y(t)]y'(t)\\}</script><script type=\"math/tex; mode=display\">\\int_\\Gamma Pdx + Qdy + Rdz = \\int_\\alpha^\\beta \\{ P[x(t),y(t),z(t)]x'(t) + Q[x(t),y(t),z(t)]y'(t) + R[x(t), y(t),z(t)]z'(t) \\} dt</script><h2 id=\"2、格林公式\"><a href=\"#2、格林公式\" class=\"headerlink\" title=\"2、格林公式\"></a>2、格林公式</h2><script type=\"math/tex; mode=display\">\\oint_L P(x,y)dx+Q(x,y)dy = \\iint\\limits_D(\\frac{\\partial Q}{\\partial x}-\\frac{\\partial P}{\\partial y})d \\sigma</script><ul>\n<li><p>曲线封闭</p>\n<blockquote>\n<ul>\n<li><p>内部有奇点</p>\n<blockquote>\n<p>在内部使用一个小圆圈消除它</p>\n</blockquote>\n</li>\n<li><p>内部无奇点</p>\n<blockquote>\n<p>直接使用格林公式</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>曲线不封闭</p>\n<blockquote>\n<ul>\n<li><p>如果积分与路径无关</p>\n<blockquote>\n<p>换条路经，见第3点</p>\n</blockquote>\n</li>\n<li><p>如果积分与路径有关</p>\n<blockquote>\n<p>补线，用格林公式（<strong>注意：</strong>补线所经之处，躲避<strong>奇点</strong>）</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"3、积分与路径无关\"><a href=\"#3、积分与路径无关\" class=\"headerlink\" title=\"3、积分与路径无关\"></a>3、积分与路径无关</h2><p>下面四个问题等价</p>\n<ul>\n<li><script type=\"math/tex\">\\int_{L_{AB}} P(x,y)dx + Q(x,y)dy</script>与路径无关</li>\n<li><script type=\"math/tex\">Pdx + Qdy</script>为某二元函数<script type=\"math/tex\">u(x,y)</script>的全微分</li>\n<li><script type=\"math/tex\">Pdx+Qdy=0</script>为全微分方程</li>\n<li><script type=\"math/tex\">P\\boldsymbol{i} + Q\\boldsymbol{j}</script>为某二元函数<script type=\"math/tex\">u(x,y)</script>的梯度</li>\n<li>沿D内任意分段光滑闭曲线L都有<script type=\"math/tex\">\\oint_L Pdx + Qdy = 0</script></li>\n<li><script type=\"math/tex\">\\frac{\\partial P}{\\partial y} \\equiv \\frac{\\partial Q}{\\partial x}</script>处处成立</li>\n</ul>\n<p>三重积分上路径无关</p>\n<ul>\n<li><script type=\"math/tex\">\\boldsymbol{rot F} = 0</script> 积分与路径无关</li>\n</ul>\n<h2 id=\"4、两类曲线积分联系\"><a href=\"#4、两类曲线积分联系\" class=\"headerlink\" title=\"4、两类曲线积分联系\"></a>4、两类曲线积分联系</h2><script type=\"math/tex; mode=display\">\\int_L P dx + Qdy = \\int_L(Pcos\\alpha + Qsin\\alpha)ds\\\\ (cos\\alpha , sin \\alpha) 为L在点(x,y)与L同向的切向量</script><h2 id=\"5、斯托克公式\"><a href=\"#5、斯托克公式\" class=\"headerlink\" title=\"5、斯托克公式\"></a>5、斯托克公式</h2><p>将空间第二型曲线积分化成第二型曲面积分或者第一型曲面积分</p>\n<script type=\"math/tex; mode=display\">\n\\oint\\limits_\\Gamma Pdx+Qdy+Rdz = \\\\ \\iint\\limits_\\Sigma \\left |\\begin{array}{ccc}\ndydz &dzdx   &dxdy \\\\\n\\frac{\\partial}{\\partial x} &\\frac{\\partial}{\\partial y} &\\frac{\\partial}{\\partial z}  \\\\\nP &Q &R \\\\ \\end{array}\\right| (第二型曲面积分)\\\\   \\iint \\limits_\\Sigma \\left |\\begin{array}{ccc}\ncos\\alpha &cos\\beta   &cos\\gamma \\\\\n\\frac{\\partial}{\\partial x} &\\frac{\\partial}{\\partial y} &\\frac{\\partial}{\\partial z}  \\\\\nP &Q &R \\\\ \\end{array}\\right| dS (第一型曲面积分)</script><script type=\"math/tex; mode=display\">\\oint_L \\vec{F} = \\iint_\\Sigma rot\\vec{F} dS</script><h1 id=\"第二型曲面积分\"><a href=\"#第二型曲面积分\" class=\"headerlink\" title=\"第二型曲面积分\"></a>第二型曲面积分</h1><h2 id=\"1、直接计算-2\"><a href=\"#1、直接计算-2\" class=\"headerlink\" title=\"1、直接计算\"></a>1、直接计算</h2><p>不要小看第1、2方法，建议最先用这两个方法看看</p>\n<script type=\"math/tex; mode=display\">\\iint_\\Sigma R(x,y,z)dxdy = \\pm \\iint_{D_{xy}}R[x,y,z(x,y)]dxdy</script><p>其余同理，当<script type=\"math/tex\">\\Sigma</script>与<script type=\"math/tex\">z</script>轴成锐角取+，成钝角取-</p>\n<h2 id=\"2、转换投影法\"><a href=\"#2、转换投影法\" class=\"headerlink\" title=\"2、转换投影法\"></a>2、转换投影法</h2><p>如果<script type=\"math/tex\">\\Sigma</script>上任意两点到<script type=\"math/tex\">xOy</script>平面不重合</p>\n<script type=\"math/tex; mode=display\">\\iint_\\Sigma P(x,yz)dydz + Q(x,y,z)dzdx + R(x,y,z)dxdy = \\pm \\iint\\limits_{D{xy}}\\{p[x,y,z(x,y)](-\\frac{\\partial z}{\\partial x}) + Q[x,y,z(x,y)](-\\frac{\\partial z}{\\partial y}) + R[x,y,z(x,y)] \\}dxdy</script><h2 id=\"3、高斯公式\"><a href=\"#3、高斯公式\" class=\"headerlink\" title=\"3、高斯公式\"></a>3、高斯公式</h2><script type=\"math/tex; mode=display\">\n\\oiint \\limits_\\Sigma Pdydz + Qdzdx + Rdxdy = \\iiint \\limits_\\Omega (\\frac{\\partial P}{\\partial x} + \\frac{\\partial Q}{\\partial y} + \\frac{\\partial R}{\\partial z})dv</script><ul>\n<li><p>曲面封闭</p>\n<blockquote>\n<ul>\n<li>内部无奇点：直接高斯公式</li>\n<li>内部有奇点：用一个封闭曲面将奇点圈出来</li>\n</ul>\n</blockquote>\n</li>\n<li><p>曲面不封闭</p>\n<blockquote>\n<ul>\n<li><script type=\"math/tex\">div \\boldsymbol{F} = 0</script>：换个面积分</li>\n<li><script type=\"math/tex\">div \\boldsymbol{F} \\neq 0</script>：补面使其封闭</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n"},{"title":"高等数学级数","excerpt":"考研数学中的级数的基础知识，也可以说是做题知识","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img20220904/20221009155709.png","mathjax":true,"date":"2022-10-08T07:15:08.000Z","_content":"\n# 一、数项级数\n\n## 1、性质\n\n- $$\\sum\\limits_{n=1}^\\infty u_n收敛 \\Leftrightarrow \\lim\\limits_{n\\to\\infty}S_n存在$$（充要条件）\n- $$\\sum\\limits_{n=1}^\\infty u_n收敛 \\Rightarrow \\lim\\limits_{n\\to\\infty}u_n=0$$（必要条件）\n- 收敛，可以不看前有限项，因为前有限项是常数\n\n## 2、正项级数（每一项都是正数）\n\n- $$S_n有界 \\Leftrightarrow \\sum\\limits_{n=1}^\\infty u_n$$\n\n- 比较判别法：$$对于n \\geq M时，有u_n \\leq v_n$$，\n\n  > - $$\\sum\\limits_{n=1}^\\infty v_n 收敛 \\Rightarrow \\sum\\limits_{n=1}^\\infty u_n收敛$$\n  > - $$\\sum\\limits_{n=1}^\\infty u_n 发散 \\Rightarrow \\sum\\limits_{n=1}^\\infty v_n 发散$$\n\n- 极限比较判别法：$$a = \\lim\\limits_{n \\to \\infty} \\frac{u_n}{v_n}$$\n\n  > - $$ a = 0$$：$$u_n \\leq v_n$$（剩下的看上一点）\n  > - $$a = \\infty$$：$$u_n \\geq v_n$$（剩下的看上一点）\n  > - $$a = A\\neq 0$$：$$u_n,v_n同敛散$$\n  >\n  > 那么，如何选取另一个来比较呢？\n  >\n  > - 等比级数：$$\\sum\\limits_{n=1}^\\infty aq^{n-1} \\begin{cases} = \\frac{a}{1-q},& \\left|  q \\right| < 1 \\\\ 发散, & \\left| q \\right| \\geq 1 \\end{cases}$$\n  > - `p`级数：$$\\sum\\limits_{n=1}^{\\infty} \\frac{1}{n^p} \\begin{cases} 收敛, & p>1\\\\发散,&p\\leq1 \\end{cases}$$\n  > - 广义`p`级数：$$\\sum\\limits_{n=2}^{\\infty} \\frac{1}{n(\\ln n)^p} \\begin{cases}收敛,& p>1\\\\发散,& p\\leq1\\end{cases}$$\n  > - 交错`p`级数：$$\\sum\\limits_{n=1}^\\infty (-1)^{n-1}\\frac{1}{n^p} \\begin{cases}绝对收敛，& p > 1 \\\\ 条件收敛，& 0<p\\leq1 \\end{cases}$$\n\n  **下面开始，都是跟自己比较：**\n\n- 比值判别法（达朗贝尔）\n\n  > $$\\lim\\limits_{n \\to \\infty}\\frac{u^{n+1}}{u^n} = \\rho \\begin{cases} <1,&收敛\\\\>1,&发散\\\\=1,&失效 \\end{cases}$$\n\n- 根值判别法（柯西）\n\n  > $$\\lim\\limits_{n\\to\\infty}\\sqrt[n]{u_n} = \\rho \\begin{cases} <1,&收敛\\\\>1,&发散\\\\=1,&失效 \\end{cases}$$\n\n- 积分判别法（柯西）\n\n  > $$f(x)\\geq 0,连续,x\\in\\left[1,+\\infty \\right], u_n = f(n)$$\n  >\n  > $$\\sum\\limits_{n=1}^\\infty u_n 与 \\int_1^{+\\infty}f(x)dx敛散性相同$$\n  >\n  > - 给出反常积分的判敛（要求只有一个奇点）\n  >\n  >   > - 口诀：大的大、小的小、才收敛\n  >   >\n  >   >   > 大（积分区间是$$\\infty$$）的大（$$p>1$$）\n  >   >   >\n  >   >   > 小（积分区间是有限）的小（$$0<p<1$$）\n  >   >\n  >   > - 数学表述\n  >   >\n  >   >   > $$\\int_a^b \\frac{1}{(x-a)^p}dx\\begin{cases}收敛,& p<1\\\\ 发散,&p\\geq1 \\end{cases}$$\n  >   >   >\n  >   >   > $$\\int_a^{+\\infty} \\frac{1}{x^p} dx \\begin{cases}收敛,&p>1\\\\ 发散,&p\\leq 1 \\end{cases}$$\n\n## 交错级数\n\n$$\\sum\\limits_{n=1}^\\infty (-1)^{n-1}u_n, u_n>0$$\n\n- 莱布尼茨判别法：$$\\begin{cases} \\lim\\limits_{n\\to\\infty}u_n=0,\\\\ u_n\\geq u_{n+1}(u_n单调不增) \\end{cases} \\Rightarrow 级数收敛$$\n\n## 任意级数\n\n$$\\sum\\limits_{n=1}^\\infty  u_n , u_n无符号限制$$\n\n- $$\\sum\\limits_{n=1}^\\infty \\left| u_n \\right|收敛\\Rightarrow\\sum\\limits_{n=1}^\\infty u_n 绝对收敛$$\n- $$\\sum\\limits_{n=1}^\\infty \\left| u_n \\right|发散，\\sum\\limits_{n=1}^\\infty u_n收敛 \\Rightarrow \\sum\\limits_{n=1}^\\infty  u_n 条件收敛$$\n\n# 二、幂级数\n\n## 1、性质\n\n### 幂级数定义\n\n$$\\sum\\limits_{n=1}^\\infty u_n(x) = \\sum\\limits_{n=1}^\\infty a_n(x-x_0)^n = a_0 + a_1(x-x_0)^1 + a_2(x-x_0)^2 + ... + a_n(x-x_n)^n + ...$$\n\n### 收敛域与收敛点\n\n若$$x\\in I$$，有$$\\sum\\limits_{n=1}^\\infty u_n(x_0)$$收敛，则$$x_0$$为其收敛点；如果发散，就称为发散点。\n\n收敛点的集合称为收敛域\n\n### 收敛半径，收敛区间和收敛域\n\n- 收敛半径：$$R$$\n- 收敛区间：$$-R<(x-x_0) < R \\Rightarrow x_0-R < x < x_0 + R$$\n- 收敛域：考虑端点是否能够取得\n\n## 2、具体问题\n\n记录一个知识点，级数缺项：有的项其系数为0（如奇数项级数或者偶数项级）。\n\n- 不缺项幂级数$$\\sum\\limits_{n=0}^\\infty a_n(x-x_0)^n$$：\n\n  > $$\\lim\\limits_{n\\to\\infty} \\left|\\frac{a_{n+1}}{a_n} \\right| = \\rho$$\n  >\n  > $$\\rho = \\frac{1}{\\rho};\\quad\\rho = 0,R= +\\infty;\\quad \\rho=+\\infty,R = 0$$\n\n- 缺项幂级数（比如只有奇数项或者偶数项，直接用这个方法即可）：\n\n  > - 令 $$\\lim\\limits_{n\\to\\infty} \\left|\\frac{u_{n+1}(x)}{u_n(x)}\\right|(或\\lim\\limits_{n\\to\\infty} \\sqrt[n]{\\left| u_n(x) \\right|}) < 1$$，求出收敛区间$$x\\in(a,b)$$\n  > - 具体讨论端点$$a,b$$的值，确定收敛域\n\n## 3、抽象问题\n\n假如没有告诉你的级数的具体形式，而是给你抽象的，那就用这个方法。\n\n- 阿贝尔定理，对于级数$$\\sum\\limits_{n=0}^{\\infty} a_n(x-x_0)^n$$，设收敛半径为$$R$$，在点$$x_1$$处有\n\n  > - 收敛，$$|x_1-x_0|\\leq R$$\n  > - 发散，$$|x_1-x_0|\\geq R$$\n  > - **条件收敛**，$$R = |x_1-x_0|$$，这一条非常重要，另外两条不能确定R，这条可以\n\n- 收敛半径不变化\n\n  > - 对级数提出或乘以$$(x-x_0)^k$$，或者平移。收敛半径不变化\n  > - 求导，收敛半径不变，收敛域可能缩小\n  > - 积分，收敛半径不变，收敛域可能扩大\n\n## 4、常用公式\n\n至于如何求届收敛域呢？首先就是**第2点中的缺项幂级数**，然后就是根据**定义域**来。双重确定。\n\n下面记住几个基本公式，并且推导出其扩展公式，推导的时候，抓住**收敛半径**不变，确定**端点**（用定义域）的进而确定收敛域范围。\n\n- $$\\ln(1+x) = \\sum\\limits_{n=1}^\\infty (-1)^{n-1}\\cdot\\frac{x^n}{n},\\quad x\\in(-1,1]$$\n\n  > - $$\\ln(1-x) = -\\sum\\limits_{n=1}^\\infty \\frac{x^n}{n},\\quad x\\in[-1,1)$$\n  > - $$\\frac{1}{1+x} = \\sum\\limits_{n=0}^\\infty (-1)^{n}\\cdot x^n,\\quad x\\in(-1,1]$$\n  > - $$\\frac{1}{1-x} = \\sum\\limits_{n=0}^\\infty  x^n,\\quad x\\in[-1,1)$$，**重点**\n\n- $$\\arctan x = \\sum\\limits_{n=0}^\\infty (-1)^n \\cdot\\frac{x^{2n+1}}{2n+1},\\quad x\\in[-1,1]$$\n\n- $$e^x = \\sum\\limits_{n=0}^\\infty \\frac{x^n}{n!},\\quad x\\in(-\\infty, +\\infty)$$\n\n  > $$e^{-x} = \\sum\\limits_{n=0}^\\infty (-1)^n\\frac{x^n}{n!},\\quad x\\in(-\\infty, +\\infty)$$\n  >\n  > $$\\frac{e^x+e^{-x}}{2} = \\sum\\limits_{n=0}^\\infty \\frac{x^{2n}}{(2n)!},\\quad x\\in(-\\infty, +\\infty)$$\n  >\n  > $$\\frac{e^x-e^{-x}}{2} = \\sum\\limits_{n=0}^\\infty \\frac{x^{2n+1}}{(2n+1)!},\\quad x\\in(-\\infty, +\\infty)$$\n\n- $$\\sin x = \\sum\\limits_{n=0}^\\infty (-1)^n\\cdot \\frac{x^(2n+1)}{(2n+1)!},\\quad x\\in(-\\infty,+\\infty)$$\n\n  > $$\\cos x = \\sum\\limits_{n=0}^\\infty (-1)^n\\cdot \\frac{x^(2n)}{(2n)!},\\quad x\\in(-\\infty,+\\infty)$$\n\n# 三、傅里叶级数\n\n## 1、迪利克雷收敛定律\n\n$$f(x)$$的傅里叶级数在$$[-l,l]$$上处处收敛，其和函数为$$S(x)$$\n\n$$S(x) = \\begin{cases} f(x),&x为连续点\\\\ \\frac{f(x-0)+f(x+0)}{2},&x为间断点\\\\\\frac{f(-l+0)+f(l-0)}{2},&x=\\pm l \\end{cases}$$\n\n## 2、傅里叶公式\n\n### 设**周期**为$$2l$$\n\n$$f(x)\\sim \\frac{a_0}{2} + \\sum\\limits_{n=1}^\\infty \\left( a_n\\cos \\frac{n\\pi x}{l} + b_n \\sin \\frac{n\\pi x}{l} \\right) $$\n\n$$\\begin{cases}a_0 = \\frac{1}{l}\\int_{-l}^l f(x) dx \\\\ a_n = \\frac{1}{l}\\int_{-l}^l  f(x) \\cos \\frac{n\\pi x}{l} dx,&n=1,2,... \\\\ b_n = \\frac{1}{l}\\int_{-l}^l  f(x) \\sin \\frac{n\\pi x}{l} dx,&n=0,1,...  \\end{cases}$$\n\n- 如果$$f(x)$$为奇函数，展开式为正弦函数，只有$$b$$\n- 如果$$f(x)$$为偶函数，展开式为余弦函数，只有$$a$$\n\n### 如果只要$$[0,l]$$有定义\n\n做奇延拓或者偶延拓，即定义另一边的函数，用原函数来定义。","source":"_posts/高等数学级数.md","raw":"---\ntitle: 高等数学级数\ntags: \n- 数学\n- 级数\n- 傅里叶级数\n- 考研\nexcerpt: 考研数学中的级数的基础知识，也可以说是做题知识\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img20220904/20221009155709.png\ncategories:\n- 考研数学\nmathjax: true\ndate: 2022-10-08 15:15:08\n---\n\n# 一、数项级数\n\n## 1、性质\n\n- $$\\sum\\limits_{n=1}^\\infty u_n收敛 \\Leftrightarrow \\lim\\limits_{n\\to\\infty}S_n存在$$（充要条件）\n- $$\\sum\\limits_{n=1}^\\infty u_n收敛 \\Rightarrow \\lim\\limits_{n\\to\\infty}u_n=0$$（必要条件）\n- 收敛，可以不看前有限项，因为前有限项是常数\n\n## 2、正项级数（每一项都是正数）\n\n- $$S_n有界 \\Leftrightarrow \\sum\\limits_{n=1}^\\infty u_n$$\n\n- 比较判别法：$$对于n \\geq M时，有u_n \\leq v_n$$，\n\n  > - $$\\sum\\limits_{n=1}^\\infty v_n 收敛 \\Rightarrow \\sum\\limits_{n=1}^\\infty u_n收敛$$\n  > - $$\\sum\\limits_{n=1}^\\infty u_n 发散 \\Rightarrow \\sum\\limits_{n=1}^\\infty v_n 发散$$\n\n- 极限比较判别法：$$a = \\lim\\limits_{n \\to \\infty} \\frac{u_n}{v_n}$$\n\n  > - $$ a = 0$$：$$u_n \\leq v_n$$（剩下的看上一点）\n  > - $$a = \\infty$$：$$u_n \\geq v_n$$（剩下的看上一点）\n  > - $$a = A\\neq 0$$：$$u_n,v_n同敛散$$\n  >\n  > 那么，如何选取另一个来比较呢？\n  >\n  > - 等比级数：$$\\sum\\limits_{n=1}^\\infty aq^{n-1} \\begin{cases} = \\frac{a}{1-q},& \\left|  q \\right| < 1 \\\\ 发散, & \\left| q \\right| \\geq 1 \\end{cases}$$\n  > - `p`级数：$$\\sum\\limits_{n=1}^{\\infty} \\frac{1}{n^p} \\begin{cases} 收敛, & p>1\\\\发散,&p\\leq1 \\end{cases}$$\n  > - 广义`p`级数：$$\\sum\\limits_{n=2}^{\\infty} \\frac{1}{n(\\ln n)^p} \\begin{cases}收敛,& p>1\\\\发散,& p\\leq1\\end{cases}$$\n  > - 交错`p`级数：$$\\sum\\limits_{n=1}^\\infty (-1)^{n-1}\\frac{1}{n^p} \\begin{cases}绝对收敛，& p > 1 \\\\ 条件收敛，& 0<p\\leq1 \\end{cases}$$\n\n  **下面开始，都是跟自己比较：**\n\n- 比值判别法（达朗贝尔）\n\n  > $$\\lim\\limits_{n \\to \\infty}\\frac{u^{n+1}}{u^n} = \\rho \\begin{cases} <1,&收敛\\\\>1,&发散\\\\=1,&失效 \\end{cases}$$\n\n- 根值判别法（柯西）\n\n  > $$\\lim\\limits_{n\\to\\infty}\\sqrt[n]{u_n} = \\rho \\begin{cases} <1,&收敛\\\\>1,&发散\\\\=1,&失效 \\end{cases}$$\n\n- 积分判别法（柯西）\n\n  > $$f(x)\\geq 0,连续,x\\in\\left[1,+\\infty \\right], u_n = f(n)$$\n  >\n  > $$\\sum\\limits_{n=1}^\\infty u_n 与 \\int_1^{+\\infty}f(x)dx敛散性相同$$\n  >\n  > - 给出反常积分的判敛（要求只有一个奇点）\n  >\n  >   > - 口诀：大的大、小的小、才收敛\n  >   >\n  >   >   > 大（积分区间是$$\\infty$$）的大（$$p>1$$）\n  >   >   >\n  >   >   > 小（积分区间是有限）的小（$$0<p<1$$）\n  >   >\n  >   > - 数学表述\n  >   >\n  >   >   > $$\\int_a^b \\frac{1}{(x-a)^p}dx\\begin{cases}收敛,& p<1\\\\ 发散,&p\\geq1 \\end{cases}$$\n  >   >   >\n  >   >   > $$\\int_a^{+\\infty} \\frac{1}{x^p} dx \\begin{cases}收敛,&p>1\\\\ 发散,&p\\leq 1 \\end{cases}$$\n\n## 交错级数\n\n$$\\sum\\limits_{n=1}^\\infty (-1)^{n-1}u_n, u_n>0$$\n\n- 莱布尼茨判别法：$$\\begin{cases} \\lim\\limits_{n\\to\\infty}u_n=0,\\\\ u_n\\geq u_{n+1}(u_n单调不增) \\end{cases} \\Rightarrow 级数收敛$$\n\n## 任意级数\n\n$$\\sum\\limits_{n=1}^\\infty  u_n , u_n无符号限制$$\n\n- $$\\sum\\limits_{n=1}^\\infty \\left| u_n \\right|收敛\\Rightarrow\\sum\\limits_{n=1}^\\infty u_n 绝对收敛$$\n- $$\\sum\\limits_{n=1}^\\infty \\left| u_n \\right|发散，\\sum\\limits_{n=1}^\\infty u_n收敛 \\Rightarrow \\sum\\limits_{n=1}^\\infty  u_n 条件收敛$$\n\n# 二、幂级数\n\n## 1、性质\n\n### 幂级数定义\n\n$$\\sum\\limits_{n=1}^\\infty u_n(x) = \\sum\\limits_{n=1}^\\infty a_n(x-x_0)^n = a_0 + a_1(x-x_0)^1 + a_2(x-x_0)^2 + ... + a_n(x-x_n)^n + ...$$\n\n### 收敛域与收敛点\n\n若$$x\\in I$$，有$$\\sum\\limits_{n=1}^\\infty u_n(x_0)$$收敛，则$$x_0$$为其收敛点；如果发散，就称为发散点。\n\n收敛点的集合称为收敛域\n\n### 收敛半径，收敛区间和收敛域\n\n- 收敛半径：$$R$$\n- 收敛区间：$$-R<(x-x_0) < R \\Rightarrow x_0-R < x < x_0 + R$$\n- 收敛域：考虑端点是否能够取得\n\n## 2、具体问题\n\n记录一个知识点，级数缺项：有的项其系数为0（如奇数项级数或者偶数项级）。\n\n- 不缺项幂级数$$\\sum\\limits_{n=0}^\\infty a_n(x-x_0)^n$$：\n\n  > $$\\lim\\limits_{n\\to\\infty} \\left|\\frac{a_{n+1}}{a_n} \\right| = \\rho$$\n  >\n  > $$\\rho = \\frac{1}{\\rho};\\quad\\rho = 0,R= +\\infty;\\quad \\rho=+\\infty,R = 0$$\n\n- 缺项幂级数（比如只有奇数项或者偶数项，直接用这个方法即可）：\n\n  > - 令 $$\\lim\\limits_{n\\to\\infty} \\left|\\frac{u_{n+1}(x)}{u_n(x)}\\right|(或\\lim\\limits_{n\\to\\infty} \\sqrt[n]{\\left| u_n(x) \\right|}) < 1$$，求出收敛区间$$x\\in(a,b)$$\n  > - 具体讨论端点$$a,b$$的值，确定收敛域\n\n## 3、抽象问题\n\n假如没有告诉你的级数的具体形式，而是给你抽象的，那就用这个方法。\n\n- 阿贝尔定理，对于级数$$\\sum\\limits_{n=0}^{\\infty} a_n(x-x_0)^n$$，设收敛半径为$$R$$，在点$$x_1$$处有\n\n  > - 收敛，$$|x_1-x_0|\\leq R$$\n  > - 发散，$$|x_1-x_0|\\geq R$$\n  > - **条件收敛**，$$R = |x_1-x_0|$$，这一条非常重要，另外两条不能确定R，这条可以\n\n- 收敛半径不变化\n\n  > - 对级数提出或乘以$$(x-x_0)^k$$，或者平移。收敛半径不变化\n  > - 求导，收敛半径不变，收敛域可能缩小\n  > - 积分，收敛半径不变，收敛域可能扩大\n\n## 4、常用公式\n\n至于如何求届收敛域呢？首先就是**第2点中的缺项幂级数**，然后就是根据**定义域**来。双重确定。\n\n下面记住几个基本公式，并且推导出其扩展公式，推导的时候，抓住**收敛半径**不变，确定**端点**（用定义域）的进而确定收敛域范围。\n\n- $$\\ln(1+x) = \\sum\\limits_{n=1}^\\infty (-1)^{n-1}\\cdot\\frac{x^n}{n},\\quad x\\in(-1,1]$$\n\n  > - $$\\ln(1-x) = -\\sum\\limits_{n=1}^\\infty \\frac{x^n}{n},\\quad x\\in[-1,1)$$\n  > - $$\\frac{1}{1+x} = \\sum\\limits_{n=0}^\\infty (-1)^{n}\\cdot x^n,\\quad x\\in(-1,1]$$\n  > - $$\\frac{1}{1-x} = \\sum\\limits_{n=0}^\\infty  x^n,\\quad x\\in[-1,1)$$，**重点**\n\n- $$\\arctan x = \\sum\\limits_{n=0}^\\infty (-1)^n \\cdot\\frac{x^{2n+1}}{2n+1},\\quad x\\in[-1,1]$$\n\n- $$e^x = \\sum\\limits_{n=0}^\\infty \\frac{x^n}{n!},\\quad x\\in(-\\infty, +\\infty)$$\n\n  > $$e^{-x} = \\sum\\limits_{n=0}^\\infty (-1)^n\\frac{x^n}{n!},\\quad x\\in(-\\infty, +\\infty)$$\n  >\n  > $$\\frac{e^x+e^{-x}}{2} = \\sum\\limits_{n=0}^\\infty \\frac{x^{2n}}{(2n)!},\\quad x\\in(-\\infty, +\\infty)$$\n  >\n  > $$\\frac{e^x-e^{-x}}{2} = \\sum\\limits_{n=0}^\\infty \\frac{x^{2n+1}}{(2n+1)!},\\quad x\\in(-\\infty, +\\infty)$$\n\n- $$\\sin x = \\sum\\limits_{n=0}^\\infty (-1)^n\\cdot \\frac{x^(2n+1)}{(2n+1)!},\\quad x\\in(-\\infty,+\\infty)$$\n\n  > $$\\cos x = \\sum\\limits_{n=0}^\\infty (-1)^n\\cdot \\frac{x^(2n)}{(2n)!},\\quad x\\in(-\\infty,+\\infty)$$\n\n# 三、傅里叶级数\n\n## 1、迪利克雷收敛定律\n\n$$f(x)$$的傅里叶级数在$$[-l,l]$$上处处收敛，其和函数为$$S(x)$$\n\n$$S(x) = \\begin{cases} f(x),&x为连续点\\\\ \\frac{f(x-0)+f(x+0)}{2},&x为间断点\\\\\\frac{f(-l+0)+f(l-0)}{2},&x=\\pm l \\end{cases}$$\n\n## 2、傅里叶公式\n\n### 设**周期**为$$2l$$\n\n$$f(x)\\sim \\frac{a_0}{2} + \\sum\\limits_{n=1}^\\infty \\left( a_n\\cos \\frac{n\\pi x}{l} + b_n \\sin \\frac{n\\pi x}{l} \\right) $$\n\n$$\\begin{cases}a_0 = \\frac{1}{l}\\int_{-l}^l f(x) dx \\\\ a_n = \\frac{1}{l}\\int_{-l}^l  f(x) \\cos \\frac{n\\pi x}{l} dx,&n=1,2,... \\\\ b_n = \\frac{1}{l}\\int_{-l}^l  f(x) \\sin \\frac{n\\pi x}{l} dx,&n=0,1,...  \\end{cases}$$\n\n- 如果$$f(x)$$为奇函数，展开式为正弦函数，只有$$b$$\n- 如果$$f(x)$$为偶函数，展开式为余弦函数，只有$$a$$\n\n### 如果只要$$[0,l]$$有定义\n\n做奇延拓或者偶延拓，即定义另一边的函数，用原函数来定义。","slug":"高等数学级数","published":1,"updated":"2022-10-12T12:17:49.331Z","_id":"cl91di1160000o8u59d8wf6r9","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一、数项级数\"><a href=\"#一、数项级数\" class=\"headerlink\" title=\"一、数项级数\"></a>一、数项级数</h1><h2 id=\"1、性质\"><a href=\"#1、性质\" class=\"headerlink\" title=\"1、性质\"></a>1、性质</h2><ul>\n<li><script type=\"math/tex\">\\sum\\limits_{n=1}^\\infty u_n收敛 \\Leftrightarrow \\lim\\limits_{n\\to\\infty}S_n存在</script>（充要条件）</li>\n<li><script type=\"math/tex\">\\sum\\limits_{n=1}^\\infty u_n收敛 \\Rightarrow \\lim\\limits_{n\\to\\infty}u_n=0</script>（必要条件）</li>\n<li>收敛，可以不看前有限项，因为前有限项是常数</li>\n</ul>\n<h2 id=\"2、正项级数（每一项都是正数）\"><a href=\"#2、正项级数（每一项都是正数）\" class=\"headerlink\" title=\"2、正项级数（每一项都是正数）\"></a>2、正项级数（每一项都是正数）</h2><ul>\n<li><script type=\"math/tex; mode=display\">S_n有界 \\Leftrightarrow \\sum\\limits_{n=1}^\\infty u_n</script></li>\n<li><p>比较判别法：<script type=\"math/tex\">对于n \\geq M时，有u_n \\leq v_n</script>，</p>\n<blockquote>\n<ul>\n<li><script type=\"math/tex; mode=display\">\\sum\\limits_{n=1}^\\infty v_n 收敛 \\Rightarrow \\sum\\limits_{n=1}^\\infty u_n收敛</script></li>\n<li><script type=\"math/tex; mode=display\">\\sum\\limits_{n=1}^\\infty u_n 发散 \\Rightarrow \\sum\\limits_{n=1}^\\infty v_n 发散</script></li>\n</ul>\n</blockquote>\n</li>\n<li><p>极限比较判别法：<script type=\"math/tex\">a = \\lim\\limits_{n \\to \\infty} \\frac{u_n}{v_n}</script></p>\n<blockquote>\n<ul>\n<li><script type=\"math/tex\">a = 0</script>：<script type=\"math/tex\">u_n \\leq v_n</script>（剩下的看上一点）</li>\n<li><script type=\"math/tex\">a = \\infty</script>：<script type=\"math/tex\">u_n \\geq v_n</script>（剩下的看上一点）</li>\n<li><script type=\"math/tex; mode=display\">a = A\\neq 0$$：$$u_n,v_n同敛散</script></li>\n</ul>\n<p>那么，如何选取另一个来比较呢？</p>\n<ul>\n<li>等比级数：<script type=\"math/tex\">\\sum\\limits_{n=1}^\\infty aq^{n-1} \\begin{cases} = \\frac{a}{1-q},& \\left|  q \\right| < 1 \\\\ 发散, & \\left| q \\right| \\geq 1 \\end{cases}</script></li>\n<li><code>p</code>级数：<script type=\"math/tex\">\\sum\\limits_{n=1}^{\\infty} \\frac{1}{n^p} \\begin{cases} 收敛, & p>1\\\\发散,&p\\leq1 \\end{cases}</script></li>\n<li>广义<code>p</code>级数：<script type=\"math/tex\">\\sum\\limits_{n=2}^{\\infty} \\frac{1}{n(\\ln n)^p} \\begin{cases}收敛,& p>1\\\\发散,& p\\leq1\\end{cases}</script></li>\n<li>交错<code>p</code>级数：<script type=\"math/tex\">\\sum\\limits_{n=1}^\\infty (-1)^{n-1}\\frac{1}{n^p} \\begin{cases}绝对收敛，& p > 1 \\\\ 条件收敛，& 0<p\\leq1 \\end{cases}</script></li>\n</ul>\n</blockquote>\n<p><strong>下面开始，都是跟自己比较：</strong></p>\n</li>\n<li><p>比值判别法（达朗贝尔）</p>\n<blockquote>\n<script type=\"math/tex; mode=display\">\\lim\\limits_{n \\to \\infty}\\frac{u^{n+1}}{u^n} = \\rho \\begin{cases} <1,&收敛\\\\>1,&发散\\\\=1,&失效 \\end{cases}</script></blockquote>\n</li>\n<li><p>根值判别法（柯西）</p>\n<blockquote>\n<script type=\"math/tex; mode=display\">\\lim\\limits_{n\\to\\infty}\\sqrt[n]{u_n} = \\rho \\begin{cases} <1,&收敛\\\\>1,&发散\\\\=1,&失效 \\end{cases}</script></blockquote>\n</li>\n<li><p>积分判别法（柯西）</p>\n<blockquote>\n<script type=\"math/tex; mode=display\">f(x)\\geq 0,连续,x\\in\\left[1,+\\infty \\right], u_n = f(n)</script><script type=\"math/tex; mode=display\">\\sum\\limits_{n=1}^\\infty u_n 与 \\int_1^{+\\infty}f(x)dx敛散性相同</script><ul>\n<li><p>给出反常积分的判敛（要求只有一个奇点）</p>\n<blockquote>\n<ul>\n<li><p>口诀：大的大、小的小、才收敛</p>\n<blockquote>\n<p>大（积分区间是<script type=\"math/tex\">\\infty</script>）的大（<script type=\"math/tex\">p>1</script>）</p>\n<p>小（积分区间是有限）的小（<script type=\"math/tex\">0<p<1</script>）</p>\n</blockquote>\n</li>\n<li><p>数学表述</p>\n<blockquote>\n<script type=\"math/tex; mode=display\">\\int_a^b \\frac{1}{(x-a)^p}dx\\begin{cases}收敛,& p<1\\\\ 发散,&p\\geq1 \\end{cases}</script><script type=\"math/tex; mode=display\">\\int_a^{+\\infty} \\frac{1}{x^p} dx \\begin{cases}收敛,&p>1\\\\ 发散,&p\\leq 1 \\end{cases}</script></blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"交错级数\"><a href=\"#交错级数\" class=\"headerlink\" title=\"交错级数\"></a>交错级数</h2><script type=\"math/tex; mode=display\">\\sum\\limits_{n=1}^\\infty (-1)^{n-1}u_n, u_n>0</script><ul>\n<li>莱布尼茨判别法：<script type=\"math/tex\">\\begin{cases} \\lim\\limits_{n\\to\\infty}u_n=0,\\\\ u_n\\geq u_{n+1}(u_n单调不增) \\end{cases} \\Rightarrow 级数收敛</script></li>\n</ul>\n<h2 id=\"任意级数\"><a href=\"#任意级数\" class=\"headerlink\" title=\"任意级数\"></a>任意级数</h2><script type=\"math/tex; mode=display\">\\sum\\limits_{n=1}^\\infty  u_n , u_n无符号限制</script><ul>\n<li><script type=\"math/tex; mode=display\">\\sum\\limits_{n=1}^\\infty \\left| u_n \\right|收敛\\Rightarrow\\sum\\limits_{n=1}^\\infty u_n 绝对收敛</script></li>\n<li><script type=\"math/tex; mode=display\">\\sum\\limits_{n=1}^\\infty \\left| u_n \\right|发散，\\sum\\limits_{n=1}^\\infty u_n收敛 \\Rightarrow \\sum\\limits_{n=1}^\\infty  u_n 条件收敛</script></li>\n</ul>\n<h1 id=\"二、幂级数\"><a href=\"#二、幂级数\" class=\"headerlink\" title=\"二、幂级数\"></a>二、幂级数</h1><h2 id=\"1、性质-1\"><a href=\"#1、性质-1\" class=\"headerlink\" title=\"1、性质\"></a>1、性质</h2><h3 id=\"幂级数定义\"><a href=\"#幂级数定义\" class=\"headerlink\" title=\"幂级数定义\"></a>幂级数定义</h3><script type=\"math/tex; mode=display\">\\sum\\limits_{n=1}^\\infty u_n(x) = \\sum\\limits_{n=1}^\\infty a_n(x-x_0)^n = a_0 + a_1(x-x_0)^1 + a_2(x-x_0)^2 + ... + a_n(x-x_n)^n + ...</script><h3 id=\"收敛域与收敛点\"><a href=\"#收敛域与收敛点\" class=\"headerlink\" title=\"收敛域与收敛点\"></a>收敛域与收敛点</h3><p>若<script type=\"math/tex\">x\\in I</script>，有<script type=\"math/tex\">\\sum\\limits_{n=1}^\\infty u_n(x_0)</script>收敛，则<script type=\"math/tex\">x_0</script>为其收敛点；如果发散，就称为发散点。</p>\n<p>收敛点的集合称为收敛域</p>\n<h3 id=\"收敛半径，收敛区间和收敛域\"><a href=\"#收敛半径，收敛区间和收敛域\" class=\"headerlink\" title=\"收敛半径，收敛区间和收敛域\"></a>收敛半径，收敛区间和收敛域</h3><ul>\n<li>收敛半径：<script type=\"math/tex\">R</script></li>\n<li>收敛区间：<script type=\"math/tex\">-R<(x-x_0) < R \\Rightarrow x_0-R < x < x_0 + R</script></li>\n<li>收敛域：考虑端点是否能够取得</li>\n</ul>\n<h2 id=\"2、具体问题\"><a href=\"#2、具体问题\" class=\"headerlink\" title=\"2、具体问题\"></a>2、具体问题</h2><p>记录一个知识点，级数缺项：有的项其系数为0（如奇数项级数或者偶数项级）。</p>\n<ul>\n<li><p>不缺项幂级数<script type=\"math/tex\">\\sum\\limits_{n=0}^\\infty a_n(x-x_0)^n</script>：</p>\n<blockquote>\n<script type=\"math/tex; mode=display\">\\lim\\limits_{n\\to\\infty} \\left|\\frac{a_{n+1}}{a_n} \\right| = \\rho</script><script type=\"math/tex; mode=display\">\\rho = \\frac{1}{\\rho};\\quad\\rho = 0,R= +\\infty;\\quad \\rho=+\\infty,R = 0</script></blockquote>\n</li>\n<li><p>缺项幂级数（比如只有奇数项或者偶数项，直接用这个方法即可）：</p>\n<blockquote>\n<ul>\n<li>令 <script type=\"math/tex\">\\lim\\limits_{n\\to\\infty} \\left|\\frac{u_{n+1}(x)}{u_n(x)}\\right|(或\\lim\\limits_{n\\to\\infty} \\sqrt[n]{\\left| u_n(x) \\right|}) < 1</script>，求出收敛区间<script type=\"math/tex\">x\\in(a,b)</script></li>\n<li>具体讨论端点<script type=\"math/tex\">a,b</script>的值，确定收敛域</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"3、抽象问题\"><a href=\"#3、抽象问题\" class=\"headerlink\" title=\"3、抽象问题\"></a>3、抽象问题</h2><p>假如没有告诉你的级数的具体形式，而是给你抽象的，那就用这个方法。</p>\n<ul>\n<li><p>阿贝尔定理，对于级数<script type=\"math/tex\">\\sum\\limits_{n=0}^{\\infty} a_n(x-x_0)^n</script>，设收敛半径为<script type=\"math/tex\">R</script>，在点<script type=\"math/tex\">x_1</script>处有</p>\n<blockquote>\n<ul>\n<li>收敛，<script type=\"math/tex\">|x_1-x_0|\\leq R</script></li>\n<li>发散，<script type=\"math/tex\">|x_1-x_0|\\geq R</script></li>\n<li><strong>条件收敛</strong>，<script type=\"math/tex\">R = |x_1-x_0|</script>，这一条非常重要，另外两条不能确定R，这条可以</li>\n</ul>\n</blockquote>\n</li>\n<li><p>收敛半径不变化</p>\n<blockquote>\n<ul>\n<li>对级数提出或乘以<script type=\"math/tex\">(x-x_0)^k</script>，或者平移。收敛半径不变化</li>\n<li>求导，收敛半径不变，收敛域可能缩小</li>\n<li>积分，收敛半径不变，收敛域可能扩大</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"4、常用公式\"><a href=\"#4、常用公式\" class=\"headerlink\" title=\"4、常用公式\"></a>4、常用公式</h2><p>至于如何求届收敛域呢？首先就是<strong>第2点中的缺项幂级数</strong>，然后就是根据<strong>定义域</strong>来。双重确定。</p>\n<p>下面记住几个基本公式，并且推导出其扩展公式，推导的时候，抓住<strong>收敛半径</strong>不变，确定<strong>端点</strong>（用定义域）的进而确定收敛域范围。</p>\n<ul>\n<li><script type=\"math/tex; mode=display\">\\ln(1+x) = \\sum\\limits_{n=1}^\\infty (-1)^{n-1}\\cdot\\frac{x^n}{n},\\quad x\\in(-1,1]</script><blockquote>\n<ul>\n<li><script type=\"math/tex; mode=display\">\\ln(1-x) = -\\sum\\limits_{n=1}^\\infty \\frac{x^n}{n},\\quad x\\in[-1,1)</script></li>\n<li><script type=\"math/tex; mode=display\">\\frac{1}{1+x} = \\sum\\limits_{n=0}^\\infty (-1)^{n}\\cdot x^n,\\quad x\\in(-1,1]</script></li>\n<li><script type=\"math/tex\">\\frac{1}{1-x} = \\sum\\limits_{n=0}^\\infty  x^n,\\quad x\\in[-1,1)</script>，<strong>重点</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><script type=\"math/tex; mode=display\">\\arctan x = \\sum\\limits_{n=0}^\\infty (-1)^n \\cdot\\frac{x^{2n+1}}{2n+1},\\quad x\\in[-1,1]</script></li>\n<li><script type=\"math/tex; mode=display\">e^x = \\sum\\limits_{n=0}^\\infty \\frac{x^n}{n!},\\quad x\\in(-\\infty, +\\infty)</script><blockquote>\n<script type=\"math/tex; mode=display\">e^{-x} = \\sum\\limits_{n=0}^\\infty (-1)^n\\frac{x^n}{n!},\\quad x\\in(-\\infty, +\\infty)</script><script type=\"math/tex; mode=display\">\\frac{e^x+e^{-x}}{2} = \\sum\\limits_{n=0}^\\infty \\frac{x^{2n}}{(2n)!},\\quad x\\in(-\\infty, +\\infty)</script><script type=\"math/tex; mode=display\">\\frac{e^x-e^{-x}}{2} = \\sum\\limits_{n=0}^\\infty \\frac{x^{2n+1}}{(2n+1)!},\\quad x\\in(-\\infty, +\\infty)</script></blockquote>\n</li>\n<li><script type=\"math/tex; mode=display\">\\sin x = \\sum\\limits_{n=0}^\\infty (-1)^n\\cdot \\frac{x^(2n+1)}{(2n+1)!},\\quad x\\in(-\\infty,+\\infty)</script><blockquote>\n<script type=\"math/tex; mode=display\">\\cos x = \\sum\\limits_{n=0}^\\infty (-1)^n\\cdot \\frac{x^(2n)}{(2n)!},\\quad x\\in(-\\infty,+\\infty)</script></blockquote>\n</li>\n</ul>\n<h1 id=\"三、傅里叶级数\"><a href=\"#三、傅里叶级数\" class=\"headerlink\" title=\"三、傅里叶级数\"></a>三、傅里叶级数</h1><h2 id=\"1、迪利克雷收敛定律\"><a href=\"#1、迪利克雷收敛定律\" class=\"headerlink\" title=\"1、迪利克雷收敛定律\"></a>1、迪利克雷收敛定律</h2><script type=\"math/tex; mode=display\">f(x)$$的傅里叶级数在$$[-l,l]$$上处处收敛，其和函数为$$S(x)</script><script type=\"math/tex; mode=display\">S(x) = \\begin{cases} f(x),&x为连续点\\\\ \\frac{f(x-0)+f(x+0)}{2},&x为间断点\\\\\\frac{f(-l+0)+f(l-0)}{2},&x=\\pm l \\end{cases}</script><h2 id=\"2、傅里叶公式\"><a href=\"#2、傅里叶公式\" class=\"headerlink\" title=\"2、傅里叶公式\"></a>2、傅里叶公式</h2><h3 id=\"设周期为2l\"><a href=\"#设周期为2l\" class=\"headerlink\" title=\"设周期为2l\"></a>设<strong>周期</strong>为<script type=\"math/tex\">2l</script></h3><script type=\"math/tex; mode=display\">f(x)\\sim \\frac{a_0}{2} + \\sum\\limits_{n=1}^\\infty \\left( a_n\\cos \\frac{n\\pi x}{l} + b_n \\sin \\frac{n\\pi x}{l} \\right)</script><script type=\"math/tex; mode=display\">\\begin{cases}a_0 = \\frac{1}{l}\\int_{-l}^l f(x) dx \\\\ a_n = \\frac{1}{l}\\int_{-l}^l  f(x) \\cos \\frac{n\\pi x}{l} dx,&n=1,2,... \\\\ b_n = \\frac{1}{l}\\int_{-l}^l  f(x) \\sin \\frac{n\\pi x}{l} dx,&n=0,1,...  \\end{cases}</script><ul>\n<li>如果<script type=\"math/tex\">f(x)</script>为奇函数，展开式为正弦函数，只有<script type=\"math/tex\">b</script></li>\n<li>如果<script type=\"math/tex\">f(x)</script>为偶函数，展开式为余弦函数，只有<script type=\"math/tex\">a</script></li>\n</ul>\n<h3 id=\"如果只要-0-l-有定义\"><a href=\"#如果只要-0-l-有定义\" class=\"headerlink\" title=\"如果只要[0,l]有定义\"></a>如果只要<script type=\"math/tex\">[0,l]</script>有定义</h3><p>做奇延拓或者偶延拓，即定义另一边的函数，用原函数来定义。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"一、数项级数\"><a href=\"#一、数项级数\" class=\"headerlink\" title=\"一、数项级数\"></a>一、数项级数</h1><h2 id=\"1、性质\"><a href=\"#1、性质\" class=\"headerlink\" title=\"1、性质\"></a>1、性质</h2><ul>\n<li><script type=\"math/tex\">\\sum\\limits_{n=1}^\\infty u_n收敛 \\Leftrightarrow \\lim\\limits_{n\\to\\infty}S_n存在</script>（充要条件）</li>\n<li><script type=\"math/tex\">\\sum\\limits_{n=1}^\\infty u_n收敛 \\Rightarrow \\lim\\limits_{n\\to\\infty}u_n=0</script>（必要条件）</li>\n<li>收敛，可以不看前有限项，因为前有限项是常数</li>\n</ul>\n<h2 id=\"2、正项级数（每一项都是正数）\"><a href=\"#2、正项级数（每一项都是正数）\" class=\"headerlink\" title=\"2、正项级数（每一项都是正数）\"></a>2、正项级数（每一项都是正数）</h2><ul>\n<li><script type=\"math/tex; mode=display\">S_n有界 \\Leftrightarrow \\sum\\limits_{n=1}^\\infty u_n</script></li>\n<li><p>比较判别法：<script type=\"math/tex\">对于n \\geq M时，有u_n \\leq v_n</script>，</p>\n<blockquote>\n<ul>\n<li><script type=\"math/tex; mode=display\">\\sum\\limits_{n=1}^\\infty v_n 收敛 \\Rightarrow \\sum\\limits_{n=1}^\\infty u_n收敛</script></li>\n<li><script type=\"math/tex; mode=display\">\\sum\\limits_{n=1}^\\infty u_n 发散 \\Rightarrow \\sum\\limits_{n=1}^\\infty v_n 发散</script></li>\n</ul>\n</blockquote>\n</li>\n<li><p>极限比较判别法：<script type=\"math/tex\">a = \\lim\\limits_{n \\to \\infty} \\frac{u_n}{v_n}</script></p>\n<blockquote>\n<ul>\n<li><script type=\"math/tex\">a = 0</script>：<script type=\"math/tex\">u_n \\leq v_n</script>（剩下的看上一点）</li>\n<li><script type=\"math/tex\">a = \\infty</script>：<script type=\"math/tex\">u_n \\geq v_n</script>（剩下的看上一点）</li>\n<li><script type=\"math/tex; mode=display\">a = A\\neq 0$$：$$u_n,v_n同敛散</script></li>\n</ul>\n<p>那么，如何选取另一个来比较呢？</p>\n<ul>\n<li>等比级数：<script type=\"math/tex\">\\sum\\limits_{n=1}^\\infty aq^{n-1} \\begin{cases} = \\frac{a}{1-q},& \\left|  q \\right| < 1 \\\\ 发散, & \\left| q \\right| \\geq 1 \\end{cases}</script></li>\n<li><code>p</code>级数：<script type=\"math/tex\">\\sum\\limits_{n=1}^{\\infty} \\frac{1}{n^p} \\begin{cases} 收敛, & p>1\\\\发散,&p\\leq1 \\end{cases}</script></li>\n<li>广义<code>p</code>级数：<script type=\"math/tex\">\\sum\\limits_{n=2}^{\\infty} \\frac{1}{n(\\ln n)^p} \\begin{cases}收敛,& p>1\\\\发散,& p\\leq1\\end{cases}</script></li>\n<li>交错<code>p</code>级数：<script type=\"math/tex\">\\sum\\limits_{n=1}^\\infty (-1)^{n-1}\\frac{1}{n^p} \\begin{cases}绝对收敛，& p > 1 \\\\ 条件收敛，& 0<p\\leq1 \\end{cases}</script></li>\n</ul>\n</blockquote>\n<p><strong>下面开始，都是跟自己比较：</strong></p>\n</li>\n<li><p>比值判别法（达朗贝尔）</p>\n<blockquote>\n<script type=\"math/tex; mode=display\">\\lim\\limits_{n \\to \\infty}\\frac{u^{n+1}}{u^n} = \\rho \\begin{cases} <1,&收敛\\\\>1,&发散\\\\=1,&失效 \\end{cases}</script></blockquote>\n</li>\n<li><p>根值判别法（柯西）</p>\n<blockquote>\n<script type=\"math/tex; mode=display\">\\lim\\limits_{n\\to\\infty}\\sqrt[n]{u_n} = \\rho \\begin{cases} <1,&收敛\\\\>1,&发散\\\\=1,&失效 \\end{cases}</script></blockquote>\n</li>\n<li><p>积分判别法（柯西）</p>\n<blockquote>\n<script type=\"math/tex; mode=display\">f(x)\\geq 0,连续,x\\in\\left[1,+\\infty \\right], u_n = f(n)</script><script type=\"math/tex; mode=display\">\\sum\\limits_{n=1}^\\infty u_n 与 \\int_1^{+\\infty}f(x)dx敛散性相同</script><ul>\n<li><p>给出反常积分的判敛（要求只有一个奇点）</p>\n<blockquote>\n<ul>\n<li><p>口诀：大的大、小的小、才收敛</p>\n<blockquote>\n<p>大（积分区间是<script type=\"math/tex\">\\infty</script>）的大（<script type=\"math/tex\">p>1</script>）</p>\n<p>小（积分区间是有限）的小（<script type=\"math/tex\">0<p<1</script>）</p>\n</blockquote>\n</li>\n<li><p>数学表述</p>\n<blockquote>\n<script type=\"math/tex; mode=display\">\\int_a^b \\frac{1}{(x-a)^p}dx\\begin{cases}收敛,& p<1\\\\ 发散,&p\\geq1 \\end{cases}</script><script type=\"math/tex; mode=display\">\\int_a^{+\\infty} \\frac{1}{x^p} dx \\begin{cases}收敛,&p>1\\\\ 发散,&p\\leq 1 \\end{cases}</script></blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"交错级数\"><a href=\"#交错级数\" class=\"headerlink\" title=\"交错级数\"></a>交错级数</h2><script type=\"math/tex; mode=display\">\\sum\\limits_{n=1}^\\infty (-1)^{n-1}u_n, u_n>0</script><ul>\n<li>莱布尼茨判别法：<script type=\"math/tex\">\\begin{cases} \\lim\\limits_{n\\to\\infty}u_n=0,\\\\ u_n\\geq u_{n+1}(u_n单调不增) \\end{cases} \\Rightarrow 级数收敛</script></li>\n</ul>\n<h2 id=\"任意级数\"><a href=\"#任意级数\" class=\"headerlink\" title=\"任意级数\"></a>任意级数</h2><script type=\"math/tex; mode=display\">\\sum\\limits_{n=1}^\\infty  u_n , u_n无符号限制</script><ul>\n<li><script type=\"math/tex; mode=display\">\\sum\\limits_{n=1}^\\infty \\left| u_n \\right|收敛\\Rightarrow\\sum\\limits_{n=1}^\\infty u_n 绝对收敛</script></li>\n<li><script type=\"math/tex; mode=display\">\\sum\\limits_{n=1}^\\infty \\left| u_n \\right|发散，\\sum\\limits_{n=1}^\\infty u_n收敛 \\Rightarrow \\sum\\limits_{n=1}^\\infty  u_n 条件收敛</script></li>\n</ul>\n<h1 id=\"二、幂级数\"><a href=\"#二、幂级数\" class=\"headerlink\" title=\"二、幂级数\"></a>二、幂级数</h1><h2 id=\"1、性质-1\"><a href=\"#1、性质-1\" class=\"headerlink\" title=\"1、性质\"></a>1、性质</h2><h3 id=\"幂级数定义\"><a href=\"#幂级数定义\" class=\"headerlink\" title=\"幂级数定义\"></a>幂级数定义</h3><script type=\"math/tex; mode=display\">\\sum\\limits_{n=1}^\\infty u_n(x) = \\sum\\limits_{n=1}^\\infty a_n(x-x_0)^n = a_0 + a_1(x-x_0)^1 + a_2(x-x_0)^2 + ... + a_n(x-x_n)^n + ...</script><h3 id=\"收敛域与收敛点\"><a href=\"#收敛域与收敛点\" class=\"headerlink\" title=\"收敛域与收敛点\"></a>收敛域与收敛点</h3><p>若<script type=\"math/tex\">x\\in I</script>，有<script type=\"math/tex\">\\sum\\limits_{n=1}^\\infty u_n(x_0)</script>收敛，则<script type=\"math/tex\">x_0</script>为其收敛点；如果发散，就称为发散点。</p>\n<p>收敛点的集合称为收敛域</p>\n<h3 id=\"收敛半径，收敛区间和收敛域\"><a href=\"#收敛半径，收敛区间和收敛域\" class=\"headerlink\" title=\"收敛半径，收敛区间和收敛域\"></a>收敛半径，收敛区间和收敛域</h3><ul>\n<li>收敛半径：<script type=\"math/tex\">R</script></li>\n<li>收敛区间：<script type=\"math/tex\">-R<(x-x_0) < R \\Rightarrow x_0-R < x < x_0 + R</script></li>\n<li>收敛域：考虑端点是否能够取得</li>\n</ul>\n<h2 id=\"2、具体问题\"><a href=\"#2、具体问题\" class=\"headerlink\" title=\"2、具体问题\"></a>2、具体问题</h2><p>记录一个知识点，级数缺项：有的项其系数为0（如奇数项级数或者偶数项级）。</p>\n<ul>\n<li><p>不缺项幂级数<script type=\"math/tex\">\\sum\\limits_{n=0}^\\infty a_n(x-x_0)^n</script>：</p>\n<blockquote>\n<script type=\"math/tex; mode=display\">\\lim\\limits_{n\\to\\infty} \\left|\\frac{a_{n+1}}{a_n} \\right| = \\rho</script><script type=\"math/tex; mode=display\">\\rho = \\frac{1}{\\rho};\\quad\\rho = 0,R= +\\infty;\\quad \\rho=+\\infty,R = 0</script></blockquote>\n</li>\n<li><p>缺项幂级数（比如只有奇数项或者偶数项，直接用这个方法即可）：</p>\n<blockquote>\n<ul>\n<li>令 <script type=\"math/tex\">\\lim\\limits_{n\\to\\infty} \\left|\\frac{u_{n+1}(x)}{u_n(x)}\\right|(或\\lim\\limits_{n\\to\\infty} \\sqrt[n]{\\left| u_n(x) \\right|}) < 1</script>，求出收敛区间<script type=\"math/tex\">x\\in(a,b)</script></li>\n<li>具体讨论端点<script type=\"math/tex\">a,b</script>的值，确定收敛域</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"3、抽象问题\"><a href=\"#3、抽象问题\" class=\"headerlink\" title=\"3、抽象问题\"></a>3、抽象问题</h2><p>假如没有告诉你的级数的具体形式，而是给你抽象的，那就用这个方法。</p>\n<ul>\n<li><p>阿贝尔定理，对于级数<script type=\"math/tex\">\\sum\\limits_{n=0}^{\\infty} a_n(x-x_0)^n</script>，设收敛半径为<script type=\"math/tex\">R</script>，在点<script type=\"math/tex\">x_1</script>处有</p>\n<blockquote>\n<ul>\n<li>收敛，<script type=\"math/tex\">|x_1-x_0|\\leq R</script></li>\n<li>发散，<script type=\"math/tex\">|x_1-x_0|\\geq R</script></li>\n<li><strong>条件收敛</strong>，<script type=\"math/tex\">R = |x_1-x_0|</script>，这一条非常重要，另外两条不能确定R，这条可以</li>\n</ul>\n</blockquote>\n</li>\n<li><p>收敛半径不变化</p>\n<blockquote>\n<ul>\n<li>对级数提出或乘以<script type=\"math/tex\">(x-x_0)^k</script>，或者平移。收敛半径不变化</li>\n<li>求导，收敛半径不变，收敛域可能缩小</li>\n<li>积分，收敛半径不变，收敛域可能扩大</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"4、常用公式\"><a href=\"#4、常用公式\" class=\"headerlink\" title=\"4、常用公式\"></a>4、常用公式</h2><p>至于如何求届收敛域呢？首先就是<strong>第2点中的缺项幂级数</strong>，然后就是根据<strong>定义域</strong>来。双重确定。</p>\n<p>下面记住几个基本公式，并且推导出其扩展公式，推导的时候，抓住<strong>收敛半径</strong>不变，确定<strong>端点</strong>（用定义域）的进而确定收敛域范围。</p>\n<ul>\n<li><script type=\"math/tex; mode=display\">\\ln(1+x) = \\sum\\limits_{n=1}^\\infty (-1)^{n-1}\\cdot\\frac{x^n}{n},\\quad x\\in(-1,1]</script><blockquote>\n<ul>\n<li><script type=\"math/tex; mode=display\">\\ln(1-x) = -\\sum\\limits_{n=1}^\\infty \\frac{x^n}{n},\\quad x\\in[-1,1)</script></li>\n<li><script type=\"math/tex; mode=display\">\\frac{1}{1+x} = \\sum\\limits_{n=0}^\\infty (-1)^{n}\\cdot x^n,\\quad x\\in(-1,1]</script></li>\n<li><script type=\"math/tex\">\\frac{1}{1-x} = \\sum\\limits_{n=0}^\\infty  x^n,\\quad x\\in[-1,1)</script>，<strong>重点</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><script type=\"math/tex; mode=display\">\\arctan x = \\sum\\limits_{n=0}^\\infty (-1)^n \\cdot\\frac{x^{2n+1}}{2n+1},\\quad x\\in[-1,1]</script></li>\n<li><script type=\"math/tex; mode=display\">e^x = \\sum\\limits_{n=0}^\\infty \\frac{x^n}{n!},\\quad x\\in(-\\infty, +\\infty)</script><blockquote>\n<script type=\"math/tex; mode=display\">e^{-x} = \\sum\\limits_{n=0}^\\infty (-1)^n\\frac{x^n}{n!},\\quad x\\in(-\\infty, +\\infty)</script><script type=\"math/tex; mode=display\">\\frac{e^x+e^{-x}}{2} = \\sum\\limits_{n=0}^\\infty \\frac{x^{2n}}{(2n)!},\\quad x\\in(-\\infty, +\\infty)</script><script type=\"math/tex; mode=display\">\\frac{e^x-e^{-x}}{2} = \\sum\\limits_{n=0}^\\infty \\frac{x^{2n+1}}{(2n+1)!},\\quad x\\in(-\\infty, +\\infty)</script></blockquote>\n</li>\n<li><script type=\"math/tex; mode=display\">\\sin x = \\sum\\limits_{n=0}^\\infty (-1)^n\\cdot \\frac{x^(2n+1)}{(2n+1)!},\\quad x\\in(-\\infty,+\\infty)</script><blockquote>\n<script type=\"math/tex; mode=display\">\\cos x = \\sum\\limits_{n=0}^\\infty (-1)^n\\cdot \\frac{x^(2n)}{(2n)!},\\quad x\\in(-\\infty,+\\infty)</script></blockquote>\n</li>\n</ul>\n<h1 id=\"三、傅里叶级数\"><a href=\"#三、傅里叶级数\" class=\"headerlink\" title=\"三、傅里叶级数\"></a>三、傅里叶级数</h1><h2 id=\"1、迪利克雷收敛定律\"><a href=\"#1、迪利克雷收敛定律\" class=\"headerlink\" title=\"1、迪利克雷收敛定律\"></a>1、迪利克雷收敛定律</h2><script type=\"math/tex; mode=display\">f(x)$$的傅里叶级数在$$[-l,l]$$上处处收敛，其和函数为$$S(x)</script><script type=\"math/tex; mode=display\">S(x) = \\begin{cases} f(x),&x为连续点\\\\ \\frac{f(x-0)+f(x+0)}{2},&x为间断点\\\\\\frac{f(-l+0)+f(l-0)}{2},&x=\\pm l \\end{cases}</script><h2 id=\"2、傅里叶公式\"><a href=\"#2、傅里叶公式\" class=\"headerlink\" title=\"2、傅里叶公式\"></a>2、傅里叶公式</h2><h3 id=\"设周期为2l\"><a href=\"#设周期为2l\" class=\"headerlink\" title=\"设周期为2l\"></a>设<strong>周期</strong>为<script type=\"math/tex\">2l</script></h3><script type=\"math/tex; mode=display\">f(x)\\sim \\frac{a_0}{2} + \\sum\\limits_{n=1}^\\infty \\left( a_n\\cos \\frac{n\\pi x}{l} + b_n \\sin \\frac{n\\pi x}{l} \\right)</script><script type=\"math/tex; mode=display\">\\begin{cases}a_0 = \\frac{1}{l}\\int_{-l}^l f(x) dx \\\\ a_n = \\frac{1}{l}\\int_{-l}^l  f(x) \\cos \\frac{n\\pi x}{l} dx,&n=1,2,... \\\\ b_n = \\frac{1}{l}\\int_{-l}^l  f(x) \\sin \\frac{n\\pi x}{l} dx,&n=0,1,...  \\end{cases}</script><ul>\n<li>如果<script type=\"math/tex\">f(x)</script>为奇函数，展开式为正弦函数，只有<script type=\"math/tex\">b</script></li>\n<li>如果<script type=\"math/tex\">f(x)</script>为偶函数，展开式为余弦函数，只有<script type=\"math/tex\">a</script></li>\n</ul>\n<h3 id=\"如果只要-0-l-有定义\"><a href=\"#如果只要-0-l-有定义\" class=\"headerlink\" title=\"如果只要[0,l]有定义\"></a>如果只要<script type=\"math/tex\">[0,l]</script>有定义</h3><p>做奇延拓或者偶延拓，即定义另一边的函数，用原函数来定义。</p>\n"},{"title":"空间曲线曲面以及梯散旋度","excerpt":"考研数学中多元积分学的预备知识","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img20220904/20221009213153.png","mathjax":true,"date":"2022-10-09T13:25:30.000Z","_content":"\n# 空间曲线与切线\n\n注意，说的是空间，那就涉及到三个变量。\n\n## （1）参数方程\n\n$$\\begin{cases}x= x(t),\\\\y=y(t),\\\\z=z(t), \\end{cases} t \\in I$$\n\n在点$$p(x_0,y_0,z_0),(即t = t_0)$$处的**切向量**$$\\boldsymbol{\\tau} = (x'(t_0),y'(t_0),z'(t_0)) $$\n\n切线方程：$$\\frac{x-x_0}{x'(t_0)} = \\frac{y-y_0}{y'(t_0)} = \\frac{z-z_0}{z'(t_0)}$$\n\n法平面方程：$$x'(t_0)(x-x_0)+y'(t_0)(y-y_0)+z'(t_0)(z-z_0)=0$$\n\n## （2）用方程组给出\n\n$$\\begin{cases}F(x,y,z)=0\\\\G(x,y,z)=0 \\end{cases}$$\n\n当$$\\frac{\\partial (F,G)}{\\partial(y,z)} \\neq 0\\quad \\Rightarrow\\quad \\begin{cases}x=x,\\\\y=y(x),\\\\z=z(x), \\end{cases}$$ 其中$$\\frac{\\partial (F,G)}{\\partial(y,z)} =\\left| \\begin{array}{ccc} \\frac{\\partial F}{\\partial y}  & \\frac{\\partial F}{\\partial z}  \\\\ \\frac{\\partial G}{\\partial y}  &\\frac{\\partial G}{\\partial z}  \\end{array} \\right| $$\n\n在$$P(x_0,y_0,z_0)$$处**切向量**：$$\\boldsymbol{\\tau} = (1,y'(x_0),z'(x_0)) $$\n\n切线方程：$$\\frac{x-x_0}{1} = \\frac{y-y_0}{y'(x_0)} = \\frac{z-z_0}{z'(x_0)}$$\n\n法平面方程：$$(x-x_0)+y'(x_0)(y-y_0)+z'(x_0)(z-z_0)=0$$\n\n# 空间曲面与法线\n\n\n\n## （1）隐式方程\n\n$$F(x,y,z) = 0$$\n\n在点$$P(x_0,y_0,z_0)$$处**法向量**：$$\\boldsymbol{n} = \\left(F'_{x}|_{P_0}, F'_{y}|_{P_0}, F'_{z}|_{P_0} \\right)$$\n\n切平面方程：$$F'_{x}|_{P_0}\\cdot(x-x_0) +  F'_{y}|_{P_0}\\cdot (y-y_0) + F'_{z}|_{P_0} \\cdot (z-z_0) = 0$$\n\n法线方程：$$\\frac{x-x_0}{F'_{x}|_{P_0}} = \\frac{y-y_0}{F'_{y}|_{P_0}} = \\frac{z-z_0}{F'_{z}|_{P_0}}$$\n\n## （2）显式函数\n\n$$z = f(x,y)\\quad \\Rightarrow \\quad F(x,y,z) = f(x,y)-z = 0$$\n\n在点$$P(x_0,y_0,z_0)$$处**法向量**：$$\\boldsymbol{n} = \\left(f'_{x}(x_0,y_0), f'_{y}(x_0,y_0), -1 \\right)$$\n\n切平面方程：$$f'_{x}(x_0,y_0)\\cdot(x-x_0) +  f'_{y}(x_0,y_0)\\cdot (y-y_0) - (z-z_0) = 0$$\n\n法线方程：$$\\frac{x-x_0}{f'_{x}(x_0,y_0)} = \\frac{y-y_0}{f'_{y}(x_0,y_0)} = \\frac{z-z_0}{-1}$$\n\n## （3）参数方程\n\n$$\\begin{cases} x = x(u,v)\\\\y = y(u,v)\\\\z=z(u,v) \\end{cases} $$\n\n当$$u = u_0,v=v_0$$时，有点$$P(x_0,y_0,z_0)$$\n\n固定$$v=v_0 \\Rightarrow u在P$$的**切向量**：$$\\boldsymbol{\\tau_1} = (x'_u, y'_u, z'_u)|_{P_0}$$\n\n固定$$u=u_0 \\Rightarrow v在P$$的**切向量**：$$\\boldsymbol{\\tau_2} = (x'_v, y'_v, z'_v)|_{P_0}$$\n\n曲面的**法向量**垂直于$$\\boldsymbol{\\tau_1}、\\boldsymbol{\\tau_2} \\Rightarrow \\boldsymbol{n} = \\boldsymbol{\\tau_1} \\times \\boldsymbol{\\tau_2} = \\left| \\begin{array}{cccc} \\boldsymbol{i} & \\boldsymbol{j} & \\boldsymbol{k} \\\\ x'_u& y'_u& z'_u \\\\ x'_v& y'_v& z'_v  \\end{array} \\right|_{P_0} = (A,B,C)$$\n\n切平面方程：$$A(x-x_0) +  B(y-y_0) + C (z-z_0) = 0$$\n\n法线方程：$$\\frac{x-x_0}{A} = \\frac{y-y_0}{B} = \\frac{z-z_0}{C}$$\n\n\n\n# 总结空间曲面与空间曲线\n\n- 抓住曲面的法向量与曲线的切向量\n\n# 曲线的投影\n\n$$\\Gamma = \\begin{cases}F(x,y,z) = 0\\\\G(x,y,z) = 0 \\end{cases}$$消去`z`即可得到在`xOy`的投影$$\\begin{cases}\\phi(x,y) = 0\\\\ z= 0 \\end{cases}$$\n\n# 曲线的旋转(P358)\n\n## 1、绕坐标轴旋转\n\n绕谁转，谁不动，另一个变成其和第三个的平方和开根号：$$\\sqrt{另^2 + 三^2}$$\n\n具体来说：$$$$\n\n## 2、绕一般直线旋转\n\n曲线：$$\\Gamma = \\begin{cases}F(x,y,z) = 0\\\\G(x,y,z) = 0 \\end{cases}$$，直线：$$\\frac{x-x_0}{m} = \\frac{y-y_0}{n} = \\frac{z-z_0}{p}$$\n\n# 向量的运算\n\n- 三向量共面：$$[\\boldsymbol{abc}] = (\\boldsymbol{a}\\times\\boldsymbol{b})\\cdot\\boldsymbol{c} = \\Leftrightarrow \\left| \\begin{array}{ccc} a_x & a_y &a_z\\\\b_x&b_y&b_z\\\\ c_x&c_y&c_z \\end{array} \\right| = 0 $$\n\n# 直线与平面关系（P359）\n\n## 平面束方程\n\n&emsp;假设平面1、2方程：$$\\begin{cases} A_1x+B_1y+C_1z+D_1=0 \\\\ A_2x+B_2y+C_2z+D_2=0 \\end{cases},\\quad 其中A_1,B_1,C_1与A_2,B_2,C_2$$不成比例。设L为两个平面的交线，则过该交线的平面束方程设为：$$\\mu (A_1x+B_1y+C_1z+D_1) + \\lambda(A_2x+B_2y+C_2z+D_2) = 0,\\quad \\mu,\\lambda$$为参数。\n\n&emsp;除此之外，对于具体题目，如果说过该交线的平面，但是不是平面1（2）的方程，那么就将上述的$$\\mu$$（$$\\lambda$$）设置为1。\n\n## 点到平面的距离\n\n点$$P(x_0,y_0,z_0)$$到平面$$Ax+By+Cz+D = 0$$的距离$$d = \\frac{\\left|Ax_0+By_0+Cz_0+D\\right|}{\\sqrt{A^2+B^2+C^2}}$$\n\n## 直线、平面之间的关系\n\n&emsp;抓住直线的**切向量**与平面的**法向量**，那么问题就迎刃而解了。\n\n# 场论初步\n\n## 方向导数（值）\n\n&emsp;设函数$$u=u(x,y,z)$$在点$$P_0(x_0,y_0,z_0)$$的领域内有定义，那么$$u(x,y,z)$$在点$$P_0(x_0,y_0,z_0)$$的方向导数的定义应该是：\n\n$$\\frac{\\partial u}{\\partial \\boldsymbol{l}}|_{P_0} = \\lim\\limits_{t\\to 0^+}\\frac{u(P)-u(P_0)}{t}= \\lim\\limits_{t\\to 0^+}\\frac{u'_x(P_0)\\Delta x + u'_y(P_0)\\Delta y+u'(P_0)\\Delta z \t}{\\sqrt{(\\Delta x)^2 + (\\Delta y)^2 + (\\Delta z)^2}} = u'_x(P_0)\\cos \\alpha + u'_y(P_0)\\cos\\beta +u'(P_0)\\cos\\gamma $$\n\n其中，$$t = \\sqrt{(\\Delta x)^2 + (\\Delta y)^2 + (\\Delta z)^2}, \\quad \\cos\\alpha,\\cos\\beta,\\cos\\gamma $$为方向余弦。\n\n\n\n## 梯度（向量）\n\n$$\\boldsymbol{grad} \\quad u|_{p_0} = (u'_x(P_0) , u'_y(P_0), u'_z(P_0)) $$\n\n当梯度与方向$$l$$同向时，方向导数最大，方向导数为梯度的模：$$\\left| \\boldsymbol{grad} \\quad u|_{p_0} \\right| = \\sqrt{[u'_x(P_0)]^2 + [u'_y(P_0)]^2+ [u'_z(P_0)]^2}$$\n\n## 散度（值）\n\n设向量场$$\\boldsymbol{A}(x,y,z) = P(x,y,z)\\boldsymbol{i}+Q(x,y,z)\\boldsymbol{j}+R(x,y,z)\\boldsymbol{k}$$\n\n则**散度**定义为：$$div \\boldsymbol{A} = \\frac{\\partial P}{\\partial x}+ \\frac{\\partial Q}{\\partial y} + \\frac{\\partial R}{\\partial z} $$，散度为0的场叫做**无源场**。\n\n## 旋度（向量）\n\n设向量场$$\\boldsymbol{A}(x,y,z) = P(x,y,z)\\boldsymbol{i}+Q(x,y,z)\\boldsymbol{j}+R(x,y,z)\\boldsymbol{k}$$\n\n则**旋度**为：$$\\boldsymbol{rot\\quad A} =  \\left |\\begin{array}{ccc}\n\\boldsymbol{i} & \\boldsymbol{j}  &\\boldsymbol{k} \\\\\n\\frac{\\partial}{\\partial x} &\\frac{\\partial}{\\partial y} &\\frac{\\partial}{\\partial z}  \\\\\nP &Q &R \\\\ \\end{array}\\right| $$，若旋度为0向量的场叫做**无旋场**。\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/空间曲线曲面以及梯散旋度.md","raw":"---\ntitle: 空间曲线曲面以及梯散旋度\ntags: \n- 数学\n- 曲线\n- 曲面\n- 梯度\n- 散度\n- 旋度\n- 考研\nexcerpt: 考研数学中多元积分学的预备知识\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img20220904/20221009213153.png\ncategories:\n- 考研数学\nmathjax: true\ndate: 2022-10-09 21:25:30\n---\n\n# 空间曲线与切线\n\n注意，说的是空间，那就涉及到三个变量。\n\n## （1）参数方程\n\n$$\\begin{cases}x= x(t),\\\\y=y(t),\\\\z=z(t), \\end{cases} t \\in I$$\n\n在点$$p(x_0,y_0,z_0),(即t = t_0)$$处的**切向量**$$\\boldsymbol{\\tau} = (x'(t_0),y'(t_0),z'(t_0)) $$\n\n切线方程：$$\\frac{x-x_0}{x'(t_0)} = \\frac{y-y_0}{y'(t_0)} = \\frac{z-z_0}{z'(t_0)}$$\n\n法平面方程：$$x'(t_0)(x-x_0)+y'(t_0)(y-y_0)+z'(t_0)(z-z_0)=0$$\n\n## （2）用方程组给出\n\n$$\\begin{cases}F(x,y,z)=0\\\\G(x,y,z)=0 \\end{cases}$$\n\n当$$\\frac{\\partial (F,G)}{\\partial(y,z)} \\neq 0\\quad \\Rightarrow\\quad \\begin{cases}x=x,\\\\y=y(x),\\\\z=z(x), \\end{cases}$$ 其中$$\\frac{\\partial (F,G)}{\\partial(y,z)} =\\left| \\begin{array}{ccc} \\frac{\\partial F}{\\partial y}  & \\frac{\\partial F}{\\partial z}  \\\\ \\frac{\\partial G}{\\partial y}  &\\frac{\\partial G}{\\partial z}  \\end{array} \\right| $$\n\n在$$P(x_0,y_0,z_0)$$处**切向量**：$$\\boldsymbol{\\tau} = (1,y'(x_0),z'(x_0)) $$\n\n切线方程：$$\\frac{x-x_0}{1} = \\frac{y-y_0}{y'(x_0)} = \\frac{z-z_0}{z'(x_0)}$$\n\n法平面方程：$$(x-x_0)+y'(x_0)(y-y_0)+z'(x_0)(z-z_0)=0$$\n\n# 空间曲面与法线\n\n\n\n## （1）隐式方程\n\n$$F(x,y,z) = 0$$\n\n在点$$P(x_0,y_0,z_0)$$处**法向量**：$$\\boldsymbol{n} = \\left(F'_{x}|_{P_0}, F'_{y}|_{P_0}, F'_{z}|_{P_0} \\right)$$\n\n切平面方程：$$F'_{x}|_{P_0}\\cdot(x-x_0) +  F'_{y}|_{P_0}\\cdot (y-y_0) + F'_{z}|_{P_0} \\cdot (z-z_0) = 0$$\n\n法线方程：$$\\frac{x-x_0}{F'_{x}|_{P_0}} = \\frac{y-y_0}{F'_{y}|_{P_0}} = \\frac{z-z_0}{F'_{z}|_{P_0}}$$\n\n## （2）显式函数\n\n$$z = f(x,y)\\quad \\Rightarrow \\quad F(x,y,z) = f(x,y)-z = 0$$\n\n在点$$P(x_0,y_0,z_0)$$处**法向量**：$$\\boldsymbol{n} = \\left(f'_{x}(x_0,y_0), f'_{y}(x_0,y_0), -1 \\right)$$\n\n切平面方程：$$f'_{x}(x_0,y_0)\\cdot(x-x_0) +  f'_{y}(x_0,y_0)\\cdot (y-y_0) - (z-z_0) = 0$$\n\n法线方程：$$\\frac{x-x_0}{f'_{x}(x_0,y_0)} = \\frac{y-y_0}{f'_{y}(x_0,y_0)} = \\frac{z-z_0}{-1}$$\n\n## （3）参数方程\n\n$$\\begin{cases} x = x(u,v)\\\\y = y(u,v)\\\\z=z(u,v) \\end{cases} $$\n\n当$$u = u_0,v=v_0$$时，有点$$P(x_0,y_0,z_0)$$\n\n固定$$v=v_0 \\Rightarrow u在P$$的**切向量**：$$\\boldsymbol{\\tau_1} = (x'_u, y'_u, z'_u)|_{P_0}$$\n\n固定$$u=u_0 \\Rightarrow v在P$$的**切向量**：$$\\boldsymbol{\\tau_2} = (x'_v, y'_v, z'_v)|_{P_0}$$\n\n曲面的**法向量**垂直于$$\\boldsymbol{\\tau_1}、\\boldsymbol{\\tau_2} \\Rightarrow \\boldsymbol{n} = \\boldsymbol{\\tau_1} \\times \\boldsymbol{\\tau_2} = \\left| \\begin{array}{cccc} \\boldsymbol{i} & \\boldsymbol{j} & \\boldsymbol{k} \\\\ x'_u& y'_u& z'_u \\\\ x'_v& y'_v& z'_v  \\end{array} \\right|_{P_0} = (A,B,C)$$\n\n切平面方程：$$A(x-x_0) +  B(y-y_0) + C (z-z_0) = 0$$\n\n法线方程：$$\\frac{x-x_0}{A} = \\frac{y-y_0}{B} = \\frac{z-z_0}{C}$$\n\n\n\n# 总结空间曲面与空间曲线\n\n- 抓住曲面的法向量与曲线的切向量\n\n# 曲线的投影\n\n$$\\Gamma = \\begin{cases}F(x,y,z) = 0\\\\G(x,y,z) = 0 \\end{cases}$$消去`z`即可得到在`xOy`的投影$$\\begin{cases}\\phi(x,y) = 0\\\\ z= 0 \\end{cases}$$\n\n# 曲线的旋转(P358)\n\n## 1、绕坐标轴旋转\n\n绕谁转，谁不动，另一个变成其和第三个的平方和开根号：$$\\sqrt{另^2 + 三^2}$$\n\n具体来说：$$$$\n\n## 2、绕一般直线旋转\n\n曲线：$$\\Gamma = \\begin{cases}F(x,y,z) = 0\\\\G(x,y,z) = 0 \\end{cases}$$，直线：$$\\frac{x-x_0}{m} = \\frac{y-y_0}{n} = \\frac{z-z_0}{p}$$\n\n# 向量的运算\n\n- 三向量共面：$$[\\boldsymbol{abc}] = (\\boldsymbol{a}\\times\\boldsymbol{b})\\cdot\\boldsymbol{c} = \\Leftrightarrow \\left| \\begin{array}{ccc} a_x & a_y &a_z\\\\b_x&b_y&b_z\\\\ c_x&c_y&c_z \\end{array} \\right| = 0 $$\n\n# 直线与平面关系（P359）\n\n## 平面束方程\n\n&emsp;假设平面1、2方程：$$\\begin{cases} A_1x+B_1y+C_1z+D_1=0 \\\\ A_2x+B_2y+C_2z+D_2=0 \\end{cases},\\quad 其中A_1,B_1,C_1与A_2,B_2,C_2$$不成比例。设L为两个平面的交线，则过该交线的平面束方程设为：$$\\mu (A_1x+B_1y+C_1z+D_1) + \\lambda(A_2x+B_2y+C_2z+D_2) = 0,\\quad \\mu,\\lambda$$为参数。\n\n&emsp;除此之外，对于具体题目，如果说过该交线的平面，但是不是平面1（2）的方程，那么就将上述的$$\\mu$$（$$\\lambda$$）设置为1。\n\n## 点到平面的距离\n\n点$$P(x_0,y_0,z_0)$$到平面$$Ax+By+Cz+D = 0$$的距离$$d = \\frac{\\left|Ax_0+By_0+Cz_0+D\\right|}{\\sqrt{A^2+B^2+C^2}}$$\n\n## 直线、平面之间的关系\n\n&emsp;抓住直线的**切向量**与平面的**法向量**，那么问题就迎刃而解了。\n\n# 场论初步\n\n## 方向导数（值）\n\n&emsp;设函数$$u=u(x,y,z)$$在点$$P_0(x_0,y_0,z_0)$$的领域内有定义，那么$$u(x,y,z)$$在点$$P_0(x_0,y_0,z_0)$$的方向导数的定义应该是：\n\n$$\\frac{\\partial u}{\\partial \\boldsymbol{l}}|_{P_0} = \\lim\\limits_{t\\to 0^+}\\frac{u(P)-u(P_0)}{t}= \\lim\\limits_{t\\to 0^+}\\frac{u'_x(P_0)\\Delta x + u'_y(P_0)\\Delta y+u'(P_0)\\Delta z \t}{\\sqrt{(\\Delta x)^2 + (\\Delta y)^2 + (\\Delta z)^2}} = u'_x(P_0)\\cos \\alpha + u'_y(P_0)\\cos\\beta +u'(P_0)\\cos\\gamma $$\n\n其中，$$t = \\sqrt{(\\Delta x)^2 + (\\Delta y)^2 + (\\Delta z)^2}, \\quad \\cos\\alpha,\\cos\\beta,\\cos\\gamma $$为方向余弦。\n\n\n\n## 梯度（向量）\n\n$$\\boldsymbol{grad} \\quad u|_{p_0} = (u'_x(P_0) , u'_y(P_0), u'_z(P_0)) $$\n\n当梯度与方向$$l$$同向时，方向导数最大，方向导数为梯度的模：$$\\left| \\boldsymbol{grad} \\quad u|_{p_0} \\right| = \\sqrt{[u'_x(P_0)]^2 + [u'_y(P_0)]^2+ [u'_z(P_0)]^2}$$\n\n## 散度（值）\n\n设向量场$$\\boldsymbol{A}(x,y,z) = P(x,y,z)\\boldsymbol{i}+Q(x,y,z)\\boldsymbol{j}+R(x,y,z)\\boldsymbol{k}$$\n\n则**散度**定义为：$$div \\boldsymbol{A} = \\frac{\\partial P}{\\partial x}+ \\frac{\\partial Q}{\\partial y} + \\frac{\\partial R}{\\partial z} $$，散度为0的场叫做**无源场**。\n\n## 旋度（向量）\n\n设向量场$$\\boldsymbol{A}(x,y,z) = P(x,y,z)\\boldsymbol{i}+Q(x,y,z)\\boldsymbol{j}+R(x,y,z)\\boldsymbol{k}$$\n\n则**旋度**为：$$\\boldsymbol{rot\\quad A} =  \\left |\\begin{array}{ccc}\n\\boldsymbol{i} & \\boldsymbol{j}  &\\boldsymbol{k} \\\\\n\\frac{\\partial}{\\partial x} &\\frac{\\partial}{\\partial y} &\\frac{\\partial}{\\partial z}  \\\\\nP &Q &R \\\\ \\end{array}\\right| $$，若旋度为0向量的场叫做**无旋场**。\n\n\n\n\n\n\n\n\n\n\n\n","slug":"空间曲线曲面以及梯散旋度","published":1,"updated":"2022-10-12T08:16:04.428Z","_id":"cl91fq6hj00001gu5275rh55d","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"空间曲线与切线\"><a href=\"#空间曲线与切线\" class=\"headerlink\" title=\"空间曲线与切线\"></a>空间曲线与切线</h1><p>注意，说的是空间，那就涉及到三个变量。</p>\n<h2 id=\"（1）参数方程\"><a href=\"#（1）参数方程\" class=\"headerlink\" title=\"（1）参数方程\"></a>（1）参数方程</h2><script type=\"math/tex; mode=display\">\\begin{cases}x= x(t),\\\\y=y(t),\\\\z=z(t), \\end{cases} t \\in I</script><p>在点<script type=\"math/tex\">p(x_0,y_0,z_0),(即t = t_0)</script>处的<strong>切向量</strong><script type=\"math/tex\">\\boldsymbol{\\tau} = (x'(t_0),y'(t_0),z'(t_0))</script></p>\n<p>切线方程：<script type=\"math/tex\">\\frac{x-x_0}{x'(t_0)} = \\frac{y-y_0}{y'(t_0)} = \\frac{z-z_0}{z'(t_0)}</script></p>\n<p>法平面方程：<script type=\"math/tex\">x'(t_0)(x-x_0)+y'(t_0)(y-y_0)+z'(t_0)(z-z_0)=0</script></p>\n<h2 id=\"（2）用方程组给出\"><a href=\"#（2）用方程组给出\" class=\"headerlink\" title=\"（2）用方程组给出\"></a>（2）用方程组给出</h2><script type=\"math/tex; mode=display\">\\begin{cases}F(x,y,z)=0\\\\G(x,y,z)=0 \\end{cases}</script><p>当<script type=\"math/tex\">\\frac{\\partial (F,G)}{\\partial(y,z)} \\neq 0\\quad \\Rightarrow\\quad \\begin{cases}x=x,\\\\y=y(x),\\\\z=z(x), \\end{cases}</script> 其中<script type=\"math/tex\">\\frac{\\partial (F,G)}{\\partial(y,z)} =\\left| \\begin{array}{ccc} \\frac{\\partial F}{\\partial y}  & \\frac{\\partial F}{\\partial z}  \\\\ \\frac{\\partial G}{\\partial y}  &\\frac{\\partial G}{\\partial z}  \\end{array} \\right|</script></p>\n<p>在<script type=\"math/tex\">P(x_0,y_0,z_0)</script>处<strong>切向量</strong>：<script type=\"math/tex\">\\boldsymbol{\\tau} = (1,y'(x_0),z'(x_0))</script></p>\n<p>切线方程：<script type=\"math/tex\">\\frac{x-x_0}{1} = \\frac{y-y_0}{y'(x_0)} = \\frac{z-z_0}{z'(x_0)}</script></p>\n<p>法平面方程：<script type=\"math/tex\">(x-x_0)+y'(x_0)(y-y_0)+z'(x_0)(z-z_0)=0</script></p>\n<h1 id=\"空间曲面与法线\"><a href=\"#空间曲面与法线\" class=\"headerlink\" title=\"空间曲面与法线\"></a>空间曲面与法线</h1><h2 id=\"（1）隐式方程\"><a href=\"#（1）隐式方程\" class=\"headerlink\" title=\"（1）隐式方程\"></a>（1）隐式方程</h2><script type=\"math/tex; mode=display\">F(x,y,z) = 0</script><p>在点<script type=\"math/tex\">P(x_0,y_0,z_0)</script>处<strong>法向量</strong>：<script type=\"math/tex\">\\boldsymbol{n} = \\left(F'_{x}|_{P_0}, F'_{y}|_{P_0}, F'_{z}|_{P_0} \\right)</script></p>\n<p>切平面方程：<script type=\"math/tex\">F'_{x}|_{P_0}\\cdot(x-x_0) +  F'_{y}|_{P_0}\\cdot (y-y_0) + F'_{z}|_{P_0} \\cdot (z-z_0) = 0</script></p>\n<p>法线方程：<script type=\"math/tex\">\\frac{x-x_0}{F'_{x}|_{P_0}} = \\frac{y-y_0}{F'_{y}|_{P_0}} = \\frac{z-z_0}{F'_{z}|_{P_0}}</script></p>\n<h2 id=\"（2）显式函数\"><a href=\"#（2）显式函数\" class=\"headerlink\" title=\"（2）显式函数\"></a>（2）显式函数</h2><script type=\"math/tex; mode=display\">z = f(x,y)\\quad \\Rightarrow \\quad F(x,y,z) = f(x,y)-z = 0</script><p>在点<script type=\"math/tex\">P(x_0,y_0,z_0)</script>处<strong>法向量</strong>：<script type=\"math/tex\">\\boldsymbol{n} = \\left(f'_{x}(x_0,y_0), f'_{y}(x_0,y_0), -1 \\right)</script></p>\n<p>切平面方程：<script type=\"math/tex\">f'_{x}(x_0,y_0)\\cdot(x-x_0) +  f'_{y}(x_0,y_0)\\cdot (y-y_0) - (z-z_0) = 0</script></p>\n<p>法线方程：<script type=\"math/tex\">\\frac{x-x_0}{f'_{x}(x_0,y_0)} = \\frac{y-y_0}{f'_{y}(x_0,y_0)} = \\frac{z-z_0}{-1}</script></p>\n<h2 id=\"（3）参数方程\"><a href=\"#（3）参数方程\" class=\"headerlink\" title=\"（3）参数方程\"></a>（3）参数方程</h2><script type=\"math/tex; mode=display\">\\begin{cases} x = x(u,v)\\\\y = y(u,v)\\\\z=z(u,v) \\end{cases}</script><p>当<script type=\"math/tex\">u = u_0,v=v_0</script>时，有点<script type=\"math/tex\">P(x_0,y_0,z_0)</script></p>\n<p>固定<script type=\"math/tex\">v=v_0 \\Rightarrow u在P</script>的<strong>切向量</strong>：<script type=\"math/tex\">\\boldsymbol{\\tau_1} = (x'_u, y'_u, z'_u)|_{P_0}</script></p>\n<p>固定<script type=\"math/tex\">u=u_0 \\Rightarrow v在P</script>的<strong>切向量</strong>：<script type=\"math/tex\">\\boldsymbol{\\tau_2} = (x'_v, y'_v, z'_v)|_{P_0}</script></p>\n<p>曲面的<strong>法向量</strong>垂直于<script type=\"math/tex\">\\boldsymbol{\\tau_1}、\\boldsymbol{\\tau_2} \\Rightarrow \\boldsymbol{n} = \\boldsymbol{\\tau_1} \\times \\boldsymbol{\\tau_2} = \\left| \\begin{array}{cccc} \\boldsymbol{i} & \\boldsymbol{j} & \\boldsymbol{k} \\\\ x'_u& y'_u& z'_u \\\\ x'_v& y'_v& z'_v  \\end{array} \\right|_{P_0} = (A,B,C)</script></p>\n<p>切平面方程：<script type=\"math/tex\">A(x-x_0) +  B(y-y_0) + C (z-z_0) = 0</script></p>\n<p>法线方程：<script type=\"math/tex\">\\frac{x-x_0}{A} = \\frac{y-y_0}{B} = \\frac{z-z_0}{C}</script></p>\n<h1 id=\"总结空间曲面与空间曲线\"><a href=\"#总结空间曲面与空间曲线\" class=\"headerlink\" title=\"总结空间曲面与空间曲线\"></a>总结空间曲面与空间曲线</h1><ul>\n<li>抓住曲面的法向量与曲线的切向量</li>\n</ul>\n<h1 id=\"曲线的投影\"><a href=\"#曲线的投影\" class=\"headerlink\" title=\"曲线的投影\"></a>曲线的投影</h1><script type=\"math/tex; mode=display\">\\Gamma = \\begin{cases}F(x,y,z) = 0\\\\G(x,y,z) = 0 \\end{cases}$$消去`z`即可得到在`xOy`的投影$$\\begin{cases}\\phi(x,y) = 0\\\\ z= 0 \\end{cases}</script><h1 id=\"曲线的旋转-P358\"><a href=\"#曲线的旋转-P358\" class=\"headerlink\" title=\"曲线的旋转(P358)\"></a>曲线的旋转(P358)</h1><h2 id=\"1、绕坐标轴旋转\"><a href=\"#1、绕坐标轴旋转\" class=\"headerlink\" title=\"1、绕坐标轴旋转\"></a>1、绕坐标轴旋转</h2><p>绕谁转，谁不动，另一个变成其和第三个的平方和开根号：<script type=\"math/tex\">\\sqrt{另^2 + 三^2}</script></p>\n<p>具体来说：$$$$</p>\n<h2 id=\"2、绕一般直线旋转\"><a href=\"#2、绕一般直线旋转\" class=\"headerlink\" title=\"2、绕一般直线旋转\"></a>2、绕一般直线旋转</h2><p>曲线：<script type=\"math/tex\">\\Gamma = \\begin{cases}F(x,y,z) = 0\\\\G(x,y,z) = 0 \\end{cases}</script>，直线：<script type=\"math/tex\">\\frac{x-x_0}{m} = \\frac{y-y_0}{n} = \\frac{z-z_0}{p}</script></p>\n<h1 id=\"向量的运算\"><a href=\"#向量的运算\" class=\"headerlink\" title=\"向量的运算\"></a>向量的运算</h1><ul>\n<li>三向量共面：<script type=\"math/tex\">[\\boldsymbol{abc}] = (\\boldsymbol{a}\\times\\boldsymbol{b})\\cdot\\boldsymbol{c} = \\Leftrightarrow \\left| \\begin{array}{ccc} a_x & a_y &a_z\\\\b_x&b_y&b_z\\\\ c_x&c_y&c_z \\end{array} \\right| = 0</script></li>\n</ul>\n<h1 id=\"直线与平面关系（P359）\"><a href=\"#直线与平面关系（P359）\" class=\"headerlink\" title=\"直线与平面关系（P359）\"></a>直线与平面关系（P359）</h1><h2 id=\"平面束方程\"><a href=\"#平面束方程\" class=\"headerlink\" title=\"平面束方程\"></a>平面束方程</h2><p>&emsp;假设平面1、2方程：<script type=\"math/tex\">\\begin{cases} A_1x+B_1y+C_1z+D_1=0 \\\\ A_2x+B_2y+C_2z+D_2=0 \\end{cases},\\quad 其中A_1,B_1,C_1与A_2,B_2,C_2</script>不成比例。设L为两个平面的交线，则过该交线的平面束方程设为：<script type=\"math/tex\">\\mu (A_1x+B_1y+C_1z+D_1) + \\lambda(A_2x+B_2y+C_2z+D_2) = 0,\\quad \\mu,\\lambda</script>为参数。</p>\n<p>&emsp;除此之外，对于具体题目，如果说过该交线的平面，但是不是平面1（2）的方程，那么就将上述的<script type=\"math/tex\">\\mu</script>（<script type=\"math/tex\">\\lambda</script>）设置为1。</p>\n<h2 id=\"点到平面的距离\"><a href=\"#点到平面的距离\" class=\"headerlink\" title=\"点到平面的距离\"></a>点到平面的距离</h2><p>点<script type=\"math/tex\">P(x_0,y_0,z_0)</script>到平面<script type=\"math/tex\">Ax+By+Cz+D = 0</script>的距离<script type=\"math/tex\">d = \\frac{\\left|Ax_0+By_0+Cz_0+D\\right|}{\\sqrt{A^2+B^2+C^2}}</script></p>\n<h2 id=\"直线、平面之间的关系\"><a href=\"#直线、平面之间的关系\" class=\"headerlink\" title=\"直线、平面之间的关系\"></a>直线、平面之间的关系</h2><p>&emsp;抓住直线的<strong>切向量</strong>与平面的<strong>法向量</strong>，那么问题就迎刃而解了。</p>\n<h1 id=\"场论初步\"><a href=\"#场论初步\" class=\"headerlink\" title=\"场论初步\"></a>场论初步</h1><h2 id=\"方向导数（值）\"><a href=\"#方向导数（值）\" class=\"headerlink\" title=\"方向导数（值）\"></a>方向导数（值）</h2><p>&emsp;设函数<script type=\"math/tex\">u=u(x,y,z)</script>在点<script type=\"math/tex\">P_0(x_0,y_0,z_0)</script>的领域内有定义，那么<script type=\"math/tex\">u(x,y,z)</script>在点<script type=\"math/tex\">P_0(x_0,y_0,z_0)</script>的方向导数的定义应该是：</p>\n<script type=\"math/tex; mode=display\">\\frac{\\partial u}{\\partial \\boldsymbol{l}}|_{P_0} = \\lim\\limits_{t\\to 0^+}\\frac{u(P)-u(P_0)}{t}= \\lim\\limits_{t\\to 0^+}\\frac{u'_x(P_0)\\Delta x + u'_y(P_0)\\Delta y+u'(P_0)\\Delta z     }{\\sqrt{(\\Delta x)^2 + (\\Delta y)^2 + (\\Delta z)^2}} = u'_x(P_0)\\cos \\alpha + u'_y(P_0)\\cos\\beta +u'(P_0)\\cos\\gamma</script><p>其中，<script type=\"math/tex\">t = \\sqrt{(\\Delta x)^2 + (\\Delta y)^2 + (\\Delta z)^2}, \\quad \\cos\\alpha,\\cos\\beta,\\cos\\gamma</script>为方向余弦。</p>\n<h2 id=\"梯度（向量）\"><a href=\"#梯度（向量）\" class=\"headerlink\" title=\"梯度（向量）\"></a>梯度（向量）</h2><script type=\"math/tex; mode=display\">\\boldsymbol{grad} \\quad u|_{p_0} = (u'_x(P_0) , u'_y(P_0), u'_z(P_0))</script><p>当梯度与方向<script type=\"math/tex\">l</script>同向时，方向导数最大，方向导数为梯度的模：<script type=\"math/tex\">\\left| \\boldsymbol{grad} \\quad u|_{p_0} \\right| = \\sqrt{[u'_x(P_0)]^2 + [u'_y(P_0)]^2+ [u'_z(P_0)]^2}</script></p>\n<h2 id=\"散度（值）\"><a href=\"#散度（值）\" class=\"headerlink\" title=\"散度（值）\"></a>散度（值）</h2><p>设向量场<script type=\"math/tex\">\\boldsymbol{A}(x,y,z) = P(x,y,z)\\boldsymbol{i}+Q(x,y,z)\\boldsymbol{j}+R(x,y,z)\\boldsymbol{k}</script></p>\n<p>则<strong>散度</strong>定义为：<script type=\"math/tex\">div \\boldsymbol{A} = \\frac{\\partial P}{\\partial x}+ \\frac{\\partial Q}{\\partial y} + \\frac{\\partial R}{\\partial z}</script>，散度为0的场叫做<strong>无源场</strong>。</p>\n<h2 id=\"旋度（向量）\"><a href=\"#旋度（向量）\" class=\"headerlink\" title=\"旋度（向量）\"></a>旋度（向量）</h2><p>设向量场<script type=\"math/tex\">\\boldsymbol{A}(x,y,z) = P(x,y,z)\\boldsymbol{i}+Q(x,y,z)\\boldsymbol{j}+R(x,y,z)\\boldsymbol{k}</script></p>\n<p>则<strong>旋度</strong>为：<script type=\"math/tex\">\\boldsymbol{rot\\quad A} =  \\left |\\begin{array}{ccc}\n\\boldsymbol{i} & \\boldsymbol{j}  &\\boldsymbol{k} \\\\\n\\frac{\\partial}{\\partial x} &\\frac{\\partial}{\\partial y} &\\frac{\\partial}{\\partial z}  \\\\\nP &Q &R \\\\ \\end{array}\\right|</script>，若旋度为0向量的场叫做<strong>无旋场</strong>。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"空间曲线与切线\"><a href=\"#空间曲线与切线\" class=\"headerlink\" title=\"空间曲线与切线\"></a>空间曲线与切线</h1><p>注意，说的是空间，那就涉及到三个变量。</p>\n<h2 id=\"（1）参数方程\"><a href=\"#（1）参数方程\" class=\"headerlink\" title=\"（1）参数方程\"></a>（1）参数方程</h2><script type=\"math/tex; mode=display\">\\begin{cases}x= x(t),\\\\y=y(t),\\\\z=z(t), \\end{cases} t \\in I</script><p>在点<script type=\"math/tex\">p(x_0,y_0,z_0),(即t = t_0)</script>处的<strong>切向量</strong><script type=\"math/tex\">\\boldsymbol{\\tau} = (x'(t_0),y'(t_0),z'(t_0))</script></p>\n<p>切线方程：<script type=\"math/tex\">\\frac{x-x_0}{x'(t_0)} = \\frac{y-y_0}{y'(t_0)} = \\frac{z-z_0}{z'(t_0)}</script></p>\n<p>法平面方程：<script type=\"math/tex\">x'(t_0)(x-x_0)+y'(t_0)(y-y_0)+z'(t_0)(z-z_0)=0</script></p>\n<h2 id=\"（2）用方程组给出\"><a href=\"#（2）用方程组给出\" class=\"headerlink\" title=\"（2）用方程组给出\"></a>（2）用方程组给出</h2><script type=\"math/tex; mode=display\">\\begin{cases}F(x,y,z)=0\\\\G(x,y,z)=0 \\end{cases}</script><p>当<script type=\"math/tex\">\\frac{\\partial (F,G)}{\\partial(y,z)} \\neq 0\\quad \\Rightarrow\\quad \\begin{cases}x=x,\\\\y=y(x),\\\\z=z(x), \\end{cases}</script> 其中<script type=\"math/tex\">\\frac{\\partial (F,G)}{\\partial(y,z)} =\\left| \\begin{array}{ccc} \\frac{\\partial F}{\\partial y}  & \\frac{\\partial F}{\\partial z}  \\\\ \\frac{\\partial G}{\\partial y}  &\\frac{\\partial G}{\\partial z}  \\end{array} \\right|</script></p>\n<p>在<script type=\"math/tex\">P(x_0,y_0,z_0)</script>处<strong>切向量</strong>：<script type=\"math/tex\">\\boldsymbol{\\tau} = (1,y'(x_0),z'(x_0))</script></p>\n<p>切线方程：<script type=\"math/tex\">\\frac{x-x_0}{1} = \\frac{y-y_0}{y'(x_0)} = \\frac{z-z_0}{z'(x_0)}</script></p>\n<p>法平面方程：<script type=\"math/tex\">(x-x_0)+y'(x_0)(y-y_0)+z'(x_0)(z-z_0)=0</script></p>\n<h1 id=\"空间曲面与法线\"><a href=\"#空间曲面与法线\" class=\"headerlink\" title=\"空间曲面与法线\"></a>空间曲面与法线</h1><h2 id=\"（1）隐式方程\"><a href=\"#（1）隐式方程\" class=\"headerlink\" title=\"（1）隐式方程\"></a>（1）隐式方程</h2><script type=\"math/tex; mode=display\">F(x,y,z) = 0</script><p>在点<script type=\"math/tex\">P(x_0,y_0,z_0)</script>处<strong>法向量</strong>：<script type=\"math/tex\">\\boldsymbol{n} = \\left(F'_{x}|_{P_0}, F'_{y}|_{P_0}, F'_{z}|_{P_0} \\right)</script></p>\n<p>切平面方程：<script type=\"math/tex\">F'_{x}|_{P_0}\\cdot(x-x_0) +  F'_{y}|_{P_0}\\cdot (y-y_0) + F'_{z}|_{P_0} \\cdot (z-z_0) = 0</script></p>\n<p>法线方程：<script type=\"math/tex\">\\frac{x-x_0}{F'_{x}|_{P_0}} = \\frac{y-y_0}{F'_{y}|_{P_0}} = \\frac{z-z_0}{F'_{z}|_{P_0}}</script></p>\n<h2 id=\"（2）显式函数\"><a href=\"#（2）显式函数\" class=\"headerlink\" title=\"（2）显式函数\"></a>（2）显式函数</h2><script type=\"math/tex; mode=display\">z = f(x,y)\\quad \\Rightarrow \\quad F(x,y,z) = f(x,y)-z = 0</script><p>在点<script type=\"math/tex\">P(x_0,y_0,z_0)</script>处<strong>法向量</strong>：<script type=\"math/tex\">\\boldsymbol{n} = \\left(f'_{x}(x_0,y_0), f'_{y}(x_0,y_0), -1 \\right)</script></p>\n<p>切平面方程：<script type=\"math/tex\">f'_{x}(x_0,y_0)\\cdot(x-x_0) +  f'_{y}(x_0,y_0)\\cdot (y-y_0) - (z-z_0) = 0</script></p>\n<p>法线方程：<script type=\"math/tex\">\\frac{x-x_0}{f'_{x}(x_0,y_0)} = \\frac{y-y_0}{f'_{y}(x_0,y_0)} = \\frac{z-z_0}{-1}</script></p>\n<h2 id=\"（3）参数方程\"><a href=\"#（3）参数方程\" class=\"headerlink\" title=\"（3）参数方程\"></a>（3）参数方程</h2><script type=\"math/tex; mode=display\">\\begin{cases} x = x(u,v)\\\\y = y(u,v)\\\\z=z(u,v) \\end{cases}</script><p>当<script type=\"math/tex\">u = u_0,v=v_0</script>时，有点<script type=\"math/tex\">P(x_0,y_0,z_0)</script></p>\n<p>固定<script type=\"math/tex\">v=v_0 \\Rightarrow u在P</script>的<strong>切向量</strong>：<script type=\"math/tex\">\\boldsymbol{\\tau_1} = (x'_u, y'_u, z'_u)|_{P_0}</script></p>\n<p>固定<script type=\"math/tex\">u=u_0 \\Rightarrow v在P</script>的<strong>切向量</strong>：<script type=\"math/tex\">\\boldsymbol{\\tau_2} = (x'_v, y'_v, z'_v)|_{P_0}</script></p>\n<p>曲面的<strong>法向量</strong>垂直于<script type=\"math/tex\">\\boldsymbol{\\tau_1}、\\boldsymbol{\\tau_2} \\Rightarrow \\boldsymbol{n} = \\boldsymbol{\\tau_1} \\times \\boldsymbol{\\tau_2} = \\left| \\begin{array}{cccc} \\boldsymbol{i} & \\boldsymbol{j} & \\boldsymbol{k} \\\\ x'_u& y'_u& z'_u \\\\ x'_v& y'_v& z'_v  \\end{array} \\right|_{P_0} = (A,B,C)</script></p>\n<p>切平面方程：<script type=\"math/tex\">A(x-x_0) +  B(y-y_0) + C (z-z_0) = 0</script></p>\n<p>法线方程：<script type=\"math/tex\">\\frac{x-x_0}{A} = \\frac{y-y_0}{B} = \\frac{z-z_0}{C}</script></p>\n<h1 id=\"总结空间曲面与空间曲线\"><a href=\"#总结空间曲面与空间曲线\" class=\"headerlink\" title=\"总结空间曲面与空间曲线\"></a>总结空间曲面与空间曲线</h1><ul>\n<li>抓住曲面的法向量与曲线的切向量</li>\n</ul>\n<h1 id=\"曲线的投影\"><a href=\"#曲线的投影\" class=\"headerlink\" title=\"曲线的投影\"></a>曲线的投影</h1><script type=\"math/tex; mode=display\">\\Gamma = \\begin{cases}F(x,y,z) = 0\\\\G(x,y,z) = 0 \\end{cases}$$消去`z`即可得到在`xOy`的投影$$\\begin{cases}\\phi(x,y) = 0\\\\ z= 0 \\end{cases}</script><h1 id=\"曲线的旋转-P358\"><a href=\"#曲线的旋转-P358\" class=\"headerlink\" title=\"曲线的旋转(P358)\"></a>曲线的旋转(P358)</h1><h2 id=\"1、绕坐标轴旋转\"><a href=\"#1、绕坐标轴旋转\" class=\"headerlink\" title=\"1、绕坐标轴旋转\"></a>1、绕坐标轴旋转</h2><p>绕谁转，谁不动，另一个变成其和第三个的平方和开根号：<script type=\"math/tex\">\\sqrt{另^2 + 三^2}</script></p>\n<p>具体来说：$$$$</p>\n<h2 id=\"2、绕一般直线旋转\"><a href=\"#2、绕一般直线旋转\" class=\"headerlink\" title=\"2、绕一般直线旋转\"></a>2、绕一般直线旋转</h2><p>曲线：<script type=\"math/tex\">\\Gamma = \\begin{cases}F(x,y,z) = 0\\\\G(x,y,z) = 0 \\end{cases}</script>，直线：<script type=\"math/tex\">\\frac{x-x_0}{m} = \\frac{y-y_0}{n} = \\frac{z-z_0}{p}</script></p>\n<h1 id=\"向量的运算\"><a href=\"#向量的运算\" class=\"headerlink\" title=\"向量的运算\"></a>向量的运算</h1><ul>\n<li>三向量共面：<script type=\"math/tex\">[\\boldsymbol{abc}] = (\\boldsymbol{a}\\times\\boldsymbol{b})\\cdot\\boldsymbol{c} = \\Leftrightarrow \\left| \\begin{array}{ccc} a_x & a_y &a_z\\\\b_x&b_y&b_z\\\\ c_x&c_y&c_z \\end{array} \\right| = 0</script></li>\n</ul>\n<h1 id=\"直线与平面关系（P359）\"><a href=\"#直线与平面关系（P359）\" class=\"headerlink\" title=\"直线与平面关系（P359）\"></a>直线与平面关系（P359）</h1><h2 id=\"平面束方程\"><a href=\"#平面束方程\" class=\"headerlink\" title=\"平面束方程\"></a>平面束方程</h2><p>&emsp;假设平面1、2方程：<script type=\"math/tex\">\\begin{cases} A_1x+B_1y+C_1z+D_1=0 \\\\ A_2x+B_2y+C_2z+D_2=0 \\end{cases},\\quad 其中A_1,B_1,C_1与A_2,B_2,C_2</script>不成比例。设L为两个平面的交线，则过该交线的平面束方程设为：<script type=\"math/tex\">\\mu (A_1x+B_1y+C_1z+D_1) + \\lambda(A_2x+B_2y+C_2z+D_2) = 0,\\quad \\mu,\\lambda</script>为参数。</p>\n<p>&emsp;除此之外，对于具体题目，如果说过该交线的平面，但是不是平面1（2）的方程，那么就将上述的<script type=\"math/tex\">\\mu</script>（<script type=\"math/tex\">\\lambda</script>）设置为1。</p>\n<h2 id=\"点到平面的距离\"><a href=\"#点到平面的距离\" class=\"headerlink\" title=\"点到平面的距离\"></a>点到平面的距离</h2><p>点<script type=\"math/tex\">P(x_0,y_0,z_0)</script>到平面<script type=\"math/tex\">Ax+By+Cz+D = 0</script>的距离<script type=\"math/tex\">d = \\frac{\\left|Ax_0+By_0+Cz_0+D\\right|}{\\sqrt{A^2+B^2+C^2}}</script></p>\n<h2 id=\"直线、平面之间的关系\"><a href=\"#直线、平面之间的关系\" class=\"headerlink\" title=\"直线、平面之间的关系\"></a>直线、平面之间的关系</h2><p>&emsp;抓住直线的<strong>切向量</strong>与平面的<strong>法向量</strong>，那么问题就迎刃而解了。</p>\n<h1 id=\"场论初步\"><a href=\"#场论初步\" class=\"headerlink\" title=\"场论初步\"></a>场论初步</h1><h2 id=\"方向导数（值）\"><a href=\"#方向导数（值）\" class=\"headerlink\" title=\"方向导数（值）\"></a>方向导数（值）</h2><p>&emsp;设函数<script type=\"math/tex\">u=u(x,y,z)</script>在点<script type=\"math/tex\">P_0(x_0,y_0,z_0)</script>的领域内有定义，那么<script type=\"math/tex\">u(x,y,z)</script>在点<script type=\"math/tex\">P_0(x_0,y_0,z_0)</script>的方向导数的定义应该是：</p>\n<script type=\"math/tex; mode=display\">\\frac{\\partial u}{\\partial \\boldsymbol{l}}|_{P_0} = \\lim\\limits_{t\\to 0^+}\\frac{u(P)-u(P_0)}{t}= \\lim\\limits_{t\\to 0^+}\\frac{u'_x(P_0)\\Delta x + u'_y(P_0)\\Delta y+u'(P_0)\\Delta z     }{\\sqrt{(\\Delta x)^2 + (\\Delta y)^2 + (\\Delta z)^2}} = u'_x(P_0)\\cos \\alpha + u'_y(P_0)\\cos\\beta +u'(P_0)\\cos\\gamma</script><p>其中，<script type=\"math/tex\">t = \\sqrt{(\\Delta x)^2 + (\\Delta y)^2 + (\\Delta z)^2}, \\quad \\cos\\alpha,\\cos\\beta,\\cos\\gamma</script>为方向余弦。</p>\n<h2 id=\"梯度（向量）\"><a href=\"#梯度（向量）\" class=\"headerlink\" title=\"梯度（向量）\"></a>梯度（向量）</h2><script type=\"math/tex; mode=display\">\\boldsymbol{grad} \\quad u|_{p_0} = (u'_x(P_0) , u'_y(P_0), u'_z(P_0))</script><p>当梯度与方向<script type=\"math/tex\">l</script>同向时，方向导数最大，方向导数为梯度的模：<script type=\"math/tex\">\\left| \\boldsymbol{grad} \\quad u|_{p_0} \\right| = \\sqrt{[u'_x(P_0)]^2 + [u'_y(P_0)]^2+ [u'_z(P_0)]^2}</script></p>\n<h2 id=\"散度（值）\"><a href=\"#散度（值）\" class=\"headerlink\" title=\"散度（值）\"></a>散度（值）</h2><p>设向量场<script type=\"math/tex\">\\boldsymbol{A}(x,y,z) = P(x,y,z)\\boldsymbol{i}+Q(x,y,z)\\boldsymbol{j}+R(x,y,z)\\boldsymbol{k}</script></p>\n<p>则<strong>散度</strong>定义为：<script type=\"math/tex\">div \\boldsymbol{A} = \\frac{\\partial P}{\\partial x}+ \\frac{\\partial Q}{\\partial y} + \\frac{\\partial R}{\\partial z}</script>，散度为0的场叫做<strong>无源场</strong>。</p>\n<h2 id=\"旋度（向量）\"><a href=\"#旋度（向量）\" class=\"headerlink\" title=\"旋度（向量）\"></a>旋度（向量）</h2><p>设向量场<script type=\"math/tex\">\\boldsymbol{A}(x,y,z) = P(x,y,z)\\boldsymbol{i}+Q(x,y,z)\\boldsymbol{j}+R(x,y,z)\\boldsymbol{k}</script></p>\n<p>则<strong>旋度</strong>为：<script type=\"math/tex\">\\boldsymbol{rot\\quad A} =  \\left |\\begin{array}{ccc}\n\\boldsymbol{i} & \\boldsymbol{j}  &\\boldsymbol{k} \\\\\n\\frac{\\partial}{\\partial x} &\\frac{\\partial}{\\partial y} &\\frac{\\partial}{\\partial z}  \\\\\nP &Q &R \\\\ \\end{array}\\right|</script>，若旋度为0向量的场叫做<strong>无旋场</strong>。</p>\n"},{"title":"概率论之卷积公式求解概率密度","excerpt":"概率论的卷积公式求解概率密度，区分独立与不独立","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img20220904/20221012162020.png","mathjax":true,"date":"2022-10-12T08:18:21.000Z","_content":"\n#  一般公式\n\n&emsp;一般来说，给定你$$X,Y$$的分布，并且不一定两者是独立的，然后给你$$Z$$关于$$X,Y$$的函数，那么要你求解$$f_Z(z)$$。\n\n假设我们把$$Y$$表示为$$X,Z$$的函数，那么有卷积公式：\n$$\nf_Z(z) = \\int_{-\\infty}^{+\\infty} \\left|\\frac{\\partial y}{\\partial z}\\right|f(x,z-x)dx \\overset{独立}{=} \\int_{-\\infty}^{+\\infty} \\left|\\frac{\\partial y}{\\partial z}\\right|f_X(x)\\cdot f_Y(z-x)dx\n$$\n\n重要的是判别$$x$$的范围。\n\n&emsp;那么如何判别x的范围呢？\n\n&emsp;我们不是得到$$Y=y(Z)$$，然后，根据题设要求的$$X,Y$$取值范围有，$$y_2(x)\\leq Y\\leq y_1(x) \\Rightarrow y_2(x)\\leq y(Z)\\leq y_1(x)$$之后再反解出$$x$$的范围。\n\n# 分布函数法\n\n&emsp;这个不是用卷积法求解，但是也是不可忽视的，所以在这记录。\n\n$$(X,Y)\\sim f(x,y), \\quad Z=g(X,Y)$$，则：\n\n$$\nF_Z(z) = P\\left\\{ g(X,Y)\\leq z \\right\\} = \\iint\\limits_{g(x,y)\\leq z}f(x,y)dxdy\\\\ \\\\ \\quad f_Z(z) = F'_Z(z)\n$$\n\n\n","source":"_posts/概率论之卷积公式求解.md","raw":"---\ntitle: 概率论之卷积公式求解概率密度\ntags: \n- 数学\n- 卷积\n- 概率密度\n- 考研\nexcerpt: 概率论的卷积公式求解概率密度，区分独立与不独立\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img20220904/20221012162020.png\ncategories:\n- 考研数学\nmathjax: true\ndate: 2022-10-12 16:18:21\n---\n\n#  一般公式\n\n&emsp;一般来说，给定你$$X,Y$$的分布，并且不一定两者是独立的，然后给你$$Z$$关于$$X,Y$$的函数，那么要你求解$$f_Z(z)$$。\n\n假设我们把$$Y$$表示为$$X,Z$$的函数，那么有卷积公式：\n$$\nf_Z(z) = \\int_{-\\infty}^{+\\infty} \\left|\\frac{\\partial y}{\\partial z}\\right|f(x,z-x)dx \\overset{独立}{=} \\int_{-\\infty}^{+\\infty} \\left|\\frac{\\partial y}{\\partial z}\\right|f_X(x)\\cdot f_Y(z-x)dx\n$$\n\n重要的是判别$$x$$的范围。\n\n&emsp;那么如何判别x的范围呢？\n\n&emsp;我们不是得到$$Y=y(Z)$$，然后，根据题设要求的$$X,Y$$取值范围有，$$y_2(x)\\leq Y\\leq y_1(x) \\Rightarrow y_2(x)\\leq y(Z)\\leq y_1(x)$$之后再反解出$$x$$的范围。\n\n# 分布函数法\n\n&emsp;这个不是用卷积法求解，但是也是不可忽视的，所以在这记录。\n\n$$(X,Y)\\sim f(x,y), \\quad Z=g(X,Y)$$，则：\n\n$$\nF_Z(z) = P\\left\\{ g(X,Y)\\leq z \\right\\} = \\iint\\limits_{g(x,y)\\leq z}f(x,y)dxdy\\\\ \\\\ \\quad f_Z(z) = F'_Z(z)\n$$\n\n\n","slug":"概率论之卷积公式求解","published":1,"updated":"2022-10-12T12:07:01.064Z","_id":"cl95djsdq0000dku5htkz98ix","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一般公式\"><a href=\"#一般公式\" class=\"headerlink\" title=\"一般公式\"></a>一般公式</h1><p>&emsp;一般来说，给定你<script type=\"math/tex\">X,Y</script>的分布，并且不一定两者是独立的，然后给你<script type=\"math/tex\">Z</script>关于<script type=\"math/tex\">X,Y</script>的函数，那么要你求解<script type=\"math/tex\">f_Z(z)</script>。</p>\n<p>假设我们把<script type=\"math/tex\">Y</script>表示为<script type=\"math/tex\">X,Z</script>的函数，那么有卷积公式：</p>\n<script type=\"math/tex; mode=display\">\nf_Z(z) = \\int_{-\\infty}^{+\\infty} \\left|\\frac{\\partial y}{\\partial z}\\right|f(x,z-x)dx \\overset{独立}{=} \\int_{-\\infty}^{+\\infty} \\left|\\frac{\\partial y}{\\partial z}\\right|f_X(x)\\cdot f_Y(z-x)dx</script><p>重要的是判别<script type=\"math/tex\">x</script>的范围。</p>\n<p>&emsp;那么如何判别x的范围呢？</p>\n<p>&emsp;我们不是得到<script type=\"math/tex\">Y=y(Z)</script>，然后，根据题设要求的<script type=\"math/tex\">X,Y</script>取值范围有，<script type=\"math/tex\">y_2(x)\\leq Y\\leq y_1(x) \\Rightarrow y_2(x)\\leq y(Z)\\leq y_1(x)</script>之后再反解出<script type=\"math/tex\">x</script>的范围。</p>\n<h1 id=\"分布函数法\"><a href=\"#分布函数法\" class=\"headerlink\" title=\"分布函数法\"></a>分布函数法</h1><p>&emsp;这个不是用卷积法求解，但是也是不可忽视的，所以在这记录。</p>\n<script type=\"math/tex; mode=display\">(X,Y)\\sim f(x,y), \\quad Z=g(X,Y)$$，则：</script><p>F<em>Z(z) = P\\left{ g(X,Y)\\leq z \\right} = \\iint\\limits</em>{g(x,y)\\leq z}f(x,y)dxdy\\ \\ \\quad f_Z(z) = F’_Z(z)</p>\n<p>$$</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"一般公式\"><a href=\"#一般公式\" class=\"headerlink\" title=\"一般公式\"></a>一般公式</h1><p>&emsp;一般来说，给定你<script type=\"math/tex\">X,Y</script>的分布，并且不一定两者是独立的，然后给你<script type=\"math/tex\">Z</script>关于<script type=\"math/tex\">X,Y</script>的函数，那么要你求解<script type=\"math/tex\">f_Z(z)</script>。</p>\n<p>假设我们把<script type=\"math/tex\">Y</script>表示为<script type=\"math/tex\">X,Z</script>的函数，那么有卷积公式：</p>\n<script type=\"math/tex; mode=display\">\nf_Z(z) = \\int_{-\\infty}^{+\\infty} \\left|\\frac{\\partial y}{\\partial z}\\right|f(x,z-x)dx \\overset{独立}{=} \\int_{-\\infty}^{+\\infty} \\left|\\frac{\\partial y}{\\partial z}\\right|f_X(x)\\cdot f_Y(z-x)dx</script><p>重要的是判别<script type=\"math/tex\">x</script>的范围。</p>\n<p>&emsp;那么如何判别x的范围呢？</p>\n<p>&emsp;我们不是得到<script type=\"math/tex\">Y=y(Z)</script>，然后，根据题设要求的<script type=\"math/tex\">X,Y</script>取值范围有，<script type=\"math/tex\">y_2(x)\\leq Y\\leq y_1(x) \\Rightarrow y_2(x)\\leq y(Z)\\leq y_1(x)</script>之后再反解出<script type=\"math/tex\">x</script>的范围。</p>\n<h1 id=\"分布函数法\"><a href=\"#分布函数法\" class=\"headerlink\" title=\"分布函数法\"></a>分布函数法</h1><p>&emsp;这个不是用卷积法求解，但是也是不可忽视的，所以在这记录。</p>\n<script type=\"math/tex; mode=display\">(X,Y)\\sim f(x,y), \\quad Z=g(X,Y)$$，则：</script><p>F<em>Z(z) = P\\left{ g(X,Y)\\leq z \\right} = \\iint\\limits</em>{g(x,y)\\leq z}f(x,y)dxdy\\ \\ \\quad f_Z(z) = F’_Z(z)</p>\n<p>$$</p>\n"},{"title":"区间估计与假设检验","excerpt":"如何更好的记住区间估计以及假设检验呢？","cover":"https://imagere.oss-cn-beijing.aliyuncs.com/img20220904/20221012163648.png","mathjax":true,"date":"2022-10-12T08:35:35.000Z","_content":"\n# 前置知识\n\n&emsp;首先，我们应该在前面看到过这几个公式：\n$$\nX_1,X_2,\\cdots,X_n来自正态分布N(\\mu,\\sigma^2)的样本，有：\\\\\n(1)\\quad \\frac{\\sqrt{n}(\\overline{X}-\\mu)}{\\sigma} \\sim N(0,1)\\qquad Z_{\\alpha} \\\\\n(2)\\quad \\frac{\\sqrt{n}(\\overline{X}-\\mu)}{S} \\sim t(n-1) \\qquad t_{\\alpha}\n$$\n&emsp;然后，一个点是：样本与整体，我们知道的应该是样本，毕竟我们抽取的样本值是可以测量的。所以，后面的区间估计与假设检验都是使用样本均值来估计或者检验整体均值，但是会分成整体的方差是否已知的情况。并且，置信区间与接收域都是开区间。\n\n# 区间估计\n\n&emsp;区间估计：使用样本均值计算出整体均值可能取值的范围，这个范围就是置信区间。\n\n&emsp;则估计的整体均值（根据上面式子1）为：\n$$\n\\overline{X} - \\frac{\\sigma  Z_{\\alpha/2}}{\\sqrt{n}} <\\mu<\\overline{X} + \\frac{\\sigma  Z_{\\alpha/2}}{\\sqrt{n}}\n$$\n\n\n# 假设检验\n\n&emsp;假设检验：给定一个假设的整体均值，然后应该能得到样本均值理应落入的区间，用实际的样本均值检验这个假设的整体均值是否能够接受。\n\n&emsp;则样本均值为多少，我这个假设的整体均值能够接收（根据上面式子2）：$$\\overline{X} - \\frac{S  t_{\\alpha/2}}{\\sqrt{n}} <\\mu< \\overline{X} + \\frac{S  t_{\\alpha/2}}{\\sqrt{n}} $$，这个范围的$$\\mu$$我们认为是可以接受的，超过这个范围就是拒绝域。当然，还有单边检验。","source":"_posts/区间估计与假设检验.md","raw":"---\ntitle: 区间估计与假设检验\ntags: \n- 数学\n- 区间估计\n- 假设检验\n- 考研\nexcerpt: 如何更好的记住区间估计以及假设检验呢？\ncover: https://imagere.oss-cn-beijing.aliyuncs.com/img20220904/20221012163648.png\ncategories:\n- 考研数学\nmathjax: true\ndate: 2022-10-12 16:35:35\n---\n\n# 前置知识\n\n&emsp;首先，我们应该在前面看到过这几个公式：\n$$\nX_1,X_2,\\cdots,X_n来自正态分布N(\\mu,\\sigma^2)的样本，有：\\\\\n(1)\\quad \\frac{\\sqrt{n}(\\overline{X}-\\mu)}{\\sigma} \\sim N(0,1)\\qquad Z_{\\alpha} \\\\\n(2)\\quad \\frac{\\sqrt{n}(\\overline{X}-\\mu)}{S} \\sim t(n-1) \\qquad t_{\\alpha}\n$$\n&emsp;然后，一个点是：样本与整体，我们知道的应该是样本，毕竟我们抽取的样本值是可以测量的。所以，后面的区间估计与假设检验都是使用样本均值来估计或者检验整体均值，但是会分成整体的方差是否已知的情况。并且，置信区间与接收域都是开区间。\n\n# 区间估计\n\n&emsp;区间估计：使用样本均值计算出整体均值可能取值的范围，这个范围就是置信区间。\n\n&emsp;则估计的整体均值（根据上面式子1）为：\n$$\n\\overline{X} - \\frac{\\sigma  Z_{\\alpha/2}}{\\sqrt{n}} <\\mu<\\overline{X} + \\frac{\\sigma  Z_{\\alpha/2}}{\\sqrt{n}}\n$$\n\n\n# 假设检验\n\n&emsp;假设检验：给定一个假设的整体均值，然后应该能得到样本均值理应落入的区间，用实际的样本均值检验这个假设的整体均值是否能够接受。\n\n&emsp;则样本均值为多少，我这个假设的整体均值能够接收（根据上面式子2）：$$\\overline{X} - \\frac{S  t_{\\alpha/2}}{\\sqrt{n}} <\\mu< \\overline{X} + \\frac{S  t_{\\alpha/2}}{\\sqrt{n}} $$，这个范围的$$\\mu$$我们认为是可以接受的，超过这个范围就是拒绝域。当然，还有单边检验。","slug":"区间估计与假设检验","published":1,"updated":"2022-10-12T12:05:43.980Z","_id":"cl95ktebl00001wu562ikemfp","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><p>&emsp;首先，我们应该在前面看到过这几个公式：</p>\n<script type=\"math/tex; mode=display\">\nX_1,X_2,\\cdots,X_n来自正态分布N(\\mu,\\sigma^2)的样本，有：\\\\\n(1)\\quad \\frac{\\sqrt{n}(\\overline{X}-\\mu)}{\\sigma} \\sim N(0,1)\\qquad Z_{\\alpha} \\\\\n(2)\\quad \\frac{\\sqrt{n}(\\overline{X}-\\mu)}{S} \\sim t(n-1) \\qquad t_{\\alpha}</script><p>&emsp;然后，一个点是：样本与整体，我们知道的应该是样本，毕竟我们抽取的样本值是可以测量的。所以，后面的区间估计与假设检验都是使用样本均值来估计或者检验整体均值，但是会分成整体的方差是否已知的情况。并且，置信区间与接收域都是开区间。</p>\n<h1 id=\"区间估计\"><a href=\"#区间估计\" class=\"headerlink\" title=\"区间估计\"></a>区间估计</h1><p>&emsp;区间估计：使用样本均值计算出整体均值可能取值的范围，这个范围就是置信区间。</p>\n<p>&emsp;则估计的整体均值（根据上面式子1）为：</p>\n<script type=\"math/tex; mode=display\">\n\\overline{X} - \\frac{\\sigma  Z_{\\alpha/2}}{\\sqrt{n}} <\\mu<\\overline{X} + \\frac{\\sigma  Z_{\\alpha/2}}{\\sqrt{n}}</script><h1 id=\"假设检验\"><a href=\"#假设检验\" class=\"headerlink\" title=\"假设检验\"></a>假设检验</h1><p>&emsp;假设检验：给定一个假设的整体均值，然后应该能得到样本均值理应落入的区间，用实际的样本均值检验这个假设的整体均值是否能够接受。</p>\n<p>&emsp;则样本均值为多少，我这个假设的整体均值能够接收（根据上面式子2）：<script type=\"math/tex\">\\overline{X} - \\frac{S  t_{\\alpha/2}}{\\sqrt{n}} <\\mu< \\overline{X} + \\frac{S  t_{\\alpha/2}}{\\sqrt{n}}</script>，这个范围的<script type=\"math/tex\">\\mu</script>我们认为是可以接受的，超过这个范围就是拒绝域。当然，还有单边检验。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"more":"<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><p>&emsp;首先，我们应该在前面看到过这几个公式：</p>\n<script type=\"math/tex; mode=display\">\nX_1,X_2,\\cdots,X_n来自正态分布N(\\mu,\\sigma^2)的样本，有：\\\\\n(1)\\quad \\frac{\\sqrt{n}(\\overline{X}-\\mu)}{\\sigma} \\sim N(0,1)\\qquad Z_{\\alpha} \\\\\n(2)\\quad \\frac{\\sqrt{n}(\\overline{X}-\\mu)}{S} \\sim t(n-1) \\qquad t_{\\alpha}</script><p>&emsp;然后，一个点是：样本与整体，我们知道的应该是样本，毕竟我们抽取的样本值是可以测量的。所以，后面的区间估计与假设检验都是使用样本均值来估计或者检验整体均值，但是会分成整体的方差是否已知的情况。并且，置信区间与接收域都是开区间。</p>\n<h1 id=\"区间估计\"><a href=\"#区间估计\" class=\"headerlink\" title=\"区间估计\"></a>区间估计</h1><p>&emsp;区间估计：使用样本均值计算出整体均值可能取值的范围，这个范围就是置信区间。</p>\n<p>&emsp;则估计的整体均值（根据上面式子1）为：</p>\n<script type=\"math/tex; mode=display\">\n\\overline{X} - \\frac{\\sigma  Z_{\\alpha/2}}{\\sqrt{n}} <\\mu<\\overline{X} + \\frac{\\sigma  Z_{\\alpha/2}}{\\sqrt{n}}</script><h1 id=\"假设检验\"><a href=\"#假设检验\" class=\"headerlink\" title=\"假设检验\"></a>假设检验</h1><p>&emsp;假设检验：给定一个假设的整体均值，然后应该能得到样本均值理应落入的区间，用实际的样本均值检验这个假设的整体均值是否能够接受。</p>\n<p>&emsp;则样本均值为多少，我这个假设的整体均值能够接收（根据上面式子2）：<script type=\"math/tex\">\\overline{X} - \\frac{S  t_{\\alpha/2}}{\\sqrt{n}} <\\mu< \\overline{X} + \\frac{S  t_{\\alpha/2}}{\\sqrt{n}}</script>，这个范围的<script type=\"math/tex\">\\mu</script>我们认为是可以接受的，超过这个范围就是拒绝域。当然，还有单边检验。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl40x92nb0001p0u5ebhv62iy","category_id":"cl40x92nm0004p0u56hli83e6","_id":"cl40x92nt000ep0u58wdr4z1m"},{"post_id":"cl40x92nj0003p0u5eez350kj","category_id":"cl40x92nr000bp0u54ik14982","_id":"cl40x92nu000hp0u545l637ej"},{"post_id":"cl40x92o8001bp0u5cmtifsup","category_id":"cl40x92o60018p0u5hbv524z0","_id":"cl40x92od001hp0u5dn1z0l9i"},{"post_id":"cl40x92o30016p0u5frz67olh","category_id":"cl40x92o60018p0u5hbv524z0","_id":"cl40x92of001lp0u59rync88i"},{"post_id":"cl40x92o40017p0u588es8v51","category_id":"cl40x92o60018p0u5hbv524z0","_id":"cl40x92og001op0u57hsh2ptf"},{"post_id":"cl40x92o7001ap0u58wsi6dgz","category_id":"cl40x92o60018p0u5hbv524z0","_id":"cl40x92oi001rp0u52ckebkv5"},{"post_id":"cl40x92oa001cp0u54ejr1w1s","category_id":"cl40x92og001np0u5a9twgy85","_id":"cl40x92ok001xp0u55m0b5fvj"},{"post_id":"cl40x92oc001fp0u5d7rf9uor","category_id":"cl40x92og001np0u5a9twgy85","_id":"cl40x92ok0020p0u5es0t46f5"},{"post_id":"cl40x92od001gp0u53766hwve","category_id":"cl40x92og001np0u5a9twgy85","_id":"cl40x92on0024p0u5a5ntewhg"},{"post_id":"cl40x92oe001kp0u51dm4hfdn","category_id":"cl40x92og001np0u5a9twgy85","_id":"cl40x92oo0028p0u5ayhp12x8"},{"post_id":"cl40x92og001mp0u5aity313o","category_id":"cl40x92ol0023p0u5cswb43q6","_id":"cl40x92oq002bp0u56cddccvg"},{"post_id":"cl40x92oz003ap0u55dofapq2","category_id":"cl40x92og001np0u5a9twgy85","_id":"cl40x92p1003cp0u55gvh348v"},{"post_id":"cl46ktcpx000070u5993u4r0d","category_id":"cl46ktcq2000170u56dutc154","_id":"cl46ktcq8000470u58jvi19wq"},{"post_id":"cl49orocr0000tku5bxo19hf0","category_id":"cl49oroct0001tku5cl2f8kgn","_id":"cl49orocz0005tku5c6eqedvi"},{"post_id":"cl4f7zv5f0000b4u5g4lne5w7","category_id":"cl46ktcq2000170u56dutc154","_id":"cl4f7zv5q0002b4u55qnghcb3"},{"post_id":"cl4gnj6cp0000hwu5d9xihz4q","category_id":"cl46ktcq2000170u56dutc154","_id":"cl4gnj6cu0003hwu5a8wn5mi2"},{"post_id":"cl4jrufju0000jsu53s5o7fvn","category_id":"cl40x92og001np0u5a9twgy85","_id":"cl4jrufjy0003jsu5ekwp6zkg"},{"post_id":"cl5nnhsll0000pgu52n0ddfjr","category_id":"cl5nnhslq0001pgu5hjuq8s6d","_id":"cl5nnhslw0004pgu5bljv7iy2"},{"post_id":"cl7n4pbpr0000mku52tuwg7d5","category_id":"cl46ktcq2000170u56dutc154","_id":"cl7n4pbpy0003mku59oxt64yc"},{"post_id":"cl8y8x2r200004wu5brerhets","category_id":"cl5nnhslq0001pgu5hjuq8s6d","_id":"cl8y8x2ra00024wu5awyn2q13"},{"post_id":"cl91di1160000o8u59d8wf6r9","category_id":"cl5nnhslq0001pgu5hjuq8s6d","_id":"cl91di11h0002o8u54xknekkt"},{"post_id":"cl91fq6hj00001gu5275rh55d","category_id":"cl5nnhslq0001pgu5hjuq8s6d","_id":"cl91fq6hu00021gu5fhlhgfz0"},{"post_id":"cl95djsdq0000dku5htkz98ix","category_id":"cl5nnhslq0001pgu5hjuq8s6d","_id":"cl95djse20002dku51cvv4vt7"},{"post_id":"cl95ktebl00001wu562ikemfp","category_id":"cl5nnhslq0001pgu5hjuq8s6d","_id":"cl95kteby00021wu5gkozd338"},{"post_id":"cl40x92no0007p0u53ye20ttg","category_id":"cl49oroct0001tku5cl2f8kgn","_id":"cl95lav2t0000jwu51e2zb071"},{"post_id":"cl40x92nq0009p0u5c4ohb7zo","category_id":"cl49oroct0001tku5cl2f8kgn","_id":"cl95lav2u0001jwu5hmkrejvs"}],"PostTag":[{"post_id":"cl40x92nb0001p0u5ebhv62iy","tag_id":"cl40x92nn0005p0u5ghpx3jwk","_id":"cl40x92nw000kp0u56kyg3htz"},{"post_id":"cl40x92nb0001p0u5ebhv62iy","tag_id":"cl40x92ns000cp0u5054i6gzv","_id":"cl40x92nw000lp0u59tlh0wz0"},{"post_id":"cl40x92nb0001p0u5ebhv62iy","tag_id":"cl40x92nt000gp0u5bm1x1qax","_id":"cl40x92nx000op0u5dwoyf3vp"},{"post_id":"cl40x92nj0003p0u5eez350kj","tag_id":"cl40x92nu000jp0u5h8ei5rlp","_id":"cl40x92ny000up0u5fspk5e4l"},{"post_id":"cl40x92nj0003p0u5eez350kj","tag_id":"cl40x92nw000np0u5dscj5w3j","_id":"cl40x92ny000wp0u56v2gh9oz"},{"post_id":"cl40x92nj0003p0u5eez350kj","tag_id":"cl40x92nx000qp0u58rr0aqot","_id":"cl40x92nz000zp0u535dqge5v"},{"post_id":"cl40x92no0007p0u53ye20ttg","tag_id":"cl40x92ny000sp0u52a2thyo1","_id":"cl40x92nz0011p0u58b2m12b6"},{"post_id":"cl40x92no0007p0u53ye20ttg","tag_id":"cl40x92ny000xp0u5crg26s9p","_id":"cl40x92nz0012p0u5a8fechiu"},{"post_id":"cl40x92nq0009p0u5c4ohb7zo","tag_id":"cl40x92ny000sp0u52a2thyo1","_id":"cl40x92o00014p0u5ba4vdtfj"},{"post_id":"cl40x92nq0009p0u5c4ohb7zo","tag_id":"cl40x92ny000xp0u5crg26s9p","_id":"cl40x92o00015p0u54eowd6b8"},{"post_id":"cl40x92o30016p0u5frz67olh","tag_id":"cl40x92o60019p0u503f7f0zs","_id":"cl40x92oh001qp0u5h998672g"},{"post_id":"cl40x92o30016p0u5frz67olh","tag_id":"cl40x92ob001ep0u5anu4csc2","_id":"cl40x92oi001tp0u554g58075"},{"post_id":"cl40x92o30016p0u5frz67olh","tag_id":"cl40x92oe001jp0u59e596vxu","_id":"cl40x92oi001vp0u54ina1yeh"},{"post_id":"cl40x92o40017p0u588es8v51","tag_id":"cl40x92o60019p0u503f7f0zs","_id":"cl40x92ol0022p0u5a5e26lnd"},{"post_id":"cl40x92o40017p0u588es8v51","tag_id":"cl40x92oi001up0u5bjq7hy7b","_id":"cl40x92on0025p0u57s9k662h"},{"post_id":"cl40x92o40017p0u588es8v51","tag_id":"cl40x92oe001jp0u59e596vxu","_id":"cl40x92oo0027p0u569w2bsl4"},{"post_id":"cl40x92o7001ap0u58wsi6dgz","tag_id":"cl40x92ol0021p0u53r8q0ggm","_id":"cl40x92op002ap0u5578w34ff"},{"post_id":"cl40x92o7001ap0u58wsi6dgz","tag_id":"cl40x92on0026p0u5798a43ap","_id":"cl40x92oq002cp0u551gn9jf3"},{"post_id":"cl40x92o8001bp0u5cmtifsup","tag_id":"cl40x92oo0029p0u5apdjfkt5","_id":"cl40x92oq002ep0u54inh2uet"},{"post_id":"cl40x92oa001cp0u54ejr1w1s","tag_id":"cl40x92oq002dp0u5hc1v0h4t","_id":"cl40x92os002jp0u523gtgwot"},{"post_id":"cl40x92oa001cp0u54ejr1w1s","tag_id":"cl40x92oq002fp0u57ywd5yho","_id":"cl40x92os002kp0u5gkvbbeyv"},{"post_id":"cl40x92oa001cp0u54ejr1w1s","tag_id":"cl40x92or002gp0u52arj1que","_id":"cl40x92ot002mp0u51oyi4599"},{"post_id":"cl40x92oa001cp0u54ejr1w1s","tag_id":"cl40x92or002hp0u5gcll8hiw","_id":"cl40x92ot002np0u51j271f6r"},{"post_id":"cl40x92oc001fp0u5d7rf9uor","tag_id":"cl40x92oq002dp0u5hc1v0h4t","_id":"cl40x92ot002qp0u51hvsgagh"},{"post_id":"cl40x92oc001fp0u5d7rf9uor","tag_id":"cl40x92oq002fp0u57ywd5yho","_id":"cl40x92ot002rp0u5ghqze9kc"},{"post_id":"cl40x92oc001fp0u5d7rf9uor","tag_id":"cl40x92ot002op0u59nqcevf3","_id":"cl40x92ou002tp0u56rjkcct1"},{"post_id":"cl40x92od001gp0u53766hwve","tag_id":"cl40x92oq002dp0u5hc1v0h4t","_id":"cl40x92ou002wp0u5d2qe7izh"},{"post_id":"cl40x92od001gp0u53766hwve","tag_id":"cl40x92ot002sp0u5cpeeduxm","_id":"cl40x92ov002xp0u54nl55jrf"},{"post_id":"cl40x92od001gp0u53766hwve","tag_id":"cl40x92oq002fp0u57ywd5yho","_id":"cl40x92ov002zp0u52ugeceed"},{"post_id":"cl40x92oe001kp0u51dm4hfdn","tag_id":"cl40x92oq002dp0u5hc1v0h4t","_id":"cl40x92ow0032p0u5bsk34zhl"},{"post_id":"cl40x92oe001kp0u51dm4hfdn","tag_id":"cl40x92oq002fp0u57ywd5yho","_id":"cl40x92ow0033p0u5bmrzczf6"},{"post_id":"cl40x92oe001kp0u51dm4hfdn","tag_id":"cl40x92ov0030p0u554z5b6t4","_id":"cl40x92ow0035p0u5aiyq5n50"},{"post_id":"cl40x92og001mp0u5aity313o","tag_id":"cl40x92ov0031p0u5f2kw24t9","_id":"cl40x92ow0037p0u59dplalyj"},{"post_id":"cl40x92og001mp0u5aity313o","tag_id":"cl40x92ow0034p0u59k4acyf5","_id":"cl40x92ow0038p0u5g5es12eq"},{"post_id":"cl40x92og001mp0u5aity313o","tag_id":"cl40x92ow0036p0u5gpg67v8o","_id":"cl40x92ow0039p0u5hav965gc"},{"post_id":"cl40x92oz003ap0u55dofapq2","tag_id":"cl40x92oq002dp0u5hc1v0h4t","_id":"cl40x92pa003gp0u5henx7kws"},{"post_id":"cl40x92oz003ap0u55dofapq2","tag_id":"cl40x92oz003bp0u54or78edv","_id":"cl40x92pa003hp0u54lkr09r6"},{"post_id":"cl40x92oz003ap0u55dofapq2","tag_id":"cl40x92or002gp0u52arj1que","_id":"cl40x92pa003ip0u591a0143d"},{"post_id":"cl40x92oz003ap0u55dofapq2","tag_id":"cl40x92p7003dp0u5cztk48nd","_id":"cl40x92pa003jp0u50f4z1r1b"},{"post_id":"cl40x92oz003ap0u55dofapq2","tag_id":"cl40x92p9003ep0u5eaowelyz","_id":"cl40x92pa003kp0u50ffg13as"},{"post_id":"cl40x92oz003ap0u55dofapq2","tag_id":"cl40x92p9003fp0u52znd3h72","_id":"cl40x92pa003lp0u55cq52h4a"},{"post_id":"cl40x92oz003ap0u55dofapq2","tag_id":"cl40x92oq002fp0u57ywd5yho","_id":"cl40x92pa003mp0u5a8wsagke"},{"post_id":"cl46ktcpx000070u5993u4r0d","tag_id":"cl46ktcq6000270u54jq9fdcw","_id":"cl46ktcq9000570u55kqs88r0"},{"post_id":"cl46ktcpx000070u5993u4r0d","tag_id":"cl40x92oq002fp0u57ywd5yho","_id":"cl46ktcq9000770u5eenv64zs"},{"post_id":"cl46ktcpx000070u5993u4r0d","tag_id":"cl46oi0tl0000rwu514rg2hnj","_id":"cl46oi0tr0002rwu59zg233dc"},{"post_id":"cl46ktcpx000070u5993u4r0d","tag_id":"cl46oi0tq0001rwu58b479v2e","_id":"cl46oi0tr0003rwu5bypre78n"},{"post_id":"cl49orocr0000tku5bxo19hf0","tag_id":"cl40x92ny000xp0u5crg26s9p","_id":"cl49orocy0003tku549ik8fww"},{"post_id":"cl49orocr0000tku5bxo19hf0","tag_id":"cl49orocx0002tku54rle50he","_id":"cl49orocz0004tku52t30gyip"},{"post_id":"cl4f7zv5f0000b4u5g4lne5w7","tag_id":"cl46ktcq6000270u54jq9fdcw","_id":"cl4f7zv5q0003b4u589xr1r4u"},{"post_id":"cl4f7zv5f0000b4u5g4lne5w7","tag_id":"cl4f7zv5k0001b4u5g73kgo54","_id":"cl4f7zv5q0004b4u5fiaq6q6l"},{"post_id":"cl4f7zv5f0000b4u5g4lne5w7","tag_id":"cl40x92oq002fp0u57ywd5yho","_id":"cl4f7zv5q0005b4u5byzrd3is"},{"post_id":"cl4gnj6cp0000hwu5d9xihz4q","tag_id":"cl46ktcq6000270u54jq9fdcw","_id":"cl4gnj6cu0001hwu5fbvaczth"},{"post_id":"cl4gnj6cp0000hwu5d9xihz4q","tag_id":"cl4f7zv5k0001b4u5g73kgo54","_id":"cl4gnj6cu0002hwu5c660dxey"},{"post_id":"cl4gnj6cp0000hwu5d9xihz4q","tag_id":"cl40x92oq002fp0u57ywd5yho","_id":"cl4gnj6cu0004hwu5aqmmhin4"},{"post_id":"cl4jrufju0000jsu53s5o7fvn","tag_id":"cl40x92oq002dp0u5hc1v0h4t","_id":"cl4jrufjx0001jsu543bi7b4x"},{"post_id":"cl4jrufju0000jsu53s5o7fvn","tag_id":"cl40x92ot002sp0u5cpeeduxm","_id":"cl4jrufjy0002jsu56g35d4d3"},{"post_id":"cl4jrufju0000jsu53s5o7fvn","tag_id":"cl40x92oq002fp0u57ywd5yho","_id":"cl4jrufjy0004jsu54ak4emp2"},{"post_id":"cl5nnhsll0000pgu52n0ddfjr","tag_id":"cl5nnhslv0002pgu51nlq7183","_id":"cl5nnhslx0005pgu5cy1k3zfo"},{"post_id":"cl5nnhsll0000pgu52n0ddfjr","tag_id":"cl5nnhslw0003pgu582hlhocf","_id":"cl5nnhslx0006pgu5a39ohg9v"},{"post_id":"cl5nnhsll0000pgu52n0ddfjr","tag_id":"cl40x92oq002fp0u57ywd5yho","_id":"cl5nnhslx0007pgu51wlz1y8s"},{"post_id":"cl7n4pbpr0000mku52tuwg7d5","tag_id":"cl46ktcq6000270u54jq9fdcw","_id":"cl7n4pbpx0001mku5325f9rly"},{"post_id":"cl7n4pbpr0000mku52tuwg7d5","tag_id":"cl4f7zv5k0001b4u5g73kgo54","_id":"cl7n4pbpx0002mku57b3y55ku"},{"post_id":"cl7n4pbpr0000mku52tuwg7d5","tag_id":"cl40x92oq002fp0u57ywd5yho","_id":"cl7n4pbpy0004mku540en11lj"},{"post_id":"cl8y8x2r200004wu5brerhets","tag_id":"cl5nnhslv0002pgu51nlq7183","_id":"cl8y8x2rc00064wu5cm5rdjq5"},{"post_id":"cl8y8x2r200004wu5brerhets","tag_id":"cl8y8x2r500014wu52husczun","_id":"cl8y8x2rc00074wu5ejehfczb"},{"post_id":"cl8y8x2r200004wu5brerhets","tag_id":"cl8y8x2rb00034wu5da2obsqy","_id":"cl8y8x2rc00084wu5589e50yh"},{"post_id":"cl8y8x2r200004wu5brerhets","tag_id":"cl8y8x2rb00044wu55z1t1mi0","_id":"cl8y8x2rd00094wu59xiw6h8t"},{"post_id":"cl8y8x2r200004wu5brerhets","tag_id":"cl8y8x2rb00054wu553sr5crv","_id":"cl8y8x2rd000a4wu5bfqbe2ml"},{"post_id":"cl8y8x2r200004wu5brerhets","tag_id":"cl40x92oq002fp0u57ywd5yho","_id":"cl8y8x2rd000b4wu59l0d03hf"},{"post_id":"cl91di1160000o8u59d8wf6r9","tag_id":"cl5nnhslv0002pgu51nlq7183","_id":"cl91di11j0004o8u52jwqftlm"},{"post_id":"cl91di1160000o8u59d8wf6r9","tag_id":"cl91di1190001o8u5c60m1ka8","_id":"cl91di11j0005o8u53gloehq7"},{"post_id":"cl91di1160000o8u59d8wf6r9","tag_id":"cl91di11h0003o8u54mxi6rro","_id":"cl91di11j0006o8u51ytse1xd"},{"post_id":"cl91di1160000o8u59d8wf6r9","tag_id":"cl40x92oq002fp0u57ywd5yho","_id":"cl91di11k0007o8u56rs71kzp"},{"post_id":"cl91fq6hj00001gu5275rh55d","tag_id":"cl5nnhslv0002pgu51nlq7183","_id":"cl91fq6hx00071gu50khe255x"},{"post_id":"cl91fq6hj00001gu5275rh55d","tag_id":"cl91fq6hn00011gu5fhp8alsx","_id":"cl91fq6hx00081gu56pi0d1kz"},{"post_id":"cl91fq6hj00001gu5275rh55d","tag_id":"cl91fq6hu00031gu59od640gl","_id":"cl91fq6hx00091gu5h1gzhxvm"},{"post_id":"cl91fq6hj00001gu5275rh55d","tag_id":"cl91fq6hv00041gu54ww0534m","_id":"cl91fq6hx000a1gu5a06n38xa"},{"post_id":"cl91fq6hj00001gu5275rh55d","tag_id":"cl91fq6hv00051gu5f988gfp2","_id":"cl91fq6hx000b1gu5gu40gn1r"},{"post_id":"cl91fq6hj00001gu5275rh55d","tag_id":"cl91fq6hw00061gu543arfjpr","_id":"cl91fq6hx000c1gu5dkau8ihf"},{"post_id":"cl91fq6hj00001gu5275rh55d","tag_id":"cl40x92oq002fp0u57ywd5yho","_id":"cl91fq6hx000d1gu50tn96bd4"},{"post_id":"cl95djsdq0000dku5htkz98ix","tag_id":"cl5nnhslv0002pgu51nlq7183","_id":"cl95djse30004dku5euxj1poi"},{"post_id":"cl95djsdq0000dku5htkz98ix","tag_id":"cl95djsdw0001dku51rps0mfn","_id":"cl95djse30005dku5fcjn5zab"},{"post_id":"cl95djsdq0000dku5htkz98ix","tag_id":"cl95djse20003dku54ydegmxi","_id":"cl95djse30006dku561747if8"},{"post_id":"cl95djsdq0000dku5htkz98ix","tag_id":"cl40x92oq002fp0u57ywd5yho","_id":"cl95djse30007dku55w4g23nq"},{"post_id":"cl95ktebl00001wu562ikemfp","tag_id":"cl5nnhslv0002pgu51nlq7183","_id":"cl95ktebz00041wu5d8u32y4d"},{"post_id":"cl95ktebl00001wu562ikemfp","tag_id":"cl95ktebs00011wu5ai9ubdch","_id":"cl95ktebz00051wu533m038u9"},{"post_id":"cl95ktebl00001wu562ikemfp","tag_id":"cl95ktebz00031wu5bf11dbmo","_id":"cl95ktebz00061wu58xd7cgdh"},{"post_id":"cl95ktebl00001wu562ikemfp","tag_id":"cl40x92oq002fp0u57ywd5yho","_id":"cl95ktec000071wu54opf55lu"}],"Tag":[{"name":"C++","_id":"cl40x92nn0005p0u5ghpx3jwk"},{"name":"λ","_id":"cl40x92ns000cp0u5054i6gzv"},{"name":"lambda","_id":"cl40x92nt000gp0u5bm1x1qax"},{"name":"前端","_id":"cl40x92nu000jp0u5h8ei5rlp"},{"name":"GitHub","_id":"cl40x92nw000np0u5dscj5w3j"},{"name":"Hexo","_id":"cl40x92nx000qp0u58rr0aqot"},{"name":"Python","_id":"cl40x92ny000sp0u52a2thyo1"},{"name":"爬虫","_id":"cl40x92ny000xp0u5crg26s9p"},{"name":"计算机妙招","_id":"cl40x92o60019p0u503f7f0zs"},{"name":"注册表","_id":"cl40x92ob001ep0u5anu4csc2"},{"name":"Windows","_id":"cl40x92oe001jp0u59e596vxu"},{"name":"局域网共享","_id":"cl40x92oi001up0u5bjq7hy7b"},{"name":"JavaScript","_id":"cl40x92ol0021p0u53r8q0ggm"},{"name":"脚本","_id":"cl40x92on0026p0u5798a43ap"},{"name":"图床","_id":"cl40x92oo0029p0u5apdjfkt5"},{"name":"数据结构","_id":"cl40x92oq002dp0u5hc1v0h4t"},{"name":"考研","_id":"cl40x92oq002fp0u57ywd5yho"},{"name":"字符串","_id":"cl40x92or002gp0u52arj1que"},{"name":"KMP","_id":"cl40x92or002hp0u5gcll8hiw"},{"name":"图","_id":"cl40x92ot002op0u59nqcevf3"},{"name":"排序","_id":"cl40x92ot002sp0u5cpeeduxm"},{"name":"树","_id":"cl40x92ov0030p0u554z5b6t4"},{"name":"Linux","_id":"cl40x92ov0031p0u5f2kw24t9"},{"name":"Uboot","_id":"cl40x92ow0034p0u59k4acyf5"},{"name":"编译","_id":"cl40x92ow0036p0u5gpg67v8o"},{"name":"红黑树","_id":"cl40x92oz003bp0u54or78edv"},{"name":"查找","_id":"cl40x92p7003dp0u5cztk48nd"},{"name":"平衡二叉树","_id":"cl40x92p9003ep0u5eaowelyz"},{"name":"二分法","_id":"cl40x92p9003fp0u52znd3h72"},{"name":"计算机网络技术","_id":"cl46ktcq6000270u54jq9fdcw"},{"name":"概述","_id":"cl46ktcq7000370u59s9r3biz"},{"name":"OSI","_id":"cl46oi0tl0000rwu514rg2hnj"},{"name":"TCP/IP","_id":"cl46oi0tq0001rwu58b479v2e"},{"name":"http","_id":"cl49orocx0002tku54rle50he"},{"name":"物理层","_id":"cl4f7zv5k0001b4u5g73kgo54"},{"name":"数学","_id":"cl5nnhslv0002pgu51nlq7183"},{"name":"微分方程","_id":"cl5nnhslw0003pgu582hlhocf"},{"name":"曲线积分","_id":"cl8y8x2r500014wu52husczun"},{"name":"曲面积分","_id":"cl8y8x2rb00034wu5da2obsqy"},{"name":"二重积分","_id":"cl8y8x2rb00044wu55z1t1mi0"},{"name":"三重积分","_id":"cl8y8x2rb00054wu553sr5crv"},{"name":"级数","_id":"cl91di1190001o8u5c60m1ka8"},{"name":"傅里叶级数","_id":"cl91di11h0003o8u54mxi6rro"},{"name":"曲线","_id":"cl91fq6hn00011gu5fhp8alsx"},{"name":"曲面","_id":"cl91fq6hu00031gu59od640gl"},{"name":"梯度","_id":"cl91fq6hv00041gu54ww0534m"},{"name":"散度","_id":"cl91fq6hv00051gu5f988gfp2"},{"name":"旋度","_id":"cl91fq6hw00061gu543arfjpr"},{"name":"卷积","_id":"cl95djsdw0001dku51rps0mfn"},{"name":"概率密度","_id":"cl95djse20003dku54ydegmxi"},{"name":"区间估计","_id":"cl95ktebs00011wu5ai9ubdch"},{"name":"假设检验","_id":"cl95ktebz00031wu5bf11dbmo"}]}}